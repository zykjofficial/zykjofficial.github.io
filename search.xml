<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Websocket学习</title>
      <link href="/posts/bbacf423/"/>
      <url>/posts/bbacf423/</url>
      
        <content type="html"><![CDATA[<h2 id="Websocket-介绍"><a href="#Websocket-介绍" class="headerlink" title="Websocket 介绍"></a>Websocket 介绍</h2><blockquote><p>Websocket协议是基于TCP的一种新的网络协议。它实现了浏览器与服务器全双工(full-duplex)通信——允许<br>服务器主动发送信息给客户端。<br>Websocket是—种持久协议，http是非持久协议</p></blockquote><p>现在很多网站都有实时推送的需求，比如聊天，客服咨询等</p><p>早期没有websocket时，通过ajax轮询，由于http请求，服务器无法给浏览器主动发送数据，因此需要浏览器定时的给服务器发送请求(比<br>如1s一次),服务器把最新的数据响应给浏览器。这种模式的缺点就是浪费性能和资源。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zykjofficial/zykjimg/raw/master/img/20200824164525.png"></p><p>websocket是一种网络协议，允许客户端和服务端全双工的进行网络通讯，服务器可以给客户端发消息，客户端也可以给服务器发消息。</p><h2 id="Websocket基本使用"><a href="#Websocket基本使用" class="headerlink" title="Websocket基本使用"></a>Websocket基本使用</h2><p>在HTML5中，浏览器已经实现了websocket的API,直接使用即可。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket">WebSocket-MDN</a></p><h3 id="创建Websocket对象"><a href="#创建Websocket对象" class="headerlink" title="创建Websocket对象"></a>创建Websocket对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数1: url: 连接的websocket属性</span></span><br><span class="line"><span class="comment">// 参数2: protocol, 可选的，指定连接的协议</span></span><br><span class="line"><span class="comment">// var socket = new WebSocket(&#x27;ws://echo.websocket.org&#x27;)</span></span><br><span class="line"><span class="keyword">var</span> Socket = <span class="keyword">new</span> Websocket(url, [protocol] );</span><br></pre></td></tr></table></figure><h3 id="WebSocket事件"><a href="#WebSocket事件" class="headerlink" title="WebSocket事件"></a>WebSocket事件</h3><table><thead><tr><th>事件</th><th>事件处理程序</th><th>描述</th></tr></thead><tbody><tr><td><code>open</code></td><td><code>Socket.onopen</code></td><td>连接建立时触发</td></tr><tr><td><code>message</code></td><td><code>Socket.onmessage</code></td><td>客户端接收服务端数据时触发</td></tr><tr><td><code>error</code></td><td><code>Socket.onerror</code></td><td>通信发生错误时触发</td></tr><tr><td><code>close</code></td><td><code>Socket.onclose</code></td><td>连接关闭时触发</td></tr></tbody></table><h3 id="Websocket方法"><a href="#Websocket方法" class="headerlink" title="Websocket方法"></a>Websocket方法</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>Socket.send()</code></td><td>使用连接发送数据</td></tr><tr><td><code>Socket.close()</code></td><td>关闭连接</td></tr></tbody></table><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><code>一个简单的示例</code> index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>WebSocket学习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点我发送<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 100px;height: 100px;border:1px solid red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> input = <span class="built_in">document</span>.querySelector(<span class="string">&quot;input&quot;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> button = <span class="built_in">document</span>.querySelector(<span class="string">&quot;button&quot;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&quot;div&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">// 1. 创建 WebSocket </span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 参数1： WebSocket 服务器地址</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">&quot;ws://echo.websocket.org&quot;</span>)</span></span><br><span class="line">        </span><br><span class="line"><span class="javascript">        <span class="comment">// 2. open：与服务器连接成功时触发的</span></span></span><br><span class="line"><span class="javascript">        socket.addEventListener(<span class="string">&quot;open&quot;</span>,<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">            div.innerText = <span class="string">&quot;连接成功&quot;</span></span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">// 3. 主动给WebSocket服务发送消息</span></span></span><br><span class="line"><span class="javascript">        button.addEventListener(<span class="string">&quot;click&quot;</span>,<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> value = input.value</span></span><br><span class="line">            socket.send(value)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">// 4. 接收WebSocket服务的消息</span></span></span><br><span class="line"><span class="javascript">        socket.addEventListener(<span class="string">&quot;message&quot;</span>,<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(e.data);</span></span><br><span class="line">            div.innerHTML = e.data</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">// 5. 服务断开连接 (无法演示)</span></span></span><br><span class="line"><span class="javascript">        socket.addEventListener(<span class="string">&quot;close&quot;</span>,<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">            div.innerHTML = <span class="string">&quot;断开服务&quot;</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用nodejs开发websocket服务"><a href="#使用nodejs开发websocket服务" class="headerlink" title="使用nodejs开发websocket服务"></a>使用nodejs开发websocket服务</h2><blockquote><p>我们刚刚使用了官网提供的echo服务，I接下来我们自己通过nodejs实现一个简单的websocket服务。</p></blockquote><p>使用nodejs开发websocket需要依赖一个第三方包。<a href="https://github.com/sitegui/nodejs-websocket">Nodejs Websocket</a></p><h3 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h3><p>安装 <code>nodejs-websocket</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i nodejs-websocket</span><br></pre></td></tr></table></figure><h3 id="开发服务程序"><a href="#开发服务程序" class="headerlink" title="开发服务程序"></a>开发服务程序</h3><p>使用 <code>app.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入模块</span></span><br><span class="line"><span class="keyword">const</span> ws = <span class="built_in">require</span>(<span class="string">&quot;nodejs-websocket&quot;</span>)</span><br><span class="line"><span class="comment">// 端口号</span></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建服务</span></span><br><span class="line"><span class="keyword">var</span> server = ws.createServer(<span class="function">(<span class="params">conn</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;有用户连接了。。。&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每当用户传递过来数据、这个text事件就会被触发</span></span><br><span class="line">    conn.on(<span class="string">&quot;text&quot;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;接收到数据 &quot;</span> + data);</span><br><span class="line">        <span class="comment">// 给用户响应一个数据</span></span><br><span class="line">        conn.send(data)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接断开就会触发</span></span><br><span class="line">    conn.on(<span class="string">&quot;close&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;用户断开连接&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 发生错误就会触发</span></span><br><span class="line">    conn.on(<span class="string">&quot;error&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;发生错误&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">server.listen(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;连接端口&quot;</span> + port);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>编辑 index.html</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建 WebSocket </span></span><br><span class="line"><span class="comment">// 参数1： WebSocket 服务器地址</span></span><br><span class="line"><span class="comment">// const socket = new WebSocket(&quot;ws://echo.websocket.org&quot;)</span></span><br><span class="line"><span class="keyword">const</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">&quot;ws://localhost:3000&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><p><code>一个简单的聊天室</code></p><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>WebSocket学习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点我发送<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> input = <span class="built_in">document</span>.querySelector(<span class="string">&quot;input&quot;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> button = <span class="built_in">document</span>.querySelector(<span class="string">&quot;button&quot;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&quot;div&quot;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> TYPE_ENTER = <span class="number">0</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> TYPE_LEAVE = <span class="number">1</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> TYPE_MSG = <span class="number">2</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">// 1. 创建 WebSocket </span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 参数1： WebSocket 服务器地址</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// const socket = new WebSocket(&quot;ws://echo.websocket.org&quot;)</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">&quot;ws://localhost:3000&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">// 2. open：与服务器连接成功时触发的</span></span></span><br><span class="line"><span class="javascript">        socket.addEventListener(<span class="string">&quot;open&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            div.innerText = <span class="string">&quot;连接成功&quot;</span></span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">// 3. 主动给WebSocket服务发送消息</span></span></span><br><span class="line"><span class="javascript">        button.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> value = input.value</span></span><br><span class="line">            socket.send(value)</span><br><span class="line"><span class="javascript">            input.value = <span class="string">&quot;&quot;</span></span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">// 4. 接收WebSocket服务的消息</span></span></span><br><span class="line"><span class="javascript">        socket.addEventListener(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 将JSON数据转换成对象</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(e.data)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> dv = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>)</span></span><br><span class="line"><span class="javascript">            dv.innerText = data.msg + <span class="string">&quot;--------&quot;</span> + data.time</span></span><br><span class="line">            if (data.type == TYPE_ENTER) &#123;</span><br><span class="line"><span class="javascript">                dv.style.color = <span class="string">&quot;green&quot;</span></span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data.type == TYPE_LEAVE) &#123;</span></span><br><span class="line"><span class="javascript">                dv.style.color = <span class="string">&quot;red&quot;</span></span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                dv.style.color = <span class="string">&quot;blue&quot;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">            div.appendChild(dv)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">// 5. 服务断开连接 (无法演示)</span></span></span><br><span class="line"><span class="javascript">        socket.addEventListener(<span class="string">&quot;close&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            div.innerHTML = <span class="string">&quot;断开服务&quot;</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>app.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入模块</span></span><br><span class="line"><span class="keyword">const</span> ws = <span class="built_in">require</span>(<span class="string">&quot;nodejs-websocket&quot;</span>);</span><br><span class="line"><span class="comment">// 进入、离开、消息</span></span><br><span class="line"><span class="keyword">const</span> TYPE_ENTER = <span class="number">0</span></span><br><span class="line"><span class="keyword">const</span> TYPE_LEAVE = <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> TYPE_MSG = <span class="number">2</span></span><br><span class="line"><span class="comment">// 端口号</span></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 记录当前连接的用户数量</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建服务</span></span><br><span class="line"><span class="keyword">var</span> server = ws.createServer(<span class="function">(<span class="params">conn</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;有用户连接了。。。&quot;</span>);</span><br><span class="line">    count++</span><br><span class="line">    conn.userName = <span class="string">`用户<span class="subst">$&#123;count&#125;</span>`</span></span><br><span class="line">    <span class="comment">// 1. 告诉所有用户，有人加入了聊天室</span></span><br><span class="line"></span><br><span class="line">    bordercast(&#123;</span><br><span class="line">        type: TYPE_ENTER,</span><br><span class="line">        msg: <span class="string">`<span class="subst">$&#123;conn.userName&#125;</span>进入了聊天室`</span>,</span><br><span class="line">        time: <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleTimeString()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每当用户传递过来数据、这个text事件就会被触发</span></span><br><span class="line">    conn.on(<span class="string">&quot;text&quot;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 2. 当我们接收到某个用户的信息的时候，告诉所有用户，发送的消息内容是什么</span></span><br><span class="line">        bordercast(&#123;</span><br><span class="line">            type: TYPE_MSG,</span><br><span class="line">            msg: <span class="string">`<span class="subst">$&#123;conn.userName&#125;</span>: `</span> +data,</span><br><span class="line">            time: <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleTimeString()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接断开就会触发</span></span><br><span class="line">    conn.on(<span class="string">&quot;close&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;用户断开连接&quot;</span>);</span><br><span class="line">        count--</span><br><span class="line">        <span class="comment">// 3. 告诉所有的用户，存人离开聊天室</span></span><br><span class="line">        bordercast(&#123;</span><br><span class="line">            type: TYPE_LEAVE,</span><br><span class="line">            msg: <span class="string">`<span class="subst">$&#123;conn.userName&#125;</span>离开了聊天室`</span>,</span><br><span class="line">            time: <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleTimeString()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 发生错误就会触发</span></span><br><span class="line">    conn.on(<span class="string">&quot;error&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;发生错误&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于发送广播消息</span></span><br><span class="line"><span class="keyword">var</span> bordercast = <span class="function">(<span class="params">msg</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// server.connections 表示所有连接用户</span></span><br><span class="line">    server.connections.forEach(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// 需要转换成 JSON 数据</span></span><br><span class="line">        item.send(<span class="built_in">JSON</span>.stringify(msg))</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">server.listen(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;连接端口&quot;</span> + port);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果使用原生的websocket进行开发，会比较麻烦，比如支持的事件太少，发送的数据只能是字符串格式的，提供的api也很少，类似于广播这种方法都没有，需要自己封装。</p><h2 id="socket-io基本使用"><a href="#socket-io基本使用" class="headerlink" title="socket.io基本使用"></a>socket.io基本使用</h2><p><a href="https://socket.io/docs/">socket.io</a></p><p>安装 socket.io</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i socket.io</span><br></pre></td></tr></table></figure><p><code>socket.emit</code>:  表示触发某个事件 如果需要给浏览器发数据．需要触发浏览器注册某个事件<br><code>socket.on</code>: 表示的注册某个事件 如果需要获取浏览器的数据，需要注册一个事件，等待浏览器触发</p><p><code>服务端</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = http.createServer()</span><br><span class="line">app.on(<span class="string">&quot;request&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.readFile(__dirname + <span class="string">&#x27;/index.html&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            res.writeHead(<span class="number">500</span>)</span><br><span class="line">            <span class="keyword">return</span> res.end(<span class="string">&#x27;Error loading index.html&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        res.writeHead(<span class="number">200</span>)</span><br><span class="line">        res.end(data)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;服务器启动成功&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> io = <span class="built_in">require</span>(<span class="string">&quot;socket.io&quot;</span>)(app)</span><br><span class="line"><span class="comment">// 监听用户连接</span></span><br><span class="line"><span class="comment">// socket 表示用户的连接</span></span><br><span class="line"><span class="comment">// socket.emit 表示触发某个事件 如果需要给浏览器发数据．需要触发浏览器注册某个事件</span></span><br><span class="line"><span class="comment">// socket.on 表示的注册某个事件 如果需要获取浏览器的数据，需要注册一个事件，等待浏览器触发</span></span><br><span class="line">io.on(<span class="string">&quot;connection&quot;</span>,<span class="function"><span class="params">socket</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;新用户连接&quot;</span>);</span><br><span class="line">    <span class="comment">// 服务端发送消息</span></span><br><span class="line">    <span class="comment">// socket.emit(&quot;send&quot;,&#123;name:&quot;zykj&quot;&#125;)</span></span><br><span class="line">    socket.on(<span class="string">&quot;hehe&quot;</span>,<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">        socket.emit(<span class="string">&quot;send&quot;</span>,data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>客户端</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/socket.io/socket.io.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 连接socket服务</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 参数：服务器地址</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> socket = io(<span class="string">&quot;http://localhost:3000&quot;</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">// 发送事件</span></span></span><br><span class="line"><span class="javascript">        socket.emit(<span class="string">&quot;hehe&quot;</span>,&#123;<span class="attr">name</span>:<span class="string">&quot;zykj&quot;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;)</span></span><br><span class="line"><span class="javascript"><span class="comment">// 接收事件</span></span></span><br><span class="line"><span class="javascript">        socket.on(<span class="string">&#x27;send&#x27;</span>,<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(data);</span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="基于socket-io开发完整的聊天室"><a href="#基于socket-io开发完整的聊天室" class="headerlink" title="基于socket.io开发完整的聊天室"></a>基于socket.io开发完整的聊天室</h2><div class="btns rounded center grid5">            <a href='https://gitee.com/zykjofficial/StudyProjects/tree/master/2020/08/Node/wechat' title='下载聊天室项目源码'><i class='fas fa-download'></i>下载聊天室项目源码</a>          </div><h3 id="部分内容讲解"><a href="#部分内容讲解" class="headerlink" title="部分内容讲解"></a>部分内容讲解</h3><p><code>FileReader</code> MDN: <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader">https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader</a></p><p>在上面的项目中就是在本地上传图片时用到了 FileReader 将图片转换成 Base64 编码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开始读取指定的Blob中的内容。一旦完成，result属性中将包含一个data: URL格式的Base64字符串以表示所读取文件的内容。</span></span><br><span class="line">FileReader.readAsDataURL()</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过 change 事件访问被选择的文件</span></span><br><span class="line"><span class="comment">// 发送图片</span></span><br><span class="line">$(<span class="string">&#x27;#file&#x27;</span>).on(<span class="string">&quot;change&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> file = <span class="built_in">this</span>.files[<span class="number">0</span>]</span><br><span class="line">  <span class="comment">//需要把这个文件发送到服务器，借助于H5新增的fileReader</span></span><br><span class="line">  <span class="keyword">var</span> fr = <span class="keyword">new</span> FileReader()</span><br><span class="line">  fr.readAsDataURL(file)</span><br><span class="line">  fr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    socket.emit(<span class="string">&quot;sendImage&quot;</span>, &#123;</span><br><span class="line">      username: username,</span><br><span class="line">      avatar: avatar,</span><br><span class="line">      <span class="comment">// 读取完成后，数据保存在对象的result属性中  </span></span><br><span class="line">      img: fr.result</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>参考：<a href="https://www.cnblogs.com/huancheng/p/9376730.html"><a href="https://www.cnblogs.com/huancheng/p/9376730.html">H5 FileReader对象</a></a></p><p><code>scrollIntoView</code></p><p>项目中、当我们像每次发完消息时、希望定位到最新的一条、也就是滚动到最底部、我们就需要使用 scrollIntoView</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scroll</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// scrollIntoView(false) 代表滚动到最底部</span></span><br><span class="line">  $(<span class="string">&#x27;.box-bd&#x27;</span>).children(<span class="string">&#x27;:last&#x27;</span>).get(<span class="number">0</span>).scrollIntoView(<span class="literal">false</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考 <a href="https://blog.csdn.net/bbsyi/article/details/79398811">scrollIntoView()的用法</a></p>]]></content>
      
      
      <categories>
          
          <category> 网络通信 </category>
          
          <category> Websocket </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Websocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mongoose学习</title>
      <link href="/posts/59470b8/"/>
      <url>/posts/59470b8/</url>
      
        <content type="html"><![CDATA[<h2 id="Mongoose简介"><a href="#Mongoose简介" class="headerlink" title="Mongoose简介"></a>Mongoose简介</h2><h3 id="明确需求"><a href="#明确需求" class="headerlink" title="明确需求"></a>明确需求</h3><p>为什么学数据库，因为要存放项目/网站数据<br>思考:实战中也像我们刚刚那样敲命令?<br>回答:非也，而是通过程序来<br>思考:如何实现呢?<br>回答: mongoose</p><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><p>是node中提供操作MongoDB的模块</p><h3 id="能干吗"><a href="#能干吗" class="headerlink" title="能干吗"></a>能干吗</h3><p>能够通过node语法实现MongoDB数据库增删改查<br>从而实现用node写程序来管理MongoDB数据库</p><h3 id="在那下"><a href="#在那下" class="headerlink" title="在那下"></a>在那下</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i mongoose</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">yarn add mongoose</span><br></pre></td></tr></table></figure><h3 id="schema"><a href="#schema" class="headerlink" title="schema"></a>schema</h3><p>英文网: <a href="http://mongoosejs.com/">http://mongoosejs.com</a></p><p>中文网: <a href="http://mongoosejs.net/">http://mongoosejs.net/</a></p><p>作用:用来约束MongoDB文档数据（哪些字段必须，哪些字段可选的)</p><h3 id="model"><a href="#model" class="headerlink" title="model"></a>model</h3><p>一个模型对应一个集合</p><p>后面我们通过模型来管理集合中的数据</p><h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h3><p>为什么要学习mongoose: 通过命令管理mongodb麻烦，通过程序管理</p><p><code>是什么</code>: 就是node中的一个模块</p><p><code>能干吗</code>: 让node借助这个模块实现管理mongodb的程序</p><p><code>去哪下</code>: 通过npm或yarn命令来安装</p><p>mongoose核心概念</p><blockquote><p>schema 约束字段/列数据<br>model 模型对应集合后期用它来实现数据增删改查</p></blockquote><h2 id="Mongoose使用"><a href="#Mongoose使用" class="headerlink" title="Mongoose使用"></a>Mongoose使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>步骤1: 创建api目录</p><p>步骤2: 在api目录下安装mongoose模块</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一、导入模块</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>);</span><br><span class="line"><span class="comment">// 二、连接数据库</span></span><br><span class="line"><span class="keyword">const</span> db = mongoose.createConnection(</span><br><span class="line">  <span class="string">&quot;mongodb://shop2:shop2@localhost:27017/shop&quot;</span>,</span><br><span class="line">  &#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>, <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  (err) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;---------------------------------------&quot;</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;数据库连接失败：&quot;</span>, err);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;---------------------------------------&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;数据库连接成功&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三、设置数据模型（声明是哪个集合，限制字段个数和字段类型）</span></span><br><span class="line"><span class="keyword">const</span> model = db.model(<span class="string">&quot;api&quot;</span>, &#123;</span><br><span class="line">  uname: &#123; <span class="attr">type</span>: <span class="built_in">String</span>, <span class="attr">default</span>: <span class="string">&quot;username&quot;</span> &#125;,</span><br><span class="line">  pwd: <span class="built_in">String</span>,</span><br><span class="line">  age: &#123; <span class="attr">type</span>: <span class="built_in">Number</span> &#125;,</span><br><span class="line">  sex: &#123; <span class="attr">type</span>: <span class="built_in">String</span> &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 四、创建实例操作(CURD)</span></span><br><span class="line"><span class="comment">// 增</span></span><br><span class="line"><span class="keyword">const</span> insertobj = <span class="keyword">new</span> mode1(数据对象)</span><br><span class="line"><span class="comment">// 方法1: insertobj.save((err) =&gt; db.close())</span></span><br><span class="line"><span class="comment">// 方法2(推荐)</span></span><br><span class="line">insertObj.save()</span><br><span class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;插入失败&#x27;</span>+err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删</span></span><br><span class="line"><span class="comment">// 方法1: model.remove/deleteone/deleteMany(条件对象,(err) =&gt; db.close())</span></span><br><span class="line"><span class="comment">// 方法2(推荐)</span></span><br><span class="line">model.deleteOne(条件对象）</span><br><span class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> resdeletedCount</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;删除失败&#x27;</span>+ err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改</span></span><br><span class="line"><span class="comment">//方法1: model.update/updateOne/updateMany(条件对象,数据对象，(err) =&gt; db.close())</span></span><br><span class="line"><span class="comment">// 方法2(推荐) </span></span><br><span class="line">mode1.updateOne(条件对象，数据对象)</span><br><span class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> res.nModified</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span><span class="number">.1</span>og(<span class="string">&#x27;修改失败&#x27;</span>+err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查</span></span><br><span class="line"><span class="comment">// 方法1: model.find/findOne(条件对象,要显示的字段数据对象，(err,result)=&gt; db.close())</span></span><br><span class="line"><span class="comment">// 方法2(推荐)</span></span><br><span class="line">model.find(条件对象)</span><br><span class="line">.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const insertObj = new model(&#123;</span><br><span class="line">    uname: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="built_in">pwd</span>: <span class="string">&quot;123&quot;</span>,</span><br><span class="line">    age: 18,</span><br><span class="line">    sex: <span class="string">&quot;man&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>c.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 增</span></span><br><span class="line">insertObj.save()</span><br><span class="line">.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;插入失败&quot;</span> + err);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>r.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查</span></span><br><span class="line">model.find(&#123;&#125;)</span><br><span class="line">.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">    db.close()</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>分页</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">model.find(&#123;&#125;).skip(<span class="number">1</span>).limit(<span class="number">1</span>)</span><br><span class="line">.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">    db.close()</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;)</span><br><span class="line">    .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="小总结-1"><a href="#小总结-1" class="headerlink" title="小总结"></a>小总结</h3><p>安装: <code>yarn add mongoose</code> 或者 <code>npm i mongoose</code><br>使用: <a href="http://mongoosejs.net/">http://mongoosejs.net</a> 或 <a href="http://mongoosejs.com/">http://mongoosejs.com</a></p><h2 id="接口概念"><a href="#接口概念" class="headerlink" title="接口概念"></a>接口概念</h2><h3 id="什么是接口"><a href="#什么是接口" class="headerlink" title="什么是接口"></a>什么是接口</h3><p>就是一个文件(js/json/php)，主要<code>响应JSON数据（操作方便，体积小)</code>或XML数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    status : 1&#x2F;0，</span><br><span class="line">    msg:&#39;提示信息&#39;</span><br><span class="line">&#125;</span><br><span class="line">--------</span><br><span class="line">&lt;xml&gt;</span><br><span class="line">    &lt;status&gt;1&#x2F;0&lt;&#x2F;status&gt;</span><br><span class="line">    &lt;msg&gt;提示信息&lt;&#x2F;msg&gt;</span><br><span class="line">...</span><br><span class="line">&lt;&#x2F;xm1&gt;</span><br></pre></td></tr></table></figure><ul><li><p>多学一招:只要响应json数据所有语言都可以操作，例如ios/Android等</p></li><li><p>推荐</p>  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">meta: &#123;</span><br><span class="line">msg:提示信息</span><br><span class="line">status:状态码(200/201/301/302/400/401/403/404/500)</span><br><span class="line">&#125;</span><br><span class="line">data:数据</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="能干吗-1"><a href="#能干吗-1" class="headerlink" title="能干吗"></a>能干吗</h3><p>数据角度:让我们的项目静态/固定数据动态（也就是让项目数据来源于数据库</p><p>功能角度:短信接口、幽默笑话接口、天气接口、股票接等</p><h3 id="去哪下-找"><a href="#去哪下-找" class="headerlink" title="去哪下(找)"></a>去哪下(找)</h3><ul><li>方案1: 通过node/go/java/php/asp等语言去开发</li><li>方法2: 使用第三方接口</li></ul><h3 id="小总结-2"><a href="#小总结-2" class="headerlink" title="小总结"></a>小总结</h3><p>为什么要有接口: 一次编写，多次/随时接入(好处:减少后端工作量方便后期维护</p><p>什么是接口: 就是一个文件，但是你必须返回json或xml数据</p><p>接口能干吗: 1-数据角度:页面数据动态，2-功能角度:短信接口、人脸识别接口</p><p>去哪下: 1-自己写，2-去第三方网站找</p><h2 id="接口开发规范-Restful-API"><a href="#接口开发规范-Restful-API" class="headerlink" title="接口开发规范(Restful API)"></a>接口开发规范(Restful API)</h2><h3 id="明确需求-1"><a href="#明确需求-1" class="headerlink" title="明确需求"></a>明确需求</h3><p>思考:接口可能是一个人开发，也可能多人开发，如何保证大家的编写规范一样</p><blockquote><p>商品模块/goods/getlndexget<br>订单模块lorderlindex<br>post<br>用户模块/user</p></blockquote><p>发现:上述这种case项目没有统一开发规则</p><p>问题: 后期维护麻烦</p><p>回答: 通过目前比较火的Restful API思想/架构</p><h3 id="是什么-amp-好处"><a href="#是什么-amp-好处" class="headerlink" title="是什么&amp;好处"></a>是什么&amp;好处</h3><ul><li><p>说明:RESTful是目前最流行的一种互联网软件架构(思想)</p></li><li><p>作用:声明/提供了接口设计原则和约束条件（一个范围)</p></li><li><p>相关:</p><blockquote><p>后端将资源发布到URL上-&gt;前端通过URL访问资源-&gt;并通过HTTP动词表示要对资源进行的操作<br>后端定义接口-&gt;前端请求接口-&gt;HTTP动词表名操作目的(get获取post新建put更新等)</p></blockquote></li><li><p>举栗</p><blockquote><p>列表页: 访问-/模块名    (get)<br>详情页: 访问-/模块名/编号    (get)<br>添加页: 访问-/模块名/create    (get)<br>处理: 访问-/模块名    (post)<br>修改页: 访问-/模块名/编号/edit (get)<br>处理: 访问-/模块名/编号    (put)<br>删除: 访问-/模块名/编号    (delete)<br>HTTP动词: get、post、put、delete</p></blockquote></li><li><p>好处: 统一开发规范，便与团队协作开发</p></li></ul><h3 id="标准的RESTful架构-思想-规则需要做到"><a href="#标准的RESTful架构-思想-规则需要做到" class="headerlink" title="标准的RESTful架构/思想/规则需要做到"></a>标准的RESTful架构/思想/规则需要做到</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">订单模块</span><br><span class="line">&#x2F;orderget</span><br><span class="line">&#x2F;orderpost</span><br><span class="line">&#x2F;order&#x2F;编号put</span><br><span class="line">&#x2F;order&#x2F;编号delete</span><br></pre></td></tr></table></figure><ul><li>项目所有模块有统一的标准</li><li>看Url就知道要操作的资源是什么(也就是哪个模块)</li><li>看Http Method就知道操作动作是什么，是添加(post）还是删除(delete)</li><li>看Http Status Code就知道操作结果如何，是成功(200)还是内部错误(500)</li></ul><h3 id="小总结-3"><a href="#小总结-3" class="headerlink" title="小总结"></a>小总结</h3><p>什么是restful api: 是一个架构或思想</p><p>作用: 声明了接口设计原则和约束条件</p><p>好处: 统一开发规范，便于团队协作开发</p><h2 id="接口测试工具-Postman-amp-insomnia"><a href="#接口测试工具-Postman-amp-insomnia" class="headerlink" title="接口测试工具(Postman&amp;insomnia)"></a>接口测试工具(Postman&amp;insomnia)</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>什么是Postman:就是一个工具</li><li>作用:模拟HTTP请求，测试接口，查看接口返回数据</li><li>官网: <a href="http://www.getpostman.com/">www.getpostman.com</a></li></ul><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><p>百度安装教程。。。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>百度使用教程。。。</p><p>使用postman请求接口 <a href="https://jsonview.com/example.json">https://jsonview.com/example.json</a></p><h2 id="实战教学管理系统学生模块接口开发"><a href="#实战教学管理系统学生模块接口开发" class="headerlink" title="实战教学管理系统学生模块接口开发"></a>实战教学管理系统学生模块接口开发</h2><h3 id="express简介"><a href="#express简介" class="headerlink" title="express简介"></a>express简介</h3><ul><li>是什么:基于nodejs开发的一个框架（原理基于node内置http模块封装)</li><li>好处:加快项目开发，便于团队协作</li></ul><h3 id="express使用"><a href="#express使用" class="headerlink" title="express使用"></a>express使用</h3><p>步骤1: 下载(yarn add express 或者 npm i express</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add express </span><br><span class="line"><span class="comment"># 或者 </span></span><br><span class="line">npm i express</span><br></pre></td></tr></table></figure><p>步骤2: 使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.引入express模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2．创建app对象，通过语法express()底层原理http模块的createServer</span></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3．路由，语法 app.HTTP请求方式(路径，回调函数)</span></span><br><span class="line">app.get(<span class="string">&quot;/&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.send(<span class="string">&quot;Hello world!&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4．启动服务监听端口</span></span><br><span class="line">app.listen(port,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;端口&quot;</span>+ port + <span class="string">&quot;启动&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="学生添加接口"><a href="#学生添加接口" class="headerlink" title="学生添加接口"></a>学生添加接口</h3><p>步骤1: 定义路由/stu <code>post</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http.js</span></span><br><span class="line"><span class="comment">// 学生添加</span></span><br><span class="line"><span class="keyword">const</span> stuController = <span class="built_in">require</span>(process.cwd()+<span class="string">&quot;/controller/stu&quot;</span>)</span><br><span class="line">app.post(<span class="string">&quot;/stu&quot;</span>,stuController.create)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// controller/stu.js</span></span><br><span class="line"><span class="keyword">const</span> create = <span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.send(<span class="string">&quot;学生接口&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    create</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>步骤2:响应任意json数据</p><p>使用PostMan向 <a href="https://localhost:3000/stu">https://localhost:3000/stu</a> 发起post就行</p><p>步骤3:定义stu模块，定义创建数据的方法</p><p><code>需要安装 npm i bodyparser</code>进行解析</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 它用于解析客户端请求的body中的内容,内部使用JSON编码处理,url编码处理以及对于文件的上传处理</span></span><br><span class="line"><span class="keyword">const</span> bodyparser = <span class="built_in">require</span>(<span class="string">&quot;body-parser&quot;</span>)</span><br><span class="line">app.use(bodyparser.urlencoded(&#123;<span class="attr">extended</span>:<span class="literal">true</span>&#125;))</span><br><span class="line">app.use(bodyparser.json())</span><br></pre></td></tr></table></figure><p><code>定义连接数据库</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// models/stu.js</span></span><br><span class="line"><span class="comment">// 一、导入模块</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二、连接数据库</span></span><br><span class="line"><span class="keyword">const</span> db = mongoose.createConnection(</span><br><span class="line">  <span class="string">&quot;mongodb://shop2:shop2@localhost:27017/shop&quot;</span>,</span><br><span class="line">  &#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>, <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  (err) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;---------------------------------------&quot;</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;数据库连接失败：&quot;</span>, err);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;---------------------------------------&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;数据库连接成功&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三、设置数据模型（声明是哪个集合，限制字段个数和字段类型）</span></span><br><span class="line"><span class="keyword">const</span> model = db.model(<span class="string">&quot;stu&quot;</span>, &#123;</span><br><span class="line">  uname: &#123; <span class="attr">type</span>: <span class="built_in">String</span>, <span class="attr">default</span>: <span class="string">&quot;神龙教主&quot;</span> &#125;,</span><br><span class="line">  pwd: <span class="built_in">String</span>,</span><br><span class="line">  age: &#123; <span class="attr">type</span>: <span class="built_in">Number</span> &#125;,</span><br><span class="line">  sex: &#123; <span class="attr">type</span>: <span class="built_in">String</span> &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> createModel = <span class="function">(<span class="params">postData</span>) =&gt;</span> &#123;</span><br><span class="line">  insertObj = <span class="keyword">new</span> model(postData);</span><br><span class="line">  <span class="keyword">return</span> insertObj</span><br><span class="line">    .save()</span><br><span class="line">    .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;插入失败&quot;</span>+err);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 四、方法</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123; createModel &#125;;</span><br></pre></td></tr></table></figure><p>步骤4:调用stu模型创建数据的方法，返回结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// controller/stu.js</span></span><br><span class="line"><span class="comment">// 导入模型</span></span><br><span class="line"><span class="keyword">const</span> &#123; createModel &#125; = <span class="built_in">require</span>(process.cwd() + <span class="string">&quot;/models/stu&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义处理方法</span></span><br><span class="line"><span class="keyword">const</span> create = <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="comment">// res.send(&quot;this is stu create&quot;);</span></span><br><span class="line">    <span class="comment">// 1.接收参数</span></span><br><span class="line">    <span class="keyword">let</span> postData = req.body;</span><br><span class="line">    <span class="comment">// 2.过滤(忽略</span></span><br><span class="line">    <span class="comment">// 3. 操作数据库</span></span><br><span class="line">    <span class="keyword">let</span> rs = <span class="keyword">await</span> createModel(postData);</span><br><span class="line">    <span class="comment">// 4. 判断返回</span></span><br><span class="line">    <span class="keyword">if</span> (rs) &#123;</span><br><span class="line">        res.send(&#123;</span><br><span class="line">            meta: &#123;</span><br><span class="line">                state: <span class="number">200</span>,</span><br><span class="line">                msg: <span class="string">&quot;添加成功&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            data: <span class="literal">null</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.send(&#123;</span><br><span class="line">            meta: &#123;</span><br><span class="line">                state: <span class="number">500</span>,</span><br><span class="line">                msg: <span class="string">&quot;添加失败&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            data: <span class="literal">null</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    create</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="学生列表接口"><a href="#学生列表接口" class="headerlink" title="学生列表接口"></a>学生列表接口</h3><p>步骤1: 定义路由/stu get</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http.js</span></span><br><span class="line">app.get(<span class="string">&quot;/stu&quot;</span>,stuController.index)</span><br></pre></td></tr></table></figure><p>步骤2: 响应任意json数据</p><p>步骤3: 修改stu模型，增加查询方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// models/stu.js</span></span><br><span class="line"><span class="comment">// 查询数据</span></span><br><span class="line"><span class="keyword">const</span> listModel = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line">      .find()</span><br><span class="line">      .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 四、方法</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123; listModel &#125;;</span><br></pre></td></tr></table></figure><p>步骤4: 修改控制，调用模型返回数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; listModel &#125; = <span class="built_in">require</span>(process.cwd() + <span class="string">&quot;/models/stu&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> index = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    listModel().then(<span class="function">(<span class="params">rs</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (rs) &#123;</span><br><span class="line">            res.send(&#123;</span><br><span class="line">                meta: &#123;</span><br><span class="line">                    state: <span class="number">200</span>,</span><br><span class="line">                    msg: <span class="string">&quot;查询成功&quot;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                data: rs,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.send(&#123;</span><br><span class="line">                meta: &#123;</span><br><span class="line">                    state: <span class="number">500</span>,</span><br><span class="line">                    msg: <span class="string">&quot;查询失败&quot;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                data: <span class="literal">null</span>,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    index</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="学生列表接口分页"><a href="#学生列表接口分页" class="headerlink" title="学生列表接口分页"></a>学生列表接口分页</h3><p>步骤1:修改控制器接口请求参数(get)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">&quot;/stu&quot;</span>,stuController.index)</span><br></pre></td></tr></table></figure><p>步骤2:传递给模型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> index = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> getData = req.query;</span><br><span class="line">    <span class="keyword">let</span> pagesize = <span class="built_in">parseInt</span>(getData.pagesize);</span><br><span class="line">    <span class="keyword">let</span> skip = (<span class="built_in">parseInt</span>(getData.pageno) - <span class="number">1</span>) * pagesize;</span><br><span class="line">    listModle(skip, pagesize).then(<span class="function">(<span class="params">rs</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (rs) &#123;</span><br><span class="line">            res.send(&#123;</span><br><span class="line">                meta: &#123;</span><br><span class="line">                    state: <span class="number">200</span>,</span><br><span class="line">                    msg: <span class="string">&quot;查询成功&quot;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                data: rs,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.send(&#123;</span><br><span class="line">                meta: &#123;</span><br><span class="line">                    state: <span class="number">500</span>,</span><br><span class="line">                    msg: <span class="string">&quot;查询失败&quot;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                data: <span class="literal">null</span>,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>步骤3:模型增加skip和limit即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询数据</span></span><br><span class="line"><span class="keyword">const</span> listModle = <span class="function">(<span class="params">skip, limit</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> model.find().skip(skip).limit(limit)</span><br><span class="line">        .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(res);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="实战接口文档开发apiDoc"><a href="#实战接口文档开发apiDoc" class="headerlink" title="实战接口文档开发apiDoc"></a>实战接口文档开发apiDoc</h2><h3 id="明确需求-2"><a href="#明确需求-2" class="headerlink" title="明确需求"></a>明确需求</h3><p>实战开发中后端会开发很多很多接口</p><p>每个接口呢都有大量的参数</p><p>思考:前端如果知道有哪些接口并且每个接口有几个参数?</p><p>回答:通过接口文档</p><p>思考:接口文档自己写还是怎么样?</p><p>回答:有很多，本接口主要是通过该apiDoc来生成</p><h3 id="是什么-1"><a href="#是什么-1" class="headerlink" title="是什么"></a>是什么</h3><p>就是nodejs中的一个模块</p><h3 id="能干吗-2"><a href="#能干吗-2" class="headerlink" title="能干吗"></a>能干吗</h3><p>通过这个模块可以快速生成接口文档</p><p>前提写接口的时候把注释加上</p><h3 id="去哪下"><a href="#去哪下" class="headerlink" title="去哪下"></a>去哪下</h3><p><a href="https://apidocjs.com/">https://apidocjs.com/</a></p><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><ol><li><p>安装模块（仅一次）</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install apidoc -g</span><br></pre></td></tr></table></figure></li><li><p>在项目根目录创建 <code>apidoc.json</code> 文件（仅一次）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;example&quot;</span>,</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;0.1.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;description&quot;</span>: <span class="string">&quot;apiDoc basic example&quot;</span>,</span><br><span class="line">    <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Custom apiDoc browser title&quot;</span>,</span><br><span class="line">    <span class="string">&quot;url&quot;</span> : <span class="string">&quot;https://api.github.com/v1&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;教学管理系统接口文档&quot;</span>,</span><br><span class="line">     <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">     <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;一个非常NB的接口文档&quot;</span>,</span><br><span class="line">     <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Custom apiDoc browser title&quot;</span>,</span><br><span class="line">     <span class="attr">&quot;url&quot;</span> : <span class="string">&quot;http://localhost:3000&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>写接口注释（N 次）</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@api <span class="type">&#123;get&#125;</span> </span>/user/:id Request User information</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiName <span class="variable">GetUser</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiGroup <span class="variable">User</span></span></span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiParam <span class="type">&#123;Number&#125;</span> </span>id Users unique ID.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiSuccess <span class="type">&#123;String&#125;</span> </span>firstname Firstname of the User.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiSuccess <span class="type">&#123;String&#125;</span> </span>lastname  Lastname of the User.</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p> 例如：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@api <span class="type">&#123;get&#125;</span> </span>/stu 学生模块列表</span></span><br><span class="line"><span class="comment">* <span class="doctag">@apiName <span class="variable">Add</span></span></span></span><br><span class="line"><span class="comment">* <span class="doctag">@apiGroup <span class="variable">Stu</span></span></span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@apiParam <span class="type">&#123;Number&#125;</span> </span>pageno   当前页</span></span><br><span class="line"><span class="comment">* <span class="doctag">@apiParam <span class="type">&#123;Number&#125;</span> </span>pagesize 每页显示条数</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@apiSuccess <span class="type">&#123;String&#125;</span>  </span>meta  状态码&amp;提示信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@apiSuccess <span class="type">&#123;String&#125;</span>  </span>data  数据</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>生成接口文档（N 次）</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apidoc -i ./接口注释目录 -o ./接口文档存放目录</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库学习 </category>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
            <tag> Mongoose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB学习</title>
      <link href="/posts/3b691274/"/>
      <url>/posts/3b691274/</url>
      
        <content type="html"><![CDATA[<h2 id="MongoDB简介"><a href="#MongoDB简介" class="headerlink" title="MongoDB简介"></a>MongoDB简介</h2><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zykjofficial/zykjimg/raw/master/img/20200821095615.png"></p><ul><li>基于分布犹文件存储数据库（就是一个数据库</li><li>C++语言编写</li><li>支持的数据结构非常松散，是类似json的bson格式（后期插入修改数据写JSON)</li></ul><blockquote><p>JSON(JavaScript Object Notation,JS对象简谱）是一种轻量级的数据交换格式bson(二进制SON)</p></blockquote><h3 id="能干嘛"><a href="#能干嘛" class="headerlink" title="能干嘛"></a>能干嘛</h3><ul><li><p>存放项目数据</p></li><li><p>实战工作开发写API接口(重要</p></li><li><p>等等</p></li></ul><h3 id="从哪下载"><a href="#从哪下载" class="headerlink" title="从哪下载"></a>从哪下载</h3><ul><li>windows版本下载: <a href="https://www.mongodb.org/dl/win32">https://www.mongodb.org/dl/win32</a></li><li>linux版本下载: <a href="https://www.mongodb.org/dl/linux">https://www.mongodb.org/dl/linux</a> </li><li>各版本下载: <a href="https://www.mongodb.com/try/download/community">https://www.mongodb.com/try/download/community</a></li></ul><p><code>版本说明</code></p><ul><li>2.x</li><li>3.x (3.2、 3.4、 3.6)</li><li>4.x (4.2更佳的数据管理能力、更强的分布式架构、多文档事物等)</li><li>写这篇教程的时候最新版是 4.4</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Liunx系统"><a href="#Liunx系统" class="headerlink" title="Liunx系统"></a>Liunx系统</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#步骤1:下载</span></span><br><span class="line">curl -o https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.6.tgz</span><br><span class="line"><span class="comment">#步骤2:解压</span></span><br><span class="line">tar -zxvf mongodb-linux-x86_64-3.0.6.tgz</span><br><span class="line"><span class="comment">#步骤3:将解压包拷贝到指定目录</span></span><br><span class="line">mv mongodb-linux-x86_64-3.0.6/ /usr/<span class="built_in">local</span>/mongodb</span><br><span class="line"><span class="comment">#步骤4:创建数据存放目录与日志存放目录</span></span><br><span class="line">mkdir -p /usr/<span class="built_in">local</span>/mongodb/data /usr/<span class="built_in">local</span>/mongodb/logs</span><br><span class="line"><span class="comment">#步骤5:启动MongoDB服务</span></span><br><span class="line">/usr/<span class="built_in">local</span>/mongodb/bin/mongod -- dbpath=/usr/<span class="built_in">local</span> /mongodb/data --logpath=/usr/<span class="built_in">local</span>/mongodb/logs/mongodb.log --logappend --port=27017 --fork</span><br><span class="line"></span><br><span class="line"><span class="comment">#后期登录即可</span></span><br><span class="line">/usr/<span class="built_in">local</span>/mongodb/bin/mongo</span><br></pre></td></tr></table></figure><h3 id="Win系统"><a href="#Win系统" class="headerlink" title="Win系统"></a>Win系统</h3><p>步骤1: 下载 <a href="https://www.mongodb.com/download-center/community">https://www.mongodb.com/download-center/community</a> 选择windows、zip<br>步骤2: 解压<br>步骤3: 创建服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/mongod.exe --install --dbpath 磁盘路径 --logpath 日志路径</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>通过管理员身份运行DOS窗口否则没有权限创建失败</li><li>需要提前<code>创建数据和日志存放目录</code>、比如在bin同级目录下创建<code>data 、logs目录</code></li></ul><p>这是我的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\Programs\MongoDB\bin&gt;mongod --install --dbpath D:\Programs\MongoDB\data --logpath D:\Programs\MongoDB\logs\mongodb.log</span><br></pre></td></tr></table></figure><p>步骤4: 启动服务</p><p>可以在windows中的服务中找到MongDB</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start mongodb</span><br></pre></td></tr></table></figure><p>步骤5: 登录(验证是否安装成功）</p><p>输入<code>mongo</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">D:\Programs\MongoDB\bin&gt;mongo</span><br><span class="line">MongoDB shell version v4.4.0</span><br><span class="line">connecting to: mongodb://127.0.0.1:27017/?compressors=disabled&amp;gssapiServiceName=mongodb</span><br><span class="line">Implicit session: session &#123; <span class="string">&quot;id&quot;</span> : UUID(<span class="string">&quot;96b8ce39-895f-40eb-93a4-afd64c26c1cf&quot;</span>) &#125;</span><br><span class="line">MongoDB server version: 4.4.0</span><br><span class="line">Welcome to the MongoDB shell.</span><br><span class="line">For interactive <span class="built_in">help</span>, <span class="built_in">type</span> <span class="string">&quot;help&quot;</span>.</span><br><span class="line">For more comprehensive documentation, see</span><br><span class="line">        https://docs.mongodb.com/</span><br><span class="line">Questions? Try the MongoDB Developer Community Forums</span><br><span class="line">        https://community.mongodb.com</span><br><span class="line">---</span><br><span class="line">The server generated these startup warnings when booting:</span><br><span class="line">        2020-08-21T11:02:34.822+08:00: Access control is not enabled <span class="keyword">for</span> the database. Read and write access to data and configuration is unrestricted</span><br><span class="line">        2020-08-21T11:02:34.823+08:00: This server is bound to localhost. Remote systems will be unable to connect to this server. Start the server with --bind_ip &lt;address&gt; to specify <span class="built_in">which</span> IP addresses it should serve responses from, or with --bind_ip_all to <span class="built_in">bind</span> to all interfaces. If this behavior is desired, start the server with --bind_ip 127.0.0.1 to <span class="built_in">disable</span> this warning</span><br><span class="line">---</span><br><span class="line">---</span><br><span class="line">        Enable MongoDB<span class="string">&#x27;s free cloud-based monitoring service, which will then receive and display</span></span><br><span class="line"><span class="string">        metrics about your deployment (disk utilization, CPU, operation statistics, etc).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        The monitoring data will be available on a MongoDB website with a unique URL accessible to you</span></span><br><span class="line"><span class="string">        and anyone you share the URL with. MongoDB may use this information to make product</span></span><br><span class="line"><span class="string">        improvements and to suggest MongoDB products and deployment options to you.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        To enable free monitoring, run the following command: db.enableFreeMonitoring()</span></span><br><span class="line"><span class="string">        To permanently disable this reminder, run the following command: db.disableFreeMonitoring()</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">&gt; exit</span></span><br><span class="line"><span class="string">bye</span></span><br></pre></td></tr></table></figure><p>基本语法</p><ul><li>创建服务: <code>bin/mongod. exe --install -- dbpath 磁盘路径 -- logpath 日志路径</code></li><li>删除服务: <code>bin/mongod. exe --remove</code></li><li>启动服务: <code>net start mongodb (注: service 服务名d restart/stop/start)</code></li><li>关闭服务: <code>net stop mongodb</code></li></ul><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>生活中:仓库、架子、物品</li><li>计算机:数据库(database) 、集合(collection) 、数据/文档(document)</li></ul><h3 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h3><p>语法：<code>show databases</code>缩写：<code>show dbs</code></p><p>效果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zykjofficial/zykjimg/raw/master/img/20200821111947.png"></p><h3 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h3><p>语法: <code>use 数据库名</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; use admin</span><br><span class="line">switched to db admin</span><br><span class="line">&gt; use admin2</span><br><span class="line">switched to db admin2</span><br></pre></td></tr></table></figure><p><code>隐式创建</code>: 在mongodb选择不存在的数据库不会报错，后期当该数据库有数据时，系统自动创建</p><h3 id="查看集合"><a href="#查看集合" class="headerlink" title="查看集合"></a>查看集合</h3><p>语法:  <code>show collections</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; use admin</span><br><span class="line">switched to db admin</span><br><span class="line">&gt; show collections</span><br><span class="line">system.version</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h3 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h3><p>语法: <code>db.createCollection(&quot;集合名&quot;)</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; use zykj</span><br><span class="line">switched to db zykj</span><br><span class="line">&gt; db.createCollection(<span class="string">&#x27;c1&#x27;</span>)</span><br><span class="line">&#123; <span class="string">&quot;ok&quot;</span> : 1 &#125;</span><br><span class="line">&gt; show collections</span><br><span class="line">c1</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h3 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h3><p>语法: <code>db.集合名.drop()</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; show collections</span><br><span class="line">c1</span><br><span class="line">&gt; db.c1.drop()</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">&gt; show collections</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>思考:如何删除数据库?<br>回答:</p><ol><li>通过<code>use语法</code>选中数据库</li><li>通过<code>db.dropDatabase()</code></li></ol><h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h3><p>数据库(查看、创建、选择、删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">查看: show databases</span><br><span class="line">创建: 有单独的语法，但是忽略 隐式创建</span><br><span class="line">选择: use数据库名</span><br><span class="line">删除: 1通过use选中数据库，2通过db.dropDatabase()删除数据库</span><br></pre></td></tr></table></figure><p>集合(查看、创建、删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">查看: show collections</span><br><span class="line">创建: db.createcollection(&#39;集合名&#39;)多学一招:忽略﹐后期插入数据隐式创建集合</span><br><span class="line">删除: db.集合名.drop()</span><br></pre></td></tr></table></figure><h2 id="文档增删改查-CURD"><a href="#文档增删改查-CURD" class="headerlink" title="文档增删改查(CURD)"></a>文档增删改查(CURD)</h2><h3 id="明确需求"><a href="#明确需求" class="headerlink" title="明确需求"></a>明确需求</h3><blockquote><p>数据库主要用来存放项目数据<br>然后我们已经学会了数据库和集合的创建</p></blockquote><p>思考: 如何实现集合中数据的增删改查呢?<br>回答: 通过MongoDB语法即可</p><h3 id="增-C"><a href="#增-C" class="headerlink" title="增 C"></a>增 C</h3><p>语法:  <code>db.集合名.insert(JSON数据)</code><br>说明:  集合存在-则直接插入数据，集合不存在-隐式创建<br>练习: 在test2数据库的c1集合中插入数据(姓名叫webopenfather年龄18岁)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use test2</span><br><span class="line">db.c1.insert(&#123;uname : &quot;webopenfather&quot;, age:18&#125;)</span><br><span class="line"></span><br><span class="line">留心1:数据库和集合不存在都隐式创建</span><br><span class="line">留心2:对象的键统一不加引号方便看，但是查看集合数据时系统会自动加</span><br><span class="line">留心3: mongodb会给每条数据增加一个全球唯一的_id键</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; use test2</span><br><span class="line">switched to db test2</span><br><span class="line">&gt; db.c1.insert(&#123;uname:&quot;webopenfather&quot;,age:18&#125;)</span><br><span class="line">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class="line">&gt; db.c1.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5f3f90760125df8cc59a60a6&quot;), &quot;uname&quot; : &quot;webopenfather&quot;, &quot;age&quot; : 18 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>多学一招：_id的组成：时间戳+机器码+PID+计数器</p><p><code>思考1: 是否可以自定义_id值?</code></p><blockquote><p>回答:可以，只需要给插入的SON数据增加<code>_id</code>键即可覆盖（但实战强烈不推荐<br><code>db.c1.insert(&#123;_id:1, uname:&quot;webopenfather&quot;, age:18&#125;)</code></p></blockquote><p><code>思考2: 如何一次性插入多条记录?</code></p><blockquote><p>回答:传递数据，数组中写一个个JSON数据即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.c1.insert([</span><br><span class="line">    &#123;uname: &quot;z3&quot;，age: 3&#125;，</span><br><span class="line">    &#123;uname: &quot;z4&quot;，age:4&#125;，</span><br><span class="line">    &#123;uname : &quot;w5&quot;，age: 5&#125;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">含义:—次性插入3条数据到c1集合</span><br></pre></td></tr></table></figure></blockquote><p><code>思考3:如何快速插入10条数据</code></p><blockquote><p>回答: mongodb底层使用JS引擎实现的，所以支持部分js语法<br>因此: 可以写for循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (var i&#x3D;1; i&lt;&#x3D;10; i++）&#123;</span><br><span class="line">print(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需求:在test2数据库c2集合中插入10条数据，分别为a1 a2 … a10</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use test2</span><br><span class="line">for(var i&#x3D;1;i&lt;&#x3D;10;i++）&#123;</span><br><span class="line">db.c2.insert(&#123;uname: &quot;a&quot;+i, age: i&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">for</span>(var i=1;i&lt;=10;i++)&#123;</span><br><span class="line">... <span class="built_in">print</span>(i)</span><br><span class="line">... &#125;</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">&gt; <span class="keyword">for</span>(var i=1;i&lt;=10;i++)&#123;</span><br><span class="line">... db.c2.insert(&#123;uname: <span class="string">&quot;a&quot;</span>+i ,age: i&#125;)</span><br><span class="line">... &#125;</span><br><span class="line">WriteResult(&#123; <span class="string">&quot;nInserted&quot;</span> : 1 &#125;)</span><br><span class="line">&gt; db.c2.find()</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3f99e38a803b8b630d59b3&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;a1&quot;</span>, <span class="string">&quot;age&quot;</span> : 1 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3f99e38a803b8b630d59b4&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;a2&quot;</span>, <span class="string">&quot;age&quot;</span> : 2 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3f99e38a803b8b630d59b5&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;a3&quot;</span>, <span class="string">&quot;age&quot;</span> : 3 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3f99e38a803b8b630d59b6&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;a4&quot;</span>, <span class="string">&quot;age&quot;</span> : 4 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3f99e38a803b8b630d59b7&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;a5&quot;</span>, <span class="string">&quot;age&quot;</span> : 5 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3f99e38a803b8b630d59b8&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;a6&quot;</span>, <span class="string">&quot;age&quot;</span> : 6 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3f99e38a803b8b630d59b9&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;a7&quot;</span>, <span class="string">&quot;age&quot;</span> : 7 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3f99e38a803b8b630d59ba&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;a8&quot;</span>, <span class="string">&quot;age&quot;</span> : 8 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3f99e38a803b8b630d59bb&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;a9&quot;</span>, <span class="string">&quot;age&quot;</span> : 9 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3f99e38a803b8b630d59bc&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;a10&quot;</span>, <span class="string">&quot;age&quot;</span> : 10 &#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h3 id="查-R"><a href="#查-R" class="headerlink" title="查 R"></a>查 R</h3><p>基础语法: <code>db.集合名.find(条件[,查询的列])</code></p><p>条件</p><ul><li>查询所有数据</li><li>或者不写</li><li>查询age=6的数据    {age:6}</li><li>既要age=6又要性别=男    {age:6 ,sex:’男’}</li></ul><p>查询的列(可选参数</p><ul><li>不写 – 这查询全部列 (字段 </li><li>{age:1} 共显示age列 (字段</li><li>{age:0} 除了age (字段都显示</li><li>留心:不管你怎么写系统自定义的 _id 都会在</li></ul><p>升级语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.find(&#123;键:值&#125;)注:值不直接写</span><br><span class="line">&#123;运算符:值&#125;</span><br><span class="line"></span><br><span class="line">db.集合名.find(&#123;</span><br><span class="line">键:&#123;运算符:值&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><table><thead><tr><th>运算符</th><th>作用</th></tr></thead><tbody><tr><td><code>$gt</code></td><td>大于</td></tr><tr><td><code>$gte</code></td><td>大于等于</td></tr><tr><td><code>$lt</code></td><td>小于</td></tr><tr><td><code>$lte</code></td><td>小于等于</td></tr><tr><td><code>$ne</code></td><td>不等于</td></tr><tr><td><code>$in</code></td><td>in</td></tr><tr><td><code>$nin</code></td><td>not in</td></tr></tbody></table><p><code>练习1:查询所有数据</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; use test2</span><br><span class="line">switched to db test2</span><br><span class="line">&gt; show collections</span><br><span class="line">c1</span><br><span class="line">c2</span><br><span class="line">&gt; db.c2.find(&#123;&#125;,&#123;uname:1&#125;)</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3f99e38a803b8b630d59b3&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;a1&quot;</span> &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3f99e38a803b8b630d59b4&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;a2&quot;</span> &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3f99e38a803b8b630d59b5&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;a3&quot;</span> &#125;</span><br><span class="line">&gt; db.c2.find(&#123;&#125;,&#123;uname:0&#125;)</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3f99e38a803b8b630d59b3&quot;</span>), <span class="string">&quot;age&quot;</span> : 1 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3f99e38a803b8b630d59b4&quot;</span>), <span class="string">&quot;age&quot;</span> : 2 &#125;</span><br></pre></td></tr></table></figure><p><code>练习2:查询年龄大于5岁的数据?</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.c2.find(&#123;age:5&#125;)</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3f99e38a803b8b630d59b7&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;a5&quot;</span>, <span class="string">&quot;age&quot;</span> : 5 &#125;</span><br><span class="line">&gt; db.c2.find(&#123;age:&#123;<span class="variable">$gt</span>:5&#125;&#125;)</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3f99e38a803b8b630d59b8&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;a6&quot;</span>, <span class="string">&quot;age&quot;</span> : 6 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3f99e38a803b8b630d59b9&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;a7&quot;</span>, <span class="string">&quot;age&quot;</span> : 7 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3f99e38a803b8b630d59ba&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;a8&quot;</span>, <span class="string">&quot;age&quot;</span> : 8 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3f99e38a803b8b630d59bb&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;a9&quot;</span>, <span class="string">&quot;age&quot;</span> : 9 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3f99e38a803b8b630d59bc&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;a10&quot;</span>, <span class="string">&quot;age&quot;</span> : 10 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p><code>练习3:查询年龄是5岁、8岁、10岁的数据?</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.c2.find(&#123;age:&#123;<span class="variable">$in</span>:[5,8,10]&#125;&#125;)</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3f99e38a803b8b630d59b7&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;a5&quot;</span>, <span class="string">&quot;age&quot;</span> : 5 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3f99e38a803b8b630d59ba&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;a8&quot;</span>, <span class="string">&quot;age&quot;</span> : 8 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3f99e38a803b8b630d59bc&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;a10&quot;</span>, <span class="string">&quot;age&quot;</span> : 10 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p><code>练习4:只看年龄列，或者年龄以外的列(_id别管它)?</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.c2.find(&#123;&#125;,&#123;age:1&#125;)</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3f99e38a803b8b630d59b3&quot;</span>), <span class="string">&quot;age&quot;</span> : 1 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3f99e38a803b8b630d59b4&quot;</span>), <span class="string">&quot;age&quot;</span> : 2 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3f99e38a803b8b630d59b5&quot;</span>), <span class="string">&quot;age&quot;</span> : 3 &#125;</span><br><span class="line"></span><br><span class="line">&gt; db.c2.find(&#123;&#125;,&#123;age:0&#125;)</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3f99e38a803b8b630d59b3&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;a1&quot;</span> &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3f99e38a803b8b630d59b4&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;a2&quot;</span> &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3f99e38a803b8b630d59b5&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;a3&quot;</span> &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h3 id="改-U"><a href="#改-U" class="headerlink" title="改 U"></a>改 U</h3><p>基础语法: <code>db.集合名.update(条件，新数据[,是否新增,是否修改多条])</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">是否新增:指条件匹配不到数据则插入(true是插入，false否不插入默认)</span><br><span class="line">是否修改多条:指将匹配成功的数据都修改(true是，false否默认)</span><br></pre></td></tr></table></figure><p>升级语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.update(条件，新数据)</span><br><span class="line">&#123;修改器: &#123;键:值&#125;&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>运算符</th><th>作用</th></tr></thead><tbody><tr><td><code>$inc</code></td><td>递增</td></tr><tr><td><code>$rename</code></td><td>重命名列</td></tr><tr><td><code>$set</code></td><td>修改列值</td></tr><tr><td><code>$unset</code></td><td>删除列</td></tr></tbody></table><p>准备工作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use test2;</span><br><span class="line">for(var i &#x3D; 1; i&lt;&#x3D; 10; i++)&#123;</span><br><span class="line">db.c3.insert( &#123;&quot;uname&quot;:&quot;zs&quot;+i, &quot;age&quot;:i&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习1:<code>将&#123;uname:&quot;zs1&quot;&#125;改为&#123;uname:&quot;zs2&quot;&#125;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.c3.update(&#123;uname:<span class="string">&quot;zs1&quot;</span>&#125;,&#123;uname:<span class="string">&quot;zs2&quot;</span>&#125;)</span><br><span class="line">WriteResult(&#123; <span class="string">&quot;nMatched&quot;</span> : 1, <span class="string">&quot;nUpserted&quot;</span> : 0, <span class="string">&quot;nModified&quot;</span> : 1 &#125;)</span><br><span class="line">&gt; db.c3.find()</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4f6&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs2&quot;</span> &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4f7&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs2&quot;</span>, <span class="string">&quot;age&quot;</span> : 2 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4f8&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs3&quot;</span>, <span class="string">&quot;age&quot;</span> : 3 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4f9&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs4&quot;</span>, <span class="string">&quot;age&quot;</span> : 4 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fa&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs5&quot;</span>, <span class="string">&quot;age&quot;</span> : 5 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fb&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs6&quot;</span>, <span class="string">&quot;age&quot;</span> : 6 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fc&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs7&quot;</span>, <span class="string">&quot;age&quot;</span> : 7 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fd&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs8&quot;</span>, <span class="string">&quot;age&quot;</span> : 8 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fe&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs9&quot;</span>, <span class="string">&quot;age&quot;</span> : 9 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4ff&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs10&quot;</span>, <span class="string">&quot;age&quot;</span> : 10 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><blockquote><p>发现: 默认不是修改,而是替换<br>解决:使用升级语法修改器</p><p>需求: 使用修改器将zs2的姓名改为zs22<br>语法: <code>db.c3.update(&#123;uname:&quot;zs2&quot;&#125;, &#123;$set: &#123;uname: &quot;zs22&quot;&#125;&#125;)</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.c3.update(&#123;uname:<span class="string">&quot;zs2&quot;</span>&#125;,&#123;<span class="variable">$set</span>:&#123;uname:<span class="string">&quot;zs22&quot;</span>&#125;&#125;)</span><br><span class="line">WriteResult(&#123; <span class="string">&quot;nMatched&quot;</span> : 1, <span class="string">&quot;nUpserted&quot;</span> : 0, <span class="string">&quot;nModified&quot;</span> : 1 &#125;)</span><br><span class="line">&gt; db.c3.find()</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4f6&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs22&quot;</span> &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4f7&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs2&quot;</span>, <span class="string">&quot;age&quot;</span> : 2 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4f8&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs3&quot;</span>, <span class="string">&quot;age&quot;</span> : 3 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4f9&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs4&quot;</span>, <span class="string">&quot;age&quot;</span> : 4 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fa&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs5&quot;</span>, <span class="string">&quot;age&quot;</span> : 5 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fb&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs6&quot;</span>, <span class="string">&quot;age&quot;</span> : 6 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fc&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs7&quot;</span>, <span class="string">&quot;age&quot;</span> : 7 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fd&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs8&quot;</span>, <span class="string">&quot;age&quot;</span> : 8 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fe&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs9&quot;</span>, <span class="string">&quot;age&quot;</span> : 9 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4ff&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs10&quot;</span>, <span class="string">&quot;age&quot;</span> : 10 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>发现默认只能改一条数据</p></blockquote><p>练习2: <code>给&#123;uname:&quot;zs10&quot;&#125;的年龄加2岁或者减2岁</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.c3.find()</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4f6&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs22&quot;</span> &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4f7&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs2&quot;</span>, <span class="string">&quot;age&quot;</span> : 2 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4f8&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs3&quot;</span>, <span class="string">&quot;age&quot;</span> : 3 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4f9&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs4&quot;</span>, <span class="string">&quot;age&quot;</span> : 4 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fa&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs5&quot;</span>, <span class="string">&quot;age&quot;</span> : 5 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fb&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs6&quot;</span>, <span class="string">&quot;age&quot;</span> : 6 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fc&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs7&quot;</span>, <span class="string">&quot;age&quot;</span> : 7 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fd&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs8&quot;</span>, <span class="string">&quot;age&quot;</span> : 8 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fe&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs9&quot;</span>, <span class="string">&quot;age&quot;</span> : 9 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4ff&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs10&quot;</span>, <span class="string">&quot;age&quot;</span> : 10 &#125;</span><br><span class="line">&gt; db.c3.update(&#123;uname:<span class="string">&quot;zs10&quot;</span>&#125;,&#123;<span class="variable">$inc</span>:&#123;age:2&#125;&#125;)</span><br><span class="line">WriteResult(&#123; <span class="string">&quot;nMatched&quot;</span> : 1, <span class="string">&quot;nUpserted&quot;</span> : 0, <span class="string">&quot;nModified&quot;</span> : 1 &#125;)</span><br><span class="line">&gt; db.c3.find()</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4f6&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs22&quot;</span> &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4f7&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs2&quot;</span>, <span class="string">&quot;age&quot;</span> : 2 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4f8&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs3&quot;</span>, <span class="string">&quot;age&quot;</span> : 3 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4f9&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs4&quot;</span>, <span class="string">&quot;age&quot;</span> : 4 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fa&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs5&quot;</span>, <span class="string">&quot;age&quot;</span> : 5 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fb&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs6&quot;</span>, <span class="string">&quot;age&quot;</span> : 6 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fc&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs7&quot;</span>, <span class="string">&quot;age&quot;</span> : 7 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fd&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs8&quot;</span>, <span class="string">&quot;age&quot;</span> : 8 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fe&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs9&quot;</span>, <span class="string">&quot;age&quot;</span> : 9 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4ff&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs10&quot;</span>, <span class="string">&quot;age&quot;</span> : 12 &#125;</span><br><span class="line">&gt; db.c3.update(&#123;uname:<span class="string">&quot;zs10&quot;</span>&#125;,&#123;<span class="variable">$inc</span>:&#123;age:-2&#125;&#125;)</span><br><span class="line">WriteResult(&#123; <span class="string">&quot;nMatched&quot;</span> : 1, <span class="string">&quot;nUpserted&quot;</span> : 0, <span class="string">&quot;nModified&quot;</span> : 1 &#125;)</span><br><span class="line">&gt; db.c3.find()</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4f6&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs22&quot;</span> &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4f7&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs2&quot;</span>, <span class="string">&quot;age&quot;</span> : 2 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4f8&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs3&quot;</span>, <span class="string">&quot;age&quot;</span> : 3 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4f9&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs4&quot;</span>, <span class="string">&quot;age&quot;</span> : 4 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fa&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs5&quot;</span>, <span class="string">&quot;age&quot;</span> : 5 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fb&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs6&quot;</span>, <span class="string">&quot;age&quot;</span> : 6 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fc&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs7&quot;</span>, <span class="string">&quot;age&quot;</span> : 7 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fd&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs8&quot;</span>, <span class="string">&quot;age&quot;</span> : 8 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fe&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs9&quot;</span>, <span class="string">&quot;age&quot;</span> : 9 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4ff&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs10&quot;</span>, <span class="string">&quot;age&quot;</span> : 10 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>练习3: <code>修改器综合练习</code><br>插入数据: <code>db.c4.insert( &#123;uname:&quot;神龙教主&quot;,age:888,who:&quot;男&quot;,other:&quot;非国人&quot;&#125;);</code></p><blockquote><p>完成需求:<br>uname 改成 zykj    (修改器: $set)<br>age  增加  111            (修改器: $inc)<br>who 改字段 sex            (修改器: $rename)<br>other 删除        (修改器: $unset)</p><p>语法|分析:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">db.c4.update( &#123;uname :&quot;神龙教主&quot;&#125;,&#123;uname: &quot;zykj&quot;&#125;) #错误， 替换</span><br><span class="line">                                &#123;$set: &#123;uname: &quot;zykj&quot;&#125;&#125;</span><br><span class="line">                                &#123;$inc: &#123;age: 111&#125;&#125;</span><br><span class="line">                                &#123;$rename: &#123;who: &quot;sex&quot;&#125;&#125;</span><br><span class="line">                                &#123;$unset: &#123;other: true&#125;&#125;</span><br><span class="line">                                </span><br><span class="line">留心如何一次性写多个修改器</span><br><span class="line">db.c4.update( &#123;uname: &quot;神龙教主&quot;&#125;,&#123;</span><br><span class="line">$set: &#123;uname : &quot;zykj&quot;&#125;,</span><br><span class="line">$inc: &#123;age: 111&#125;,</span><br><span class="line">$rename: &#123;who: &quot;sex&quot;&#125;,</span><br><span class="line">$unset: &#123;other: true&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></blockquote><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.c4.insert( &#123;uname:<span class="string">&quot;神龙教主&quot;</span>,age:888,who:<span class="string">&quot;男&quot;</span>,other:<span class="string">&quot;非国人&quot;</span>&#125;)</span><br><span class="line">WriteResult(&#123; <span class="string">&quot;nInserted&quot;</span> : 1 &#125;)</span><br><span class="line">&gt; db.c4.update( &#123;uname: <span class="string">&quot;神龙教主&quot;</span>&#125;,&#123;</span><br><span class="line">... <span class="variable">$set</span>: &#123;uname : <span class="string">&quot;zykj&quot;</span>&#125;,</span><br><span class="line">... <span class="variable">$inc</span>: &#123;age: 111&#125;,</span><br><span class="line">... <span class="variable">$rename</span>: &#123;who: <span class="string">&quot;sex&quot;</span>&#125;,</span><br><span class="line">... <span class="variable">$unset</span>: &#123;other: <span class="literal">true</span>&#125;</span><br><span class="line">... &#125;)</span><br><span class="line">WriteResult(&#123; <span class="string">&quot;nMatched&quot;</span> : 1, <span class="string">&quot;nUpserted&quot;</span> : 0, <span class="string">&quot;nModified&quot;</span> : 1 &#125;)</span><br><span class="line">&gt; db.c4.find()</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd9c28989b2009f00b500&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zykj&quot;</span>, <span class="string">&quot;age&quot;</span> : 999, <span class="string">&quot;sex&quot;</span> : <span class="string">&quot;男&quot;</span> &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>练习4: <code>验证语法最后两个参数(了解)</code><br>[验证]是否新增true是false否: 修改 uname 等于 zs30 的年龄 30岁</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.c3.find()</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4f6&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs22&quot;</span> &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4f7&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs2&quot;</span>, <span class="string">&quot;age&quot;</span> : 2 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4f8&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs3&quot;</span>, <span class="string">&quot;age&quot;</span> : 3 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4f9&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs4&quot;</span>, <span class="string">&quot;age&quot;</span> : 4 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fa&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs5&quot;</span>, <span class="string">&quot;age&quot;</span> : 5 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fb&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs6&quot;</span>, <span class="string">&quot;age&quot;</span> : 6 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fc&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs7&quot;</span>, <span class="string">&quot;age&quot;</span> : 7 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fd&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs8&quot;</span>, <span class="string">&quot;age&quot;</span> : 8 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fe&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs9&quot;</span>, <span class="string">&quot;age&quot;</span> : 9 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4ff&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs10&quot;</span>, <span class="string">&quot;age&quot;</span> : 12 &#125;</span><br><span class="line">&gt; db.c3.update(&#123;name:<span class="string">&quot;zs30&quot;</span>&#125;,&#123;<span class="variable">$set</span>:&#123;age:30&#125;&#125;,<span class="literal">false</span>)</span><br><span class="line">WriteResult(&#123; <span class="string">&quot;nMatched&quot;</span> : 0, <span class="string">&quot;nUpserted&quot;</span> : 0, <span class="string">&quot;nModified&quot;</span> : 0 &#125;)</span><br><span class="line">&gt; db.c3.update(&#123;name:<span class="string">&quot;zs30&quot;</span>&#125;,&#123;<span class="variable">$set</span>:&#123;age:30&#125;&#125;,<span class="literal">true</span>)</span><br><span class="line">WriteResult(&#123;</span><br><span class="line">        <span class="string">&quot;nMatched&quot;</span> : 0,</span><br><span class="line">        <span class="string">&quot;nUpserted&quot;</span> : 1,</span><br><span class="line">        <span class="string">&quot;nModified&quot;</span> : 0,</span><br><span class="line">        <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fde2703673d79be111d2c&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&gt; db.c3.find()</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4f6&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs22&quot;</span> &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4f7&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs2&quot;</span>, <span class="string">&quot;age&quot;</span> : 2 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4f8&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs3&quot;</span>, <span class="string">&quot;age&quot;</span> : 3 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4f9&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs4&quot;</span>, <span class="string">&quot;age&quot;</span> : 4 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fa&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs5&quot;</span>, <span class="string">&quot;age&quot;</span> : 5 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fb&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs6&quot;</span>, <span class="string">&quot;age&quot;</span> : 6 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fc&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs7&quot;</span>, <span class="string">&quot;age&quot;</span> : 7 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fd&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs8&quot;</span>, <span class="string">&quot;age&quot;</span> : 8 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fe&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs9&quot;</span>, <span class="string">&quot;age&quot;</span> : 9 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4ff&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs10&quot;</span>, <span class="string">&quot;age&quot;</span> : 12 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fde2703673d79be111d2c&quot;</span>), <span class="string">&quot;name&quot;</span> : <span class="string">&quot;zs30&quot;</span>, <span class="string">&quot;age&quot;</span> : 30 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>[验证]是否修改多条true是, false否默认</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.c3.update(&#123;&#125;,&#123;<span class="variable">$set</span>:&#123;age:10&#125;&#125;,<span class="literal">false</span>,<span class="literal">false</span>)</span><br><span class="line">WriteResult(&#123; <span class="string">&quot;nMatched&quot;</span> : 1, <span class="string">&quot;nUpserted&quot;</span> : 0, <span class="string">&quot;nModified&quot;</span> : 1 &#125;)</span><br><span class="line">&gt; db.c3.update(&#123;&#125;,&#123;<span class="variable">$set</span>:&#123;age:20&#125;&#125;,<span class="literal">false</span>,<span class="literal">true</span>)</span><br><span class="line">WriteResult(&#123; <span class="string">&quot;nMatched&quot;</span> : 11, <span class="string">&quot;nUpserted&quot;</span> : 0, <span class="string">&quot;nModified&quot;</span> : 11 &#125;)</span><br><span class="line">&gt; db.c3.find()</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4f6&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs22&quot;</span>, <span class="string">&quot;age&quot;</span> : 20 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4f7&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs2&quot;</span>, <span class="string">&quot;age&quot;</span> : 20 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4f8&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs3&quot;</span>, <span class="string">&quot;age&quot;</span> : 20 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4f9&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs4&quot;</span>, <span class="string">&quot;age&quot;</span> : 20 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fa&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs5&quot;</span>, <span class="string">&quot;age&quot;</span> : 20 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fb&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs6&quot;</span>, <span class="string">&quot;age&quot;</span> : 20 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fc&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs7&quot;</span>, <span class="string">&quot;age&quot;</span> : 20 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fd&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs8&quot;</span>, <span class="string">&quot;age&quot;</span> : 20 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fe&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs9&quot;</span>, <span class="string">&quot;age&quot;</span> : 20 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4ff&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs10&quot;</span>, <span class="string">&quot;age&quot;</span> : 20 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fde2703673d79be111d2c&quot;</span>), <span class="string">&quot;name&quot;</span> : <span class="string">&quot;zs30&quot;</span>, <span class="string">&quot;age&quot;</span> : 20 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h3 id="删-D"><a href="#删-D" class="headerlink" title="删 D"></a>删 D</h3><p>语法: <code>db.集合名.remove(条件[,是否删除一条])</code><br>注意: 是否删除一条true是,false否、默认为false</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.c3.find()</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4f6&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs22&quot;</span>, <span class="string">&quot;age&quot;</span> : 20 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4f7&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs2&quot;</span>, <span class="string">&quot;age&quot;</span> : 20 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4f8&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs3&quot;</span>, <span class="string">&quot;age&quot;</span> : 20 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4f9&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs4&quot;</span>, <span class="string">&quot;age&quot;</span> : 20 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fa&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs5&quot;</span>, <span class="string">&quot;age&quot;</span> : 20 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fb&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs6&quot;</span>, <span class="string">&quot;age&quot;</span> : 20 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fc&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs7&quot;</span>, <span class="string">&quot;age&quot;</span> : 20 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fd&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs8&quot;</span>, <span class="string">&quot;age&quot;</span> : 20 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4fe&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs9&quot;</span>, <span class="string">&quot;age&quot;</span> : 20 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fd0a58989b2009f00b4ff&quot;</span>), <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;zs10&quot;</span>, <span class="string">&quot;age&quot;</span> : 20 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f3fde2703673d79be111d2c&quot;</span>), <span class="string">&quot;name&quot;</span> : <span class="string">&quot;zs30&quot;</span>, <span class="string">&quot;age&quot;</span> : 20 &#125;</span><br><span class="line">&gt; db.c3.remove(&#123;&#125;,<span class="literal">true</span>)</span><br><span class="line">WriteResult(&#123; <span class="string">&quot;nRemoved&quot;</span> : 1 &#125;)</span><br><span class="line">&gt; db.c3.remove(&#123;&#125;)</span><br><span class="line">WriteResult(&#123; <span class="string">&quot;nRemoved&quot;</span> : 10 &#125;)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h3 id="小总结-1"><a href="#小总结-1" class="headerlink" title="小总结"></a>小总结</h3><p>增Create</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.insert(JSON数据)</span><br></pre></td></tr></table></figure><p>删Delete</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.remove(条件[是否删除一条true是false否默认])</span><br><span class="line"></span><br><span class="line">也就是默认删除多条</span><br></pre></td></tr></table></figure><p>改Update</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.update(条件,新数据 [,是否新增,是否修改多条] )</span><br><span class="line"></span><br><span class="line">升级语法 db.集合名.update(条件, &#123;修改器: &#123;键: 值&#125;)</span><br></pre></td></tr></table></figure><p>查Read</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.find(条件 [,查询的列])</span><br></pre></td></tr></table></figure><h2 id="教学管理系统数据库设计"><a href="#教学管理系统数据库设计" class="headerlink" title="教学管理系统数据库设计"></a>教学管理系统数据库设计</h2><p>图片中的字段：编号、学号、姓名、电话、性别、年龄、学历、备注</p><h3 id="实战开发流程"><a href="#实战开发流程" class="headerlink" title="实战开发流程"></a>实战开发流程</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zykjofficial/zykjimg/raw/master/img/20200822095739.png"></p><h3 id="数据库设计流程"><a href="#数据库设计流程" class="headerlink" title="数据库设计流程"></a>数据库设计流程</h3><p>根据UI设计稿</p><ol><li>确定功能模块所属集合</li><li>确定集合字段</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">UI设计稿每个展示内容对应一个字段</span><br><span class="line">创建于字段</span><br><span class="line">更新于字段</span><br><span class="line">状态字段</span><br><span class="line"></span><br><span class="line">最后:先中文、再英文</span><br><span class="line">留心:上述规则照顾基础差的，如果大神 或 久而久之 就变成肌肉记忆，下意识直接创建</span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><ul><li>需求:根据千锋教学系统，设置存放学生信息的集合，并插入20条测试数据</li><li>代码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1.先中文</span><br><span class="line">集合名称:学生集合</span><br><span class="line">集合字段:编号、学好、姓名、电话、性别、年龄、学历、备注</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2．再英文</span><br><span class="line">use school</span><br><span class="line">for (var num&#x3D;1; num&lt;&#x3D;20;num++)&#123;</span><br><span class="line">db.stu.insert(&#123;</span><br><span class="line">id:num,</span><br><span class="line">no: &quot;QF&quot;+num,</span><br><span class="line">uname:&quot;神龙教&quot;+num,</span><br><span class="line">tel: &quot;1111111111&quot;,</span><br><span class="line">sex:&quot;女&quot;,</span><br><span class="line">        age: num,</span><br><span class="line">        schoo1:&quot;研究生&quot;,</span><br><span class="line">        remark:&quot;士豪&quot;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：<code>小知识: pretty() 可以格式化json字符串</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&gt; use school</span><br><span class="line">switched to db school</span><br><span class="line">&gt; <span class="keyword">for</span> (var num=1; num&lt;=2;num++)&#123;</span><br><span class="line">... db.stu.insert(&#123;</span><br><span class="line">... id:num,</span><br><span class="line">... no: <span class="string">&quot;QF&quot;</span>+num,</span><br><span class="line">... uname:<span class="string">&quot;神龙教&quot;</span>+num,</span><br><span class="line">... tel: <span class="string">&quot;1111111111&quot;</span>,</span><br><span class="line">... sex:<span class="string">&quot;女&quot;</span>,</span><br><span class="line">...         age: num,</span><br><span class="line">...         schoo1:<span class="string">&quot;研究生&quot;</span>,</span><br><span class="line">...         remark:<span class="string">&quot;士豪&quot;</span></span><br><span class="line">... &#125;)</span><br><span class="line">... &#125;</span><br><span class="line">WriteResult(&#123; <span class="string">&quot;nInserted&quot;</span> : 1 &#125;)</span><br><span class="line">&gt; db.stu.find()</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f40804888a3d5009c18204f&quot;</span>), <span class="string">&quot;id&quot;</span> : 1, <span class="string">&quot;no&quot;</span> : <span class="string">&quot;QF1&quot;</span>, <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;神龙教1&quot;</span>, <span class="string">&quot;tel&quot;</span> : <span class="string">&quot;1111111111&quot;</span>, <span class="string">&quot;sex&quot;</span> : <span class="string">&quot;女&quot;</span>, <span class="string">&quot;age&quot;</span> : 1, <span class="string">&quot;schoo1&quot;</span> : <span class="string">&quot;研究生&quot;</span>, <span class="string">&quot;remark&quot;</span> : <span class="string">&quot;士豪&quot;</span> &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f40804888a3d5009c182050&quot;</span>), <span class="string">&quot;id&quot;</span> : 2, <span class="string">&quot;no&quot;</span> : <span class="string">&quot;QF2&quot;</span>, <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;神龙教2&quot;</span>, <span class="string">&quot;tel&quot;</span> : <span class="string">&quot;1111111111&quot;</span>, <span class="string">&quot;sex&quot;</span> : <span class="string">&quot;女&quot;</span>, <span class="string">&quot;age&quot;</span> : 2, <span class="string">&quot;schoo1&quot;</span> : <span class="string">&quot;研究生&quot;</span>, <span class="string">&quot;remark&quot;</span> : <span class="string">&quot;士豪&quot;</span> &#125;</span><br><span class="line">&gt; db.stu.find().pretty()</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f40804888a3d5009c18204f&quot;</span>),</span><br><span class="line">        <span class="string">&quot;id&quot;</span> : 1,</span><br><span class="line">        <span class="string">&quot;no&quot;</span> : <span class="string">&quot;QF1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;神龙教1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;tel&quot;</span> : <span class="string">&quot;1111111111&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sex&quot;</span> : <span class="string">&quot;女&quot;</span>,</span><br><span class="line">        <span class="string">&quot;age&quot;</span> : 1,</span><br><span class="line">        <span class="string">&quot;schoo1&quot;</span> : <span class="string">&quot;研究生&quot;</span>,</span><br><span class="line">        <span class="string">&quot;remark&quot;</span> : <span class="string">&quot;士豪&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5f40804888a3d5009c182050&quot;</span>),</span><br><span class="line">        <span class="string">&quot;id&quot;</span> : 2,</span><br><span class="line">        <span class="string">&quot;no&quot;</span> : <span class="string">&quot;QF2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;uname&quot;</span> : <span class="string">&quot;神龙教2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;tel&quot;</span> : <span class="string">&quot;1111111111&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sex&quot;</span> : <span class="string">&quot;女&quot;</span>,</span><br><span class="line">        <span class="string">&quot;age&quot;</span> : 2,</span><br><span class="line">        <span class="string">&quot;schoo1&quot;</span> : <span class="string">&quot;研究生&quot;</span>,</span><br><span class="line">        <span class="string">&quot;remark&quot;</span> : <span class="string">&quot;士豪&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h2 id="排序-amp-分页"><a href="#排序-amp-分页" class="headerlink" title="排序&amp;分页"></a>排序&amp;分页</h2><h3 id="明确需求-1"><a href="#明确需求-1" class="headerlink" title="明确需求"></a>明确需求</h3><p>数据库，是用来存放数据的<br>咱们后期从数据库获取数据需要排序、多页展示如何实现?</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">use test3</span><br><span class="line">db.c1.insert(&#123;_id:1,name:&quot;a&quot;,sex:1,age:1&#125;)</span><br><span class="line">db.c1.insert(&#123;_id:2,name:&quot;a&quot;,sex:1,age:2&#125;)</span><br><span class="line">db.c1.insert(&#123;_id:3,name:&quot;b&quot;,sex:2,age:3&#125;)</span><br><span class="line">db.c1.insert(&#123;_id:4,name:&quot;c&quot;,sex:2,age:4&#125;)</span><br><span class="line">db.c1.insert(&#123;_id:5,name:&quot;d&quot;,sex:2,age:5&#125;)</span><br><span class="line"></span><br><span class="line">db.c1.find()</span><br></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><ul><li>语法: <code>db.集合名.find().sort(JSON数据)</code></li><li>说明: 键-就是要排序的列/字段、值:<code>1升序 -1降序</code></li><li>练习:年龄升序&amp;降序</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&gt; use test3</span><br><span class="line">switched to db test3</span><br><span class="line">&gt; db.c1.insert(&#123;_id:1,name:<span class="string">&quot;a&quot;</span>,sex:1,age:1&#125;)</span><br><span class="line">WriteResult(&#123; <span class="string">&quot;nInserted&quot;</span> : 1 &#125;)</span><br><span class="line">&gt; db.c1.insert(&#123;_id:2,name:<span class="string">&quot;a&quot;</span>,sex:1,age:2&#125;)</span><br><span class="line">WriteResult(&#123; <span class="string">&quot;nInserted&quot;</span> : 1 &#125;)</span><br><span class="line">&gt; db.c1.insert(&#123;_id:3,name:<span class="string">&quot;b&quot;</span>,sex:2,age:3&#125;)</span><br><span class="line">WriteResult(&#123; <span class="string">&quot;nInserted&quot;</span> : 1 &#125;)</span><br><span class="line">&gt; db.c1.insert(&#123;_id:4,name:<span class="string">&quot;c&quot;</span>,sex:2,age:4&#125;)</span><br><span class="line">WriteResult(&#123; <span class="string">&quot;nInserted&quot;</span> : 1 &#125;)</span><br><span class="line">&gt; db.c1.insert(&#123;_id:5,name:<span class="string">&quot;d&quot;</span>,sex:2,age:5&#125;)</span><br><span class="line">WriteResult(&#123; <span class="string">&quot;nInserted&quot;</span> : 1 &#125;)</span><br><span class="line">&gt; db.c1.find()</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : 1, <span class="string">&quot;name&quot;</span> : <span class="string">&quot;a&quot;</span>, <span class="string">&quot;sex&quot;</span> : 1, <span class="string">&quot;age&quot;</span> : 1 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : 2, <span class="string">&quot;name&quot;</span> : <span class="string">&quot;a&quot;</span>, <span class="string">&quot;sex&quot;</span> : 1, <span class="string">&quot;age&quot;</span> : 2 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : 3, <span class="string">&quot;name&quot;</span> : <span class="string">&quot;b&quot;</span>, <span class="string">&quot;sex&quot;</span> : 2, <span class="string">&quot;age&quot;</span> : 3 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : 4, <span class="string">&quot;name&quot;</span> : <span class="string">&quot;c&quot;</span>, <span class="string">&quot;sex&quot;</span> : 2, <span class="string">&quot;age&quot;</span> : 4 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : 5, <span class="string">&quot;name&quot;</span> : <span class="string">&quot;d&quot;</span>, <span class="string">&quot;sex&quot;</span> : 2, <span class="string">&quot;age&quot;</span> : 5 &#125;</span><br><span class="line">&gt; db.c1.find().sort(&#123;age:1&#125;)</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : 1, <span class="string">&quot;name&quot;</span> : <span class="string">&quot;a&quot;</span>, <span class="string">&quot;sex&quot;</span> : 1, <span class="string">&quot;age&quot;</span> : 1 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : 2, <span class="string">&quot;name&quot;</span> : <span class="string">&quot;a&quot;</span>, <span class="string">&quot;sex&quot;</span> : 1, <span class="string">&quot;age&quot;</span> : 2 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : 3, <span class="string">&quot;name&quot;</span> : <span class="string">&quot;b&quot;</span>, <span class="string">&quot;sex&quot;</span> : 2, <span class="string">&quot;age&quot;</span> : 3 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : 4, <span class="string">&quot;name&quot;</span> : <span class="string">&quot;c&quot;</span>, <span class="string">&quot;sex&quot;</span> : 2, <span class="string">&quot;age&quot;</span> : 4 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : 5, <span class="string">&quot;name&quot;</span> : <span class="string">&quot;d&quot;</span>, <span class="string">&quot;sex&quot;</span> : 2, <span class="string">&quot;age&quot;</span> : 5 &#125;</span><br><span class="line">&gt; db.c1.find().sort(&#123;age:-1&#125;)</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : 5, <span class="string">&quot;name&quot;</span> : <span class="string">&quot;d&quot;</span>, <span class="string">&quot;sex&quot;</span> : 2, <span class="string">&quot;age&quot;</span> : 5 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : 4, <span class="string">&quot;name&quot;</span> : <span class="string">&quot;c&quot;</span>, <span class="string">&quot;sex&quot;</span> : 2, <span class="string">&quot;age&quot;</span> : 4 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : 3, <span class="string">&quot;name&quot;</span> : <span class="string">&quot;b&quot;</span>, <span class="string">&quot;sex&quot;</span> : 2, <span class="string">&quot;age&quot;</span> : 3 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : 2, <span class="string">&quot;name&quot;</span> : <span class="string">&quot;a&quot;</span>, <span class="string">&quot;sex&quot;</span> : 1, <span class="string">&quot;age&quot;</span> : 2 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : 1, <span class="string">&quot;name&quot;</span> : <span class="string">&quot;a&quot;</span>, <span class="string">&quot;sex&quot;</span> : 1, <span class="string">&quot;age&quot;</span> : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h3 id="Limit和Skip方法"><a href="#Limit和Skip方法" class="headerlink" title="Limit和Skip方法"></a>Limit和Skip方法</h3><ul><li><p>语法: <code>db.集合名.find().sort().skip(数字).limit()</code></p></li><li><p>说明: skip跳过指定数量(可选)，limit限制查询的数量</p></li><li><p>练习:1-降序查询查询2条，2-降序跳过2条并查询2条</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.c1.find().sort(&#123;age:-1&#125;).skip(0).<span class="built_in">limit</span>(2)</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : 5, <span class="string">&quot;name&quot;</span> : <span class="string">&quot;d&quot;</span>, <span class="string">&quot;sex&quot;</span> : 2, <span class="string">&quot;age&quot;</span> : 5 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : 4, <span class="string">&quot;name&quot;</span> : <span class="string">&quot;c&quot;</span>, <span class="string">&quot;sex&quot;</span> : 2, <span class="string">&quot;age&quot;</span> : 4 &#125;</span><br><span class="line">&gt; db.c1.find().sort(&#123;age:-1&#125;).skip(2).<span class="built_in">limit</span>(2)</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : 3, <span class="string">&quot;name&quot;</span> : <span class="string">&quot;b&quot;</span>, <span class="string">&quot;sex&quot;</span> : 2, <span class="string">&quot;age&quot;</span> : 3 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : 2, <span class="string">&quot;name&quot;</span> : <span class="string">&quot;a&quot;</span>, <span class="string">&quot;sex&quot;</span> : 1, <span class="string">&quot;age&quot;</span> : 2 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="实战分页"><a href="#实战分页" class="headerlink" title="实战分页"></a>实战分页</h3><p>需求:数据库1 -10数据，每页显示两条（5页)<br>语法: <code>db.集合名.find().skip().limit(2)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">skip计算公式: (当前页 – 1) * 每页显示条数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1页1 2  0</span><br><span class="line">2页3 4  2</span><br><span class="line">3页  5 6  4</span><br><span class="line">4页  7 8  6</span><br><span class="line">5页  9 10 8</span><br></pre></td></tr></table></figure><h3 id="小总结-2"><a href="#小总结-2" class="headerlink" title="小总结"></a>小总结</h3><p><code>db.集合名.find()</code><br><code>.sort(&#123;列:1/-1&#125;)</code>    排序<br><code>.skip(数字)</code>    跳过指定数量<br><code>.limit(数字)</code>    限制查询条数<br><code>.count()</code>        统计总数量</p><h2 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h2><h3 id="明确需求-2"><a href="#明确需求-2" class="headerlink" title="明确需求"></a>明确需求</h3><p>思考:如何统计数据、如何实现分组统计等?<br>回答: 通过MongoDB聚合查询</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>聚合查询<br>顾名思义就是把数据聚起来，然后统计</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>语法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.集合名称.aggregate([</span><br><span class="line">&#123;管道:&#123;表达式&#125;&#125;</span><br><span class="line">...</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>常用管道</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$group 将集合中的文档分组，用于统计结果</span><br><span class="line">$match 过滤数据，只要输出符合条件的文档</span><br><span class="line">$sort 聚合数据进一步排序</span><br><span class="line">$skip 跳过指定文档数</span><br><span class="line">$limit 限制集合数据返回文档数</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>常用表达式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$sum 总和$sum:1同count表示统计</span><br><span class="line">$avg 平均</span><br><span class="line">$min 最小值</span><br><span class="line">$max 最大值</span><br></pre></td></tr></table></figure><h3 id="准备-1"><a href="#准备-1" class="headerlink" title="准备"></a>准备</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use test4</span><br><span class="line">db.c1.insert(&#123;_id:1,name:<span class="string">&quot;a&quot;</span> ,sex:1,age:1&#125;)</span><br><span class="line">db.c1.insert(&#123;_id:2,name:<span class="string">&quot;a&quot;</span> ,sex:1,age:23&#125;)</span><br><span class="line">db.c1.insert(&#123;_id:3,name:<span class="string">&quot;b&quot;</span>,sex:2,age:3&#125;)</span><br><span class="line">db.c1.insert(&#123;_id:4,name:<span class="string">&quot;c&quot;</span>,sex:2,age:4&#125;)</span><br><span class="line">db.c1.insert(&#123;_id:5,name:<span class="string">&quot;d&quot;</span>,sex:2,age:5&#125;)</span><br></pre></td></tr></table></figure><h3 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h3><ul><li><p>统计男生、女生总年龄</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.c1.aggregate([</span><br><span class="line">&#123; </span><br><span class="line"><span class="variable">$group</span>: &#123;</span><br><span class="line">_id: <span class="string">&quot;<span class="variable">$sex</span>&quot;</span>,</span><br><span class="line">rs: &#123;<span class="variable">$sum</span>:<span class="string">&quot;<span class="variable">$age</span>&quot;</span>&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>  示例：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.c1.aggregate([</span><br><span class="line">... &#123;</span><br><span class="line">... <span class="variable">$group</span>: &#123;</span><br><span class="line">... _id: <span class="string">&quot;<span class="variable">$sex</span>&quot;</span>,</span><br><span class="line">... rs: &#123;<span class="variable">$sum</span>:<span class="string">&quot;<span class="variable">$age</span>&quot;</span>&#125;</span><br><span class="line">... &#125;</span><br><span class="line">... &#125;</span><br><span class="line">... ])</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : 2, <span class="string">&quot;rs&quot;</span> : 12 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : 1, <span class="string">&quot;rs&quot;</span> : 24 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li><li><p>统计男生、女生总人数</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.c1.aggregate([</span><br><span class="line">&#123; </span><br><span class="line"><span class="variable">$group</span>: &#123;</span><br><span class="line">_id: <span class="string">&quot;<span class="variable">$sex</span>&quot;</span>,</span><br><span class="line">rs: &#123;<span class="variable">$sum</span>:1&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>  示例：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.c1.aggregate([</span><br><span class="line">... &#123;</span><br><span class="line">... <span class="variable">$group</span>: &#123;</span><br><span class="line">... _id: <span class="string">&quot;<span class="variable">$sex</span>&quot;</span>,</span><br><span class="line">... rs: &#123;<span class="variable">$sum</span>:1&#125;</span><br><span class="line">... &#125;</span><br><span class="line">... &#125;</span><br><span class="line">... ])</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : 2, <span class="string">&quot;rs&quot;</span> : 3 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : 1, <span class="string">&quot;rs&quot;</span> : 2 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li><li><p>求学生总数和平均年龄</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.c1.aggregate([</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$group</span>:&#123;</span><br><span class="line">_id:null,</span><br><span class="line">total_num:&#123;<span class="variable">$sum</span>:1&#125;,</span><br><span class="line">total_avg:&#123;<span class="variable">$avg</span>:<span class="string">&quot;<span class="variable">$age</span>&quot;</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>  示例：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.c1.aggregate([</span><br><span class="line">... &#123;</span><br><span class="line">... <span class="variable">$group</span>:&#123;</span><br><span class="line">... _id:null,</span><br><span class="line">... total_num:&#123;<span class="variable">$sum</span>:1&#125;,</span><br><span class="line">... total_avg:&#123;<span class="variable">$avg</span>:<span class="string">&quot;<span class="variable">$age</span>&quot;</span>&#125;</span><br><span class="line">... &#125;</span><br><span class="line">... &#125;</span><br><span class="line">... ])</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : null, <span class="string">&quot;total_num&quot;</span> : 5, <span class="string">&quot;total_avg&quot;</span> : 7.2 &#125;</span><br></pre></td></tr></table></figure></li><li><p>查询男生、女生人数、按人数升序</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.c1.aggregate([</span><br><span class="line">&#123; <span class="variable">$group</span>: &#123;_id:<span class="string">&quot;<span class="variable">$sex</span>&quot;</span>,rs:&#123;<span class="variable">$sum</span>: 1&#125;&#125;&#125;,</span><br><span class="line">&#123; <span class="variable">$sort</span>:&#123;rs:1&#125; &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>  示例：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.c1.aggregate([</span><br><span class="line">... &#123; <span class="variable">$group</span>: &#123;_id:<span class="string">&quot;<span class="variable">$sex</span>&quot;</span>,rs:&#123;<span class="variable">$sum</span>: 1&#125;&#125;&#125;,</span><br><span class="line">... &#123; <span class="variable">$sort</span>:&#123;rs:1&#125; &#125;</span><br><span class="line">... ])</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : 1, <span class="string">&quot;rs&quot;</span> : 2 &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : 2, <span class="string">&quot;rs&quot;</span> : 3 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="优化索引"><a href="#优化索引" class="headerlink" title="优化索引"></a>优化索引</h2><h3 id="生活中的索引"><a href="#生活中的索引" class="headerlink" title="生活中的索引"></a>生活中的索引</h3><p>公交路牌、字典的索引、办公区域索引</p><h3 id="数据库中的索引"><a href="#数据库中的索引" class="headerlink" title="数据库中的索引"></a>数据库中的索引</h3><ul><li>说明:索引是一种排序好的便于快速查询的数据结构</li><li>作用:帮助数据库高校的查询数据</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zykjofficial/zykjimg/raw/master/img/20200822115826.png"></p><h3 id="索引优缺点"><a href="#索引优缺点" class="headerlink" title="索引优缺点"></a>索引优缺点</h3><ul><li><p>优点</p><blockquote><p>提高数据查询的效率，降低数据库的IO成本<br>通过索引对数据进行排序，降低数据排序的成本，降低CPU的消耗</p></blockquote></li><li><p>缺点</p></li></ul><blockquote><p>占用磁盘空间<br>大量索引影响SQL语句效率，因为每次插入和修改数据都需要更新索引</p></blockquote><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><ul><li><p>创建索引语法: <code>db.集合名.createlndex(待创建索引的列[,额外选项])</code></p></li><li><p>参数:</p><blockquote><p>待创建索引的列:{键:1,….键:-1}<br>说明:1升序-1降序 例如{age:1}表示创建age索引并按照升序的方式存储<br>额外选项: 设置索引的名称或者唯一索引等等</p></blockquote></li><li><p>删除索引语法:</p><blockquote><p>全部删除: <code>db.集合名.droplndexes()</code><br>删除指定: <code>db.集合名.droplndex(索引名)</code></p></blockquote></li><li><p>查看索引语法: <code>db.集合名.getlndexes()</code></p></li></ul><h3 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h3><p>准备∶向数据库中新增十万条数据</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//选择数据库</span><br><span class="line">use test5;</span><br><span class="line">//向数据库中添加数据</span><br><span class="line"><span class="keyword">for</span>(var i=0;i&lt;100000;i++)&#123;</span><br><span class="line">db.c1.insert(&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&quot;aaa&quot;</span>+i,<span class="string">&quot;age&quot;</span>:i&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>创建普通索引：</p><blockquote><p>需求: 给name添加普通索引</p><p>练习1: 给name添加普通索引，命令: <code>db.c1.createIndex(&#123;name:1&#125;)</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.c1.count()</span><br><span class="line">100000</span><br><span class="line">&gt; db.c1.createIndex(&#123;name:1&#125;)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;createdCollectionAutomatically&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;numIndexesBefore&quot;</span> : 1,</span><br><span class="line">        <span class="string">&quot;numIndexesAfter&quot;</span> : 2,</span><br><span class="line">        <span class="string">&quot;ok&quot;</span> : 1</span><br><span class="line">&#125;</span><br><span class="line">&gt; db.c1.getIndexes()</span><br><span class="line">[</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="string">&quot;v&quot;</span> : 2,</span><br><span class="line">                <span class="string">&quot;key&quot;</span> : &#123;</span><br><span class="line">                        <span class="string">&quot;_id&quot;</span> : 1</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;name&quot;</span> : <span class="string">&quot;_id_&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="string">&quot;v&quot;</span> : 2,</span><br><span class="line">                <span class="string">&quot;key&quot;</span> : &#123;</span><br><span class="line">                        <span class="string">&quot;name&quot;</span> : 1</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;name&quot;</span> : <span class="string">&quot;name_1&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>练习2: 删除name索引，命令: <code>db.c1.dropIndex(&#39;name_1&#39;)</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.c1.dropIndex(<span class="string">&#x27;name_1&#x27;</span>)</span><br><span class="line">&#123; <span class="string">&quot;nIndexesWas&quot;</span> : 2, <span class="string">&quot;ok&quot;</span> : 1 &#125;</span><br><span class="line">&gt; db.c1.getIndexes()</span><br><span class="line">[ &#123; <span class="string">&quot;v&quot;</span> : 2, <span class="string">&quot;key&quot;</span> : &#123; <span class="string">&quot;_id&quot;</span> : 1 &#125;, <span class="string">&quot;name&quot;</span> : <span class="string">&quot;_id_&quot;</span> &#125; ]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>练习3: 给name创建索引并起名zykj</p><p>命令: <code>db.c1.createIndex(&#123;name:1&#125;,&#123;name:&quot;zykj&quot;&#125;)</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.c1.createIndex(&#123;name:1&#125;,&#123;name:<span class="string">&quot;zykj&quot;</span>&#125;)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;createdCollectionAutomatically&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;numIndexesBefore&quot;</span> : 1,</span><br><span class="line">        <span class="string">&quot;numIndexesAfter&quot;</span> : 2,</span><br><span class="line">        <span class="string">&quot;ok&quot;</span> : 1</span><br><span class="line">&#125;</span><br><span class="line">&gt; db.c1.getIndexes()</span><br><span class="line">[</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="string">&quot;v&quot;</span> : 2,</span><br><span class="line">                <span class="string">&quot;key&quot;</span> : &#123;</span><br><span class="line">                        <span class="string">&quot;_id&quot;</span> : 1</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;name&quot;</span> : <span class="string">&quot;_id_&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="string">&quot;v&quot;</span> : 2,</span><br><span class="line">                <span class="string">&quot;key&quot;</span> : &#123;</span><br><span class="line">                        <span class="string">&quot;name&quot;</span> : 1</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;name&quot;</span> : <span class="string">&quot;zykj&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>创建符合索引</p><blockquote><p>需求：给name和age添加组合索引</p><p>说明：就是一次给两个字段建立索引</p><p>语法：<code>db.集合名.createIndex(&#123;键1:方式,键2:方式&#125;)</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.c1.createIndex(&#123;name:1,age:1&#125;)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;createdCollectionAutomatically&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;numIndexesBefore&quot;</span> : 2,</span><br><span class="line">        <span class="string">&quot;numIndexesAfter&quot;</span> : 3,</span><br><span class="line">        <span class="string">&quot;ok&quot;</span> : 1</span><br><span class="line">&#125;</span><br><span class="line">&gt; db.c1.getIndexes()</span><br><span class="line">[</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="string">&quot;v&quot;</span> : 2,</span><br><span class="line">                <span class="string">&quot;key&quot;</span> : &#123;</span><br><span class="line">                        <span class="string">&quot;_id&quot;</span> : 1</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;name&quot;</span> : <span class="string">&quot;_id_&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="string">&quot;v&quot;</span> : 2,</span><br><span class="line">                <span class="string">&quot;key&quot;</span> : &#123;</span><br><span class="line">                        <span class="string">&quot;name&quot;</span> : 1</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;name&quot;</span> : <span class="string">&quot;zykj&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="string">&quot;v&quot;</span> : 2,</span><br><span class="line">                <span class="string">&quot;key&quot;</span> : &#123;</span><br><span class="line">                        <span class="string">&quot;name&quot;</span> : 1,</span><br><span class="line">                        <span class="string">&quot;age&quot;</span> : 1</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;name&quot;</span> : <span class="string">&quot;name_1_age_1&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>创建唯一索引</p><blockquote><p>需求：给 name 添加普通索引</p><p>语法：<code>db.集合名.createIndex(待添加索引的列,&#123;unique:列名&#125;)</code></p><p>练习1：删除全部索引，命令: <code>db.c1.dropIndexes()</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.c1.dropIndexes()</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;nIndexesWas&quot;</span> : 3,</span><br><span class="line">        <span class="string">&quot;msg&quot;</span> : <span class="string">&quot;non-_id indexes dropped for collection&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ok&quot;</span> : 1</span><br><span class="line">&#125;</span><br><span class="line">&gt; db.c1.getIndexes()</span><br><span class="line">[ &#123; <span class="string">&quot;v&quot;</span> : 2, <span class="string">&quot;key&quot;</span> : &#123; <span class="string">&quot;_id&quot;</span> : 1 &#125;, <span class="string">&quot;name&quot;</span> : <span class="string">&quot;_id_&quot;</span> &#125; ]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>练习2：设置唯一索引、命令：<code>db.createIndex(&#123;name:1&#125;,&#123;unique:&quot;name&quot;&#125;)</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.c1.createIndex(&#123;name:1&#125;,&#123;unique:<span class="string">&quot;name&quot;</span>&#125;)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;createdCollectionAutomatically&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;numIndexesBefore&quot;</span> : 1,</span><br><span class="line">        <span class="string">&quot;numIndexesAfter&quot;</span> : 2,</span><br><span class="line">        <span class="string">&quot;ok&quot;</span> : 1</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>练习3：测试唯一索引的特性，</p><p>命令： <code>db.c1.insert(&#123;name:&quot;a&quot;&#125;) db.c1.insert(&#123;name:&quot;a&quot;&#125;)</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.c1.insert(&#123;name:<span class="string">&quot;a&quot;</span>&#125;)</span><br><span class="line">WriteResult(&#123; <span class="string">&quot;nInserted&quot;</span> : 1 &#125;)</span><br><span class="line">&gt; db.c1.insert(&#123;name:<span class="string">&quot;a&quot;</span>&#125;)</span><br><span class="line">WriteResult(&#123;</span><br><span class="line">        <span class="string">&quot;nInserted&quot;</span> : 0,</span><br><span class="line">        <span class="string">&quot;writeError&quot;</span> : &#123;</span><br><span class="line">                <span class="string">&quot;code&quot;</span> : 11000,</span><br><span class="line">                <span class="string">&quot;errmsg&quot;</span> : <span class="string">&quot;E11000 duplicate key error collection: test5.c1 index: name_1 dup key: &#123; name: \&quot;a\&quot; &#125;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><h3 id="分析索引-explain"><a href="#分析索引-explain" class="headerlink" title="分析索引(explain)"></a>分析索引(explain)</h3><p>语法: <code>db.集合名.find().explain(&#39;executionStats&#39;)</code><br>说明:</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zykjofficial/zykjimg/raw/master/img/20200822204612.png"></p><ul><li><code>COLLSCAN</code>全表扫描</li><li><code>IXSCAN</code>索引扫描</li><li><code>FETCH</code> 根据索引去检索指定document</li></ul><p>练习</p><blockquote><p>测试: age未添加索引情况<br>语法: <code>db.c1.find(&#123;age:18&#125;).explain(&#39;executionStats&#39;);</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.c1.find(&#123;age:18&#125;).explain(<span class="string">&#x27;executionStats&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;queryPlanner&quot;</span> : &#123;</span><br><span class="line">                <span class="string">&quot;plannerVersion&quot;</span> : 1,</span><br><span class="line">                <span class="string">&quot;namespace&quot;</span> : <span class="string">&quot;test5.c1&quot;</span>,</span><br><span class="line">                <span class="string">&quot;indexFilterSet&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">                <span class="string">&quot;parsedQuery&quot;</span> : &#123;</span><br><span class="line">                        <span class="string">&quot;age&quot;</span> : &#123;</span><br><span class="line">                                <span class="string">&quot;<span class="variable">$eq</span>&quot;</span> : 18</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;winningPlan&quot;</span> : &#123;</span><br><span class="line">                        <span class="string">&quot;stage&quot;</span> : <span class="string">&quot;COLLSCAN&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;filter&quot;</span> : &#123;</span><br><span class="line">                                <span class="string">&quot;age&quot;</span> : &#123;</span><br><span class="line">                                        <span class="string">&quot;<span class="variable">$eq</span>&quot;</span> : 18</span><br><span class="line">                                &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="string">&quot;direction&quot;</span> : <span class="string">&quot;forward&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;rejectedPlans&quot;</span> : [ ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;executionStats&quot;</span> : &#123;</span><br><span class="line">                <span class="string">&quot;executionSuccess&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;nReturned&quot;</span> : 1,</span><br><span class="line">                <span class="string">&quot;executionTimeMillis&quot;</span> : 121,</span><br><span class="line">                <span class="string">&quot;totalKeysExamined&quot;</span> : 0,</span><br><span class="line">                <span class="string">&quot;totalDocsExamined&quot;</span> : 100001,</span><br><span class="line">                <span class="string">&quot;executionStages&quot;</span> : &#123;</span><br><span class="line">                        <span class="string">&quot;stage&quot;</span> : <span class="string">&quot;COLLSCAN&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;filter&quot;</span> : &#123;</span><br><span class="line">                                <span class="string">&quot;age&quot;</span> : &#123;</span><br><span class="line">                                        <span class="string">&quot;<span class="variable">$eq</span>&quot;</span> : 18</span><br><span class="line">                                &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="string">&quot;nReturned&quot;</span> : 1,</span><br><span class="line">                        <span class="string">&quot;executionTimeMillisEstimate&quot;</span> : 7,</span><br><span class="line">                        <span class="string">&quot;works&quot;</span> : 100003,</span><br><span class="line">                        <span class="string">&quot;advanced&quot;</span> : 1,</span><br><span class="line">                        <span class="string">&quot;needTime&quot;</span> : 100001,</span><br><span class="line">                        <span class="string">&quot;needYield&quot;</span> : 0,</span><br><span class="line">                        <span class="string">&quot;saveState&quot;</span> : 100,</span><br><span class="line">                        <span class="string">&quot;restoreState&quot;</span> : 100,</span><br><span class="line">                        <span class="string">&quot;isEOF&quot;</span> : 1,</span><br><span class="line">                        <span class="string">&quot;direction&quot;</span> : <span class="string">&quot;forward&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;docsExamined&quot;</span> : 100001</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;serverInfo&quot;</span> : &#123;</span><br><span class="line">                <span class="string">&quot;host&quot;</span> : <span class="string">&quot;MACHENIKE-SRTYLP00&quot;</span>,</span><br><span class="line">                <span class="string">&quot;port&quot;</span> : 27017,</span><br><span class="line">                <span class="string">&quot;version&quot;</span> : <span class="string">&quot;4.4.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;gitVersion&quot;</span> : <span class="string">&quot;563487e100c4215e2dce98d0af2a6a5a2d67c5cf&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;ok&quot;</span> : 1</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>测试：age 未添加索引情况<br>语法：<code>db.c1.find(&#123;age:18&#125;).explain (&#39;executionStats&#39;);</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zykjofficial/zykjimg/raw/master/img/20200822210512.png"></p><p>测试：age 添加索引情况<br>语法：db.c1.createIndex ({age: 1})<br>继续：<code>db.c1.find(&#123;age:18&#125;).explain(&#39;executionStats&#39;)</code><br><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zykjofficial/zykjimg/raw/master/img/20200822210619.png"></p></blockquote><h3 id="选择规则-如何选择合适的列创建索引"><a href="#选择规则-如何选择合适的列创建索引" class="headerlink" title="选择规则(如何选择合适的列创建索引)"></a>选择规则(如何选择合适的列创建索引)</h3><ul><li>为常做条件、排序、分组、联合操作的字段建立索引</li><li>选择唯—性索引(ps.同值较少如性别字段)</li><li>选择较小的数据列，为较长的字符串使用前缀索引(ps.索引文件更小)</li></ul><h2 id="权限机制"><a href="#权限机制" class="headerlink" title="权限机制"></a>权限机制</h2><h3 id="明确需求-3"><a href="#明确需求-3" class="headerlink" title="明确需求"></a>明确需求</h3><p>发现我们再DOS窗口直接输入命令就可以登录数据库</p><p>这在实战工作中绝对不允许的</p><p>思考:如何解决</p><p>回答: 使用权限机制，开启验证模式即可</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.createUser(&#123; </span><br><span class="line">    <span class="string">&quot;user&quot;</span> : <span class="string">&quot;账号&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pwd&quot;</span>: <span class="string">&quot;密码&quot;</span>,</span><br><span class="line">    <span class="string">&quot;roles&quot;</span> : [&#123; </span><br><span class="line">        role: <span class="string">&quot;角色&quot;</span>, </span><br><span class="line">        db: <span class="string">&quot;所属数据库&quot;</span></span><br><span class="line">    &#125;] </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">角色种类</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">超级用户角色</td><td align="center"><code>root</code></td></tr><tr><td align="center">数据库用户角色</td><td align="center"><code>read</code>、<code>readWrite</code></td></tr><tr><td align="center">数据库管理角色</td><td align="center"><code>dbAdmin</code>、<code>userAdmin</code></td></tr><tr><td align="center">集群管理角色</td><td align="center"><code>clusterAdmin</code>、<code>clusterManager</code>、<code>clusterMonitor</code>、<code>hostManager</code></td></tr><tr><td align="center">备份恢复角色</td><td align="center"><code>backup</code>、<code>restore</code></td></tr><tr><td align="center">所有数据库角色</td><td align="center"><code>readAnyDatabase</code>、<code>readWriteAnyDatabase</code>、<code>userAdminAnyDatabase</code>、<code>dbAdminAnyDatabase</code></td></tr></tbody></table><table><thead><tr><th align="center">角色</th><th align="center">角色说明</th></tr></thead><tbody><tr><td align="center"><code>root</code></td><td align="center">只在 admin 数据库中可用。超级账号，超级权限；</td></tr><tr><td align="center"><code>read</code></td><td align="center">允许用户读取指定数据库</td></tr><tr><td align="center"><code>readWrite</code></td><td align="center">允许用户读写指定数据库</td></tr><tr><td align="center"><code>dbAdmin</code></td><td align="center">允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问 system.profile；</td></tr><tr><td align="center"><code>dbAdminAnyDatabase</code></td><td align="center">只在 admin 数据库中可用，赋予用户所有数据库的 dbAdmin 权限</td></tr><tr><td align="center"><code>clusterAdmin</code></td><td align="center">只在 admin 数据库中可用，赋予用户所有分片和复制集相关函数的管理权限</td></tr><tr><td align="center"><code>userAdmin</code></td><td align="center">允许用户向 system.users 集合写入，可以找指定数据库里创建、删除和管理用户</td></tr><tr><td align="center"><code>userAdminAnyDatabase</code></td><td align="center">只在 admin 数据库中可用，赋予用户所有数据库的 userAdmin 权限</td></tr><tr><td align="center"><code>readAnyDatabase</code></td><td align="center">只在 admin 数据库中可用，赋予用户所有数据库的读权限</td></tr><tr><td align="center"><code>readWriteAnyDatabase</code></td><td align="center">只在 admin 数据库中可用，赋予用户所有数据库的读写权限</td></tr></tbody></table><h3 id="开启验证模式"><a href="#开启验证模式" class="headerlink" title="开启验证模式"></a>开启验证模式</h3><p>开启验证模式概念: 名词，指用户需要输入账号密码才能登陆使用<br>操作步骤</p><ol><li>添加超级管理员</li><li>退出卸载服务</li><li>重新安装需要输入账号密码的服务(注在原安装命令基础上加上–auth即可</li><li>启动服务-&gt;登陆测试</li></ol><h4 id="步骤1∶添加超级管理员"><a href="#步骤1∶添加超级管理员" class="headerlink" title="步骤1∶添加超级管理员"></a>步骤1∶添加超级管理员</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mongo</span><br><span class="line">use admin</span><br><span class="line">db.createUser(&#123;</span><br><span class="line">    <span class="string">&quot;user&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pwd&quot;</span>: <span class="string">&quot;123456&quot;</span>,</span><br><span class="line">    <span class="string">&quot;roles&quot;</span>: [&#123;</span><br><span class="line">        role: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">        db: <span class="string">&quot;admin&quot;</span></span><br><span class="line">&#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>脚下留心:2.x3.x4.x前面版本默认是看不到admin没关系你直接选中即可</p><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.createUser(&#123;</span><br><span class="line">...     <span class="string">&quot;user&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">...     <span class="string">&quot;pwd&quot;</span>: <span class="string">&quot;123456&quot;</span>,</span><br><span class="line">...     <span class="string">&quot;roles&quot;</span>: [&#123;</span><br><span class="line">...         role: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">...         db: <span class="string">&quot;admin&quot;</span></span><br><span class="line">... &#125;]</span><br><span class="line">... &#125;)</span><br><span class="line">Successfully added user: &#123;</span><br><span class="line">        <span class="string">&quot;user&quot;</span> : <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">        <span class="string">&quot;roles&quot;</span> : [</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="string">&quot;role&quot;</span> : <span class="string">&quot;root&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;db&quot;</span> : <span class="string">&quot;admin&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br><span class="line">&gt; show collections</span><br><span class="line">system.users</span><br><span class="line">system.version</span><br><span class="line">&gt; db.system.users.find().pretty()</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;_id&quot;</span> : <span class="string">&quot;admin.admin&quot;</span>,</span><br><span class="line">        <span class="string">&quot;userId&quot;</span> : UUID(<span class="string">&quot;3f00e53b-8c36-4c75-adc3-6c0b78449490&quot;</span>),</span><br><span class="line">        <span class="string">&quot;user&quot;</span> : <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">        <span class="string">&quot;db&quot;</span> : <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">        <span class="string">&quot;credentials&quot;</span> : &#123;</span><br><span class="line">                <span class="string">&quot;SCRAM-SHA-1&quot;</span> : &#123;</span><br><span class="line">                        <span class="string">&quot;iterationCount&quot;</span> : 10000,</span><br><span class="line">                        <span class="string">&quot;salt&quot;</span> : <span class="string">&quot;K8myxTY/yJz7RvZiQWqg/w==&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;storedKey&quot;</span> : <span class="string">&quot;oF2VefhQw26ViWm4GTdKTFcgTTM=&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;serverKey&quot;</span> : <span class="string">&quot;G3AZip1W1v35PXvyGqlBDSocy0I=&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;SCRAM-SHA-256&quot;</span> : &#123;</span><br><span class="line">                        <span class="string">&quot;iterationCount&quot;</span> : 15000,</span><br><span class="line">                        <span class="string">&quot;salt&quot;</span> : <span class="string">&quot;pVUDZjB183V6DeDnVQZ3Dy1fmGbedWQedDLCLA==&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;storedKey&quot;</span> : <span class="string">&quot;wRwieyrn5ZT8TnEzqcqHEGUA2/n6TrPNlcNaAtibO9E=&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;serverKey&quot;</span> : <span class="string">&quot;bJIbWRbis72kyw/WF48F9m58kpHK8rcVZbQL6kehoPQ=&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;roles&quot;</span> : [</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="string">&quot;role&quot;</span> : <span class="string">&quot;root&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;db&quot;</span> : <span class="string">&quot;admin&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="步骤2-退出卸载服务"><a href="#步骤2-退出卸载服务" class="headerlink" title="步骤2: 退出卸载服务"></a>步骤2: 退出卸载服务</h4><p>脚下留心: DOS窗口必须用管理员省份运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin\mongod --remove</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">D:\Programs\MongoDB\bin&gt;mongod --remove</span><br><span class="line">&#123;<span class="string">&quot;t&quot;</span>:&#123;<span class="string">&quot;<span class="variable">$date</span>&quot;</span>:<span class="string">&quot;2020-08-22T21:42:20.619+08:00&quot;</span>&#125;,<span class="string">&quot;s&quot;</span>:<span class="string">&quot;I&quot;</span>,  <span class="string">&quot;c&quot;</span>:<span class="string">&quot;CONTROL&quot;</span>,  <span class="string">&quot;id&quot;</span>:23285,   <span class="string">&quot;ctx&quot;</span>:<span class="string">&quot;main&quot;</span>,<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;Automatically disabling TLS 1.0, to force-enable TLS 1.0 specify --sslDisabledProtocols &#x27;none&#x27;&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;t&quot;</span>:&#123;<span class="string">&quot;<span class="variable">$date</span>&quot;</span>:<span class="string">&quot;2020-08-22T21:42:20.623+08:00&quot;</span>&#125;,<span class="string">&quot;s&quot;</span>:<span class="string">&quot;W&quot;</span>,  <span class="string">&quot;c&quot;</span>:<span class="string">&quot;ASIO&quot;</span>,     <span class="string">&quot;id&quot;</span>:22601,   <span class="string">&quot;ctx&quot;</span>:<span class="string">&quot;main&quot;</span>,<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;No TransportLayer configured during NetworkInterface startup&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;t&quot;</span>:&#123;<span class="string">&quot;<span class="variable">$date</span>&quot;</span>:<span class="string">&quot;2020-08-22T21:42:20.625+08:00&quot;</span>&#125;,<span class="string">&quot;s&quot;</span>:<span class="string">&quot;I&quot;</span>,  <span class="string">&quot;c&quot;</span>:<span class="string">&quot;NETWORK&quot;</span>,  <span class="string">&quot;id&quot;</span>:4648602, <span class="string">&quot;ctx&quot;</span>:<span class="string">&quot;main&quot;</span>,<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;Implicit TCP FastOpen in use.&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;t&quot;</span>:&#123;<span class="string">&quot;<span class="variable">$date</span>&quot;</span>:<span class="string">&quot;2020-08-22T21:42:20.625+08:00&quot;</span>&#125;,<span class="string">&quot;s&quot;</span>:<span class="string">&quot;I&quot;</span>,  <span class="string">&quot;c&quot;</span>:<span class="string">&quot;CONTROL&quot;</span>,  <span class="string">&quot;id&quot;</span>:23307,   <span class="string">&quot;ctx&quot;</span>:<span class="string">&quot;main&quot;</span>,<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;Trying to remove Windows service &#x27;&#123;toUtf8String_serviceName&#125;&#x27;&quot;</span>,<span class="string">&quot;attr&quot;</span>:&#123;<span class="string">&quot;toUtf8String_serviceName&quot;</span>:<span class="string">&quot;MongoDB&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;t&quot;</span>:&#123;<span class="string">&quot;<span class="variable">$date</span>&quot;</span>:<span class="string">&quot;2020-08-22T21:42:20.647+08:00&quot;</span>&#125;,<span class="string">&quot;s&quot;</span>:<span class="string">&quot;I&quot;</span>,  <span class="string">&quot;c&quot;</span>:<span class="string">&quot;CONTROL&quot;</span>,  <span class="string">&quot;id&quot;</span>:23310,   <span class="string">&quot;ctx&quot;</span>:<span class="string">&quot;main&quot;</span>,<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;Service &#123;toUtf8String_serviceName&#125; is currently running, stopping service&quot;</span>,<span class="string">&quot;attr&quot;</span>:&#123;<span class="string">&quot;toUtf8String_serviceName&quot;</span>:<span class="string">&quot;MongoDB&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;t&quot;</span>:&#123;<span class="string">&quot;<span class="variable">$date</span>&quot;</span>:<span class="string">&quot;2020-08-22T21:42:20.647+08:00&quot;</span>&#125;,<span class="string">&quot;s&quot;</span>:<span class="string">&quot;I&quot;</span>,  <span class="string">&quot;c&quot;</span>:<span class="string">&quot;CONTROL&quot;</span>,  <span class="string">&quot;id&quot;</span>:23311,   <span class="string">&quot;ctx&quot;</span>:<span class="string">&quot;main&quot;</span>,<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;Service &#x27;&#123;toUtf8String_serviceName&#125;&#x27; stopped&quot;</span>,<span class="string">&quot;attr&quot;</span>:&#123;<span class="string">&quot;toUtf8String_serviceName&quot;</span>:<span class="string">&quot;MongoDB&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;t&quot;</span>:&#123;<span class="string">&quot;<span class="variable">$date</span>&quot;</span>:<span class="string">&quot;2020-08-22T21:42:20.649+08:00&quot;</span>&#125;,<span class="string">&quot;s&quot;</span>:<span class="string">&quot;I&quot;</span>,  <span class="string">&quot;c&quot;</span>:<span class="string">&quot;CONTROL&quot;</span>,  <span class="string">&quot;id&quot;</span>:23312,   <span class="string">&quot;ctx&quot;</span>:<span class="string">&quot;main&quot;</span>,<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;Service &#x27;&#123;toUtf8String_serviceName&#125;&#x27; removed&quot;</span>,<span class="string">&quot;attr&quot;</span>:&#123;<span class="string">&quot;toUtf8String_serviceName&quot;</span>:<span class="string">&quot;MongoDB&quot;</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">D:\Programs\MongoDB\bin&gt;</span><br></pre></td></tr></table></figure><h4 id="步骤3∶安装需要身份验证的MongoDB服务"><a href="#步骤3∶安装需要身份验证的MongoDB服务" class="headerlink" title="步骤3∶安装需要身份验证的MongoDB服务"></a>步骤3∶安装需要身份验证的MongoDB服务</h4><p>在原安装命令基础上加 <code>--auth</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --install --dbpath ‪D:\Programs\MongoDB\data --logpath ‪D:\Programs\MongoDB\logs\mongoDB2.log --auth</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">D:\Programs\MongoDB\bin&gt;mongod --install --dbpath D:\Programs\MongoDB\data --logpath D:\Programs\MongoDB\logs\mongoDB2.log --auth</span><br><span class="line">D:\Programs\MongoDB\bin&gt;net start mongodb</span><br><span class="line">MongoDB 服务正在启动 ..</span><br><span class="line">MongoDB 服务已经启动成功。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">D:\Programs\MongoDB\bin&gt;</span><br></pre></td></tr></table></figure><h3 id="通过超级管理员账号登录"><a href="#通过超级管理员账号登录" class="headerlink" title="通过超级管理员账号登录"></a>通过超级管理员账号登录</h3><ul><li><p>方法1: <code>mongo服务器IP地址:端口/数据库 -u 用户名 -p 密码</code></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">D:\Programs\MongoDB\bin&gt;mongo localhost:270107/admin -u admin -p 123456</span><br><span class="line">MongoDB shell version v4.4.0</span><br><span class="line">exception: Port number 270107 out of range parsing HostAndPort from <span class="string">&quot;localhost:270107&quot;</span></span><br><span class="line">exiting with code 1</span><br><span class="line"></span><br><span class="line">D:\Programs\MongoDB\bin&gt;mongo localhost:27017/admin -u admin -p 123456</span><br><span class="line">MongoDB shell version v4.4.0</span><br><span class="line">connecting to: mongodb://localhost:27017/admin?compressors=disabled&amp;gssapiServiceName=mongodb</span><br><span class="line">Implicit session: session &#123; <span class="string">&quot;id&quot;</span> : UUID(<span class="string">&quot;05f0c834-a11b-42e7-af35-eafddd17cf95&quot;</span>) &#125;</span><br><span class="line">MongoDB server version: 4.4.0</span><br><span class="line">---</span><br><span class="line">The server generated these startup warnings when booting:</span><br><span class="line">        2020-08-22T21:56:41.558+08:00: This server is bound to localhost. Remote systems will be unable to connect to this server. Start the server with --bind_ip &lt;address&gt; to specify <span class="built_in">which</span> IP addresses it should serve responses from, or with --bind_ip_all to <span class="built_in">bind</span> to all interfaces. If this behavior is desired, start the server with --bind_ip 127.0.0.1 to <span class="built_in">disable</span> this warning</span><br><span class="line">---</span><br><span class="line">---</span><br><span class="line">        Enable MongoDB<span class="string">&#x27;s free cloud-based monitoring service, which will then receive and display</span></span><br><span class="line"><span class="string">        metrics about your deployment (disk utilization, CPU, operation statistics, etc).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        The monitoring data will be available on a MongoDB website with a unique URL accessible to you</span></span><br><span class="line"><span class="string">        and anyone you share the URL with. MongoDB may use this information to make product</span></span><br><span class="line"><span class="string">        improvements and to suggest MongoDB products and deployment options to you.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        To enable free monitoring, run the following command: db.enableFreeMonitoring()</span></span><br><span class="line"><span class="string">        To permanently disable this reminder, run the following command: db.disableFreeMonitoring()</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>方法2: <code>a-先登录，b-选择数据库，c-输入db.auth(用户名,密码)</code></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">D:\Programs\MongoDB\bin&gt;mongo</span><br><span class="line">MongoDB shell version v4.4.0</span><br><span class="line">connecting to: mongodb://127.0.0.1:27017/?compressors=disabled&amp;gssapiServiceName=mongodb</span><br><span class="line">Implicit session: session &#123; <span class="string">&quot;id&quot;</span> : UUID(<span class="string">&quot;a3cc854e-96aa-445e-9824-5514ef382981&quot;</span>) &#125;</span><br><span class="line">MongoDB server version: 4.4.0</span><br><span class="line">&gt; use admin</span><br><span class="line">switched to db admin</span><br><span class="line">&gt; db.auth(<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line">1</span><br><span class="line">&gt; show dbs</span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line"><span class="built_in">local</span>   0.000GB</span><br><span class="line">school  0.000GB</span><br><span class="line">test2   0.000GB</span><br><span class="line">test3   0.000GB</span><br><span class="line">test4   0.000GB</span><br><span class="line">test5   0.004GB</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="练习-3"><a href="#练习-3" class="headerlink" title="练习"></a>练习</h3><ul><li><p>需求</p><blockquote><p>添加用户shop1可以读shop数据库<br>添加用户shop2可以读写shop数据库<br>脚下留心: 必须在对应数据库创建用户</p></blockquote></li></ul><ul><li><p>准备: 创建测试数据和测试用户(注:选择shop仓库创建用户)</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use shop;</span><br><span class="line"><span class="keyword">for</span>(var i=1; i&lt;=10; i++) &#123;</span><br><span class="line">db.goods .insert(&#123; <span class="string">&quot;name&quot;</span> : <span class="string">&quot;goodsName&quot;</span>+i , <span class="string">&quot;price&quot;</span> :i&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>添加用户并设置权限</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 切记</span><br><span class="line">use shop</span><br><span class="line"></span><br><span class="line">// shop1 只能读</span><br><span class="line">db.createUser(&#123; </span><br><span class="line">    <span class="string">&quot;user&quot;</span> : <span class="string">&quot;shop1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pwd&quot;</span>: <span class="string">&quot;shop1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;roles&quot;</span> : [&#123; </span><br><span class="line">        role: <span class="string">&quot;read&quot;</span>, </span><br><span class="line">        db: <span class="string">&quot;shop&quot;</span></span><br><span class="line">    &#125;] </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// shop2 只能写</span><br><span class="line">db.createUser(&#123; </span><br><span class="line">    <span class="string">&quot;user&quot;</span> : <span class="string">&quot;shop2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pwd&quot;</span>: <span class="string">&quot;shop2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;roles&quot;</span> : [&#123; </span><br><span class="line">        role: <span class="string">&quot;readWrite&quot;</span>, </span><br><span class="line">        db: <span class="string">&quot;shop&quot;</span></span><br><span class="line">    &#125;] </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>验证</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mongo localhost:270107/shop -u shop1 -p shop1</span><br><span class="line"></span><br><span class="line">mongo localhost:270107/shop -u shop2 -p shop2</span><br></pre></td></tr></table></figure></li></ul><h2 id="备份还原"><a href="#备份还原" class="headerlink" title="备份还原"></a>备份还原</h2><h3 id="明确需求-4"><a href="#明确需求-4" class="headerlink" title="明确需求"></a>明确需求</h3><p>在实战工作中一定要做好数据库备份工作<br>否则万一数据丢失<br>带来的影响是巨大的</p><p>不知道为啥下面的命令我执行不了。。。</p><h3 id="备份数据库mongodump"><a href="#备份数据库mongodump" class="headerlink" title="备份数据库mongodump"></a>备份数据库mongodump</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodump -h -port -u -p -d -o</span><br></pre></td></tr></table></figure><ul><li><code>-h</code> 表示服务器 IP 地址（不写默认本机）</li><li><code>-port</code> 表示端口（默认 27017）</li><li><code>-u</code> 表示账号</li><li><code>-p</code> 表示密码</li><li><code>-d</code> 表示数据库（数据库不写则导出全部）</li><li><code>-o</code> 备份到指定目录下</li></ul><hr/><ul><li>练习(备份所有数据): <code>mongodump -u admin -p 123456 -o ‪D:\Programs\MongoDB\bak</code></li></ul><ul><li>练习(备份指定数据): <code>mongodump -u shop2 -p shop2 -d shop -o ‪D:\Programs\MongoDB\bak</code></li></ul><h3 id="还原数据库mongorestore"><a href="#还原数据库mongorestore" class="headerlink" title="还原数据库mongorestore"></a>还原数据库mongorestore</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongorestore -h -port -u -p --drop -d</span><br></pre></td></tr></table></figure><ul><li><code>-h</code> 表示服务器 IP 地址（不写默认本机）</li><li><code>-port</code> 表示端口（默认 27017）</li><li><code>-u</code> 表示账号</li><li><code>-p</code> 表示密码</li><li><code>-d</code> 表示数据库（数据库不写则还原所有）</li><li><code>–drop</code> 表示先删除在导出，不写则覆盖</li></ul><ol><li><p>还原所有数据</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongorestore -u admin -p 123456 --drop D:\Programs\MongoDB\back</span><br></pre></td></tr></table></figure></li><li><p>备份指定数据库</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongorestore -u shop2 -p shop2 -d shop --drop D:\Programs\MongoDB\back1\shop</span><br></pre></td></tr></table></figure></li></ol><h2 id="实战可视化管理工具"><a href="#实战可视化管理工具" class="headerlink" title="实战可视化管理工具"></a>实战可视化管理工具</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>adminMongo WEB/PC端口网页管理 <a href="https://adminmongo.markmoffat.com/">https://adminmongo.markmoffat.com/</a><br>Robo 3T *    客户端软件    <a href="https://robomongo.org/download/">https://robomongo.org/download/</a><br>MongoVUE    客户端软件</p><p>Navicat 客户端软件 (同样推荐使用)</p><h3 id="安装Robo-3T"><a href="#安装Robo-3T" class="headerlink" title="安装Robo 3T"></a>安装Robo 3T</h3><p>安装步骤省略</p>]]></content>
      
      
      <categories>
          
          <category> 数据库学习 </category>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Github Actions 自动部署博客</title>
      <link href="/posts/ea8e8e59/"/>
      <url>/posts/ea8e8e59/</url>
      
        <content type="html"><![CDATA[<p>当博客文章的越来越多时，使用<code>hexo g</code>生成需要的时间也越来越长。电脑性能差的话要更长时间、我们等的也要更久。此时我们就需要一个能够只推送hexo源文件、能够自动将Hexo源文件编译成静态文件来达到自动部署。<psw>听不懂？直接看教程吧！</psw></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://github.com/features/actions">GitHub Actions</a> 是 GitHub 的持续集成服务，于2018年10月<a href="https://github.blog/changelog/2018-10-16-github-actions-limited-beta/">推出</a>。</p><p><img src= "/img/loading.gif" data-lazy-src="https://github.githubassets.com/images/modules/site/features/actions-pr-checks-final.png"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>我们需要一个<code>私有仓库</code>用来存放Hexo的源文件、用来执行Action</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zykjofficial/zykjimg/raw/master/img/20200820221315.png"></p><h3 id="生成Token"><a href="#生成Token" class="headerlink" title="生成Token"></a>生成Token</h3><p>为确保有足够的访问权限、我们需要创建token</p><p>因为我需要同时部署到 Github 、Coding和Gitee上、就需要生成三个token</p><ul><li><p>Github</p><p>  进入<a href="https://github.com/">Github</a> 、点击<code>头像 -&gt; Settings</code></p><p>  <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zykjofficial/zykjimg/raw/master/img/20200820201734.png"></p><p>  找到 <code>Developer settings</code></p><p>  <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zykjofficial/zykjimg/raw/master/img/20200820201806.png"></p><p>  点击 <code>Personal access tokens</code></p><p>  <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zykjofficial/zykjimg/raw/master/img/20200820201828.png"></p><p>  点击 <code>Generate new token</code></p><p>  <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zykjofficial/zykjimg/raw/master/img/20200820201911.png"></p><p>  名字随便取、一定要勾选<code>repo</code></p><p>  <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zykjofficial/zykjimg/raw/master/img/20200820201933.png"></p><p>  <code>请复制生成token</code>、因为只会生成一次、如果忘记了、记得重新生成</p><p>  <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zykjofficial/zykjimg/raw/master/img/20200820202010.png"></p></li><li><p>Coding</p><ol><li><p>进入<a href="https://coding.net/">Coding</a> 、 点击<code>头像 -&gt; 个人账户设置</code></p></li><li><p>点击<code>访问令牌</code></p><p> 新建令牌</p><p> <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zykjofficial/zykjimg/raw/master/img/20200820223816.png"></p><p> 名字随便取、勾选<code>project:depot 读/写 完整的仓库控制权限</code></p><p> <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zykjofficial/zykjimg/raw/master/img/20200820223928.png"></p><p> <code>请复制好生成的token和令牌用户名</code> </p><p> ps: </p><p> Coding的仓库地址在如下图中复制</p><p> <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zykjofficial/zykjimg/raw/master/img/20200820230423.png"></p></li></ol></li><li><p>Gitee</p><p>  进入<a href="https://gitee.com/">Gitee</a> 、 点击<code>头像 -&gt; 设置</code></p><p>  点击<code>安全设置 -&gt; 私人令牌</code></p><p>  <code>生成私人令牌</code> 、勾选<code>projects 查看、创建、更新你的项目</code></p><p>  <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zykjofficial/zykjimg/raw/master/img/20200820225121.png"></p><p>  <code>请复制好生成的token</code></p></li></ul><h3 id="编辑-config-yml"><a href="#编辑-config-yml" class="headerlink" title="编辑 _config.yml"></a>编辑 _config.yml</h3><p>编辑根目录下的<code> _config.yml</code> 找到 编辑</p><p>针对Github、Coding和Gitee、填入相应的token</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">    <span class="attr">gitHub:</span> <span class="string">https://你的Github用户名:生成的Token@github.com/你的Github用户名/仓库名.git</span></span><br><span class="line">    <span class="attr">gitee:</span> <span class="string">https://你的Gitee用户名:生成的Token@gitee.com/你的Gitee用户名/仓库名</span></span><br><span class="line">    <span class="attr">coding:</span> <span class="string">https://令牌用户名:生成的Token@e.coding.net/你的Coding用户名/仓库名.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zykjofficial/zykjimg/raw/master/img/20200820225502.png"></p><h3 id="配置Github-Action"><a href="#配置Github-Action" class="headerlink" title="配置Github Action"></a>配置Github Action</h3><p>在博客根目录新建 <code>.github</code> 文件夹、然后在里面再新建一个 <code>workflows</code> 文件夹</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zykjofficial/zykjimg/raw/master/img/20200820230639.png"></p><p>在里面新建一个 <code>yml</code> 格式的文件，<code>名字随便起</code></p><p>里面写 Github Actions 的配置内容：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">自动部署</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span> </span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">release:</span></span><br><span class="line">    <span class="attr">types:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">published</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">检查分支</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">ref:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Node</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">&quot;12.x&quot;</span></span><br><span class="line">        </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Hexo</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">export</span> <span class="string">TZ=&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">缓存</span> <span class="string">Hexo</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">cache</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">$&#123;&#123;runner.OS&#125;&#125;-$&#123;&#123;hashFiles(&#x27;**/package-lock.json&#x27;)&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装依赖</span></span><br><span class="line">      <span class="attr">if:</span> <span class="string">steps.cache.outputs.cache-hit</span> <span class="type">!=</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span> <span class="string">--save</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">生成静态文件</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">        <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line">    </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">部署</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">&quot;你的用户名&quot;</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">&quot;你的邮箱&quot;</span></span><br><span class="line">        <span class="string">hexo</span> <span class="string">deploy</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这下面是我的配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">自动部署</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span> </span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">release:</span></span><br><span class="line">    <span class="attr">types:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">published</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">检查分支</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">ref:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Node</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">&quot;12.x&quot;</span></span><br><span class="line">        </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Hexo</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">export</span> <span class="string">TZ=&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">缓存</span> <span class="string">Hexo</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">cache</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">$&#123;&#123;runner.OS&#125;&#125;-$&#123;&#123;hashFiles(&#x27;**/package-lock.json&#x27;)&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装依赖</span></span><br><span class="line">      <span class="attr">if:</span> <span class="string">steps.cache.outputs.cache-hit</span> <span class="type">!=</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span> <span class="string">gulp-cli</span> <span class="string">-g</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span> <span class="string">--save</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">生成静态文件</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">        <span class="string">hexo</span> <span class="string">bangumi</span> <span class="string">-u</span></span><br><span class="line">        <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line">        <span class="string">gulp</span></span><br><span class="line">    </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">部署</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">&quot;我的用户名&quot;</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">&quot;我的邮箱&quot;</span></span><br><span class="line">        <span class="string">hexo</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">同步到</span> <span class="string">Gitee</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">wearerequired/git-mirror-action@master</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">          <span class="comment"># 注意在 Settings-&gt;Secrets 配置 GITEE_RSA_PRIVATE_KEY</span></span><br><span class="line">          <span class="attr">SSH_PRIVATE_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITEE_RSA_PRIVATE_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># 注意替换为你的 GitHub 源仓库地址</span></span><br><span class="line">          <span class="attr">source-repo:</span> <span class="string">&quot;git@github.com:xxx/xxx.github.io.git&quot;</span></span><br><span class="line">          <span class="comment"># 注意替换为你的 Gitee 目标仓库地址</span></span><br><span class="line">          <span class="attr">destination-repo:</span> <span class="string">&quot;git@gitee.com:xxx/xxx.git&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">构建</span> <span class="string">Gitee</span> <span class="string">Pages</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">yanglbme/gitee-pages-action@master</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># 注意替换为你的 Gitee 用户名</span></span><br><span class="line">          <span class="attr">gitee-username:</span> <span class="string">xxx</span></span><br><span class="line">          <span class="comment"># 注意在 Settings-&gt;Secrets 配置 GITEE_PASSWORD</span></span><br><span class="line">          <span class="attr">gitee-password:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITEE_PASSWORD</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="comment"># 注意替换为你的 Gitee 仓库</span></span><br><span class="line">          <span class="attr">gitee-repo:</span> <span class="string">xxx/xxx</span></span><br></pre></td></tr></table></figure><h3 id="推送仓库"><a href="#推送仓库" class="headerlink" title="推送仓库"></a>推送仓库</h3><p><code>先把主题目录下 .git 文件夹（隐藏文件夹）删掉，不然会报 Warning、为啥呢？这是大佬说的</code></p><p>在博客根目录下创建<code>.gitignore</code>文件、用来忽略上传文件</p><p>如 <code>node_modules .deploy_git public/</code>  这些大文件可以不用上传</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules&#x2F;</span><br><span class="line">public&#x2F;</span><br><span class="line">.deploy_git*&#x2F;</span><br><span class="line">.idea</span><br></pre></td></tr></table></figure><p>最后在博客根目录下执行(都是git命令啦、不会去学习一下) </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;first commit&quot;</span></span><br><span class="line">git remote add origin 你的仓库地址.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>提交完成之后、进入你的私有仓库、点击Action</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zykjofficial/zykjimg/raw/master/img/20200820231652.png"></p><p>进入之后点击提交信息再次进入查看</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zykjofficial/zykjimg/raw/master/img/20200820231758.png"></p><p>点击deploy就可以查看状态了</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zykjofficial/zykjimg/raw/master/img/20200820231911.png"></p><p>都打上了绿勾就说明部署成功了</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zykjofficial/zykjimg/raw/master/img/20200820232014.png"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>到这里、你已经成功完成了自动部署、是不是很简单呢！<psw>虽然我也部署了4次才成功的、都是因为coding仓库的地址填写错误、呜呜呜</psw></p><p>参考：</p><ul><li><a href="https://flexiston.com/posts/43359.html">Vercel+Github Actions自动部署Hexo博客</a></li><li><a href="https://jerryc.me/posts/74006f42/">通过travis-ci或者GitHub Actions自动化部署GitHub Pages和Coding Pages</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo教程 </category>
          
          <category> 部署教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 自动部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flex 与 Grid 学习</title>
      <link href="/posts/27858d2d/"/>
      <url>/posts/27858d2d/</url>
      
        <content type="html"><![CDATA[<h2 id="Flex学习"><a href="#Flex学习" class="headerlink" title="Flex学习"></a>Flex学习</h2><blockquote><p>Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zykjofficial/zykjimg/raw/master/img/20200814110448.png"></p><p>Flex容器<code>默认</code>存在的两条轴</p><ul><li><code>水平主轴(main axis) </code></li><li><code>垂直的交叉轴(cross axis)</code></li></ul><p>Flex容器中的<code>每个单元块</code>被称之为 <code>flex item</code>，每个项目占据的<code>主轴</code>的空间为 <code>(main size)</code>, 占据的<code>交叉轴</code>的空间为 <code>(cross size)</code>。</p><p>当然、水平和垂直方法的轴也可以互换。</p><h3 id="Flex容器"><a href="#Flex容器" class="headerlink" title="Flex容器"></a>Flex容器</h3><p>我们需要指定一个容器(任何一个容器都可以)作为为 flex 布局</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    display: flex | inline-flex;//可以有两种取值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字面意思: 块级元素和行内元素指定。</p><p>注意:</p><p><code>当时设置 flex 布局之后，子元素的 float、clear、vertical-align 的属性将会失效。</code></p><h4 id="容器上的属性"><a href="#容器上的属性" class="headerlink" title="容器上的属性"></a>容器上的属性</h4><p>以下六种属性设置在容器上：</p><ol><li><code>flex-direction</code></li><li><code>flex-wrap</code></li><li><code>flex-flow</code></li><li><code>justify-content</code></li><li><code>align-items</code></li><li><code>align-content</code></li></ol><p>一个简单的Html:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span>&#123;</span></span><br><span class="line">        height: 200px;</span><br><span class="line">        width: 200px;</span><br><span class="line">        border: 1px solid red;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">        display: flex;</span><br><span class="line">        flex-direction: row;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box</span> <span class="selector-tag">div</span>&#123;</span></span><br><span class="line">        height: 50px;</span><br><span class="line">        width: 50px;</span><br><span class="line">        background-color: red;</span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">        text-align: center;</span><br><span class="line">        line-height: 50px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h5><blockquote><p>用来控制子项整体布局方向,是从左往右还是从右往左,是从上往,下还是从下往上。</p></blockquote><table><thead><tr><th>取值</th><th>含义</th></tr></thead><tbody><tr><td><code>row</code></td><td><code>默认值</code>，显示为行。方向为当前文档水平流方向，默认情况下是从左往右。</td></tr><tr><td><code>row-reverse</code></td><td>显示为行。但方向和row属性值是反的</td></tr><tr><td><code>column</code></td><td>显示为列。</td></tr><tr><td><code>column-reverse</code></td><td>显示为列。但方向和column属性值是反的</td></tr></tbody></table><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zykjofficial/zykjimg/raw/master/img/20200814160110.png" alt="flex-direction"></p><h5 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h5><blockquote><p>用来控制子项整体单行显示还是换行显示。</p></blockquote><table><thead><tr><th>取值</th><th>含义</th></tr></thead><tbody><tr><td><code>nowrap</code></td><td><code>默认值</code>，表示单行显示，不换行。</td></tr><tr><td><code>wrap</code></td><td>宽度不足换行显示</td></tr><tr><td><code>wrap-reverse</code></td><td>宽度不足换行显示，但是是从下往上开始，也就是原本换行在下面的子项现在跑到上面。</td></tr></tbody></table><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zykjofficial/zykjimg/raw/master/img/20200814173601.png" alt="flex-wrap"></p><h5 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h5><blockquote><p><code>flex-flow</code>属性是<code>flex- direction</code>和<code>flex wrap</code>的缩写,表示flex布局的flow流动特性。<br>第一个值表示方向,第二个值表示换行,中间用空格隔开。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">flex-flow</span>: &lt;flex-direction&gt;  &lt;flex-wrap&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认值为: <code>row nowrap</code>、作用不大、分开来写更好</p><h5 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h5><blockquote><p>决定了主轴方向上子项的对齐和分布方式。</p></blockquote><table><thead><tr><th>取值</th><th>含义</th></tr></thead><tbody><tr><td><code>flex-start</code></td><td>默认值，表现为起始位置对齐。</td></tr><tr><td><code>flex-end</code></td><td>表现为结束位置对齐。</td></tr><tr><td><code>center</code></td><td>表现为居中对齐。</td></tr><tr><td><code>space-between</code></td><td>表现为两端对齐。between是中间的意思，意思是多余的空白间距只在元素中间区域分配。</td></tr><tr><td><code>space-around</code></td><td>around是环绕的意思，意思是每个flex子项两侧都环绕互不干扰的等宽的空白间距，最终视觉上边缘两侧的空白只有中间空白宽度一半。</td></tr><tr><td><code>space-evenly</code></td><td>evenly是匀称、平等的意思。也就是视觉上，每个flex子项两侧空白间距完全相等。</td></tr></tbody></table><p>建立在主轴为水平方向时测试，即 <code>flex-direction: row</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zykjofficial/zykjimg/raw/master/img/20200814201911.png" alt="justify-content"></p><h5 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h5><blockquote><p>align-items中的items指的就是flex子项们,因此align-items指的就是flex子项们相对于flex容器在交叉轴方向上的对齐方式。</p></blockquote><table><thead><tr><th>取值</th><th>含义</th></tr></thead><tbody><tr><td><code>stretch</code></td><td><code>默认值</code>，flex子项拉伸。</td></tr><tr><td><code>flex-start</code></td><td>表现为容器顶部对齐。</td></tr><tr><td><code>flex-end</code></td><td>表现为容器底部对齐。</td></tr><tr><td><code>center</code></td><td>表现为垂直居中对齐。</td></tr><tr><td><code>baseline</code></td><td>与顶部的基线对齐</td></tr></tbody></table><p>简单的Html代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line">        height: 200px;</span><br><span class="line">        width: 200px;</span><br><span class="line">        border: 1px solid red;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: space-around;</span><br><span class="line">        align-items: flex-start;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.box1</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/* height: 50px; */</span></span></span><br><span class="line">        width: 50px;</span><br><span class="line">        background-color: red;</span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">        text-align: center;</span><br><span class="line">        line-height: 50px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>这里是测试文字<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>测试文字<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>这里是<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zykjofficial/zykjimg/raw/master/img/20200814210002.png" alt="align-items"></p><h5 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h5><blockquote><p>align- content可以看成和justify-content是相似且对立的属性,如果所有flex子项只有一行,则align-content属性是没有任何效果的。</p><p>有点类似align-items、但是针对多行</p></blockquote><table><thead><tr><th>取值</th><th>含义</th></tr></thead><tbody><tr><td><code>stretch</code></td><td>默认值。每一行flex 子元素都等比例拉伸。例如，如果共两行flex子元素，则每-行拉伸高度是50%。</td></tr><tr><td><code>flex-start</code></td><td>表现为起始位置对齐。</td></tr><tr><td><code>flex-end</code></td><td>表现为结束位置对齐。</td></tr><tr><td><code>center</code></td><td>表现为居中对齐。</td></tr><tr><td><code>space-between</code></td><td>表现为两端对齐。</td></tr><tr><td><code>space-around</code></td><td>每一行元素上下都享有独立不重叠的空白空间。</td></tr><tr><td><code>space-evenly</code></td><td>每一行元素都完全上下等分。</td></tr></tbody></table><h4 id="子项上的属性"><a href="#子项上的属性" class="headerlink" title="子项上的属性"></a>子项上的属性</h4><p>以下六种属性设置在 item 项目上</p><ol><li><code>order</code></li><li><code>flex-basis</code></li><li><code>flex-grow</code></li><li><code>flex-shrink</code></li><li><code>flex</code></li><li><code>align-self</code></li></ol><table><thead><tr><th>取值</th><th>含义</th></tr></thead><tbody><tr><td><code>order</code></td><td>可以通过设置order改变某一个flex子项的排序位置。所有flex子项的默认order属性值是0。</td></tr><tr><td><code>flex-grow</code></td><td>属性中的grow是扩展的意思，扩展的就是flex子项所占据的宽度，扩展所侵占的空间就是除去元素外的剩余的空白间隙。默认值为0。</td></tr><tr><td><code>flex-shrink</code></td><td>属性中的shrink是”收缩”的意思，flex-shrink主 要处理当flex容器空间不足时候，单个元素的收缩比例。默认值是1。</td></tr><tr><td><code>flex-basis</code></td><td>flex-basis定义了在分配剩余空间之前元素的默认大小。</td></tr><tr><td><code>flex</code></td><td>flex属性是flex-grow, flex- shrink和flex-basis的缩写。flex 的默认值是 0 1 auto。<code> flex:1 就相当于 flex-grow: 1</code></td></tr><tr><td><code>align-self</code></td><td>align-self指控制单独某一个flex子项的垂直对齐方式。</td></tr></tbody></table><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zykjofficial/zykjimg/raw/master/img/20200814232201.png"></p><h2 id="Grid学习"><a href="#Grid学习" class="headerlink" title="Grid学习"></a>Grid学习</h2><blockquote><p>Gird是css中最强大的布局系统，应用于二维布局，可以同时处理行和列，可以通过将网格css规则应用于父元素（网格容器）和该元素的子元素（网格子项）来使用网格布局。</p></blockquote><p>Grid布局是一个二维的布局方法,纵横两个方向总是同时存在。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid | inlie-grid; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Grid容器上的属性"><a href="#Grid容器上的属性" class="headerlink" title="Grid容器上的属性"></a>Grid容器上的属性</h4><h5 id="grid-template-columns和grid-template-rows"><a href="#grid-template-columns和grid-template-rows" class="headerlink" title="grid-template-columns和grid-template-rows"></a>grid-template-columns和grid-template-rows</h5><p>对网格进行横纵划分,形成二维布局。单位可以是<code>像素</code>,<code>百分比</code>,<code>自适应</code>以及 <a href="https://www.html.cn/book/css/values/layout-specific/fr.htm"><code>fr单位(网格剩余空间比例单位)</code></a>。<br>有时候,我们网格的划分是很规律的,如果需要添加多个横纵网格时,可以利用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/repeat"><code>repeat()语法</code></a> 进行简化操作。</p><p>一个三行四列模型:</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zykjofficial/zykjimg/raw/master/img/20200815111801.png"></p><h5 id="grid-template-areas和grid-template"><a href="#grid-template-areas和grid-template" class="headerlink" title="grid-template-areas和grid-template"></a>grid-template-areas和grid-template</h5><p>area是区域的意思, <code>grid-template-areas</code>就是给我们]的网格划分区域的。此时grid子项只要使用<code>grid-area</code>属性指定其隶属于那个区。<br><code>grid-template</code>是<code>grid- template-rows</code> , <code>grid-template-columns</code>和<code>grid-template-areas</code>属性的缩写。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zykjofficial/zykjimg/raw/master/img/20200815173502.png"></p><h5 id="grid-column-gap和grid-row-gap"><a href="#grid-column-gap和grid-row-gap" class="headerlink" title="grid-column-gap和grid-row-gap"></a>grid-column-gap和grid-row-gap</h5><p><code>grid-column-gap</code>和<code>grid-row-gap</code>属性用来定义网格中网格间隙的尺寸。<br>CSS <code>grid-gap</code>属性是<code>grid-row-gap</code>和<code>grid-column-gap</code>属性的缩写。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zykjofficial/zykjimg/raw/master/img/20200815174903.png"></p><h5 id="justify-items和align-items"><a href="#justify-items和align-items" class="headerlink" title="justify-items和align-items"></a>justify-items和align-items</h5><p>设置单元格内容的位置</p><p><code>justify-items</code>指定了网格元素的<code>水平呈现方式</code> ,是水平拉伸显示 ,还是左中右对齐。<code>align-items</code>指定了网格元素的<code>垂直呈现方式</code>，是垂直拉伸显示，还是上中下对齐。<br><code>place-items</code>可以让<code>align-items</code>和<code>justify-items</code>属性写在单个声明中。<code>place-items: align-content  justify-content</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">        width: 300px;</span><br><span class="line">        height: 300px;</span><br><span class="line">        border: 1px gray solid;</span><br><span class="line">        display: grid;</span><br><span class="line">        grid-template-rows: repeat(3,1fr);</span><br><span class="line">        grid-template-columns: repeat(3,1fr); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line">        border: 1px gray solid;</span><br><span class="line">        background: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>取值</th><th>含义</th></tr></thead><tbody><tr><td><code>stretch</code></td><td><code>默认值</code>，拉伸。表现为水平或垂直填充。</td></tr><tr><td><code>start</code></td><td>表现为容器左侧或顶部对齐。</td></tr><tr><td><code>end</code></td><td>表现为容器右侧或底部对齐。</td></tr><tr><td><code>center</code></td><td>表现为水平或垂直居中对齐。</td></tr></tbody></table><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zykjofficial/zykjimg/raw/master/img/20200815215802.png"></p><h5 id="justify-content和allign-content"><a href="#justify-content和allign-content" class="headerlink" title="justify-content和allign-content"></a>justify-content和allign-content</h5><p>整个内容区域在容器里面的位置</p><p><code>justify-content</code>指定了网格元素的<code>水平分布方式</code>。<code>align-content</code>指定了网格元素的<code>垂直分布方式</code>。<code>place-content</code>可以让<code>align-content</code>和<code>justify-content</code>属性写在一个CSS声明中。<code>place-conent: justify-content  align-content</code></p><table><thead><tr><th>取值</th><th>含义</th></tr></thead><tbody><tr><td><code>stretch</code></td><td><code>默认值</code>，拉伸。表现为水平或垂直填充。</td></tr><tr><td><code>start</code></td><td>表现为容器左侧或顶部对齐。</td></tr><tr><td><code>end</code></td><td>表现为容器右侧或底部对齐。</td></tr><tr><td><code>center</code></td><td>表现为水平或垂直居中对齐。</td></tr><tr><td><code>space-between</code></td><td>表现为两端对齐。</td></tr><tr><td><code>space-around</code></td><td>享有独立不重叠的空白空间。</td></tr><tr><td><code>space-evenly</code></td><td>平均分配空白空间</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">        width: 300px;</span><br><span class="line">        height: 300px;</span><br><span class="line">        border: 1px gray solid;</span><br><span class="line">        display: grid;</span><br><span class="line">        grid-template-rows: repeat(3,auto);</span><br><span class="line">        grid-template-columns: repeat(3,auto); </span><br><span class="line">        justify-content: center;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line">        border: 1px gray solid;</span><br><span class="line">        background: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="子项上的属性-1"><a href="#子项上的属性-1" class="headerlink" title="子项上的属性"></a>子项上的属性</h4><table><thead><tr><th>取值</th><th>含义</th></tr></thead><tbody><tr><td><code>grid-column-start</code></td><td>水平方向上占据的起始位置。</td></tr><tr><td><code>grid-column-end</code></td><td>水平方向上占据的结束位置。(span属性) <code>如：grid-colum-end: span 2; 表示从起始位置开始占用2个位置 </code></td></tr><tr><td><code>grid-row-start</code></td><td>垂直方向上占据的起始位置。</td></tr><tr><td><code>grid-row-end</code></td><td>垂直方向上占据的结束位置。( span属性)</td></tr><tr><td><code>grid-column</code></td><td><code>grid-column-start</code> + <code>grid-column-end</code>的缩写、<code>中间需要 /</code>。 如 ：<code>grid-column:  grid-column-start  /  grid-column-end</code></td></tr><tr><td><code>grid-row</code></td><td><code>grid-row-start</code> + <code>grid-row-end</code>的缩写。同上书写方式</td></tr><tr><td><code>grid-area</code></td><td>表示当前网格所占用的区域，名字和位置两种表示方法。<code>如： grid-area:3/2/4/4;</code> <code>/*第一个值是水平的起始位置，第二个值是垂直的起始位置，三个值是水平的结束位置，第四个值是垂直的结束位置*/</code></td></tr><tr><td><code>justify-self</code></td><td>单个网格元素的水平对齐方式。</td></tr><tr><td><code>align-self</code></td><td>单个网格元素的垂直对齐方式。</td></tr><tr><td><code>place-self</code></td><td><code>align-self</code>和<code>justify-self</code>的缩写。<code>place-self:  align-self justify-self</code></td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">        width: 300px;</span><br><span class="line">        height: 300px;</span><br><span class="line">        border: 1px gray solid;</span><br><span class="line">        display: grid;</span><br><span class="line">        grid-template-rows: repeat(3,1fr);</span><br><span class="line">        grid-template-columns: repeat(3,1fr); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line">        border: 1px gray solid;</span><br><span class="line">        background: red;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zykjofficial/zykjimg/raw/master/img/20200816104902.png"></p><p>参考:</p><ul><li><a href="https://zhuanlan.zhihu.com/p/25303493">30 分钟学会 Flex 布局</a></li><li><a href="https://www.cnblogs.com/cythia/p/10894598.html">手把手教你grid布局</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web教程 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nuxt.js 学习</title>
      <link href="/posts/e400c46/"/>
      <url>/posts/e400c46/</url>
      
        <content type="html"><![CDATA[<h2 id="Nuxt-js-学习"><a href="#Nuxt-js-学习" class="headerlink" title="Nuxt.js 学习"></a>Nuxt.js 学习</h2><p>在学习Nuxt.js之前、我们要知道什么是<code>客户端渲染(SPA)</code>和<code>服务端渲染(SSR)</code></p><h3 id="客户端渲染和服务端渲染"><a href="#客户端渲染和服务端渲染" class="headerlink" title="客户端渲染和服务端渲染"></a>客户端渲染和服务端渲染</h3><ul><li><p>客户端渲染 (SPA:single page application): 用户通过地址栏或者链接标签进入一个新的链接后，向服务器<code>发出请求</code>，<code>服务器直接根据链接返回一个html页面(没有数据)</code>，页面中的<code>数据渲染则是由页面中的ajax完成</code>，<code>ajax再次向服务器发出请求数据的请求</code>，然后<code>对页面进行渲染</code></p><p><code>优点</code>:</p><ol><li><p>前后端分离，开发效率高。</p></li><li><p>用户体验更好，我们将网站做成SPA（单页面应用）或者部分内容做成SPA，当用户点击时，不会形成频繁的跳转。</p></li></ol><p><code>缺点:</code></p><ol><li><p>前端响应速度慢，特别是首屏，这样用户是受不了的。</p></li><li><p>不利于SEO优化，因为爬虫不认识SPA，所以它只是记录了一个页面。</p></li></ol></li><li><p>服务端渲染 (SSR:server side rendering): 用户通过地址栏或者链接进入一个服务器所监听的服务器的路径，服务器则根据<code>该路径返回一个页面(有数据)</code>，页面的数据渲染在服务器内由服务器完成，<code>客户端只需要发送一次请求</code>，<code>不用ajax</code></p><p><code>优点:</code></p><ol><li>尽量不占用前端的资源，前端这块耗时少，速度快。</li><li>有利于SEO优化，因为在后端有完整的html页面，所以爬虫更容易爬取信息。</li></ol><p><code>缺点:</code></p><ol><li>不利于前后端分离，开发的效率降低了。</li><li>对html的解析，对前端来说加快了速度，但是加大了服务器的压力。</li></ol></li></ul><h3 id="Vue-服务端渲染"><a href="#Vue-服务端渲染" class="headerlink" title="Vue 服务端渲染"></a>Vue 服务端渲染</h3><p>官网: <a href="https://ssr.vuejs.org/zh/">https://ssr.vuejs.org/zh/</a></p><p>通过<code>npm init</code>初始化一个项目</p><p><code>npm安装</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue vue-server-renderer --save</span><br></pre></td></tr></table></figure><h4 id="渲染一个-Vue-实例"><a href="#渲染一个-Vue-实例" class="headerlink" title="渲染一个 Vue 实例"></a>渲染一个 Vue 实例</h4><p>index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第 1 步：创建一个 Vue 实例</span></span><br><span class="line"><span class="keyword">const</span> Vue = <span class="built_in">require</span>(<span class="string">&#x27;vue&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    template: <span class="string">`&lt;div&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;`</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        message: <span class="string">&quot;Hello world&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第 2 步：创建一个 renderer</span></span><br><span class="line"><span class="keyword">const</span> renderer = <span class="built_in">require</span>(<span class="string">&#x27;vue-server-renderer&#x27;</span>).createRenderer()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 2.5.0+，如果没有传入回调函数，则会返回 Promise：</span></span><br><span class="line">renderer.renderToString(app).then(<span class="function"><span class="params">html</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(html)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>通过node index.js </p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200810103044.png"></p><p>可以看到、直接将template中的模板渲染成了html<code>&lt;div data-server-rendered=&quot;true&quot;&gt;Hello world&lt;/div&gt;</code>元素</p><h4 id="与服务器集成"><a href="#与服务器集成" class="headerlink" title="与服务器集成"></a>与服务器集成</h4><p><code>index.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Vue = <span class="built_in">require</span>(<span class="string">&#x27;vue&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> server = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)()</span><br><span class="line"><span class="keyword">const</span> renderer = <span class="built_in">require</span>(<span class="string">&#x27;vue-server-renderer&#x27;</span>).createRenderer()</span><br><span class="line"></span><br><span class="line">server.get(<span class="string">&#x27;*&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        data: &#123;</span><br><span class="line">            message: <span class="string">&quot;你好、世界！&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        template: <span class="string">`&lt;div&gt;欢迎访问 &#123;&#123; message &#125;&#125;&lt;/div&gt;`</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    renderer.renderToString(app, <span class="function">(<span class="params">err, html</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            res.status(<span class="number">500</span>).end(<span class="string">&#x27;Internal Server Error&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        res.setHeader(<span class="string">&#x27;Content-type&#x27;</span>, <span class="string">&#x27;text/html;charset=utf-8&#x27;</span>);</span><br><span class="line">        res.end(<span class="string">`</span></span><br><span class="line"><span class="string">      &lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">      &lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;head&gt;&lt;title&gt;Hello&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">        &lt;body&gt;<span class="subst">$&#123;html&#125;</span>&lt;/body&gt;</span></span><br><span class="line"><span class="string">      &lt;/html&gt;</span></span><br><span class="line"><span class="string">    `</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><p>查看源代码我们可以看的、页面已经渲染成了HTML标签</p><h3 id="Nuxt-js"><a href="#Nuxt-js" class="headerlink" title="Nuxt.js"></a>Nuxt.js</h3><p>下图阐述了 Nuxt.js 应用一个完整的服务器请求到渲染（或用户通过 <code>&lt;nuxt-link&gt;</code> 切换路由渲染页面）的流程：</p><p><img src= "/img/loading.gif" data-lazy-src="https://www.nuxtjs.cn/nuxt-schema.svg"></p><h4 id="Nuxt-js-是什么？"><a href="#Nuxt-js-是什么？" class="headerlink" title="Nuxt.js 是什么？"></a>Nuxt.js 是什么？</h4><p>官网: <a href="https://zh.nuxtjs.org/">https://zh.nuxtjs.org/</a></p><p>Nuxt.js 是一个基于 Vue.js 的通用应用框架。</p><p>通过对客户端/服务端基础架构的抽象组织，Nuxt.js 主要关注的是应用的 <strong>UI 渲染</strong>。</p><p>我们的目标是创建一个灵活的应用框架，你可以基于它初始化新项目的基础结构代码，或者在已有 Node.js 项目中使用 Nuxt.js。</p><p>Nuxt.js 预设了利用 Vue.js 开发<strong>服务端渲染</strong>的应用所需要的各种配置。</p><p>除此之外，我们还提供了一种命令叫：<code>nuxt generate</code> ，为基于 Vue.js 的应用提供生成对应的静态站点的功能。</p><p>我们相信这个命令所提供的功能，是向开发集成各种微服务（Microservices）的 Web 应用迈开的新一步。</p><p>作为框架，Nuxt.js 为 <code>客户端/服务端</code> 这种典型的应用架构模式提供了许多有用的特性，例如异步数据加载、中间件支持、布局支持等。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>Nuxt.js 团队创建了脚手架工具 <a href="https://github.com/nuxt/create-nuxt-app">create-nuxt-app</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-nuxt-app &lt;项目名&gt;</span><br></pre></td></tr></table></figure><p>解释一下<code>npx</code>：</p><p><a href="http://www.ruanyifeng.com/blog/2019/02/npx.html">http://www.ruanyifeng.com/blog/2019/02/npx.html</a></p><p>这个是在 npm<code>v5.2.0</code>引入的一条命令（<a href="https://github.com/npm/npm/releases/tag/v5.2.0">查看</a>），引入这个命令的目的是为了提升开发者使用包内提供的命令行工具的体验。</p><ul><li><p>可以通过npx 调用项目安装的模块</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 项目的根目录下执行</span></span><br><span class="line">$ node-modules/.bin/mocha --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># npx 调用</span></span><br><span class="line">$ npx mocha --version</span><br></pre></td></tr></table></figure></li><li><p><code>create-nuxt-app</code>这个模块是全局安装，npx 可以运行它，而且不进行全局安装。npx 将<code>create-nuxt-app</code>下载到一个临时目录，使用以后再删除。所以，以后再次执行上面的命令，会重新下载<code>create-nuxt-app</code>。</p></li></ul><p>npx命令找包顺序：先自动查找当前依赖包中的可执行文件，如果找不到，就会去 PATH 里找。如果依然找不到，就会帮你临时安装，执行完后再删除包。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200810110938.png"></p><p>它会让你进行一些选择:</p><ol><li><p>项目名称<code>Project name:</code> 直接回车</p></li><li><p>程序语言<code>Programming language: (Use arrow keys):</code> <code>JavaScript和TypeScript</code> 、选择<code>JavaScript</code></p></li><li><p>包管理工具<code>Package manager: (Use arrow keys):</code> <code>Yarn和NPM</code> 、选择<code>NPM</code></p></li><li><p>UI框架<code>UI framework: (Use arrow keys)</code>:None (无)    <a href="https://github.com/bootstrap-vue/bootstrap-vue">Bootstrap</a>    <a href="https://github.com/vuetifyjs/vuetify">Vuetify</a>    <a href="https://github.com/jgthms/bulma">Bulma</a><a href="https://github.com/tailwindcss/tailwindcss">Tailwind</a>    <a href="https://github.com/ElemeFE/element">Element UI</a>    <a href="https://github.com/vueComponent/ant-design-vue">Ant Design Vue</a>    <a href="https://github.com/buefy/buefy">Buefy</a>    <a href="https://github.com/iview/iview">iView</a>    <a href="https://github.com/tachyons-css/tachyons">Tachyons</a></p></li><li><p>模块<code>Nuxt.js modules</code>:   <code>Axios和Progressive Web App (PWA)和Content</code> 选择<code>Axios</code></p></li><li><p>在保存时代码规范和错误检查您的代码Linting tools: <code>ESLint、Prettier、Lint staged files、StyleLint</code></p></li><li><p>测试框架<code>Testing framework</code>:  <code>None Jest AVA WebdriverIO</code></p></li><li><p>渲染模式<code>Rendering mode</code></p><blockquote><p>Universal (SSR / SSG)<br>Single Page App</p></blockquote></li><li><p><code>Deployment target</code></p><blockquote><p>Server (Node.js hosting)</p></blockquote><blockquote><p>Static (Static/JAMStack hosting)</p></blockquote></li><li><p><code>Development tools</code>:</p><blockquote><p>jsconfig.json (Recommended for VS Code if you’re not using typescript)<br>Semantic Pull Requests</p></blockquote></li></ol><p>当运行完时，它将安装所有依赖项，因此下一步是启动项目:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> &lt;project-name&gt;</span><br><span class="line">$ npm run dev</span><br></pre></td></tr></table></figure><p>应用现在运行在 <a href="http://localhost:3000/">http://localhost:3000</a> 上运行。</p><p>注意：Nuxt.js 会监听 pages 目录中的文件更改，因此在添加新页面时无需重新启动应用程序。</p><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">├── assets    资源目录                       </span><br><span class="line">├── components      组件目录                    </span><br><span class="line">│   └── Logo.vue                   </span><br><span class="line">├── layouts      布局目录                        </span><br><span class="line">│   └── default.vue                   </span><br><span class="line">├── middleware中间件目录</span><br><span class="line">├── pages 页面目录</span><br><span class="line">│   └── index.vue</span><br><span class="line">├── plugins插件目录</span><br><span class="line">├── static静态文件目录</span><br><span class="line">├── storeVuex 状态树文件</span><br><span class="line">├── .editorconfig</span><br><span class="line">├── .eslintrc.js</span><br><span class="line">├── .gitgnore</span><br><span class="line">├── nuxt.config.js 个性化配置</span><br><span class="line">└── package.json        </span><br></pre></td></tr></table></figure><ul><li><p>资源目录 <code>assets</code> 用于组织未编译的静态资源如 <code>LESS</code>、<code>SASS</code> 或 <code>JavaScript</code>。</p></li><li><p>组件目录 <code>components</code> 用于组织应用的 Vue.js 组件。Nuxt.js 不会扩展增强该目录下 Vue.js 组件，即这些组件不会像页面组件那样有 <code>asyncData</code> 方法的特性。</p></li><li><p>布局目录 <code>layouts</code> 用于组织应用的布局组件。</p></li><li><p><code>middleware</code> 目录用于存放应用的中间件。</p></li><li><p>页面目录 <code>pages</code> 用于组织应用的路由及视图。Nuxt.js 框架读取该目录下所有的 <code>.vue</code> 文件并自动生成对应的路由配置。</p></li><li><p>插件目录 <code>plugins</code> 用于组织那些需要在 <code>根vue.js应用</code> 实例化之前需要运行的 Javascript 插件。</p></li><li><p>静态文件目录 <code>static</code> 用于存放应用的静态文件，此类文件不会被 Nuxt.js 调用 Webpack 进行构建编译处理。服务器启动的时候，该目录下的文件会映射至应用的根路径 <code>/</code> 下。</p><p>  <strong>举个例子:</strong> <code>/static/robots.txt</code> 映射至 <code>/robots.txt</code></p></li><li><p><code>store</code> 目录用于组织应用的 <a href="http://vuex.vuejs.org/">Vuex 状态树</a> 文件。 Nuxt.js 框架集成了 <a href="http://vuex.vuejs.org/">Vuex 状态树</a> 的相关功能配置，在 <code>store</code> 目录下创建一个 <code>index.js</code> 文件可激活这些配置。</p></li><li><p><code>nuxt.config.js</code> 文件用于组织 Nuxt.js 应用的个性化配置，以便覆盖默认配置。</p></li><li><p><code>package.json</code> 文件用于描述应用的依赖关系和对外暴露的脚本接口。</p></li></ul><table><thead><tr><th>别名</th><th>目录</th></tr></thead><tbody><tr><td><code>~</code> 或 <code>@</code></td><td><a href="https://zh.nuxtjs.org/api/configuration-srcdir">srcDir</a></td></tr><tr><td><code>~~</code> 或 <code>@@</code></td><td><a href="https://zh.nuxtjs.org/api/configuration-rootdir">rootDir</a></td></tr></tbody></table><p>默认情况下，<code>srcDir</code> 和 <code>rootDir</code> 相同。</p><p><strong>提示:</strong> 在您的 <code>vue</code> 模板中, 如果你需要引入 <code>assets</code> 或者 <code>static</code> 目录, 使用 <code>~/assets/your_image.png</code> 和 <code>~/static/your_image.png</code>方式。</p><h4 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h4><blockquote><p>Nuxt.js 会根据 pages 目录下的目录结构自动生成 vue-router 模块的路由配置</p></blockquote><p>类似<code>Vue-router</code>中的<a href="https://zykj.js.org/posts/ed3da#lt-router-link-gt-%E7%9A%84%E5%85%B6%E4%BB%96%E5%B1%9E%E6%80%A7"><code>router-link</code></a>、在页面之间跳转使用<a href="https://www.nuxtjs.cn/api/components-nuxt-link"><code>nuxt-link</code></a> 标签</p><p>例如:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nuxt-link</span> <span class="attr">to</span>=<span class="string">&quot;/user&quot;</span>&gt;</span>进入个人页<span class="tag">&lt;/<span class="name">nuxt-link</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="基础路由"><a href="#基础路由" class="headerlink" title="基础路由"></a>基础路由</h5><p>假设 <code>pages</code> 的目录结构如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pages/</span><br><span class="line">--| user/</span><br><span class="line">-----| index.vue</span><br><span class="line">-----| one.vue</span><br><span class="line">--| index.vue</span><br></pre></td></tr></table></figure><p>那么，Nuxt.js 自动生成的路由配置如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">router: &#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">&#x27;index&#x27;</span>,</span><br><span class="line">      path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      component: <span class="string">&#x27;pages/index.vue&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">      path: <span class="string">&#x27;/user&#x27;</span>,</span><br><span class="line">      component: <span class="string">&#x27;pages/user/index.vue&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">&#x27;user-one&#x27;</span>,</span><br><span class="line">      path: <span class="string">&#x27;/user/one&#x27;</span>,</span><br><span class="line">      component: <span class="string">&#x27;pages/user/one.vue&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>嵌套路由</code></p><p>当然、你还可以使用另一种<code>目录结构</code>: <code>user.vue、user目录、user目录下的one.vue</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pages/</span><br><span class="line">--| user/</span><br><span class="line">-----| one.vue</span><br><span class="line">--| index.vue</span><br><span class="line">--| user.vue</span><br></pre></td></tr></table></figure><p>但是你要访问<code>user下的one.vue: /user/one </code> 需要在<code>user.vue</code> 添加<a href="https://zh.nuxtjs.org/api/components-nuxt-child/"><code>&lt;nuxt-child/&gt;</code></a> </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- user.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      我是用户页</span><br><span class="line">    <span class="tag">&lt;<span class="name">nuxt-child</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h5><p>在 Nuxt.js 里面定义<code>带参数</code>的动态路由，需要创建对应的<code>以下划线作为前缀</code>的 Vue 文件</p><p>例如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pages/</span><br><span class="line">--| detail/</span><br><span class="line">-----| _id.vue</span><br><span class="line">--| index.vue</span><br></pre></td></tr></table></figure><p>这样我们就可以在<code>index.vue</code>进行操作</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      这里是index页面</span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in dataList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick(item)&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data()&#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">      dataList: [<span class="string">&quot;info&quot;</span>,<span class="string">&quot;data&quot;</span>,<span class="string">&quot;now&quot;</span>,<span class="string">&quot;time&quot;</span>]</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    handleClick(data)&#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$router.push(<span class="string">&quot;/detail/&quot;</span>+data)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>_id.vue</code> 注意: 通过<code>$route.params</code>取得的参数名为<code>以下划线作为前缀</code>的内容 、例: <code>_id.vue、获取就是通过 $route.params.id 传入的参数</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        &#123;&#123; $route.params.id &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>参数检验</code></p><p>判断参数是否合法来返回页面 <code>validate</code></p><p>简单判断一下以数字开头、<code>validate</code>返回为假时跳转错误页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我的id: &#123;&#123; $route.params.me &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  layout: <span class="string">&quot;me&quot;</span>,</span></span><br><span class="line">  validate(&#123;params&#125;)&#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="regexp">/^\d+/</span>.test(params.me)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以在<code>.nuxt</code>目录下<code>router.js</code>看的路由结构</p><h4 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h4><p>视图的整体布局图如下所示:</p><p><img src= "/img/loading.gif" data-lazy-src="https://www.nuxtjs.cn/nuxt-views-schema.svg"></p><h5 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h5><blockquote><p>定制化默认的 html 模板，只需要在 src 文件夹下（默认是应用根目录）创建一个 <code>app.html</code> 的文件。</p></blockquote><p>默认模板:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> &#123;&#123; <span class="attr">HTML_ATTRS</span> &#125;&#125;&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span> &#123;&#123; <span class="attr">HEAD_ATTRS</span> &#125;&#125;&gt;</span></span><br><span class="line">    &#123;&#123; HEAD &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span> &#123;&#123; <span class="attr">BODY_ATTRS</span> &#125;&#125;&gt;</span></span><br><span class="line">    &#123;&#123; APP &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>例如:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if IE 9]&gt;&lt;html lang=&quot;en-US&quot; class=&quot;lt-ie9 ie9&quot; &#123;&#123; HTML_ATTRS &#125;&#125;&gt;&lt;![endif]--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if (gt IE 9)|!(IE)]&gt;&lt;!--&gt;</span><span class="tag">&lt;<span class="name">html</span> &#123;&#123; <span class="attr">HTML_ATTRS</span> &#125;&#125;&gt;</span><span class="comment">&lt;!--&lt;![endif]--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span> &#123;&#123; <span class="attr">HEAD_ATTRS</span> &#125;&#125;&gt;</span></span><br><span class="line">    &#123;&#123; HEAD &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span> &#123;&#123; <span class="attr">BODY_ATTRS</span> &#125;&#125;&gt;</span></span><br><span class="line">      我是app.html里的内容</span><br><span class="line">    &#123;&#123; APP &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200811204457.png"></p><h5 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h5><blockquote><p>Nuxt.js 允许你扩展默认的布局，或在 <code>layout</code> 目录下创建自定义的布局</p></blockquote><h6 id="默认布局"><a href="#默认布局" class="headerlink" title="默认布局"></a>默认布局</h6><p>在<code>vue-router中</code>、使用<code>router-view</code>用来显示页面</p><p>在nuxt、布局文件(layouts)中添加 <code>&lt;nuxt/&gt;</code> 组件用于显示页面的主体内容。</p><p>默认布局<code>default.vue</code>源码如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">nuxt</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="自定义布局"><a href="#自定义布局" class="headerlink" title="自定义布局"></a>自定义布局</h6><p>如果不想使用nuxt的默认布局页面、可以使用自定义布局：</p><ul><li>在<code>layouts</code>目录下创建布局文件<code>xxx.vue</code> 、并且要有<code>&lt;nuxt /&gt;</code> 否则只显示<code>xxx.vue</code>里的内容</li><li>在需要的使用的页面中添加<code>layout: xxx</code>(不需要.vue)</li></ul><p>例如: </p><p>假设我们要创建一个 <em>博客布局</em> 并将其保存到<code>layouts/blog.vue</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我的博客导航栏在这里<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nuxt</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后我们必须告诉页面 (即<code>pages/posts.vue</code>) 使用您的自定义布局：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Your template --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    layout: <span class="string">&#x27;blog&#x27;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// page component definitions</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>更多有关 <code>layout</code> 属性信息: <a href="https://www.nuxtjs.cn/api/pages-layout">API 页面 <code>布局</code></a></p><h6 id="错误页面"><a href="#错误页面" class="headerlink" title="错误页面"></a>错误页面</h6><blockquote><p>你可以通过编辑 <code>layouts/error.vue</code> 文件来定制化错误页面.</p></blockquote><p>这个布局文件不需要包含 <code>&lt;nuxt/&gt;</code> 标签。你可以把这个布局文件当成是显示应用错误（404，500 等）的组件。</p><p>官方提供的一个简单的页面 <code>layouts/error.vue</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;error.statusCode === 404&quot;</span>&gt;</span>页面不存在<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>应用发生错误异常<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nuxt-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>首 页<span class="tag">&lt;/<span class="name">nuxt-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    props: [<span class="string">&#x27;error&#x27;</span>],</span></span><br><span class="line"><span class="javascript">    layout: <span class="string">&#x27;blog&#x27;</span> <span class="comment">// 你可以为错误页面指定自定义的布局</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h6><p>页面组件实际上是 Vue 组件，只不过 Nuxt.js 为这些组件添加了一些特殊的配置项（对应 Nuxt.js 提供的功能特性）以便你能快速开发通用应用。</p><p>Nuxt.js提供的特殊配置项如下表所示：</p><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td><code>asyncData</code></td><td>最重要的一个键, 支持 <a href="https://www.nuxtjs.cn/guide/async-data">异步数据处理</a>，另外该方法的第一个参数为当前页面组件的 <a href="https://www.nuxtjs.cn/api#%E4%B8%8A%E4%B8%8B%E6%96%87%E5%AF%B9%E8%B1%A1">上下文对象</a>。</td></tr><tr><td><code>fetch</code></td><td>与 <code>asyncData</code> 方法类似，用于在渲染页面之前获取数据填充应用的状态树（store）。不同的是 <code>fetch</code> 方法不会设置组件的数据。详情请参考 <a href="https://www.nuxtjs.cn/api/pages-fetch">关于 fetch 方法的文档</a>。</td></tr><tr><td><code>head</code></td><td>配置当前页面的 Meta 标签, 详情参考 <a href="https://www.nuxtjs.cn/api/pages-head">页面头部配置 API</a>。</td></tr><tr><td><code>layout</code></td><td>指定当前页面使用的布局（<code>layouts</code> 根目录下的布局文件）。详情请参考 <a href="https://www.nuxtjs.cn/api/pages-layout">关于 布局 的文档</a>。</td></tr><tr><td><code>loading</code></td><td>如果设置为<code>false</code>，则阻止页面自动调用<code>this.$nuxt.$loading.finish()</code>和<code>this.$nuxt.$loading.start()</code>,您可以手动控制它,请看<a href="https://nuxtjs.org/examples/custom-page-loading">例子</a>,仅适用于在 nuxt.config.js 中设置<code>loading</code>的情况下。请参考<a href="https://www.nuxtjs.cn/api/configuration-loading">API 配置 <code>loading</code> 文档</a>。</td></tr><tr><td><code>transition</code></td><td>指定页面切换的过渡动效, 详情请参考 <a href="https://www.nuxtjs.cn/api/pages-transition">页面过渡动效</a>。</td></tr><tr><td><code>scrollToTop</code></td><td>布尔值，默认: <code>false</code>。 用于判定渲染页面前是否需要将当前页面滚动至顶部。这个配置用于 <a href="https://www.nuxtjs.cn/guide/routing#%E5%B5%8C%E5%A5%97%E8%B7%AF%E7%94%B1">嵌套路由</a>的应用场景。</td></tr><tr><td><code>validate</code></td><td>校验方法用于校验 <a href="https://www.nuxtjs.cn/guide/routing#%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1">动态路由</a>的参数。</td></tr><tr><td><code>middleware</code></td><td>指定页面的中间件，中间件会在页面渲染之前被调用， 请参考 <a href="https://www.nuxtjs.cn/guide/routing#%E4%B8%AD%E9%97%B4%E4%BB%B6">路由中间件</a>。</td></tr></tbody></table><p>关于页面配置项的详细信息，请参考 <a href="https://www.nuxtjs.cn/api">页面 API</a>。</p><h6 id="HTML头部"><a href="#HTML头部" class="headerlink" title="HTML头部"></a>HTML头部</h6><p>Nuxt.js 使用了 <a href="https://github.com/nuxt/vue-meta"><code>vue-meta</code></a> 更新应用的 <code>头部标签(Head)</code> and <code>html 属性</code>。</p><p>Nuxt.js 使用以下参数配置 <code>vue-meta</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  keyName: <span class="string">&#x27;head&#x27;</span>, <span class="comment">// 设置 meta 信息的组件对象的字段，vue-meta 会根据这 key 值获取 meta 信息</span></span><br><span class="line">  attribute: <span class="string">&#x27;n-head&#x27;</span>, <span class="comment">// vue-meta 在监听标签时所添加的属性名</span></span><br><span class="line">  ssrAttribute: <span class="string">&#x27;n-head-ssr&#x27;</span>, <span class="comment">// 让 vue-meta 获知 meta 信息已完成服务端渲染的属性名</span></span><br><span class="line">  tagIDKeyName: <span class="string">&#x27;hid&#x27;</span> <span class="comment">// 让 vue-meta 用来决定是否覆盖还是追加 tag 的属性名</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4><p>如果我们想访问<code>http://localhost:3000/</code>想跳转到<code>http://localhost:3000/user</code> 、配置完记得重新启动</p><p>方法1：<code>nuxt.config.js</code>配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">router:&#123;</span><br><span class="line">    extendRoutes(routes)&#123;</span><br><span class="line">        routes.push(&#123;</span><br><span class="line">            path:<span class="string">&quot;/&quot;</span>,</span><br><span class="line">            redirect: <span class="string">&quot;/user&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样访问根目录就会重定向到<code>/user</code></p><p>但是我发现一个问题：如果 根目录<code>/</code>也就是<code>index.vue</code> 存在的话、通过路由跳转不起作用、解决办法就是删除<code>index.vue</code>、或者使用中间件的方法</p><p>方法2：<code>middleware中间件</code></p><p>在<code>middleware</code>下创建<code>redirect.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">&#123;isHMR,app,store,route,params,error,redirect&#125;</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isHMR) <span class="keyword">return</span></span><br><span class="line">    <span class="comment">// 页面均放在_lang文件夹下，即lang为动态路由参数</span></span><br><span class="line">    <span class="comment">/*if (!params.lang) &#123;  //此写法会出现路由重定向次数过多的问题</span></span><br><span class="line"><span class="comment">        return redirect(&#x27;/&#x27; + defaultLocale + &#x27;&#x27; + route.fullPath)</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span>(route.fullPath == <span class="string">&quot;/home&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;/home/catagory&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改<code>nuxt.config.js</code> 添加<code>middleware</code>属性、对应的值为<code>middleware</code>目录下的文件名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router: &#123;</span><br><span class="line">    middleware:<span class="string">&#x27;redirect&#x27;</span>,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>方法3: <code>组件中</code></p><p><code>asyncData</code>中有<code>redirect</code>属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  asyncData(&#123; redirect &#125;) &#123;</span><br><span class="line"><span class="javascript">    redirect(<span class="string">&#x27;/user&#x27;</span>)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="异步数据"><a href="#异步数据" class="headerlink" title="异步数据"></a>异步数据</h4><blockquote><p><em>Nuxt.js 扩展了 Vue.js，增加了一个叫</em> <code>asyncData</code> <em>的方法，使得我们可以在设置组件的数据之前能异步获取或处理数据。</em></p></blockquote><h5 id="asyncData-方法"><a href="#asyncData-方法" class="headerlink" title="asyncData 方法"></a>asyncData 方法</h5><ul><li><code>asyncData</code>方法会在组件（限于页面组件）每次加载之前被调用。 <code>简单来说就是在页面直接切换客户端会调用改方法</code></li><li>可以在<code>服务端或路由更新</code>之前被调用。<code>简单来说就是直接对页面进行刷新时服务端调用并且渲染数据</code></li><li><code>asyncData</code> 返回的数据融合组件 <code>data</code> 方法返回的数据一并返回给当前组件。</li><li>必须将数据用<code>return</code>返回出去、否则无法获取数据</li></ul><blockquote><p>注意：由于<code>asyncData</code>方法是在组件 <strong>初始化</strong> 前被调用的，所以在方法内是没有办法通过 <code>this</code> 来引用组件的实例对象。所以需要用过 return 返回对象 、如  <code>return &#123; dataList : res.data.data.films &#125;</code></p></blockquote><p>举个例子:</p><p><code>1.axios 方法</code></p><p>在<code>pages/index.vue</code>通过直接刷新页面、客户端控制台不会打印数据(最新版好像也会打印)、而是在服务端打印</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    Hello world</span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in dataList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick(item.filmId)&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;item.poster&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; item.name &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      dataList: [<span class="string">&quot;info&quot;</span>, <span class="string">&quot;data&quot;</span>, <span class="string">&quot;now&quot;</span>, <span class="string">&quot;time&quot;</span>],</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleClick(data) &#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$router.push(<span class="string">&quot;/me/&quot;</span> + data);</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  asyncData() &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> axios(&#123;</span></span><br><span class="line">      url:</span><br><span class="line"><span class="javascript">        <span class="string">&quot;https://m.maizuo.com/gateway?cityId=110100&amp;pageNum=1&amp;pageSize=10&amp;type=1&amp;k=7662183&quot;</span>,</span></span><br><span class="line">      headers: &#123;</span><br><span class="line"><span class="javascript">        <span class="string">&quot;X-Client-Info&quot;</span>:<span class="string">&#x27;&#123;&quot;a&quot;:&quot;3000&quot;,&quot;ch&quot;:&quot;1002&quot;,&quot;v&quot;:&quot;5.0.4&quot;,&quot;e&quot;:&quot;1597199484263152646225921&quot;,&quot;bc&quot;:&quot;110100&quot;&#125;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&quot;X-Host&quot;</span>: <span class="string">&quot;mall.film-ticket.film.list&quot;</span>,</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">    &#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(res.data);  </span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 这里需要直接返回对象  </span></span></span><br><span class="line">        dataList : res.data.data.films</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200812113205.png"></p><p>只有在其他页面切换回当前页、才会在客户端控制台打印数据</p><p><code>2.aysnc</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      dataList: null</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  async asyncData() &#123;</span><br><span class="line">let &#123;data&#125; = await axios(&#123; url: &quot;https://m.maizuo.com/gatewaycityId=110100&amp;pageNum=1&amp;pageSize=10&amp;type=1&amp;k=7662183&quot;,headers: &#123; &quot;X-Client-Info&quot;:&#x27;&#123;&quot;a&quot;:&quot;3000&quot;,&quot;ch&quot;:&quot;1002&quot;,&quot;v&quot;:&quot;5.0.4&quot;,&quot;e&quot;:&quot;1597199484263152646225921&quot;,&quot;bc&quot;:&quot;110100&quot;&#125;&#x27;,&quot;X-Host&quot;: &quot;mall.film-ticket.film.list&quot;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">    return &#123; dataList : data.data.films&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="asyncData-参数"><a href="#asyncData-参数" class="headerlink" title="asyncData 参数"></a>asyncData 参数</h5><p>通过直接打印<code>asyncData</code>中的参数可以看到：</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200812113800.png"></p><p>里面的参数也就是上下文对象</p><h6 id="上下文对象"><a href="#上下文对象" class="headerlink" title="上下文对象"></a>上下文对象</h6><p>可通过 <a href="https://www.nuxtjs.cn/api/context">API <code>context</code></a> 来了解该对象的所有属性和方法。</p><p>context 变量的可用属性一览:</p><table><thead><tr><th>属性字段</th><th>类型</th><th>可用</th><th>描述</th></tr></thead><tbody><tr><td><code>app</code></td><td>Vue 根实例</td><td>客户端 &amp; 服务端</td><td>包含所有插件的 Vue 根实例。例如：在使用 <code>axios</code> 的时候，你想获取 <code>$axios</code> 可以直接通过 <code>context.app.$axios</code> 来获取</td></tr><tr><td><code>isClient</code></td><td><code>Boolean</code></td><td>客户端 &amp; 服务端</td><td>是否来自客户端渲染（废弃。请使用 <code>process.client</code> ）</td></tr><tr><td><code>isServer</code></td><td><code>Boolean</code></td><td>客户端 &amp; 服务端</td><td>是否来自服务端渲染（废弃。请使用 <code>process.server</code> ）</td></tr><tr><td><code>isStatic</code></td><td><code>Boolean</code></td><td>客户端 &amp; 服务端</td><td>是否来自 <code>nuxt generate</code> 静态化（预渲染）（废弃。请使用 <code>process.static</code> ）</td></tr><tr><td><code>isDev</code></td><td><code>Boolean</code></td><td>客户端 &amp; 服务端</td><td>是否是开发 dev 模式，在生产环境的数据缓存中用到</td></tr><tr><td><code>isHMR</code></td><td><code>Boolean</code></td><td>客户端 &amp; 服务端</td><td>是否是通过模块热替换 <code>webpack hot module replacement</code> (<em>仅在客户端以 dev 模式</em>)</td></tr><tr><td><code>route</code></td><td><a href="https://router.vuejs.org/zh/api/#%E8%B7%AF%E7%94%B1%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7">Vue Router 路由</a></td><td>客户端 &amp; 服务端</td><td>Vue Router 路由实例</td></tr><tr><td><code>store</code></td><td><a href="https://vuex.vuejs.org/zh/api/">Vuex 数据</a></td><td>客户端 &amp; 服务端</td><td><code>Vuex.Store</code> 实例。<strong>只有<a href="https://www.nuxtjs.cn/guide/vuex-store">vuex 数据流</a>存在相关配置时可用</strong></td></tr><tr><td><code>env</code></td><td><code>Object</code></td><td>客户端 &amp; 服务端</td><td><code>nuxt.config.js</code> 中配置的环境变量，见 <a href="https://www.nuxtjs.cn/api/configuration-env">环境变量 api</a></td></tr><tr><td><code>params</code></td><td><code>Object</code></td><td>客户端 &amp; 服务端</td><td><code>route.params</code> 的别名</td></tr><tr><td><code>query</code></td><td><code>Object</code></td><td>客户端 &amp; 服务端</td><td><code>route.query</code> 的别名</td></tr><tr><td><code>req</code></td><td><a href="https://nodejs.org/api/http.html#http_class_http_incomingmessage"><code>http.Request</code></a></td><td>服务端</td><td>Node.js API 的 Request 对象。如果 Nuxt 以中间件形式使用的话，这个对象就根据你所使用的框架而定。*<code>nuxt generate</code> 不可用*</td></tr><tr><td><code>res</code></td><td><a href="https://nodejs.org/api/http.html#http_class_http_serverresponse"><code>http.Response</code></a></td><td>服务端</td><td>Node.js API 的 Response 对象。如果 Nuxt 以中间件形式使用的话，这个对象就根据你所使用的框架而定。*<code>nuxt generate</code> 不可用*</td></tr><tr><td><code>redirect</code></td><td><code>Function</code></td><td>客户端 &amp; 服务端</td><td>用这个方法重定向用户请求到另一个路由。状态码在服务端被使用，默认 302 <code>redirect([status,] path [, query])</code></td></tr><tr><td><code>error</code></td><td><code>Function</code></td><td>客户端 &amp; 服务端</td><td>用这个方法展示错误页：<code>error(params)</code> 。<code>params</code> 参数应该包含 <code>statusCode</code> 和 <code>message</code> 字段</td></tr><tr><td><code>nuxtState</code></td><td><code>Object</code></td><td>客户端</td><td>Nuxt 状态，在使用 <code>beforeNuxtRender</code> 之前，用于客户端获取 Nuxt 状态，仅在 <code>universal</code> 模式下可用</td></tr><tr><td><code>beforeNuxtRender(fn)</code></td><td><code>Function</code></td><td>服务端</td><td>使用此方法更新 <code>__NUXT__</code> 在客户端呈现的变量，<code>fn</code> 调用 (可以是异步) <code>&#123; Components, nuxtState &#125;</code> ，参考 <a href="https://github.com/nuxt/nuxt.js/blob/cf6b0df45f678c5ac35535d49710c606ab34787d/test/fixtures/basic/pages/special-state.vue">示例</a></td></tr></tbody></table><h4 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h4><p>对于前端跨域问题、我们需要配置反向代理</p><p>需要安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save @nuxtjs/proxy</span><br></pre></td></tr></table></figure><p>在<code>nuxt.config.js</code>中配置</p><p>例如: 猫眼电影 <a href="https://m.maoyan.com/">https://m.maoyan.com/</a> 的首页数据请求API <a href="https://m.maoyan.com/ajax/movieOnInfoList?token=">https://m.maoyan.com/ajax/movieOnInfoList?token=</a></p><p>需要如下配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">modules: [</span><br><span class="line">    <span class="string">&#x27;@nuxtjs/axios&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;@nuxtjs/proxy&#x27;</span></span><br><span class="line">],</span><br><span class="line">proxy:&#123;</span><br><span class="line">    <span class="string">&#x27;/ajax&#x27;</span>:&#123;</span><br><span class="line">      target: <span class="string">&quot;https://m.maoyan.com/&quot;</span>,</span><br><span class="line">      <span class="comment">// changeOrigin默认是false：请求头中host仍然是浏览器发送过来的host    </span></span><br><span class="line">      changeOrigin: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,    </span><br><span class="line">axios: &#123;</span><br><span class="line">    proxy:<span class="literal">true</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><code>page.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        我是分类内容页面</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  asyncData()&#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> axios(&#123;</span></span><br><span class="line"><span class="javascript">      url: <span class="string">&#x27;/ajax/movieOnInfoList?token=&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(res.data);</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是如果直接进行刷新是请求 <code>/ajax/movieOnInfoList?token=</code> 服务器没有跨域、会404、所以需要判断一下是服务端还是客户端</p><p>通过<code>process.server</code>、返回true为服务端、接下来简单判断一下就行了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url: process.server ? <span class="string">&#x27;https://m.maoyan.com/ajax/movieOnInfoList?token=&#x27;</span> : <span class="string">&#x27;/ajax/movieOnInfoList?token=&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="路由动画"><a href="#路由动画" class="headerlink" title="路由动画"></a>路由动画</h4><blockquote><p>路由的动画效果，也叫作页面的更换效果。Nuxt.js提动两种方法为路由提动动画效果，一种是全局的，一种是针对单独页面制作。</p></blockquote><h5 id="全局路由动画"><a href="#全局路由动画" class="headerlink" title="全局路由动画"></a>全局路由动画</h5><p>全局动画默认使用page进行设置，例如现在我们为每个页面都设置一个<code>进入和退出时的渐隐渐现的效果</code>。我们可以先在根目录的<code>assets/css</code>下建立一个<code>normailze.css</code>文件。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.page-enter-active</span>,<span class="selector-class">.page-leave-active</span>&#123;</span><br><span class="line">    <span class="attribute">transition</span>: opacity <span class="number">2s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.page-enter</span>,<span class="selector-class">.page-leave-active</span>&#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编辑<code>nuxt.config.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">css: [<span class="string">&#x27;~assets/css/normailze.css&#x27;</span>],</span><br></pre></td></tr></table></figure><p>但是只有使用<code>&lt;nuxt-link&gt;</code>的才有动画效果</p><h5 id="单独设置页面动效"><a href="#单独设置页面动效" class="headerlink" title="单独设置页面动效"></a>单独设置页面动效</h5><p>给一个页面单独设置特殊的效果时，我们只要在css里改变默认的page，然后在页面组件的配置中加入<code>transition</code>字段即可。例如，我们想给about页面加入一个字体放大然后缩小的效果</p><p>编辑<code>assets/css/normailze.css </code> test为自定义效果名 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.test-enter-active</span>,<span class="selector-class">.test-leave-active</span>&#123;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">2s</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.test-enter</span>,<span class="selector-class">.test-leave-active</span>&#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在需要的组件中添加</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    transition:<span class="string">&#x27;test&#x27;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web教程 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
            <tag> Nuxt.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue响应式原理解读</title>
      <link href="/posts/a9e8a85d/"/>
      <url>/posts/a9e8a85d/</url>
      
        <content type="html"><![CDATA[<p>封面P站: <a href="https://www.pixiv.net/artworks/83495208">https://www.pixiv.net/artworks/83495208</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://cn.vuejs.org/images/data.png" alt="响应式原理"></p><p>这张图片是Vue官方响应式图片、像我这样的菜鸡是很难理解的、所有我通过查阅资料和看视频来理解Vue响应式、虽然并不能完全看懂、但是尽自己所能总结出自己的想法吧！！！</p><h2 id="Vue响应式原理解读"><a href="#Vue响应式原理解读" class="headerlink" title="Vue响应式原理解读"></a>Vue响应式原理解读</h2><div class="note info"><p>什么是响应式？</p><p><code>响应式就是当数据发生改变时、视图也会跟着更新</code></p></div><p>Vue响应式原理是<code>数据劫持</code>和<code>发布订阅模式</code></p><ul><li>Vue2.0时使用的ES5中的<code>Object.defineProperty</code>设置对象属性的<code>set/get</code>方法来监听数据的变化</li><li>Vue3.0的时使用的ES6中的<code>Proxy</code>实现数据劫持</li><li>观察者模式</li></ul><p>下面我们就通过最直观的方法来了解Vue响应式的原理吧</p><h3 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty"></a>Object.defineProperty</h3><p>基本语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(obj, prop, descriptor)</span><br></pre></td></tr></table></figure><p><code>参数</code></p><ul><li><code>obj</code>要定义属性的对象。</li><li><code>prop</code>要定义或修改的属性的名称或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol"><code>Symbol</code></a> 。</li><li><code>descriptor</code>要定义或修改的属性描述符。</li></ul><p><code>descriptor</code>属性修饰符:</p><table><thead><tr><th>修饰符</th><th>说明</th></tr></thead><tbody><tr><td><code>configurable</code></td><td>为 <code>true</code> 时，该属性也能从对应的对象上被删除(delete)。 默认为 <code>false</code>。</td></tr><tr><td><code>enumerable</code></td><td>为<code>true</code> 可以被遍历。默认为 <code>false</code></td></tr><tr><td>数据描述符还具有以下可选键值：</td><td></td></tr><tr><td><code>value</code></td><td>该属性对应的值。默认为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined"><code>undefined</code></a>。</td></tr><tr><td><code>writable</code></td><td>为 <code>true</code> 时，属性值<code>value</code>才能被<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Assignment_Operators"><code>赋值运算符</code></a>改变。 默认为 <code>false</code>。存在改属性是不能有<code>get、set</code></td></tr><tr><td>存取描述符还具有以下可选键值：</td><td></td></tr><tr><td><code>get</code></td><td>属性的 getter 函数，如果没有 getter，则为 <code>undefined</code>。当访问该属性时，会调用此函数。执行时不传入任何参数，但是会传入 <code>this</code> 对象（由于继承关系，这里的<code>this</code>并不一定是定义该属性的对象）。该函数的返回值会被用作属性的值。 默认为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined"><code>undefined</code></a>。</td></tr><tr><td><code>set</code></td><td>属性的 setter 函数，如果没有 setter，则为 <code>undefined</code>。当属性值被修改时，会调用此函数。该方法接受一个参数（也就是被赋予的新值），会传入赋值时的 <code>this</code> 对象。 默认为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined"><code>undefined</code></a>。</td></tr></tbody></table><p>简单的例子:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> value;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">&quot;name&quot;</span>, &#123;</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    set(newValue) &#123;</span><br><span class="line">        value = newValue;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;触发set方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> newValue;</span><br><span class="line">    &#125;,</span><br><span class="line">    get() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;触发set方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">obj.name = <span class="string">&quot;zykj&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.name);</span><br></pre></td></tr></table></figure><p>最终打印:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">触发set方法</span><br><span class="line">触发set方法</span><br><span class="line">zykj</span><br></pre></td></tr></table></figure><p>在Vue2.0中我们使用<code>Object.defineProperty</code>给data中的属性加上<code>get、set</code>方法实现数据劫持</p><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><blockquote><p><code>观察者模式</code>又称<code>发布订阅模式(只是观察者模式的一个别称。)</code>，它定义了对象间的一种<code>一对多</code>的关系，让多个观察者对象同时监听某一个主题对象，当一个对象发生改变时，所有依赖于它的对象都将得到通知。</p></blockquote><ul><li><p>优点：更加解耦，支持广播通信</p></li><li><p>缺点：大量观察者，广播有性能问题</p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg@master/img/20200808165331.png" alt="图解"></p><p>这里就简单理解一下 参考: <a href="https://blog.csdn.net/qq_25800235/article/details/86659422">https://blog.csdn.net/qq_25800235/article/details/86659422</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span>  </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    update(data) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;数据修改了&quot;</span>+data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name</span><br><span class="line">        <span class="comment">//用于存放观察者</span></span><br><span class="line">        <span class="built_in">this</span>.observers = []</span><br><span class="line">    &#125;</span><br><span class="line">    addObserver(observer) &#123;</span><br><span class="line">        <span class="built_in">this</span>.observers.push(observer)</span><br><span class="line">    &#125;</span><br><span class="line">    removeObserver(observer) &#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="built_in">this</span>.observers.indexOf(observer)</span><br><span class="line">        <span class="built_in">this</span>.observers.splice(index, <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    notify(data) &#123;</span><br><span class="line">        <span class="built_in">this</span>.observers.forEach(<span class="function">(<span class="params">observer</span>) =&gt;</span> &#123;</span><br><span class="line">            observer.update(data)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ob1 = <span class="keyword">new</span> Observer (<span class="string">&#x27;ob1&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> ob2 = <span class="keyword">new</span> Observer (<span class="string">&#x27;ob2&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> sub = <span class="keyword">new</span> Subject(<span class="string">&#x27;sub&#x27;</span>);</span><br><span class="line">sub.addObserver(ob1);</span><br><span class="line">sub.addObserver(ob2);</span><br><span class="line">sub.notify(<span class="string">&#x27;some context&#x27;</span>); <span class="comment">// 数据修改了some context</span></span><br></pre></td></tr></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>我将从以下几个方面来实现：</p><ul><li><p>初始化Vue</p></li><li><p>编译模板：将指令转换为数据</p></li><li><p>数据劫持：通过<code>Object.defineProperty</code>对每个数据添加get/set方法</p></li><li><p>数据代理：可以直接通过<code>vue</code>实例访问<code>data</code>中的数据、例: <code>vue.people.name</code> 与<code>vue.$data.people.name</code></p></li><li><p>发布订阅模式:  通知观察者更新数据</p></li></ul><h4 id="初始化Vue"><a href="#初始化Vue" class="headerlink" title="初始化Vue"></a>初始化Vue</h4><p>html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;people.name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; people.name &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;&#123; people.age &#125;&#125;</span><br><span class="line">    &#123;&#123; getName &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;change&quot;</span>&gt;</span>更新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先我们需要有一个vue实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vue = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        people: &#123;</span><br><span class="line">            name: <span class="string">&#x27;zykj&#x27;</span>,</span><br><span class="line">            age: <span class="number">18</span></span><br><span class="line">        &#125;,</span><br><span class="line">        message: <span class="string">&quot;&lt;h1&gt;哈哈哈哈&lt;/h1&gt;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">        getName() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;我是&quot;</span> + <span class="built_in">this</span>.people.name</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        change() &#123;</span><br><span class="line">            <span class="built_in">this</span>.people.age = <span class="number">20</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>那我就创建一个<code>Vue</code>类、模仿Vue默认传入<code>options</code>对象、并且对<code>el</code>和<code>data</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">        <span class="built_in">this</span>.$el = options.el</span><br><span class="line">        <span class="built_in">this</span>.$data = options.data</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编译模板"><a href="#编译模板" class="headerlink" title="编译模板"></a>编译模板</h4><p>我们需要在<code>el</code>存在时对模板进行编译、这时我们准备一个<code>Compile</code>进行编译模板、构造函数中需要传入<code>el</code>和<code>当前对象(this)</code></p><ol><li><p>首先是对传入的<code>el</code>(可能传入: <code>#app</code>或者<code>document.querySelector(&quot;#app&quot;)</code>)进行判断、封装一个函数来判断是否为元素节点<code>(nodeType = 1)</code></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是否为元素节点</span></span><br><span class="line">isElementNode(node) &#123;</span><br><span class="line">    <span class="comment">// nodeType 为 1 是元素节点</span></span><br><span class="line">    <span class="keyword">return</span> node.nodeType === <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>因为我们需要对所有节点进行分析、频繁操作会影响性能、可以创建一个<code>文档碎片 document.createDocumentFragment()</code>、遍历每个节点并且<code>添加appendChild</code>到文档碎片中、每次获取第一个节点<code>firstChild</code>并去除、可以依次放入文档碎片中、对每个元素替换完之后再放回<code>appendChild</code>Dom中</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将el中的元素放入文档碎片(内存)中</span></span><br><span class="line">node2fragment(node) &#123;</span><br><span class="line">    <span class="comment">// 创建文档碎片</span></span><br><span class="line">    <span class="keyword">let</span> fragment = <span class="built_in">document</span>.createDocumentFragment();</span><br><span class="line">    <span class="keyword">let</span> firstChild;</span><br><span class="line">    <span class="comment">// 通过每次获取第一个元素来将所有元素添加到文档碎片中</span></span><br><span class="line">    <span class="keyword">while</span> (firstChild = node.firstChild) &#123;</span><br><span class="line">        <span class="comment">// appendChild 具有移动性 可以将页面中的元素移动到文档碎片中</span></span><br><span class="line">        fragment.appendChild(firstChild)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fragment</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>把内容放入文档碎片后、对文档中的数据进行编译：双大括号里的内容转换成真正的数据、<code>compile方法</code>编译、获取<code>Fragment</code>中的中的所有<code>子节点childNodes</code>(返回一个伪数组)、通过扩展运算符(…) 转换成为数组再进行遍历得到每一项(child) 进行判断是否为元素节点(<code>isElementNode</code>)或者是文本节点</p><ul><li><p>如果是<code>元素节点</code>：我们首先遍历的是第一层元素(并且编译元素节点<code>compileElementNode</code>)</p></li><li><p>如果还有子元素、我们需要再进行递归<code>子元素</code>、如果是<code>文本节点</code>: 调用<code>compileText</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编译模板</span></span><br><span class="line">compile(node) &#123;</span><br><span class="line">    <span class="comment">// 获取子节点  返回的是一个伪数组</span></span><br><span class="line">    <span class="keyword">let</span> childNodes = node.childNodes; <span class="comment">// NodeList(7) [text, input, text, div, text, ul, text]</span></span><br><span class="line">    <span class="comment">// 通过...转成 数组</span></span><br><span class="line">    [...childNodes].forEach(<span class="function">(<span class="params">child</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//判断是为元素节点 如 &lt;input type=&quot;text&quot; v-model=&quot;people.name&quot;&gt;</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.isElementNode(child)) &#123;</span><br><span class="line">            <span class="comment">// 编译元素节点</span></span><br><span class="line">            <span class="built_in">this</span>.compileElementNode(child);</span><br><span class="line">            <span class="comment">// 如果是元素 需要判断自己的子节点 (递归)</span></span><br><span class="line">            <span class="built_in">this</span>.compile(child)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 编译文本节点</span></span><br><span class="line">            <span class="built_in">this</span>.compileText(child);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>再来实现一下这两个方法</p><p> <code>compileElementNode</code></p><ul><li><p>到这里了我们可以确定获取到<code>&lt;input type=&quot;text&quot; v-model=&quot;people.name&quot;&gt;</code>、开始获取每个<code>属性值(attributes)</code></p></li><li><p>同样进行<code>遍历</code>得到每个属性(是以对象形式的、name为key、value是value)、进行解构赋值(把<code>value</code>重新命名为<code>expr</code>)</p></li><li><p>判断是否以<code>v-</code>开头的(<code>isDirective</code>)、获取到<code>v-model</code>在进行(<code>-</code>)分割得到对应的<code>指令directive:事件</code>、当然如果是<code>v-on:click</code>需要再进行分隔得到<code>directiveName</code>和事件名<code>eventName</code>、需要一个<code>工具类CompileUtil</code>将<code>表达式expr(people.name)</code> 替换成对应的数据、<code>expr</code>去除两边空格</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编译元素</span></span><br><span class="line">compileElementNode(node) &#123;</span><br><span class="line">    <span class="comment">// 返回的是一个伪数组</span></span><br><span class="line">    <span class="keyword">let</span> attributes = node.attributes;</span><br><span class="line">    [...attributes].forEach(<span class="function">(<span class="params">attr</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 通过解构赋值获取 name(type) 和 value(text) </span></span><br><span class="line">        <span class="keyword">let</span> &#123; name, <span class="attr">value</span>: expr &#125; = attr;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.isDirective(name)) &#123;</span><br><span class="line">            <span class="comment">//获取指令、 如 v-model 获取 model v-on:click</span></span><br><span class="line">            <span class="keyword">let</span> [, directive] = name.split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">            <span class="keyword">let</span> [directiveName, eventName] = directive.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">            CompileUtil[directiveName](node, expr.trim(), <span class="built_in">this</span>.vm, eventName)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断是否为指令</span></span><br><span class="line">isDirective(attrName) &#123;</span><br><span class="line">    <span class="comment">//ES6 语法 判断是否以 v- 开头</span></span><br><span class="line">    <span class="keyword">return</span> attrName.startsWith(<span class="string">&quot;v-&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>compileText</code></p><p><code>文本节点</code>通过<code>textContent</code>获取文本内容、得到的内容我们需要判断是否含有  &#123;&#123; people.name &#125;&#125; 、通过正则表达式<code>/\&#123;\&#123;(.+?)\&#125;\&#125;/</code>判断、再通过<code>工具类CompileUtil</code>将<code>表达式expr(people.name)</code> 替换成对应的数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编译文本</span></span><br><span class="line">compileText(node) &#123;</span><br><span class="line">    <span class="keyword">let</span> content = node.textContent; <span class="comment">// 获取文本内容</span></span><br><span class="line">    <span class="comment">//匹配 &#123;&#123; xxx &#125;&#125; .+? 匹配(任意字符重复一次或更多次)再重复0次或一次避免匹配 &#123;&#123; aaa &#125;&#125; &#123;&#123; bbb &#125;&#125;</span></span><br><span class="line">    <span class="keyword">let</span> reg = <span class="regexp">/\&#123;\&#123;(.+?)\&#125;\&#125;/</span>;</span><br><span class="line">    <span class="keyword">if</span> (reg.test(content)) &#123;</span><br><span class="line">        CompileUtil[<span class="string">&#x27;text&#x27;</span>](node, content, <span class="built_in">this</span>.vm)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>工具类<code>CompileUtil</code>    </p><p> 通过不同指令执行不同的方法:</p><p> 首先对<code>CompileUtil[directiveName](node, expr.trim(), this.vm, eventName)</code>进行分析：</p><p> 为了确保能够正确的设置值和获取值我们需要准备<code>getVal(vm, expr)</code>和<code>setVal(vm, expr, value)</code></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">getVal(vm, expr) &#123; <span class="comment">// 我们以 people.name 进行分析</span></span><br><span class="line">    <span class="keyword">return</span> expr.split(<span class="string">&quot;.&quot;</span>).reduce(<span class="function">(<span class="params">data, current</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">/* data 前一项数据 current 当前数据</span></span><br><span class="line"><span class="comment">        第一次 从 vm.$data[people] 返回 people: &#123; name: 18 &#125;</span></span><br><span class="line"><span class="comment">        第二次 people[name] 得到 18</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">return</span> data[current];</span><br><span class="line">    &#125;, vm.$data<span class="comment">/*这里为初始的值*/</span>)</span><br><span class="line">&#125;,</span><br><span class="line">setVal(vm, expr, value) &#123; <span class="comment">// 将 people.name 设置为新值</span></span><br><span class="line">    expr.split(<span class="string">&quot;.&quot;</span>).reduce(<span class="function">(<span class="params">data, current, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index == arr.length - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 只有当前索引等于数组的最后一项的索引 将修改数据 people[name] = value</span></span><br><span class="line">            <span class="keyword">return</span> data[current] = value</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data[current]</span><br><span class="line">    &#125;, vm.$data)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p> 以及修改值的方法</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//工具类替换模板内容</span></span><br><span class="line">CompileUtil = &#123;</span><br><span class="line">    <span class="comment">//... </span></span><br><span class="line">    <span class="comment">//更新数据</span></span><br><span class="line">    updater: &#123;</span><br><span class="line">        <span class="comment">// v-mdoel 数据修改</span></span><br><span class="line">        modelUpdater(node, value) &#123;</span><br><span class="line">            node.value = value;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 文本数据修改</span></span><br><span class="line">        textUpdater(node, value) &#123;</span><br><span class="line">            node.textContent = value</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// v-html 数据修改</span></span><br><span class="line">        htmlUpdater(node,value)&#123;</span><br><span class="line">            node.innerHTML = value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>v-model</code>指令 <code>model方法</code></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// v-model 指令  node为元素节点、expr为表达式(people.name)、vm当前实例</span></span><br><span class="line">model(node, expr, vm) &#123;</span><br><span class="line"><span class="keyword">let</span> fn = <span class="built_in">this</span>.updater[<span class="string">&#x27;modelUpdater&#x27;</span>]</span><br><span class="line"><span class="comment">// 给input 赋予 value 属性 node.value = xxx</span></span><br><span class="line"><span class="keyword">let</span> val = <span class="built_in">this</span>.getVal(vm, expr)</span><br><span class="line"><span class="comment">//监听事件</span></span><br><span class="line">node.addEventListener(<span class="string">&#x27;input&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">//值修改时修改数据</span></span><br><span class="line"><span class="built_in">this</span>.setVal(vm, expr, event.target.value)</span><br><span class="line">&#125;)</span><br><span class="line">fn(node, val)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>&#123;&#123;  &#125;&#125; 模板 <code>text</code>方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">text(node, expr, vm) &#123;</span><br><span class="line">    <span class="keyword">let</span> fn = <span class="built_in">this</span>.updater[<span class="string">&#x27;textUpdater&#x27;</span>]</span><br><span class="line">    <span class="comment">// 通过 replace 将 &#123;&#123; people.name &#125;&#125; 替换为对应的值</span></span><br><span class="line">    <span class="keyword">let</span> content = expr.replace(<span class="regexp">/\&#123;\&#123;(.+?)\&#125;\&#125;/g</span>, <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// args[1]: args 是一个数组、第二个参数是匹配到的内容</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getVal(vm, args[<span class="number">1</span>].trim())</span><br><span class="line">    &#125;)</span><br><span class="line">    fn(node, content)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><code>v-on:click</code>指令<code>on方法</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">on(node, expr, vm, eventName) &#123;</span><br><span class="line">    node.addEventListener(eventName, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 相当于 vue[change]()</span></span><br><span class="line">        vm[expr].call(vm, event)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><code>v-html </code>指令<code>html</code>方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">html(node,expr,vm)&#123;</span><br><span class="line">    <span class="keyword">let</span> fn = <span class="built_in">this</span>.updater[<span class="string">&#x27;htmlUpdater&#x27;</span>]</span><br><span class="line">    <span class="comment">// 给input 赋予 value 属性 node.value = xxx</span></span><br><span class="line">    <span class="keyword">let</span> val = <span class="built_in">this</span>.getVal(vm, expr)</span><br><span class="line">    fn(node, val)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>完整代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//工具类替换模板内容</span></span><br><span class="line">CompileUtil = &#123;</span><br><span class="line">    getVal(vm, expr) &#123;</span><br><span class="line">        <span class="keyword">return</span> expr.split(<span class="string">&quot;.&quot;</span>).reduce(<span class="function">(<span class="params">data, current</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> data[current];</span><br><span class="line">        &#125;, vm.$data)</span><br><span class="line">    &#125;,</span><br><span class="line">    setVal(vm, expr, value) &#123;</span><br><span class="line">        expr.split(<span class="string">&quot;.&quot;</span>).reduce(<span class="function">(<span class="params">data, current, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (index == arr.length - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> data[current] = value</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> data[current]</span><br><span class="line">        &#125;, vm.$data)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// v-model 指令  node为元素节点、expr为表达式(people.name)、vm当前实例</span></span><br><span class="line">    model(node, expr, vm) &#123;</span><br><span class="line">        <span class="keyword">let</span> fn = <span class="built_in">this</span>.updater[<span class="string">&#x27;modelUpdater&#x27;</span>]</span><br><span class="line">        <span class="comment">// 给input 赋予 value 属性 node.value = xxx</span></span><br><span class="line">        <span class="keyword">let</span> val = <span class="built_in">this</span>.getVal(vm, expr)</span><br><span class="line">        node.addEventListener(<span class="string">&#x27;input&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.setVal(vm, expr, event.target.value)</span><br><span class="line">        &#125;)</span><br><span class="line">        fn(node, val)</span><br><span class="line">    &#125;,</span><br><span class="line">    on(node, expr, vm, eventName) &#123;</span><br><span class="line">        node.addEventListener(eventName, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">            vm[expr].call(vm, event)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    html(node,expr,vm)&#123;</span><br><span class="line">        <span class="keyword">let</span> fn = <span class="built_in">this</span>.updater[<span class="string">&#x27;htmlUpdater&#x27;</span>]</span><br><span class="line">        <span class="comment">// 给input 赋予 value 属性 node.value = xxx</span></span><br><span class="line">        <span class="keyword">let</span> val = <span class="built_in">this</span>.getVal(vm, expr)</span><br><span class="line">        fn(node, val)</span><br><span class="line">    &#125;,</span><br><span class="line">    text(node, expr, vm) &#123;</span><br><span class="line">        <span class="keyword">let</span> fn = <span class="built_in">this</span>.updater[<span class="string">&#x27;textUpdater&#x27;</span>]</span><br><span class="line">        <span class="comment">// 通过 replace 将 &#123;&#123; people.name &#125;&#125; 替换为对应的值</span></span><br><span class="line">        <span class="keyword">let</span> content = expr.replace(<span class="regexp">/\&#123;\&#123;(.+?)\&#125;\&#125;/g</span>, <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// args[1]: args 是一个数组、第二个参数是匹配到的内容</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.getVal(vm, args[<span class="number">1</span>].trim())</span><br><span class="line">        &#125;)</span><br><span class="line">        fn(node, content)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//更新数据</span></span><br><span class="line">    updater: &#123;</span><br><span class="line">        modelUpdater(node, value) &#123;</span><br><span class="line">            node.value = value;</span><br><span class="line">        &#125;,</span><br><span class="line">        textUpdater(node, value) &#123;</span><br><span class="line">            node.textContent = value</span><br><span class="line">        &#125;,</span><br><span class="line">        htmlUpdater(node,value)&#123;</span><br><span class="line">            node.innerHTML = value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h4 id="数据劫持"><a href="#数据劫持" class="headerlink" title="数据劫持"></a>数据劫持</h4><p>在我们判断数据是否存在时、首先需要给所有数据添加<code>set/get</code>、通过<code>Observer类</code></p><ul><li><code>observer(data)</code>方法 首先判断data是否存在并且是否为对象类型、是就进行<code>for in</code>遍历、<code>Recative</code>化</li><li>通过<code>Object.defineProperty</code>添加get和set方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 改类实现数据劫持、添加set/get方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(data) &#123;</span><br><span class="line">        <span class="built_in">this</span>.observer(data)</span><br><span class="line">    &#125;</span><br><span class="line">    observer(data) &#123;</span><br><span class="line">        <span class="keyword">if</span> (data &amp;&amp; <span class="keyword">typeof</span> data == <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">                <span class="built_in">this</span>.defineRecative(key, data, data[key])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    defineRecative(key, data, value) &#123;</span><br><span class="line">        <span class="comment">// 每次添加set/get方法时还需要递归遍历 如 people:&#123; zykj: &#123; age: 18 &#125;  &#125; </span></span><br><span class="line">        <span class="built_in">this</span>.observer(value)</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">            configurable: <span class="literal">true</span>,</span><br><span class="line">            enumerable: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">// 因为普通函数的this的指向为当前对象</span></span><br><span class="line">            <span class="comment">// 我们使用箭头函数将this指向函数定义在的对象里 </span></span><br><span class="line">            set: <span class="function">(<span class="params">newValue</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (newValue !== value) &#123;</span><br><span class="line">                    <span class="comment">// 给修改的新值重新添加get/set</span></span><br><span class="line">                    <span class="built_in">this</span>.observer(newValue)</span><br><span class="line">                    value = newValue</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            get() &#123;</span><br><span class="line">                <span class="keyword">return</span> value</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h4><p>使用过vue我们可以知道、<code>上面的示例中</code>、可以通过<code>vue.people.name</code>、访问到数据、这样就进行了代理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代理 使得 通过 vue.people.name 访问和修改数据</span></span><br><span class="line">proxyData(data) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">        <span class="comment">// 这里第一个参数 this就是vue示例 通过vue访问到 vue.$data中的数据</span></span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(<span class="built_in">this</span>, key, &#123;</span><br><span class="line">            configurable: <span class="literal">true</span>,</span><br><span class="line">            enumerable: <span class="literal">true</span>,</span><br><span class="line">            set(newValue) &#123;</span><br><span class="line">                data[key] = newValue</span><br><span class="line">            &#125;,</span><br><span class="line">            get() &#123;</span><br><span class="line">                <span class="keyword">return</span> data[key]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h4><p><code>Watcher</code>类似vue中的<code>watch</code>、可以监听数据的变化 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">    <span class="string">&#x27;data中的数据&#x27;</span>(newValue,oldValue)=&gt;&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时需要<code>Watcher</code>来监听数据的变化来做出相应的改变</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (观察者) 发布订阅模式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(vm, expr, callback) &#123;</span><br><span class="line">        <span class="built_in">this</span>.vm = vm;</span><br><span class="line">        <span class="built_in">this</span>.expr = expr.trim();</span><br><span class="line">        <span class="comment">// 回调函数 当数据发送变化时传入新值进行改变</span></span><br><span class="line">        <span class="built_in">this</span>.callback = callback</span><br><span class="line">        <span class="comment">// 保存变化之前的值</span></span><br><span class="line">        <span class="built_in">this</span>.oldValue = <span class="built_in">this</span>.get()</span><br><span class="line">    &#125;</span><br><span class="line">    get() &#123;</span><br><span class="line">        <span class="comment">//依赖注入 将 当前对象存入 Dep.target 中</span></span><br><span class="line">        Dep.target = <span class="built_in">this</span></span><br><span class="line">        <span class="keyword">let</span> value = CompileUtil.getVal(<span class="built_in">this</span>.vm, <span class="built_in">this</span>.expr)</span><br><span class="line">        Dep.target = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    &#125;</span><br><span class="line">    update() &#123;</span><br><span class="line">        <span class="keyword">let</span> newValue = CompileUtil.getVal(<span class="built_in">this</span>.vm, <span class="built_in">this</span>.expr)</span><br><span class="line">        <span class="comment">// 当 新值和旧值不相同时才进行回调</span></span><br><span class="line">        <span class="keyword">if</span> (newValue != <span class="built_in">this</span>.oldValue) &#123;</span><br><span class="line">            <span class="built_in">this</span>.callback(newValue)</span><br><span class="line">            <span class="built_in">this</span>.oldValue = newValue</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dep 用于存放 Watcher 来通知 数据更新</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于通知观察者更新数据</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="comment">//用于存放 Watcher</span></span><br><span class="line">        <span class="built_in">this</span>.subs = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将观察者添加进一个数组里</span></span><br><span class="line">    addSub(watcher) &#123;</span><br><span class="line">        <span class="built_in">this</span>.subs.push(watcher)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通知每个 watcher进行数据更新</span></span><br><span class="line">    notify() &#123;</span><br><span class="line">        <span class="built_in">this</span>.subs.forEach(<span class="function">(<span class="params">watcher</span>) =&gt;</span> watcher.update())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题何时 创建 Dep 和 Watcher</p><p>创建<code>Dep</code>需要在数据劫持时</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">defineRecative(key, data, value) &#123;</span><br><span class="line">    <span class="built_in">this</span>.observer(value)</span><br><span class="line">    <span class="keyword">let</span> dep = <span class="keyword">new</span> Dep() <span class="comment">//给每个属性添加发布订阅的功能</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">        configurable: <span class="literal">true</span>,</span><br><span class="line">        enumerable: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 因为普通函数的this的指向为当前对象</span></span><br><span class="line">        <span class="comment">// 我们使用箭头函数将this指向函数定义在的对象里 </span></span><br><span class="line">        set: <span class="function">(<span class="params">newValue</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (newValue !== value) &#123;</span><br><span class="line">                <span class="comment">//给新的值添加get/set</span></span><br><span class="line">                <span class="built_in">this</span>.observer(newValue)</span><br><span class="line">                value = newValue</span><br><span class="line">                <span class="comment">// 数据修改时对数据进行更新</span></span><br><span class="line">                dep.notify()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        get() &#123;</span><br><span class="line">            <span class="comment">// Dep.target 为 Dep对象、当Dep.target存在时将dep添加进Wacther的数组中</span></span><br><span class="line">            Dep.target &amp;&amp; dep.addSub(Dep.target)</span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建<code>Watcher</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// v-model 指令  node为元素节点、expr为表达式(people.name)、vm当前实例</span></span><br><span class="line">model(node, expr, vm) &#123;</span><br><span class="line">    <span class="keyword">let</span> fn = <span class="built_in">this</span>.updater[<span class="string">&#x27;modelUpdater&#x27;</span>]</span><br><span class="line">    <span class="comment">// 给input 赋予 value 属性 node.value = xxx</span></span><br><span class="line">    <span class="keyword">let</span> val = <span class="built_in">this</span>.getVal(vm, expr)</span><br><span class="line">    <span class="keyword">new</span> Watcher(vm, expr, <span class="function">(<span class="params">newValue</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 当数据更新时会调用这个方法对数据进行更新</span></span><br><span class="line">        fn(node, newValue)</span><br><span class="line">    &#125;)</span><br><span class="line">    node.addEventListener(<span class="string">&#x27;input&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setVal(vm, expr, event.target.value)</span><br><span class="line">    &#125;)</span><br><span class="line">    fn(node, val)</span><br><span class="line">&#125;,</span><br><span class="line">html(node, expr, vm) &#123;</span><br><span class="line">     <span class="keyword">let</span> fn = <span class="built_in">this</span>.updater[<span class="string">&#x27;htmlUpdater&#x27;</span>]</span><br><span class="line">     <span class="comment">// 给input 赋予 value 属性 node.value = xxx</span></span><br><span class="line">     <span class="keyword">let</span> val = <span class="built_in">this</span>.getVal(vm, expr)</span><br><span class="line">     <span class="keyword">new</span> Watcher(vm, expr, <span class="function">(<span class="params">newValue</span>) =&gt;</span> &#123;</span><br><span class="line">         <span class="comment">// 当数据更新时会调用这个方法对数据进行更新</span></span><br><span class="line">         fn(node, newValue)</span><br><span class="line">     &#125;)</span><br><span class="line">     fn(node, val)</span><br><span class="line"> &#125;,</span><br><span class="line">getContentValue(vm, expr) &#123;</span><br><span class="line">    <span class="comment">// 遍历表达式 &#123;&#123; peoele.name &#125;&#125; 将表达式替换成数据返回</span></span><br><span class="line">    <span class="keyword">return</span> expr.replace(<span class="regexp">/\&#123;\&#123;(.+?)\&#125;\&#125;/g</span>, <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getVal(vm, args[<span class="number">1</span>].trim())</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">text(node, expr, vm) &#123;</span><br><span class="line">    <span class="keyword">let</span> fn = <span class="built_in">this</span>.updater[<span class="string">&#x27;textUpdater&#x27;</span>]</span><br><span class="line">    <span class="comment">// 通过 replace 将 &#123;&#123; people.name &#125;&#125; 替换为对应的值</span></span><br><span class="line">    <span class="keyword">let</span> content = expr.replace(<span class="regexp">/\&#123;\&#123;(.+?)\&#125;\&#125;/g</span>, <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> Watcher(vm, args[<span class="number">1</span>], <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            fn(node, <span class="built_in">this</span>.getContentValue(vm, expr))</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// args[1]: args 是一个数组、第二个参数是匹配到的内容</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getVal(vm, args[<span class="number">1</span>].trim())</span><br><span class="line">    &#125;)</span><br><span class="line">    fn(node, content)</span><br><span class="line">&#125;,    </span><br></pre></td></tr></table></figure><p>最终效果:</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg@master/img/20200808182949.png"></p><p>每个Dep中存放对应的值依赖</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg@master/img/20200808183836.png"></p><p>当数据改变时、会调用<code>dep.notify</code>通知 Dep 对象中的所有Wachter数据更新、这时Watcher的第三个参数: 回调函数就会修改数据了</p><h4 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">        <span class="built_in">this</span>.$el = options.el</span><br><span class="line">        <span class="built_in">this</span>.$data = options.data</span><br><span class="line">        <span class="keyword">let</span> computed = options.computed</span><br><span class="line">        <span class="keyword">let</span> methods = options.methods</span><br><span class="line">        <span class="comment">// 我们需要判断 el 是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.$el) &#123;</span><br><span class="line">            <span class="comment">// 数据劫持</span></span><br><span class="line">            <span class="keyword">new</span> Observer(<span class="built_in">this</span>.$data)</span><br><span class="line">            <span class="comment">//计算属性</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> computed) &#123;</span><br><span class="line">                <span class="built_in">Object</span>.defineProperty(<span class="built_in">this</span>.$data, key, &#123;</span><br><span class="line">                    get: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> computed[key].call(<span class="built_in">this</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> methods) &#123;</span><br><span class="line">                <span class="built_in">Object</span>.defineProperty(<span class="built_in">this</span>, key, &#123;</span><br><span class="line">                    get() &#123;</span><br><span class="line">                        <span class="keyword">return</span> methods[key]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 数据代理</span></span><br><span class="line">            <span class="built_in">this</span>.proxyData(<span class="built_in">this</span>.$data)</span><br><span class="line">            <span class="comment">//创建编译模板 传入 el 和 当前对象</span></span><br><span class="line">            <span class="keyword">new</span> Compile(<span class="built_in">this</span>.$el, <span class="built_in">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//代理 使得 通过 vue.people.name 访问和修改数据</span></span><br><span class="line">    proxyData(data) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(<span class="built_in">this</span>, key, &#123;</span><br><span class="line">                configurable: <span class="literal">true</span>,</span><br><span class="line">                enumerable: <span class="literal">true</span>,</span><br><span class="line">                set(newValue) &#123;</span><br><span class="line">                    data[key] = newValue</span><br><span class="line">                &#125;,</span><br><span class="line">                get() &#123;</span><br><span class="line">                    <span class="keyword">return</span> data[key]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译模板</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Compile</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(el, vm) &#123;</span><br><span class="line">        <span class="comment">// 当用户传入 #app 与 document.querySelector(&#x27;#app&#x27;) 进行判断</span></span><br><span class="line">        <span class="built_in">this</span>.el = <span class="built_in">this</span>.isElementNode(el) ? el : <span class="built_in">document</span>.querySelector(el)</span><br><span class="line">        <span class="built_in">this</span>.vm = vm</span><br><span class="line">        <span class="comment">// 因为我们需要操作每个元素、频繁操作会导致页面回流重绘多次、避免发送需要把元素添加到内存中</span></span><br><span class="line">        <span class="keyword">let</span> fragment = <span class="built_in">this</span>.node2fragment(<span class="built_in">this</span>.el)</span><br><span class="line">        <span class="comment">// 把节点中需要替换的内容进行替换</span></span><br><span class="line">        <span class="comment">// 编译模板</span></span><br><span class="line">        <span class="built_in">this</span>.compile(fragment)</span><br><span class="line">        <span class="comment">// 再把内容放回页面</span></span><br><span class="line">        <span class="built_in">this</span>.el.appendChild(fragment)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断是否为元素节点</span></span><br><span class="line">    isElementNode(node) &#123;</span><br><span class="line">        <span class="comment">// nodeType 为 1 是元素节点</span></span><br><span class="line">        <span class="keyword">return</span> node.nodeType === <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将el中的元素放入文档碎片(内存)中</span></span><br><span class="line">    node2fragment(node) &#123;</span><br><span class="line">        <span class="comment">// 创建文档碎片</span></span><br><span class="line">        <span class="keyword">let</span> fragment = <span class="built_in">document</span>.createDocumentFragment();</span><br><span class="line">        <span class="keyword">let</span> firstChild;</span><br><span class="line">        <span class="comment">// 通过每次获取第一个元素来将所有元素添加到文档碎片中</span></span><br><span class="line">        <span class="keyword">while</span> (firstChild = node.firstChild) &#123;</span><br><span class="line">            <span class="comment">// appendChild 具有移动性 可以将页面中的元素移动到文档碎片中</span></span><br><span class="line">            fragment.appendChild(firstChild)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fragment</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//编译模板</span></span><br><span class="line">    compile(node) &#123;</span><br><span class="line">        <span class="comment">// 获取子节点  返回的是一个伪数组</span></span><br><span class="line">        <span class="keyword">let</span> childNodes = node.childNodes; <span class="comment">// NodeList(7) [text, input, text, div, text, ul, text]</span></span><br><span class="line">        <span class="comment">// 通过...转成 数组</span></span><br><span class="line">        [...childNodes].forEach(<span class="function">(<span class="params">child</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//判断是为元素节点 如 &lt;input type=&quot;text&quot; v-model=&quot;people.name&quot;&gt;</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.isElementNode(child)) &#123;</span><br><span class="line">                <span class="built_in">this</span>.compileElementNode(child);</span><br><span class="line">                <span class="comment">// 如果是元素 需要判断自己的子节点 (递归)</span></span><br><span class="line">                <span class="built_in">this</span>.compile(child)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.compileText(child);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 编译元素</span></span><br><span class="line">    compileElementNode(node) &#123;</span><br><span class="line">        <span class="comment">// 返回的是一个伪数组</span></span><br><span class="line">        <span class="keyword">let</span> attributes = node.attributes;</span><br><span class="line">        [...attributes].forEach(<span class="function">(<span class="params">attr</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 通过解构复制获取 name(type) 和 value(text) </span></span><br><span class="line">            <span class="keyword">let</span> &#123; name, <span class="attr">value</span>: expr &#125; = attr;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.isDirective(name)) &#123;</span><br><span class="line">                <span class="comment">//获取指令、 如 v-model 获取 model v-on:click</span></span><br><span class="line">                <span class="keyword">let</span> [, directive] = name.split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">                <span class="keyword">let</span> [directiveName, eventName] = directive.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">                CompileUtil[directiveName](node, expr.trim(), <span class="built_in">this</span>.vm, eventName)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 编译文本</span></span><br><span class="line">    compileText(node) &#123;</span><br><span class="line">        <span class="keyword">let</span> content = node.textContent; <span class="comment">// 获取文本内容</span></span><br><span class="line">        <span class="comment">//匹配 &#123;&#123; xxx &#125;&#125; .+? 匹配(任意字符重复一次或更多次)再重复0次或一次避免匹配 &#123;&#123; aaa &#125;&#125; &#123;&#123; bbb &#125;&#125;</span></span><br><span class="line">        <span class="keyword">let</span> reg = <span class="regexp">/\&#123;\&#123;(.+?)\&#125;\&#125;/</span>;</span><br><span class="line">        <span class="keyword">if</span> (reg.test(content)) &#123;</span><br><span class="line">            CompileUtil[<span class="string">&#x27;text&#x27;</span>](node, content, <span class="built_in">this</span>.vm)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断是否为指令</span></span><br><span class="line">    isDirective(attrName) &#123;</span><br><span class="line">        <span class="comment">//ES6 语法 判断是否以 v- 开头</span></span><br><span class="line">        <span class="keyword">return</span> attrName.startsWith(<span class="string">&quot;v-&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//工具类替换模板内容</span></span><br><span class="line">CompileUtil = &#123;</span><br><span class="line">    getVal(vm, expr) &#123;</span><br><span class="line">        <span class="keyword">return</span> expr.split(<span class="string">&quot;.&quot;</span>).reduce(<span class="function">(<span class="params">data, current</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> data[current];</span><br><span class="line">        &#125;, vm.$data)</span><br><span class="line">    &#125;,</span><br><span class="line">    setVal(vm, expr, value) &#123;</span><br><span class="line">        expr.split(<span class="string">&quot;.&quot;</span>).reduce(<span class="function">(<span class="params">data, current, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (index == arr.length - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> data[current] = value</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> data[current]</span><br><span class="line">        &#125;, vm.$data)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// v-model 指令  node为元素节点、expr为表达式(people.name)、vm当前实例</span></span><br><span class="line">    model(node, expr, vm) &#123;</span><br><span class="line">        <span class="keyword">let</span> fn = <span class="built_in">this</span>.updater[<span class="string">&#x27;modelUpdater&#x27;</span>]</span><br><span class="line">        <span class="comment">// 给input 赋予 value 属性 node.value = xxx</span></span><br><span class="line">        <span class="keyword">let</span> val = <span class="built_in">this</span>.getVal(vm, expr)</span><br><span class="line">        <span class="keyword">new</span> Watcher(vm, expr, <span class="function">(<span class="params">newValue</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 当数据更新时会调用这个方法对数据进行更新</span></span><br><span class="line">            fn(node, newValue)</span><br><span class="line">        &#125;)</span><br><span class="line">        node.addEventListener(<span class="string">&#x27;input&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.setVal(vm, expr, event.target.value)</span><br><span class="line">        &#125;)</span><br><span class="line">        fn(node, val)</span><br><span class="line">    &#125;,</span><br><span class="line">    on(node, expr, vm, eventName) &#123;</span><br><span class="line">        node.addEventListener(eventName, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">            vm[expr].call(vm, event)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    html(node, expr, vm) &#123;</span><br><span class="line">        <span class="keyword">let</span> fn = <span class="built_in">this</span>.updater[<span class="string">&#x27;htmlUpdater&#x27;</span>]</span><br><span class="line">        <span class="comment">// 给input 赋予 value 属性 node.value = xxx</span></span><br><span class="line">        <span class="keyword">let</span> val = <span class="built_in">this</span>.getVal(vm, expr)</span><br><span class="line">        <span class="keyword">new</span> Watcher(vm, expr, <span class="function">(<span class="params">newValue</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 当数据更新时会调用这个方法对数据进行更新</span></span><br><span class="line">            fn(node, newValue)</span><br><span class="line">        &#125;)</span><br><span class="line">        fn(node, val)</span><br><span class="line">    &#125;,</span><br><span class="line">    getContentValue(vm, expr) &#123;</span><br><span class="line">        <span class="comment">// 遍历表达式 &#123;&#123; peoele.name &#125;&#125; 将表达式替换成数据返回</span></span><br><span class="line">        <span class="keyword">return</span> expr.replace(<span class="regexp">/\&#123;\&#123;(.+?)\&#125;\&#125;/g</span>, <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.getVal(vm, args[<span class="number">1</span>].trim())</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    text(node, expr, vm) &#123;</span><br><span class="line">        <span class="keyword">let</span> fn = <span class="built_in">this</span>.updater[<span class="string">&#x27;textUpdater&#x27;</span>]</span><br><span class="line">        <span class="comment">// 通过 replace 将 &#123;&#123; people.name &#125;&#125; 替换为对应的值</span></span><br><span class="line">        <span class="keyword">let</span> content = expr.replace(<span class="regexp">/\&#123;\&#123;(.+?)\&#125;\&#125;/g</span>, <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> Watcher(vm, args[<span class="number">1</span>], <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                fn(node, <span class="built_in">this</span>.getContentValue(vm, expr))</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">// args[1]: args 是一个数组、第二个参数是匹配到的内容</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.getVal(vm, args[<span class="number">1</span>].trim())</span><br><span class="line">        &#125;)</span><br><span class="line">        fn(node, content)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//更新数据</span></span><br><span class="line">    updater: &#123;</span><br><span class="line">        modelUpdater(node, value) &#123;</span><br><span class="line">            node.value = value;</span><br><span class="line">        &#125;,</span><br><span class="line">        textUpdater(node, value) &#123;</span><br><span class="line">            node.textContent = value</span><br><span class="line">        &#125;,</span><br><span class="line">        htmlUpdater(node, value) &#123;</span><br><span class="line">            node.innerHTML = value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改类实现数据劫持、添加set/get方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(data) &#123;</span><br><span class="line">        <span class="built_in">this</span>.observer(data)</span><br><span class="line">    &#125;</span><br><span class="line">    observer(data) &#123;</span><br><span class="line">        <span class="keyword">if</span> (data &amp;&amp; <span class="keyword">typeof</span> data == <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">                <span class="built_in">this</span>.defineRecative(key, data, data[key])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    defineRecative(key, data, value) &#123;</span><br><span class="line">        <span class="built_in">this</span>.observer(value)</span><br><span class="line">        <span class="keyword">let</span> dep = <span class="keyword">new</span> Dep() <span class="comment">//给每个属性添加发布订阅的功能</span></span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">            configurable: <span class="literal">true</span>,</span><br><span class="line">            enumerable: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">// 因为普通函数的this的指向为当前对象</span></span><br><span class="line">            <span class="comment">// 我们使用箭头函数将this指向函数定义在的对象里 </span></span><br><span class="line">            set: <span class="function">(<span class="params">newValue</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (newValue !== value) &#123;</span><br><span class="line">                    <span class="comment">//给新的值添加get/set</span></span><br><span class="line">                    <span class="built_in">this</span>.observer(newValue)</span><br><span class="line">                    value = newValue</span><br><span class="line">                    dep.notify()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            get() &#123;</span><br><span class="line">                Dep.target &amp;&amp; dep.addSub(Dep.target)</span><br><span class="line">                <span class="keyword">return</span> value</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this.$watch(&#x27;监听的数据&#x27;,(newValue,oldValue)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//  </span></span><br><span class="line"><span class="comment">//&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// (观察者) 发布订阅模式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(vm, expr, callback) &#123;</span><br><span class="line">        <span class="built_in">this</span>.vm = vm;</span><br><span class="line">        <span class="built_in">this</span>.expr = expr.trim();</span><br><span class="line">        <span class="built_in">this</span>.callback = callback</span><br><span class="line">        <span class="comment">// 保存变化之前的值</span></span><br><span class="line">        <span class="built_in">this</span>.oldValue = <span class="built_in">this</span>.get()</span><br><span class="line">    &#125;</span><br><span class="line">    get() &#123;</span><br><span class="line">        <span class="comment">//依赖注入 将 当前对象存入 Dep.target 中</span></span><br><span class="line">        Dep.target = <span class="built_in">this</span></span><br><span class="line">        <span class="keyword">let</span> value = CompileUtil.getVal(<span class="built_in">this</span>.vm, <span class="built_in">this</span>.expr)</span><br><span class="line">        Dep.target = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    &#125;</span><br><span class="line">    update() &#123;</span><br><span class="line">        <span class="keyword">let</span> newValue = CompileUtil.getVal(<span class="built_in">this</span>.vm, <span class="built_in">this</span>.expr)</span><br><span class="line">        <span class="keyword">if</span> (newValue != <span class="built_in">this</span>.oldValue) &#123;</span><br><span class="line">            <span class="built_in">this</span>.callback(newValue)</span><br><span class="line">            <span class="built_in">this</span>.oldValue = newValue</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于通知观察者更新数据</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="comment">//用于存放 Watcher</span></span><br><span class="line">        <span class="built_in">this</span>.subs = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将观察者添加进一个数组里</span></span><br><span class="line">    addSub(watcher) &#123;</span><br><span class="line">        <span class="built_in">this</span>.subs.push(watcher)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通知每个 watcher进行数据更新</span></span><br><span class="line">    notify() &#123;</span><br><span class="line">        <span class="built_in">this</span>.subs.forEach(<span class="function">(<span class="params">watcher</span>) =&gt;</span> watcher.update())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>代码: <a href="https://github.com/vuejs/vue/tree/v2.6.11">https://github.com/vuejs/vue/tree/v2.6.11</a></p><p>我们从 <code>new Vue</code>的时候开始分析(执行 new Vue 时会依次执行以下方法):</p><ol><li><p><code>Vue.prototype._init(option)</code></p></li><li><p><code>initState(vm)</code></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码位置 https://github.com/vuejs/vue/blob/v2.6.11/src/core/instance/state.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initState</span> (<span class="params">vm: Component</span>) </span>&#123;</span><br><span class="line">  vm._watchers = []</span><br><span class="line">  <span class="keyword">const</span> opts = vm.$options</span><br><span class="line">  <span class="keyword">if</span> (opts.props) initProps(vm, opts.props)</span><br><span class="line">  <span class="keyword">if</span> (opts.methods) initMethods(vm, opts.methods)</span><br><span class="line">  <span class="keyword">if</span> (opts.data) &#123;</span><br><span class="line">     <span class="comment">// 有数据就会执行 initData方法</span></span><br><span class="line">    initData(vm)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    observe(vm._data = &#123;&#125;, <span class="literal">true</span> <span class="comment">/* asRootData */</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (opts.computed) initComputed(vm, opts.computed)</span><br><span class="line">  <span class="keyword">if</span> (opts.watch &amp;&amp; opts.watch !== nativeWatch) &#123;</span><br><span class="line">    initWatch(vm, opts.watch)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initData</span> (<span class="params">vm: Component</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> data = vm.$options.data</span><br><span class="line">  data = vm._data = <span class="keyword">typeof</span> data === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">    ? getData(data, vm)</span><br><span class="line">    : data || &#123;&#125;</span><br><span class="line">  <span class="keyword">if</span> (!isPlainObject(data)) &#123;</span><br><span class="line">    data = &#123;&#125;</span><br><span class="line">    process.env.NODE_ENV !== <span class="string">&#x27;production&#x27;</span> &amp;&amp; warn(</span><br><span class="line">      <span class="string">&#x27;data functions should return an object:\n&#x27;</span> +</span><br><span class="line">      <span class="string">&#x27;https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function&#x27;</span>,</span><br><span class="line">      vm</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// proxy data on instance</span></span><br><span class="line">  <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(data)</span><br><span class="line">  <span class="keyword">const</span> props = vm.$options.props</span><br><span class="line">  <span class="keyword">const</span> methods = vm.$options.methods</span><br><span class="line">  <span class="keyword">let</span> i = keys.length</span><br><span class="line">  <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = keys[i]</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (methods &amp;&amp; hasOwn(methods, key)) &#123;</span><br><span class="line">        warn(</span><br><span class="line">          <span class="string">`Method &quot;<span class="subst">$&#123;key&#125;</span>&quot; has already been defined as a data property.`</span>,</span><br><span class="line">          vm</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (props &amp;&amp; hasOwn(props, key)) &#123;</span><br><span class="line">      process.env.NODE_ENV !== <span class="string">&#x27;production&#x27;</span> &amp;&amp; warn(</span><br><span class="line">        <span class="string">`The data property &quot;<span class="subst">$&#123;key&#125;</span>&quot; is already declared as a prop. `</span> +</span><br><span class="line">        <span class="string">`Use prop default value instead.`</span>,</span><br><span class="line">        vm</span><br><span class="line">      )</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isReserved(key)) &#123;</span><br><span class="line">      <span class="comment">// 1. data属性代理</span></span><br><span class="line">      proxy(vm, <span class="string">`_data`</span>, key)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// observe data</span></span><br><span class="line">  <span class="comment">// 2.对data调用observe  </span></span><br><span class="line">  observe(data, <span class="literal">true</span> <span class="comment">/* asRootData */</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>1.中</code>通过 while 循环内调用<code>proxy</code>函数把data的属性代理到vue实例上。之后可以通过 <code>vue.key</code> 访问到 <code>data.key</code></li><li><code>2.中</code> 之后对data调用<code>observe</code>方法、数据将会变成响应式</li></ul></li><li><p><code>observe(vm._data)</code></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/vuejs/vue/blob/v2.6.11/src/core/observer/index.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">observe</span> (<span class="params">value: any, asRootData: ?boolean</span>): <span class="title">Observer</span> | <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!isObject(value) || value <span class="keyword">instanceof</span> VNode) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> ob: Observer | <span class="keyword">void</span></span><br><span class="line">  <span class="keyword">if</span> (hasOwn(value, <span class="string">&#x27;__ob__&#x27;</span>) &amp;&amp; value.__ob__ <span class="keyword">instanceof</span> Observer) &#123;</span><br><span class="line">    ob = value.__ob__</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">    <span class="comment">// 3.检测当前的数据是否是对象或者数组，如果是，则生成对应的Observer  </span></span><br><span class="line">    shouldObserve &amp;&amp;</span><br><span class="line">    !isServerRendering() &amp;&amp;</span><br><span class="line">    (<span class="built_in">Array</span>.isArray(value) || isPlainObject(value)) &amp;&amp;</span><br><span class="line">    <span class="built_in">Object</span>.isExtensible(value) &amp;&amp;</span><br><span class="line">    !value._isVue</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="comment">// 3. </span></span><br><span class="line">    ob = <span class="keyword">new</span> Observer(value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (asRootData &amp;&amp; ob) &#123;</span><br><span class="line">    ob.vmCount++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ob</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <code>3.中</code>对传入的数据对象进行了判断、只对<code>对象和数组类型</code>生成Observer</p></li><li><p><code>new Observer(data)</code></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码位置: https://github.com/vuejs/vue/blob/v2.6.11/src/core/observer/observer.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">  value: any;</span><br><span class="line">  dep: Dep;</span><br><span class="line">  vmCount: number; <span class="comment">// number of vms that have this object as root $data</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span> (value: any) &#123;</span><br><span class="line">    <span class="built_in">this</span>.value = value</span><br><span class="line">    <span class="comment">// 生成了一个消息订阅器dep实例 关于dep的结构稍后详细介绍   </span></span><br><span class="line">    <span class="built_in">this</span>.dep = <span class="keyword">new</span> Dep()</span><br><span class="line">    <span class="built_in">this</span>.vmCount = <span class="number">0</span></span><br><span class="line">    <span class="comment">// def函数给当前数据添加不可枚举的__ob__属性，表示该数据已经被observe过  </span></span><br><span class="line">    def(value, <span class="string">&#x27;__ob__&#x27;</span>, <span class="built_in">this</span>)</span><br><span class="line">    <span class="comment">// 4.对数组类型的数据 调用observeArray方法；对对象类型的数据，调用walk方法  </span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(value)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (hasProto) &#123;</span><br><span class="line">        protoAugment(value, arrayMethods)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        copyAugment(value, arrayMethods, arrayKeys)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">this</span>.observeArray(value)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.walk(value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Walk through all properties and convert them into</span></span><br><span class="line"><span class="comment">   * getter/setters. This method should only be called when</span></span><br><span class="line"><span class="comment">   * value type is Object.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  walk (obj: <span class="built_in">Object</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(obj)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class="line">      defineReactive(obj, keys[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Observe a list of Array items.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="comment">/* observe数组类型数据的每个值， */</span></span><br><span class="line">  observeArray (items: <span class="built_in">Array</span>&lt;any&gt;) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = items.length; i &lt; l; i++) &#123;</span><br><span class="line">      observe(items[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* defineReactive的核心思想改写数据的getter和setter */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  obj: Object,</span></span></span><br><span class="line"><span class="function"><span class="params">  key: string,</span></span></span><br><span class="line"><span class="function"><span class="params">  val: any,</span></span></span><br><span class="line"><span class="function"><span class="params">  customSetter?: ?Function,</span></span></span><br><span class="line"><span class="function"><span class="params">  shallow?: boolean</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 生成一个dep实例，注意此处的dep和前文Observer类里直接添加的dep的区别  </span></span><br><span class="line">  <span class="keyword">const</span> dep = <span class="keyword">new</span> Dep()</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 检验该属性是否允许重新定义setter和getter</span></span><br><span class="line">  <span class="keyword">const</span> property = <span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, key)</span><br><span class="line">  <span class="keyword">if</span> (property &amp;&amp; property.configurable === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// cater for pre-defined getter/setters</span></span><br><span class="line">  <span class="comment">// 获取原有的 getter/setters  </span></span><br><span class="line">  <span class="keyword">const</span> getter = property &amp;&amp; property.get</span><br><span class="line">  <span class="keyword">const</span> setter = property &amp;&amp; property.set</span><br><span class="line">  <span class="keyword">if</span> ((!getter || setter) &amp;&amp; <span class="built_in">arguments</span>.length === <span class="number">2</span>) &#123;</span><br><span class="line">    val = obj[key]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 此处对val进行了observe</span></span><br><span class="line">  <span class="keyword">let</span> childOb = !shallow &amp;&amp; observe(val)</span><br><span class="line">  <span class="comment">// 下面的代码利用Object.defineProperty函数把数据转化成getter和setter，并且在getter和setter时，进行了一些操作</span></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span> <span class="title">reactiveGetter</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> value = getter ? getter.call(obj) : val</span><br><span class="line">      <span class="keyword">if</span> (Dep.target) &#123;</span><br><span class="line">        <span class="comment">// dep.depend()其实就是dep和watcher进行了互相绑定，而Dep.target表示需要绑定的那个watcher，任何时刻都最多只有一个，后面还会解释  </span></span><br><span class="line">        dep.depend()</span><br><span class="line">        <span class="keyword">if</span> (childOb) &#123;</span><br><span class="line">          <span class="comment">// 当前对象的子对象的依赖也要被收集  </span></span><br><span class="line">          childOb.dep.depend()</span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(value)) &#123;</span><br><span class="line">            dependArray(value)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> value</span><br><span class="line">    &#125;,</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span> <span class="title">reactiveSetter</span> (<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> value = getter ? getter.call(obj) : val</span><br><span class="line">      <span class="comment">/* eslint-disable no-self-compare */</span></span><br><span class="line">      <span class="keyword">if</span> (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/* eslint-enable no-self-compare */</span></span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">&#x27;production&#x27;</span> &amp;&amp; customSetter) &#123;</span><br><span class="line">        customSetter()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// #7981: for accessor properties without setter</span></span><br><span class="line">      <span class="keyword">if</span> (getter &amp;&amp; !setter) <span class="keyword">return</span></span><br><span class="line">      <span class="keyword">if</span> (setter) &#123;</span><br><span class="line">        setter.call(obj, newVal)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        val = newVal</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 观察新的val并通知订阅者们属性有更新  </span></span><br><span class="line">      childOb = !shallow &amp;&amp; observe(newVal)</span><br><span class="line">      dep.notify()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 在Observer类代码中，首先给当前数据添加了一个dep实例，存放于对象或者数组类型数据的，然后把<code>_ob_</code>挂在该数据上</p><p> 它是该数据项被observe的标志、可以看的每个data上都有<code>_ob_</code>(observe只对对象和数组有效)</p><p> 随后，对于数组和对象类型的数据做不同处理：</p><ul><li><p>对于数组类型的数: 调用<code>observeArray</code>方法</p></li><li><p>对于对象，我们执行<code>walk()</code>方法，而就是对于当前数据对象的每个key，执行<code>defineReactive()</code>方法、这个方法就是给data添加get/set方法</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg@master/img/20200808220338.png" alt="图解"></p></li></ul></li><li><p>接下来看一下dep</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码位置: https://github.com/vuejs/vue/blob/v2.6.11/src/core/observer/observer.js</span></span><br><span class="line"><span class="keyword">let</span> uid = <span class="number">0</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A dep is an observable that can have multiple</span></span><br><span class="line"><span class="comment"> * directives subscribing to it.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> target: ?Watcher;</span><br><span class="line">  id: number;</span><br><span class="line">  subs: <span class="built_in">Array</span>&lt;Watcher&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span> () &#123;</span><br><span class="line">    <span class="built_in">this</span>.id = uid++</span><br><span class="line">    <span class="built_in">this</span>.subs = []</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 添加一个watcher</span></span><br><span class="line">  addSub (sub: Watcher) &#123;</span><br><span class="line">    <span class="built_in">this</span>.subs.push(sub)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 移除一个watcher</span></span><br><span class="line">  removeSub (sub: Watcher) &#123;</span><br><span class="line">    remove(<span class="built_in">this</span>.subs, sub)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 让当前watcher收集依赖 同时Dep.target.addDep也会触发当前dep收集watcher</span></span><br><span class="line">  depend () &#123;</span><br><span class="line">    <span class="keyword">if</span> (Dep.target) &#123;</span><br><span class="line">      Dep.target.addDep(<span class="built_in">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 通知watcher们对应的数据有更新</span></span><br><span class="line">  notify () &#123;</span><br><span class="line">    <span class="comment">// stabilize the subscriber list first</span></span><br><span class="line">    <span class="keyword">const</span> subs = <span class="built_in">this</span>.subs.slice()</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">&#x27;production&#x27;</span> &amp;&amp; !config.async) &#123;</span><br><span class="line">      subs.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.id - b.id)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = subs.length; i &lt; l; i++) &#123;</span><br><span class="line">      subs[i].update()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 这个类有两个属性：</p><ul><li><p>第一个是id，在每个vue实例中都从0开始计数</p></li><li><p>另一个是<code>subs</code>数组，用于存放<code>wacther</code></p><p>前面我们知道: 一个数据对应一个Dep，所以<code>subs</code> 里存放的也就是依赖该数据需要绑定的wacther</p><p><code>Dep.target</code>属性是全局共享的，表示当前在收集依赖的那个Watcher，在每个时刻最多只会有一个</p></li></ul></li><li><p>接下来看一下watcher</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码位置: https://github.com/vuejs/vue/blob/v2.6.11/src/core/observer/watcher.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">  vm: Component;</span><br><span class="line">  expression: string;</span><br><span class="line">  cb: <span class="built_in">Function</span>;</span><br><span class="line">  id: number;</span><br><span class="line">  deep: boolean;</span><br><span class="line">  user: boolean;</span><br><span class="line">  lazy: boolean;</span><br><span class="line">  sync: boolean;</span><br><span class="line">  dirty: boolean;</span><br><span class="line">  active: boolean;</span><br><span class="line">  deps: <span class="built_in">Array</span>&lt;Dep&gt;;</span><br><span class="line">  newDeps: <span class="built_in">Array</span>&lt;Dep&gt;;</span><br><span class="line">  depIds: SimpleSet;</span><br><span class="line">  newDepIds: SimpleSet;</span><br><span class="line">  before: ?<span class="built_in">Function</span>;</span><br><span class="line">  getter: <span class="built_in">Function</span>;</span><br><span class="line">  value: any;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span> (</span><br><span class="line">    vm: Component,</span><br><span class="line">    expOrFn: string | Function,</span><br><span class="line">    cb: Function,</span><br><span class="line">    options?: ?Object,</span><br><span class="line">    isRenderWatcher?: boolean</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="built_in">this</span>.vm = vm</span><br><span class="line">    <span class="keyword">if</span> (isRenderWatcher) &#123;</span><br><span class="line">      vm._watcher = <span class="built_in">this</span></span><br><span class="line">    &#125;</span><br><span class="line">    vm._watchers.push(<span class="built_in">this</span>)</span><br><span class="line">    <span class="comment">// options</span></span><br><span class="line">    <span class="keyword">if</span> (options) &#123;</span><br><span class="line">      <span class="built_in">this</span>.deep = !!options.deep</span><br><span class="line">      <span class="built_in">this</span>.user = !!options.user</span><br><span class="line">      <span class="built_in">this</span>.lazy = !!options.lazy</span><br><span class="line">      <span class="built_in">this</span>.sync = !!options.sync</span><br><span class="line">      <span class="built_in">this</span>.before = options.before</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.deep = <span class="built_in">this</span>.user = <span class="built_in">this</span>.lazy = <span class="built_in">this</span>.sync = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.cb = cb</span><br><span class="line">    <span class="built_in">this</span>.id = ++uid <span class="comment">// uid for batching</span></span><br><span class="line">    <span class="built_in">this</span>.active = <span class="literal">true</span></span><br><span class="line">    <span class="built_in">this</span>.dirty = <span class="built_in">this</span>.lazy <span class="comment">// for lazy watchers</span></span><br><span class="line">    <span class="built_in">this</span>.deps = []</span><br><span class="line">    <span class="built_in">this</span>.newDeps = []</span><br><span class="line">    <span class="built_in">this</span>.depIds = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">    <span class="built_in">this</span>.newDepIds = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">    <span class="built_in">this</span>.expression = process.env.NODE_ENV !== <span class="string">&#x27;production&#x27;</span></span><br><span class="line">      ? expOrFn.toString()</span><br><span class="line">      : <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">// parse expression for getter</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> expOrFn === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.getter = expOrFn</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.getter = parsePath(expOrFn)</span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">this</span>.getter) &#123;</span><br><span class="line">        <span class="built_in">this</span>.getter = noop</span><br><span class="line">        process.env.NODE_ENV !== <span class="string">&#x27;production&#x27;</span> &amp;&amp; warn(</span><br><span class="line">          <span class="string">`Failed watching path: &quot;<span class="subst">$&#123;expOrFn&#125;</span>&quot; `</span> +</span><br><span class="line">          <span class="string">&#x27;Watcher only accepts simple dot-delimited paths. &#x27;</span> +</span><br><span class="line">          <span class="string">&#x27;For full control, use a function instead.&#x27;</span>,</span><br><span class="line">          vm</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.value = <span class="built_in">this</span>.lazy</span><br><span class="line">      ? <span class="literal">undefined</span></span><br><span class="line">      : <span class="built_in">this</span>.get()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Evaluate the getter, and re-collect dependencies.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  get () &#123;</span><br><span class="line">    pushTarget(<span class="built_in">this</span>)</span><br><span class="line">    <span class="keyword">let</span> value</span><br><span class="line">    <span class="keyword">const</span> vm = <span class="built_in">this</span>.vm</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      value = <span class="built_in">this</span>.getter.call(vm, vm)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.user) &#123;</span><br><span class="line">        handleError(e, vm, <span class="string">`getter for watcher &quot;<span class="subst">$&#123;<span class="built_in">this</span>.expression&#125;</span>&quot;`</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> e</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="comment">// &quot;touch&quot; every property so they are all tracked as</span></span><br><span class="line">      <span class="comment">// dependencies for deep watching</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.deep) &#123;</span><br><span class="line">        traverse(value)</span><br><span class="line">      &#125;</span><br><span class="line">      popTarget()</span><br><span class="line">      <span class="built_in">this</span>.cleanupDeps()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Add a dependency to this directive.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  addDep (dep: Dep) &#123;</span><br><span class="line">    <span class="keyword">const</span> id = dep.id</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.newDepIds.has(id)) &#123;</span><br><span class="line">      <span class="built_in">this</span>.newDepIds.add(id)</span><br><span class="line">      <span class="built_in">this</span>.newDeps.push(dep)</span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">this</span>.depIds.has(id)) &#123;</span><br><span class="line">        dep.addSub(<span class="built_in">this</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Clean up for dependency collection.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  cleanupDeps () &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="built_in">this</span>.deps.length</span><br><span class="line">    <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">      <span class="keyword">const</span> dep = <span class="built_in">this</span>.deps[i]</span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">this</span>.newDepIds.has(dep.id)) &#123;</span><br><span class="line">        dep.removeSub(<span class="built_in">this</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> tmp = <span class="built_in">this</span>.depIds</span><br><span class="line">    <span class="built_in">this</span>.depIds = <span class="built_in">this</span>.newDepIds</span><br><span class="line">    <span class="built_in">this</span>.newDepIds = tmp</span><br><span class="line">    <span class="built_in">this</span>.newDepIds.clear()</span><br><span class="line">    tmp = <span class="built_in">this</span>.deps</span><br><span class="line">    <span class="built_in">this</span>.deps = <span class="built_in">this</span>.newDeps</span><br><span class="line">    <span class="built_in">this</span>.newDeps = tmp</span><br><span class="line">    <span class="built_in">this</span>.newDeps.length = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Subscriber interface.</span></span><br><span class="line"><span class="comment">   * Will be called when a dependency changes.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  update () &#123;</span><br><span class="line">    <span class="comment">/* istanbul ignore else */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.lazy) &#123;</span><br><span class="line">      <span class="built_in">this</span>.dirty = <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.sync) &#123;</span><br><span class="line">      <span class="built_in">this</span>.run()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      queueWatcher(<span class="built_in">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Scheduler job interface.</span></span><br><span class="line"><span class="comment">   * Will be called by the scheduler.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  run () &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.active) &#123;</span><br><span class="line">      <span class="keyword">const</span> value = <span class="built_in">this</span>.get()</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        value !== <span class="built_in">this</span>.value ||</span><br><span class="line">        <span class="comment">// Deep watchers and watchers on Object/Arrays should fire even</span></span><br><span class="line">        <span class="comment">// when the value is the same, because the value may</span></span><br><span class="line">        <span class="comment">// have mutated.</span></span><br><span class="line">        isObject(value) ||</span><br><span class="line">        <span class="built_in">this</span>.deep</span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="comment">// set new value</span></span><br><span class="line">        <span class="keyword">const</span> oldValue = <span class="built_in">this</span>.value</span><br><span class="line">        <span class="built_in">this</span>.value = value</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.user) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.cb.call(<span class="built_in">this</span>.vm, value, oldValue)</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            handleError(e, <span class="built_in">this</span>.vm, <span class="string">`callback for watcher &quot;<span class="subst">$&#123;<span class="built_in">this</span>.expression&#125;</span>&quot;`</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.cb.call(<span class="built_in">this</span>.vm, value, oldValue)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Evaluate the value of the watcher.</span></span><br><span class="line"><span class="comment">   * This only gets called for lazy watchers.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  evaluate () &#123;</span><br><span class="line">    <span class="built_in">this</span>.value = <span class="built_in">this</span>.get()</span><br><span class="line">    <span class="built_in">this</span>.dirty = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Depend on all deps collected by this watcher.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  depend () &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="built_in">this</span>.deps.length</span><br><span class="line">    <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">      <span class="built_in">this</span>.deps[i].depend()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Remove self from all dependencies&#x27; subscriber list.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  teardown () &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.active) &#123;</span><br><span class="line">      <span class="comment">// remove self from vm&#x27;s watcher list</span></span><br><span class="line">      <span class="comment">// this is a somewhat expensive operation so we skip it</span></span><br><span class="line">      <span class="comment">// if the vm is being destroyed.</span></span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">this</span>.vm._isBeingDestroyed) &#123;</span><br><span class="line">        remove(<span class="built_in">this</span>.vm._watchers, <span class="built_in">this</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">let</span> i = <span class="built_in">this</span>.deps.length</span><br><span class="line">      <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">        <span class="built_in">this</span>.deps[i].removeSub(<span class="built_in">this</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">this</span>.active = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> watcher用于watcher用来<code>解析表达式</code>，收集依赖，并且当表达式的值改变时触发回调函数，用在<code>$watch()</code> api 和指令之中。</p><p> <img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg@master/img/20200808224749.png"></p></li><li><p>模板渲染</p><p> 这里的分析来自: <a href="https://zhuanlan.zhihu.com/p/168768245">https://zhuanlan.zhihu.com/p/168768245</a></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new Vue 执行流程。</span></span><br><span class="line"><span class="comment">// 1. Vue.prototype._init(option)</span></span><br><span class="line"><span class="comment">// 2. vm.$mount(vm.$options.el)</span></span><br><span class="line"><span class="comment">// 3. render = compileToFunctions(template) ，编译 Vue 中的 template 模板，生成 render 方法。</span></span><br><span class="line"><span class="comment">// 4. Vue.prototype.$mount 调用上面的 render 方法挂载 dom。</span></span><br><span class="line"><span class="comment">// 5. mountComponent</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 创建 Watcher 实例</span></span><br><span class="line"><span class="keyword">const</span> updateComponent = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  vm._update(vm._render());</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 结合上文，我们就能得出，updateComponent 就是传入 Watcher 内部的 getter 方法。</span></span><br><span class="line"><span class="keyword">new</span> Watcher(vm, updateComponent);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. new Watcher 会执行 Watcher.get 方法</span></span><br><span class="line"><span class="comment">// 8. Watcher.get 会执行 this.getter.call(vm, vm) ，也就是执行 updateComponent 方法</span></span><br><span class="line"><span class="comment">// 9. updateComponent 会执行 vm._update(vm._render())</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 10. 调用 vm._render 生成虚拟 dom</span></span><br><span class="line">Vue.prototype._render = <span class="function"><span class="keyword">function</span> (<span class="params"></span>): <span class="title">VNode</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> vm: Component = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">const</span> &#123; render &#125; = vm.$options;</span><br><span class="line">  <span class="keyword">let</span> vnode = render.call(vm._renderProxy, vm.$createElement);</span><br><span class="line">  <span class="keyword">return</span> vnode;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 11. 调用 vm._update(vnode) 渲染虚拟 dom</span></span><br><span class="line">Vue.prototype._update = <span class="function"><span class="keyword">function</span> (<span class="params">vnode: VNode</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> vm: Component = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">if</span> (!prevVnode) &#123;</span><br><span class="line">    <span class="comment">// 初次渲染</span></span><br><span class="line">    vm.$el = vm.__patch__(vm.$el, vnode, hydrating, <span class="literal">false</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 更新</span></span><br><span class="line">    vm.$el = vm.__patch__(prevVnode, vnode);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 12. vm.__patch__ 方法就是做的 dom diff 比较，然后更新 dom，这里就不展开了。</span></span><br></pre></td></tr></table></figure><p> <img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg@master/img/20200808230055.png"></p><p> 到这里，我们就知道了 Watcher 其实是在 Vue 初始化的阶段创建的，属于生命周期中 beforeMount 的位置创建的，创建 Watcher 时会执行 render 方法，最终将 Vue 代码渲染成真实的 DOM。</p></li></ol><p>最后附上了一张图:同样来自<a href="https://zhuanlan.zhihu.com/p/168768245">https://zhuanlan.zhihu.com/p/168768245</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg@master/img/20200808224343.png"></p><p>到这里、Vue响应式的原理就差不多明白了、虽然还是很菜、呜呜呜。</p><p>参考资料:</p><ul><li><a href="https://segmentfault.com/a/1190000012612657">从源码解析vue响应式原理</a></li><li><a href="https://zhuanlan.zhihu.com/p/168768245">图解 Vue 响应式原理</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web教程 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue仿蘑菇街项目</title>
      <link href="/posts/42ed6352/"/>
      <url>/posts/42ed6352/</url>
      
        <content type="html"><![CDATA[<p>封面P站: <a href="https://www.pixiv.net/artworks/74562014">https://www.pixiv.net/artworks/74562014</a></p><h2 id="Vue综合练习"><a href="#Vue综合练习" class="headerlink" title="Vue综合练习"></a>Vue综合练习</h2><p>通过前面学习了Vue等知识、我们使用Vue写一个简单的小项目</p><p>一位大佬写的很详细: <a href="https://blog.csdn.net/wuyxinu/article/details/103684950">https://blog.csdn.net/wuyxinu/article/details/103684950</a></p><div class="btns rounded center grid5">            <a href='https://gitee.com/zykjofficial/StudyProjects/tree/master/2020/07/Vue/supermall' title='下载Vue项目源码'><i class='fas fa-download'></i>下载Vue项目源码</a>          </div><h3 id="基本构建"><a href="#基本构建" class="headerlink" title="基本构建"></a>基本构建</h3><p>使用<code>Vue-Cli4.x</code>创建项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create sueprmall</span><br></pre></td></tr></table></figure><p>记得安装 <code>Vuex</code>、<code>Vue-Router</code>之后安装 axios: <code>npm install -s axios</code></p><h4 id="项目基本目录"><a href="#项目基本目录" class="headerlink" title="项目基本目录"></a>项目基本目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">├── public    用于存放静态资源</span><br><span class="line">│   ├── favicon.ico             图标资源</span><br><span class="line">│   └── index.html是一个模板文件，作用是生成项目的入口文件</span><br><span class="line">├── src                             项目源码目录    </span><br><span class="line">│   ├── main.js                         入口js文件</span><br><span class="line">│   ├── App.vue                         根组件</span><br><span class="line">│   ├── components                      公共组件目录</span><br><span class="line">│   │   └── common在其他项目下也可以使用的</span><br><span class="line">│   │   └── contents业务相关组件</span><br><span class="line">│   ├── common                          工具</span><br><span class="line">│   ├── assets                          资源目录，这里的资源会被wabpack构建</span><br><span class="line">│   │   └── img</span><br><span class="line">│   │   └── css</span><br><span class="line">│   ├── network                         封装网络请求</span><br><span class="line">│   │   └── request.js</span><br><span class="line">│   ├── routes                          前端路由</span><br><span class="line">│   │   └── index.js</span><br><span class="line">│   ├── store                           Vuex应用级数据（state）</span><br><span class="line">│   │   └── index.js</span><br><span class="line">│   └── views                           页面目录</span><br><span class="line">└── package.json                    npm包配置文件，里面定义了项目的npm脚本，依赖包等信息</span><br></pre></td></tr></table></figure><h4 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h4><p>在根目录下创建<code>vue.config.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    configureWebpack: &#123;</span><br><span class="line">        resolve:&#123;</span><br><span class="line">            extensions:[],</span><br><span class="line">            alias:&#123;</span><br><span class="line">                <span class="string">&#x27;assets&#x27;</span>:<span class="string">&#x27;@/assets&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;components&#x27;</span>:<span class="string">&#x27;@/components&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;network&#x27;</span>:<span class="string">&#x27;@/network&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;views&#x27;</span>:<span class="string">&#x27;@/views&#x27;</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在根目录下创建<code>.editorconfig</code>文件用来规范<code>缩进</code>等…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root &#x3D; true</span><br><span class="line"></span><br><span class="line">[*]</span><br><span class="line">charset &#x3D; utf-8</span><br><span class="line">indent_style &#x3D; space</span><br><span class="line">indent_size &#x3D; 2</span><br><span class="line">end_of_line &#x3D; lf</span><br><span class="line">insert_final_newline &#x3D; true</span><br><span class="line">trim_trailing_whitespace &#x3D; true</span><br></pre></td></tr></table></figure><h4 id="CSS导入"><a href="#CSS导入" class="headerlink" title="CSS导入"></a>CSS导入</h4><p>在<code>src/assets/css</code>下创建<code>normalize.css</code> 内容为: <a href="https://github.com/necolas/normalize.css/blob/master/normalize.css">https://github.com/necolas/normalize.css/blob/master/normalize.css</a></p><p>创建<code>base.css</code> 内容为: <a href="https://github.com/maclxf/supermall/blob/master/src/assets/css/base.css">https://github.com/maclxf/supermall/blob/master/src/assets/css/base.css</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;./normalize.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*:root -&gt; 获取根元素html*/</span></span><br><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attribute">--color-text</span>: <span class="number">#666</span>;</span><br><span class="line">  <span class="attribute">--color-high-text</span>: <span class="number">#ff5777</span>;</span><br><span class="line">  <span class="attribute">--color-tint</span>: <span class="number">#ff8198</span>;</span><br><span class="line">  <span class="attribute">--color-background</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">--font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">--line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*,</span><br><span class="line">*<span class="selector-pseudo">::before</span>,</span><br><span class="line">*<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;Helvetica Neue&quot;</span>,Helvetica,<span class="string">&quot;PingFang SC&quot;</span>,<span class="string">&quot;Hiragino Sans GB&quot;</span>,<span class="string">&quot;Microsoft YaHei&quot;</span>,<span class="string">&quot;微软雅黑&quot;</span>,Arial,sans-serif;</span><br><span class="line">  <span class="attribute">user-select</span>: none; <span class="comment">/* 禁止用户鼠标在页面上选中文字/图片等 */</span></span><br><span class="line">  <span class="attribute">-webkit-tap-highlight-color</span>: transparent; <span class="comment">/* webkit是苹果浏览器引擎，tap点击，highlight背景高亮，color颜色，颜色用数值调节 */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--color-background);</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--color-text);</span><br><span class="line">  <span class="comment">/* rem vw/vh */</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--color-text);</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clear-fix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clear-fix</span> &#123;</span><br><span class="line">  <span class="attribute">zoom</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>App.vue</code>中导入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="keyword">@import</span> <span class="string">&#x27;./assets/css/base.css&#x27;</span>;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="基本页面"><a href="#基本页面" class="headerlink" title="基本页面"></a>基本页面</h4><p>复制<code>2020\07\Vue\supermall\public\favicon.ico</code>下的所有文件到当前项目<code>public\favicon.ico</code>下 </p><p>复制<code>2020\07\Vue\supermall\src\assets\img</code>下的所有文件到当前项目<code>src\assets\img</code>下 </p><p>在<code>src\views</code>下创建</p><div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">Cart.vue</button></li><li class="tab"><button type="button" data-href="#tab1-2">Category.vue</button></li><li class="tab"><button type="button" data-href="#tab1-3">Home.vue</button></li><li class="tab"><button type="button" data-href="#tab1-4">Me.vue</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><p><code>在src\views\cart</code>下创建</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>购物车<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;Cart&quot;</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><p><code>在src\views\category</code>下创建</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>品类<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;Category&quot;</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-3"><p><code>在src\views\home</code>下创建</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是主页<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;Home&quot;</span>,</span></span><br><span class="line">    components: &#123;&#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;&#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-4"><p><code>在src\views\me</code>下创建</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>关于我<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;Me&quot;</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>之后配置路由<code>router\index.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 懒加载</span></span><br><span class="line"><span class="keyword">const</span> Home = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;views/home/Home&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> Category = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;views/category/Category&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> Cart = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;views/cart/Cart&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> Me = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;views/me/Me&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> originalPush = VueRouter.prototype.push</span><br><span class="line">VueRouter.prototype.push = <span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">location</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> originalPush.call(<span class="built_in">this</span>, location).catch(<span class="function"><span class="params">err</span> =&gt;</span> err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    redirect: <span class="string">&#x27;/home&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    <span class="comment">// 指定的组件</span></span><br><span class="line">    component: Home</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/category&#x27;</span>,</span><br><span class="line">    component: Category</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/cart&#x27;</span>,</span><br><span class="line">    component: Cart</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/me&#x27;</span>,</span><br><span class="line">    component: Me</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  mode: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">  base: process.env.BASE_URL,</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>复制: <a href="https://github.com/maclxf/supermall/tree/master/src/components/common/tabbar">https://github.com/maclxf/supermall/tree/master/src/components/common/tabbar</a> 里的内容到 <code>\src\components\common\tabbar</code></p><p>最后在<code>src\App.vue</code>编辑</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">main-tar-bar</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> MainTarBar <span class="keyword">from</span> <span class="string">&quot;./components/contents/maintarbar/MainTarBar&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line">    data()&#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span>&#123;</span></span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">      MainTarBar</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="keyword">@import</span> <span class="string">&#x27;assets/css/base.css&#x27;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过<code>npm run serve</code>测试效果</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200719225324.gif" alt="20200719225324.gif"></p><h3 id="首页开发"><a href="#首页开发" class="headerlink" title="首页开发"></a>首页开发</h3><h4 id="导航组件"><a href="#导航组件" class="headerlink" title="导航组件"></a>导航组件</h4><p><code>顶部文字显示区域</code></p><br/><p>在<code>\src\components\common\navbar</code>下创建<code>NavBar.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav-bar&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;NavBar.vue&quot;</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.nav-bar</span>&#123;</span></span><br><span class="line">    display: flex;</span><br><span class="line">    height: 44px;</span><br><span class="line">    line-height: 44px;</span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.left</span>&#123;</span></span><br><span class="line">    width: 60px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">    width: 60px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.center</span>&#123;</span></span><br><span class="line">    flex: 1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编辑<code>src\views\home\Home.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">NavBar</span> <span class="attr">class</span>=<span class="string">&quot;home-nav-bar&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>  <span class="attr">slot</span>=<span class="string">&quot;center&quot;</span>&gt;</span>购物街<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">NavBar</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> NavBar <span class="keyword">from</span> <span class="string">&quot;components/common/navbar/NavBar&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;Home&quot;</span>,</span></span><br><span class="line">    components: &#123;</span><br><span class="line">      NavBar</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">//...</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">   <span class="selector-id">#home</span>&#123;</span></span><br><span class="line">   padding-top: 44px;</span><br><span class="line">    height: 100vh;</span><br><span class="line">    position: relative;     </span><br><span class="line">   &#125;  </span><br><span class="line">    </span><br><span class="line"><span class="css">  <span class="selector-class">.home-nav-bar</span>&#123;</span></span><br><span class="line">    background-color: var(--color-tint);</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">box-shadow</span>: 0 1<span class="selector-tag">px</span> 1<span class="selector-tag">px</span> 1<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(100,100,100,<span class="selector-class">.1</span>);</span></span><br><span class="line">    position: fixed;</span><br><span class="line">    left: 0;</span><br><span class="line">    top: 0;</span><br><span class="line">    z-index: 9;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="数据请求"><a href="#数据请求" class="headerlink" title="数据请求"></a>数据请求</h4><p>在<code>src\network</code>下创建<code>request.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">    baseUrl: <span class="string">&quot;http://123.207.32.32:8000&quot;</span>,</span><br><span class="line">    timeout: <span class="number">5000</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  instance.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(&quot;拦截的请求&quot;);</span></span><br><span class="line">    <span class="comment">// console.log(config)</span></span><br><span class="line">    <span class="comment">// 拦截了请求要返回</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  instance.interceptors.response.use(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(&quot;拦截的响应&quot;);</span></span><br><span class="line">    <span class="comment">// console.log(response);</span></span><br><span class="line">    <span class="keyword">return</span> response.data</span><br><span class="line">  &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> instance(config);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后创建<code>home.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; request &#125; <span class="keyword">from</span> <span class="string">&#x27;./request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getHomeMultiData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="string">&quot;/home/multidata&quot;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>Home.vue</code>编辑、主要是注意在<code>created()</code>函数中发起请求</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">//...</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123;getHomeMultiData&#125; <span class="keyword">from</span> <span class="string">&quot;../../network/home&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;Home&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="comment">//...</span></span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        banners: [],</span><br><span class="line">        recommends: []</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">//请求</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.getHomeMultiData();</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">       getHomeMultiData()&#123;</span><br><span class="line"><span class="javascript">          getHomeMultiData().then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.banners = res.data.banner.list;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.recommends = res.data.recommend.list;</span></span><br><span class="line">      &#125;)  </span><br><span class="line">       &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="轮播图组件"><a href="#轮播图组件" class="headerlink" title="轮播图组件"></a>轮播图组件</h4><p>使用的是作者封装好的组件: <a href="https://github.com/maclxf/supermall/tree/master/src/components/common/swiper">https://github.com/maclxf/supermall/tree/master/src/components/common/swiper</a> 放在<code>src\components\common</code>下</p><p>为了使Home里的组件不那么复杂、我们需要提取一下、在<code>src\views\home</code>下创建<code>childComps文件夹</code>、里面创建<code>HomeSwiper.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swiper</span> <span class="attr">class</span>=<span class="string">&quot;home-swiper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">swiper-item</span> <span class="attr">v-for</span>=<span class="string">&quot;item in banners&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.link&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;item.link&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;item.image&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123;Swiper, SwiperItem&#125; <span class="keyword">from</span> <span class="string">&#x27;components/common/swiper&#x27;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;HomeSwiper&quot;</span>,</span></span><br><span class="line">    props: &#123;</span><br><span class="line">      banners: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">Array</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>() &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> []</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      Swiper, SwiperItem</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一个轮播图就导入成功了。</p><p>在<code>Home.vue</code>添加</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HomeSwiper</span><br></pre></td></tr></table></figure><h4 id="每日推荐组件"><a href="#每日推荐组件" class="headerlink" title="每日推荐组件"></a>每日推荐组件</h4><p>同样为了使Home里的组件不那么复杂、我们需要提取一下、在<code>src\views\home\childComps</code>里面创建<code>HomeRecommend.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;home-recommend&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;home-recommend-item&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item in recommends&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.title&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;item.link&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;item.image&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; item.title &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;HomeRecommend&quot;</span>,</span></span><br><span class="line">    props: &#123;</span><br><span class="line">      recommends: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">Array</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>() &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> [];</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.home-recommend</span>&#123;</span></span><br><span class="line">    display: flex;</span><br><span class="line">    text-align: center;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">    width: 100%;</span><br><span class="line">    padding: 5px;</span><br><span class="line"><span class="css">    <span class="selector-tag">border-bottom</span>: 10<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#eee</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.home-recommend</span> <span class="selector-class">.home-recommend-item</span>&#123;</span></span><br><span class="line">    flex: 1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.home-recommend-item</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line">    width: 70px;</span><br><span class="line">    height: 70px;</span><br><span class="line">    border-radius: 100%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.home-recommend-item</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line">    display: block;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>之后统一写到<code>Home.vue</code>中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">HomeSwiper</span> <span class="attr">:banners</span>=<span class="string">&quot;banners&quot;</span>/&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">//...</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> HomeSwiper <span class="keyword">from</span> <span class="string">&quot;./childComps/HomeSwiper&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="comment">//...</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123;getHomeMultiData&#125; <span class="keyword">from</span> <span class="string">&quot;network/home&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;Home&quot;</span>,</span></span><br><span class="line">    components: &#123;</span><br><span class="line"><span class="javascript">      HomeSwiper <span class="comment">//...</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        banners: [],</span><br><span class="line"><span class="javascript">        <span class="comment">//...</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">//请求</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.getHomeMultiData();</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">       getHomeMultiData()&#123;</span><br><span class="line"><span class="javascript">          getHomeMultiData().then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.banners = res.data.banner.list;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.recommends = res.data.recommend.list;</span></span><br><span class="line">      &#125;)  </span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="本周流行组件"><a href="#本周流行组件" class="headerlink" title="本周流行组件"></a>本周流行组件</h4><p>同样为了使Home里的组件不那么复杂、我们需要提取一下、在<code>src\views\home\childComps</code>里面创建<code>HomeFeatureView.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;home-feature&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://act.mogujie.com/zzlx67&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;~assets/img/home/recommend_bg.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;HomeFeatureView&quot;</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.home-feature</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line">    width: 100%;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>之后写到<code>Home.vue</code>中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">HomeRecommend</span> <span class="attr">:recommends</span>=<span class="string">&quot;recommends&quot;</span>/&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">//...</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> HomeRecommend <span class="keyword">from</span> <span class="string">&quot;./childComps/HomeRecommend&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="comment">//...</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123;getHomeMultiData&#125; <span class="keyword">from</span> <span class="string">&quot;network/home&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;Home&quot;</span>,</span></span><br><span class="line">    components: &#123;</span><br><span class="line"><span class="javascript">      HomeRecommend <span class="comment">//...</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//...</span></span></span><br><span class="line">        recommends: []</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">//请求</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.getHomeMultiData();</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">       getHomeMultiData()&#123;</span><br><span class="line"><span class="javascript">          getHomeMultiData().then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.banners = res.data.banner.list;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.recommends = res.data.recommend.list;</span></span><br><span class="line">      &#125;)  </span><br><span class="line">       &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="TabControl组件"><a href="#TabControl组件" class="headerlink" title="TabControl组件"></a>TabControl组件</h4><p>在<code>src\component\tabcontrol\</code>里面创建<code>TabControl.vue</code></p><p>通过索引<code>index</code>与<code>currentIndex</code>来判断是否选中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-control&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in titles&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tab-control-item&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;tabClick(index)&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; active: index == currentIndex &#125;&quot;</span> &gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;TabControl&quot;</span>,</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        currentIndex : 0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    props: &#123;</span><br><span class="line">      titles: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">Array</span>,</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> [];</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      tabClick(index)&#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.currentIndex = index;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//将 index索引传给父组件  </span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$emit(<span class="string">&quot;tabClick&quot;</span>,index);  </span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.tab-control</span>&#123;</span></span><br><span class="line">    display: flex;</span><br><span class="line">    text-align: center;</span><br><span class="line">    line-height: 40px;</span><br><span class="line">    height: 40px;</span><br><span class="line">    font-size: 15px;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.tab-control-item</span>&#123;</span></span><br><span class="line">    flex: 1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.tab-control-item</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line">    padding: 5px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.active</span>&#123;</span></span><br><span class="line">    border-bottom: 2px solid var(--color-tint);</span><br><span class="line">    color: var(--color-high-text);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编辑<code>Home.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">tab-control</span> <span class="attr">class</span>=<span class="string">&quot;home-tab-control&quot;</span> <span class="attr">:titles</span>=<span class="string">&quot;[&#x27;流行&#x27;, &#x27;新款&#x27;, &#x27;精选&#x27;]&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// ...</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> TabControl <span class="keyword">from</span> <span class="string">&quot;components/contents/tabcontrol/TabControl&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// ...</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;Home&quot;</span>,</span></span><br><span class="line">    components: &#123;</span><br><span class="line"><span class="javascript">      TabControl <span class="comment">//...</span></span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">//...</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="comment">/* ... */</span></span></span><br><span class="line"><span class="css"><span class="selector-class">.home-tab-control</span>&#123;</span></span><br><span class="line"><span class="css">     <span class="comment">/* sticky 粘性布局 部分浏览器不支持 */</span></span></span><br><span class="line">     position: sticky;</span><br><span class="line">     top: 44px;</span><br><span class="line">     z-index: 9;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>后面发现<code>position: sticky;</code>没有作用了。。。不知道什么原因</p><h4 id="商品数据封装"><a href="#商品数据封装" class="headerlink" title="商品数据封装"></a>商品数据封装</h4><h5 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h5><p>我们需要这样的一个数据结构来存储商品数据</p><p><code>pop、new、sell</code>代表商品、<code>page</code>代表页数、<code>list</code>代表商品、<code>currentType</code>当前类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">goods: &#123;</span><br><span class="line">&#39;pop&#39;: &#123;page: 0, list: []&#125;,</span><br><span class="line">&#39;new&#39;: &#123;page: 0, list: []&#125;,</span><br><span class="line">&#39;sell&#39;: &#123;page: 0, list: []&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">currentType: &quot;pop&quot;</span><br></pre></td></tr></table></figure><h5 id="network"><a href="#network" class="headerlink" title="network"></a>network</h5><p>编辑<code>src\network\home.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getHomeGoods</span>(<span class="params">type,page</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="string">&quot;/data&quot;</span>,</span><br><span class="line">    params:&#123;</span><br><span class="line">      type,</span><br><span class="line">      page</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="views"><a href="#views" class="headerlink" title="views"></a>views</h5><p>最后编辑<code>Home.vue</code></p><p>注意:</p><ul><li><p><code> import &#123;getHomeGoods&#125; from &quot;network/home&quot;;</code>导入、不要忘记</p></li><li><p>往数组里添加数据使用<code>push方法</code>、然而我们需要添加另一个数组的数据我们需要使用扩展运算符<code>...</code></p><p>  如下面<code>this.goods[type].list.push(...res.data.list)</code></p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">tab-control</span> <span class="attr">class</span>=<span class="string">&quot;home-tab-control&quot;</span> <span class="attr">:titles</span>=<span class="string">&quot;[&#x27;流行&#x27;, &#x27;新款&#x27;, &#x27;精选&#x27;]&quot;</span> @<span class="attr">tabClick</span>=<span class="string">&quot;tabClick&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">good-list</span> <span class="attr">:goods</span>=<span class="string">&quot;showGoods&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">//...</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123;getHomeMultiData ,getHomeGoods&#125; <span class="keyword">from</span> <span class="string">&quot;network/home&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;Home&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="comment">//...</span></span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//...</span></span></span><br><span class="line">        goods: &#123;</span><br><span class="line"><span class="javascript">          <span class="string">&#x27;pop&#x27;</span>: &#123;<span class="attr">page</span>: <span class="number">0</span>, <span class="attr">list</span>: []&#125;,</span></span><br><span class="line"><span class="javascript">          <span class="string">&#x27;new&#x27;</span>: &#123;<span class="attr">page</span>: <span class="number">0</span>, <span class="attr">list</span>: []&#125;,</span></span><br><span class="line"><span class="javascript">          <span class="string">&#x27;sell&#x27;</span>: &#123;<span class="attr">page</span>: <span class="number">0</span>, <span class="attr">list</span>: []&#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        currentType: <span class="string">&quot;pop&quot;</span>  </span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      showGoods()&#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">this</span>.goods[<span class="built_in">this</span>.currentType].list</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.getHomeMultiData();</span></span><br><span class="line"><span class="javascript">      <span class="comment">//需要请求多个类型的数据</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.getHomeGoods(<span class="string">&quot;pop&quot;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.getHomeGoods(<span class="string">&quot;new&quot;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.getHomeGoods(<span class="string">&quot;sell&quot;</span>);</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      /**</span><br><span class="line">       * 事件相关</span><br><span class="line">       */</span><br><span class="line">      tabClick(index) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">switch</span> (index) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">case</span> <span class="number">0</span>:</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.currentType = <span class="string">&quot;pop&quot;</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">break</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">case</span> <span class="number">1</span>:</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.currentType = <span class="string">&quot;new&quot;</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">break</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">case</span> <span class="number">2</span>:</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.currentType = <span class="string">&quot;sell&quot;</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">break</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      /**</span><br><span class="line">       * 网络请求相关</span><br><span class="line">       */</span><br><span class="line">      getHomeMultiData() &#123;</span><br><span class="line"><span class="javascript">        getHomeMultiData().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// console.log(res.data)</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.banners = res.data.banner.list;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.recommends = res.data.recommend.list;</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      getHomeGoods(type) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> page = <span class="built_in">this</span>.goods[type].page + <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">        getHomeGoods(type, page).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// console.log(res.data.list)</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.goods[type].list.push(...res.data.list)</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.goods[type].page += <span class="number">1</span>;</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Batter-Srcoll"><a href="#Batter-Srcoll" class="headerlink" title="Batter-Srcoll"></a>Batter-Srcoll</h4><p>一个更好的解决移动端滚动问题的框架、官网: <a href="https://ustbhuangyi.github.io/better-scroll/#/zh">https://ustbhuangyi.github.io/better-scroll/#/zh</a></p><h5 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h5><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install better-scroll --save</span><br></pre></td></tr></table></figure><p>在Vue中使用</p><ul><li><p>我们需要在<code>标签里包裹另一个标签</code> 如:<code>div标签包裹ul标签</code></p></li><li><p>我们需要在<code>mounted</code>使用<code>BScroll</code></p><p>  第一个参数: <code>包裹ul标签的div</code></p><p>  第二个参数: 绑定参数、如:<code>probeType</code> 、值为0时不派发 scroll 事件、值为1时屏幕滑动超过一定时间后派发<a href="https://ustbhuangyi.github.io/better-scroll/doc/zh-hans/events.html#scroll">scroll 事件</a>；值为2时在屏幕滑动的过程中实时的派发 scroll 事件(如滑到底部时的动画然不会有事件)、值为3时屏幕滑动的过程中，滚动动画运行过程中实时派发 scroll 事件(如滑到底部时的动画然会有事件)</p></li><li><p><code>div</code>需要高度、否则不起作用</p></li><li><p>通过<code>on</code>方法绑定参数</p></li><li><p>绑定<code>pullingUp</code>参数时需要添加<code>pullUpLoad: true</code></p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>8<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>9<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>10<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>25<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> BScroll <span class="keyword">from</span> <span class="string">&#x27;better-scroll&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        scroll: <span class="literal">null</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.scroll = <span class="keyword">new</span> BScroll(<span class="built_in">this</span>.$refs.wrapper, &#123;</span></span><br><span class="line">        probeType: 2,</span><br><span class="line"><span class="javascript">        pullUpLoad: <span class="literal">true</span></span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.scroll.on(<span class="string">&#x27;scroll&#x27;</span>,<span class="function">(<span class="params">position</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(position)</span></span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.scroll.on(<span class="string">&#x27;pullingUp&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;上拉刷新&quot;</span>)</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line">    height: 200px;</span><br><span class="line">    background-color: red;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="简单封装"><a href="#简单封装" class="headerlink" title="简单封装"></a>简单封装</h5><p>功能:</p><ul><li><code>backtop</code>在滑动一定距离时显示</li><li>上拉加载更多</li></ul><h6 id="scroll"><a href="#scroll" class="headerlink" title="scroll"></a>scroll</h6><p>在<code>src\components\common\scroll</code>下创建<code>Scroll</code></p><ul><li><code>probeType</code>值不为0时、才会监听<code>scroll</code>事件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> BScroll <span class="keyword">from</span> <span class="string">&quot;better-scroll&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;Scroll&quot;</span>,</span></span><br><span class="line">    props:&#123;</span><br><span class="line">      probeType: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="number">0</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      pullUpLoad: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">Boolean</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="literal">false</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        scroll: <span class="literal">null</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.scroll = <span class="keyword">new</span> BScroll(<span class="built_in">this</span>.$refs.wrapper, &#123;</span></span><br><span class="line"><span class="javascript">        probeType: <span class="built_in">this</span>.probeType,</span></span><br><span class="line"><span class="javascript">        pullUpLoad: <span class="built_in">this</span>.pullUpLoad,  </span></span><br><span class="line"><span class="javascript">        <span class="comment">//better-scroll 默认会阻止浏览器的原生 click 事件。当设置为 true，better-scroll 会派发一个 click 事件</span></span></span><br><span class="line"><span class="javascript">        click: <span class="literal">true</span></span></span><br><span class="line">      &#125;)</span><br><span class="line">      </span><br><span class="line"><span class="javascript">      <span class="comment">// 当有 probeType 属性时 才会监听滚动</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.scroll.on(<span class="string">&quot;scroll&quot;</span>,( <span class="function"><span class="params">position</span> =&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//自定义事件 子传父</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.$emit(<span class="string">&#x27;scroll&#x27;</span>,position)</span></span><br><span class="line">      &#125;))  </span><br><span class="line">      </span><br><span class="line"><span class="javascript">      <span class="comment">// 当有 pullUpLoad 属性为 true 才会监听上拉</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.scroll.on(<span class="string">&#x27;pullingUp&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$emit(<span class="string">&quot;pullingUp&quot;</span>)</span></span><br><span class="line">      &#125;)  </span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">//对BScroll的scrollTo封装</span></span></span><br><span class="line">      scrollTo(x, y, time = 500) &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.scroll.scrollTo(x, y, time)</span></span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line"><span class="javascript">      <span class="comment">// 当上拉加载数据加载完毕后，需要调用此方法告诉 better-scroll 数据已加载。  </span></span></span><br><span class="line">      finishPullUp()&#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.scroll.finishPullUp()</span></span><br><span class="line">      &#125;  </span><br><span class="line">      </span><br><span class="line"><span class="javascript">      <span class="comment">//重新计算 better-scroll，当 DOM 结构发生变化的时候务必要调用确保滚动的效果正常。</span></span></span><br><span class="line">      refresh() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.scroll.refresh()</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="backtop"><a href="#backtop" class="headerlink" title="backtop"></a>backtop</h6><p>在<code>src\components\contents\backtop</code>下创建<code>BackTop</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;back-top&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;~assets/img/common/top.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;BackTop&quot;</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.back-top</span>&#123;</span></span><br><span class="line">    position: fixed;</span><br><span class="line">    bottom: 53px;</span><br><span class="line">    right: 3px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.back-top</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line">    width: 50px;</span><br><span class="line">    height: 50px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h6><ul><li>通过绝对定位<code>scroll</code>组件就可以不用指定高度来显示滚动区域了、或者使用<code>height:calc(100%-93px); 但是又bug</code></li><li><code>ref=&quot;refname&quot;</code>可以绑定组件、<code>this.$refs.refname</code>使用</li><li>自定义组件本身不能添加自定义事件、需要添加事件修饰符<code>.native</code></li><li><code>this.isShowBackTop = -position.y &gt; 1000</code> 判断 滑动距离大于1000时才会显示BackTop</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span><br><span class="line">   ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">scroll</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;scroll&quot;</span> @<span class="attr">scroll</span>=<span class="string">&quot;contentScroll&quot;</span> <span class="attr">:probeType</span>=<span class="string">&quot;3&quot;</span> <span class="attr">:pullUpLoad</span>=<span class="string">&quot;true&quot;</span> @<span class="attr">pullingUp</span>=<span class="string">&quot;loadMore&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">HomeSwiper</span> <span class="attr">:banners</span>=<span class="string">&quot;banners&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">HomeRecommend</span> <span class="attr">:recommends</span>=<span class="string">&quot;recommends&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">HomeFeatureView</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tab-control</span> <span class="attr">class</span>=<span class="string">&quot;home-tab-control&quot;</span> <span class="attr">:titles</span>=<span class="string">&quot;[&#x27;流行&#x27;, &#x27;新款&#x27;, &#x27;精选&#x27;]&quot;</span> @<span class="attr">tabClick</span>=<span class="string">&quot;tabClick&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">good-list</span> <span class="attr">:goods</span>=<span class="string">&quot;showGoods&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">scroll</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">BackTop</span> @<span class="attr">click.native</span>=<span class="string">&quot;topClick&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;isShowBackTop&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">//...</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Scroll <span class="keyword">from</span> <span class="string">&quot;components/common/scroll/Scroll&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> BackTop <span class="keyword">from</span> <span class="string">&quot;components/contents/backtop/BackTop&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="comment">//...</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;Home&quot;</span>,</span></span><br><span class="line">    components: &#123;</span><br><span class="line">      GoodList,</span><br><span class="line"><span class="javascript">      Scroll,BackTop <span class="comment">//...</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    data()&#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//...</span></span></span><br><span class="line"><span class="javascript">            isShowBackTop:<span class="literal">false</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    methods: &#123;</span><br><span class="line">      /**</span><br><span class="line">       * 事件相关</span><br><span class="line">       */</span><br><span class="line"><span class="javascript">      <span class="comment">//...</span></span></span><br><span class="line">      topClick()&#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.scroll.scroll)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$refs.scroll.scrollTo(<span class="number">0</span>,<span class="number">0</span>)</span></span><br><span class="line">      &#125;,</span><br><span class="line">      contentScroll(position)&#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.isShowBackTop = -position.y &gt; <span class="number">1000</span></span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="comment">//加载更多</span></span></span><br><span class="line">      loadMore()&#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.getHomeGoods(<span class="built_in">this</span>.currentType)</span></span><br><span class="line">      &#125;,    </span><br><span class="line"><span class="javascript">      <span class="comment">//...</span></span></span><br><span class="line">     getHomeGoods(type) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> page = <span class="built_in">this</span>.goods[type].page + <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">        getHomeGoods(type, page).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// console.log(res.data.list)</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.goods[type].list.push(...res.data.list)</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.goods[type].page += <span class="number">1</span>;</span></span><br><span class="line">            </span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.$refs.scroll.finishPullUp();</span></span><br><span class="line">        &#125;)   </span><br><span class="line">     &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-id">#home</span> &#123;</span></span><br><span class="line">    height: 100vh;</span><br><span class="line">    position: relative;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.home-nav-bar</span> &#123;</span></span><br><span class="line">    background-color: var(--color-tint);</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"></span><br><span class="line">    position: fixed;</span><br><span class="line">    left: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    top: 0;</span><br><span class="line">    z-index: 9;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.home-tab-control</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="comment">/*两个要混合使用*/</span></span></span><br><span class="line">    position: sticky;</span><br><span class="line"><span class="css">    <span class="selector-tag">top</span>: 44<span class="selector-tag">px</span>; <span class="comment">/*顶部navbar的高度*/</span></span></span><br><span class="line">    z-index: 8;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.wrapper</span>&#123;</span></span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 44px;</span><br><span class="line">    bottom: 49px;</span><br><span class="line">    right: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  /*.wrapper &#123;</span><br><span class="line">   height: calc(100% - 93px)</span><br><span class="line">    overflow: hidden;</span><br><span class="line">   margin-top: 44px;</span><br><span class="line">   &#125;  */</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="解决首页中Better-Scroll可滚动区域的问题"><a href="#解决首页中Better-Scroll可滚动区域的问题" class="headerlink" title="解决首页中Better-Scroll可滚动区域的问题"></a>解决首页中Better-Scroll可滚动区域的问题</h4><h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><ul><li><p>Better-Scroll在决定有多少区域可以滚动时，是根据<code>scrollerHeight</code>属性决定</p><ul><li><p>scrollerHeight属性是根据放Better Scroll的content中的子组件的高度</p></li><li><p>但是我们的首页中,刚开始在计算<code>scrollerHeight</code>属性时,是没有将图片计算在内的</p></li><li><p>所以,计算出来的告诉是错误的(1300+)</p></li><li><p>后来图片加载进来之后有了新的高度,但是scrollerHeight属性并没有进行更新.</p></li><li><p>所以滚动出现了问题</p></li></ul></li><li><p>如何解决这个问题了?</p><ul><li>监听每一张图片是否加载完成，只要有一张图片加载完成了，执行一 次<code>refresh()</code></li><li>如何监听图片加载完成了?<ul><li>元素的js监听图片<code>img.onload = function()&#123;&#125;</code></li><li><code>Vue中监听: @load=&#39;方法&#39;</code></li></ul></li><li>调用scroll的<code>refresh</code></li></ul></li><li><p>如何将<code>GoodsListltem.vue</code>中 的事件传入到<code>Home.vue</code>中</p><ul><li>因为涉及到非父子组件的通信,所以这里我们选择了事件总线<ul><li><code>$bus</code> -&gt; 总线</li><li><code>Vue.prototype.$bus = new Vue()</code></li><li><code>this.$bus.emit(&#39;事件名称&#39;,参数)</code></li><li><code>this.$bus.on(&#39;事件名称&#39;,回调函数(参数))</code></li></ul></li></ul></li></ul><p>对于<a href="https://www.jb51.net/article/132371.htm">非父子组件通信</a>来说我们需要使用集中式的事件中间件：<code>Bus</code>。</p><p>在组件中，可以使用<code>$emit， $on， $off</code> 分别来<code>分发、监听、取消监听</code>事件</p><p>需要在main.js中注册</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局实例化$bus事件总线</span></span><br><span class="line">Vue.prototype.$bus = <span class="keyword">new</span> Vue()</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>编辑<code>GoodListItem.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;goods-item&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- @load 事件是图片加载完成之后会调用的 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;goodItem.showLarge.img&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> @<span class="attr">load</span>=<span class="string">&quot;imageLoad&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;goods-info&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; goodItem.title &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;price&quot;</span>&gt;</span>&#123;&#123;goodItem.price&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;collect&quot;</span>&gt;</span>&#123;&#123; goodItem.cfav &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;GoodListItem&quot;</span>,</span></span><br><span class="line">    props: &#123;</span><br><span class="line">      goodItem: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>() &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      imageLoad()&#123;</span><br><span class="line"><span class="javascript">        <span class="comment">// $emit 分发事件</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$bus.$emit(<span class="string">&#x27;imageLoad&#x27;</span>);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>Home.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span><br><span class="line">   ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">//...</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;Home&quot;</span>,</span></span><br><span class="line">    components: &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">//...</span></span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">//...</span></span></span><br><span class="line">    mounted() &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">//监听</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$bus.$on(<span class="string">&#x27;imageLoad&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$refs.scroll.refresh()</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">//...</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="防抖动"><a href="#防抖动" class="headerlink" title="防抖动"></a>防抖动</h5><p><a href="https://segmentfault.com/a/1190000018428170">浅谈js防抖和节流</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn,delay</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span> <span class="comment">//借助闭包</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(timer)&#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(timer) </span><br><span class="line">        &#125;</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(fn,delay) <span class="comment">// 简化写法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onscroll = debounce(showTop,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>刷新频繁找不到<code>refresh</code>的解决办法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span><br><span class="line">   ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">//...</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;Home&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="comment">//...</span></span></span><br><span class="line">    mounted() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> refresh = <span class="built_in">this</span>.debounce(<span class="built_in">this</span>.$refs.scroll.refresh,<span class="number">50</span>)</span></span><br><span class="line"><span class="javascript">      <span class="comment">//创建时监听</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$bus.$on(<span class="string">&#x27;imageLoad&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line">        refresh()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">//...</span></span></span><br><span class="line">    methods: &#123;</span><br><span class="line">      /**</span><br><span class="line">       * 事件相关</span><br><span class="line">       */</span><br><span class="line"><span class="javascript">      <span class="comment">//...</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//防抖动</span></span></span><br><span class="line">      debounce(func, delay) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> timer = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (timer) <span class="built_in">clearTimeout</span>(timer)</span></span><br><span class="line"><span class="javascript">          timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            func.apply(<span class="built_in">this</span>, args)</span></span><br><span class="line">          &#125;, delay)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">     <span class="comment">//...</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以把函数封装到<code>src\common\utils.js</code>里</p><h4 id="tabControl的吸顶效果"><a href="#tabControl的吸顶效果" class="headerlink" title="tabControl的吸顶效果"></a>tabControl的吸顶效果</h4><h5 id="获取到tabControl的offsetTop"><a href="#获取到tabControl的offsetTop" class="headerlink" title="获取到tabControl的offsetTop"></a>获取到tabControl的offsetTop</h5><ul><li><p>必须知道滚动到多少时,开始有吸顶效果,这个时候就需要获取tabControl的offsetTop</p></li><li><p>但是,如果直接在mounted中获取tabControl的offsetTop,那么值是不正确.</p></li><li><p>如何获取正确的值了?</p><ul><li>监听HomeSwiper中img的加载完成.</li><li>加载完成后,发出事件,在Home.vue中,获取正确的值.</li></ul></li><li><p>补充:</p><ul><li>为了不让HomeSwiper多次发出事件,</li><li>可以使用isLoad的变量进行状态的记录.</li><li>注意:这里不进行多次调用和debounce的区别</li></ul></li><li><p>监听滚动,动态的改变tabControl的样式</p><ul><li>问题动态的改变tabControl的样式时，会出现两个问题:</li><li>问题一:下面的商品内容,会突然上移</li><li>问题二: tabControl虽然设置了fixed,但是也随着Better-Scroll-起滚出去了.</li></ul></li><li><p>其他方案来解决停留问题.</p><ul><li>在最上面,多复制了一份PlaceHolderTabControl组件对象,利用它来实现停留效果.</li><li>当用户滚动到一定位置时, PlaceHolderTabControl显示出来.</li><li>当用户滚动没有达到- -定位置时, PlaceHolderTabControl隐藏起来.</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">NavBar</span> <span class="attr">class</span>=<span class="string">&quot;home-nav-bar&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;center&quot;</span>&gt;</span>购物街<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">NavBar</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tab-control</span> <span class="attr">class</span>=<span class="string">&quot;home-tab-control&quot;</span> <span class="attr">:titles</span>=<span class="string">&quot;[&#x27;流行&#x27;, &#x27;新款&#x27;, &#x27;精选&#x27;]&quot;</span> @<span class="attr">tabClick</span>=<span class="string">&quot;tabClick&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;tabControl1&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">v-show</span>=<span class="string">&quot;isFixed&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scroll</span> <span class="attr">ref</span>=<span class="string">&quot;scroll&quot;</span> @<span class="attr">scroll</span>=<span class="string">&quot;contentScroll&quot;</span> <span class="attr">:probeType</span>=<span class="string">&quot;3&quot;</span> <span class="attr">:pullUpLoad</span>=<span class="string">&quot;true&quot;</span> @<span class="attr">pullingUp</span>=<span class="string">&quot;loadMore&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">HomeSwiper</span> <span class="attr">:banners</span>=<span class="string">&quot;banners&quot;</span> @<span class="attr">swiperImageLoad</span>=<span class="string">&quot;swiperLoad&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;swiper&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">HomeRecommend</span> <span class="attr">:recommends</span>=<span class="string">&quot;recommends&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">HomeFeatureView</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tab-control</span> <span class="attr">:titles</span>=<span class="string">&quot;[&#x27;流行&#x27;, &#x27;新款&#x27;, &#x27;精选&#x27;]&quot;</span> @<span class="attr">tabClick</span>=<span class="string">&quot;tabClick&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;tabControl2&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">good-list</span> <span class="attr">:goods</span>=<span class="string">&quot;showGoods&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">scroll</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">BackTop</span> @<span class="attr">click.native</span>=<span class="string">&quot;topClick&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;isShowBackTop&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> NavBar <span class="keyword">from</span> <span class="string">&quot;components/common/navbar/NavBar&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> TabControl <span class="keyword">from</span> <span class="string">&quot;components/contents/tabcontrol/TabControl&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Scroll <span class="keyword">from</span> <span class="string">&quot;components/common/scroll/Scroll&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> BackTop <span class="keyword">from</span> <span class="string">&quot;components/contents/backtop/BackTop&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> GoodList <span class="keyword">from</span> <span class="string">&quot;../../components/contents/good/GoodList&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> HomeSwiper <span class="keyword">from</span> <span class="string">&quot;./childComps/HomeSwiper&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> HomeRecommend <span class="keyword">from</span> <span class="string">&quot;./childComps/HomeRecommend&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> HomeFeatureView <span class="keyword">from</span> <span class="string">&quot;./childComps/HomeFeatureView&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123;getHomeMultiData, getHomeGoods&#125; <span class="keyword">from</span> <span class="string">&quot;network/home&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123;debounce&#125; <span class="keyword">from</span> <span class="string">&quot;common/utils&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;Home&quot;</span>,</span></span><br><span class="line">    components: &#123;</span><br><span class="line">      GoodList,</span><br><span class="line">      NavBar, TabControl, Scroll, HomeSwiper, HomeRecommend, HomeFeatureView, BackTop</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//...</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//  tabControl2 距离顶部的高度</span></span></span><br><span class="line">        tabOffsetTop: 0,</span><br><span class="line"><span class="javascript">        <span class="comment">//判断是否显示 tabControl1</span></span></span><br><span class="line"><span class="javascript">        isFixed: <span class="literal">false</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">//...</span></span></span><br><span class="line">    methods: &#123;</span><br><span class="line">      /**</span><br><span class="line">       * 事件相关</span><br><span class="line">       */</span><br><span class="line">      tabClick(index) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">switch</span> (index) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">case</span> <span class="number">0</span>:</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.currentType = <span class="string">&quot;pop&quot;</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">break</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">case</span> <span class="number">1</span>:</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.currentType = <span class="string">&quot;new&quot;</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">break</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">case</span> <span class="number">2</span>:</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.currentType = <span class="string">&quot;sell&quot;</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">break</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$refs.tabControl1.currentIndex = index;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$refs.tabControl2.currentIndex = index;</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="comment">//...</span></span></span><br><span class="line">      contentScroll(position) &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.isShowBackTop = (-position.y) &gt; <span class="number">1000</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.isFixed = (-position.y) &gt; <span class="built_in">this</span>.tabOffsetTop</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="comment">//...</span></span></span><br><span class="line">      swiperLoad() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.tabOffsetTop = <span class="built_in">this</span>.$refs.tabControl2.$el.offsetTop</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="comment">//...</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-id">#home</span> &#123;</span></span><br><span class="line">    height: 100vh;</span><br><span class="line">    position: relative;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.home-nav-bar</span> &#123;</span></span><br><span class="line">    background-color: var(--color-tint);</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">    <span class="comment">/*position: fixed;*/</span></span></span><br><span class="line"><span class="css">    <span class="comment">/*left: 0;*/</span></span></span><br><span class="line"><span class="css">    <span class="comment">/*right: 0;*/</span></span></span><br><span class="line"><span class="css">    <span class="comment">/*top: 0;*/</span></span></span><br><span class="line"><span class="css">    <span class="comment">/*z-index: 9;*/</span></span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.home-tab-control</span> &#123;</span></span><br><span class="line">    position: relative;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">    <span class="comment">/*调整一下层级 并且有 position定位的*/</span>  </span></span><br><span class="line">    z-index: 9;</span><br><span class="line">    margin-top: -1px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.wrapper</span>&#123;</span></span><br><span class="line">    overflow: hidden;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 44px;</span><br><span class="line">    bottom: 49px;</span><br><span class="line">    right: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="让Home保持原来的状态"><a href="#让Home保持原来的状态" class="headerlink" title="让Home保持原来的状态"></a>让Home保持原来的状态</h4><ul><li>让Home不要随意销毁掉<ul><li><code>keep-alive</code>(可能使用还会有问题、但是我测试时候没问题)</li></ul></li><li>让Home中的内容保持原来的位置<ul><li>离开时,保存一一个位置信息TopY,</li><li>进来时,将位置设置为原来保存的位置TopY信息即可.<ul><li>注意:最好回来时,进行一次<code>refresh()</code></li></ul></li></ul></li></ul><p>编辑<code>App.app</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">exclude</span>=<span class="string">&quot;Detail&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">main-tar-bar</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编辑<code>Home.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">//...  </span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//...</span></span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//...</span></span></span><br><span class="line">        TopY: 0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">//...</span></span></span><br><span class="line">    activated() &#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$refs.scroll.scrollTo(<span class="number">0</span>,<span class="built_in">this</span>.TopY,<span class="number">0</span>);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$refs.scroll.refresh()</span></span><br><span class="line">    &#125;,</span><br><span class="line">    deactivated() &#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.TopY = <span class="built_in">this</span>.$refs.scroll.getTopY();</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="详情页开发"><a href="#详情页开发" class="headerlink" title="详情页开发"></a>详情页开发</h3><p>在<code>src/views/detail</code>下创建<code>Detail.vue</code></p><p>编辑<code>src/router/index.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">const</span> Detail = <span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;views/detail/Detail&#x27;</span>)</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/detail/:iid&#x27;</span>,</span><br><span class="line">    component: Detail</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>再编辑<code>src/components/contents/good/GoodListItem.vue</code> 给<code>goods-items</code>添加一个点击事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;goods-item&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;clickDetail&quot;</span>&gt;</span></span><br><span class="line">   ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//...</span></span></span><br><span class="line">    methods:&#123;</span><br><span class="line"><span class="javascript">      <span class="comment">//...</span></span></span><br><span class="line">      clickDetail()&#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$router.push(<span class="string">&quot;/detail/&quot;</span>+ <span class="built_in">this</span>.goodItem.iid)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="封装顶部导航栏"><a href="#封装顶部导航栏" class="headerlink" title="封装顶部导航栏"></a>封装顶部导航栏</h4><p>在<code>src/views/detail/childComps</code>下创建<code>DetailNav.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">NavBar</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;back&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;back&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;~assets/img/common/back.svg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;center&quot;</span> <span class="attr">class</span>=<span class="string">&quot;detail&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in titles&quot;</span> <span class="attr">class</span>=<span class="string">&quot;detail-item&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;active: currentIndex == index&#125;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;itemClick(index)&quot;</span>&gt;</span></span><br><span class="line">          &#123;&#123; item &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">NavBar</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> NavBar <span class="keyword">from</span> <span class="string">&quot;components/common/navbar/NavBar&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;DetailNavBar&quot;</span>,</span></span><br><span class="line">    components:&#123;</span><br><span class="line">      NavBar</span><br><span class="line">    &#125;,</span><br><span class="line">    data()&#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">        titles: [<span class="string">&#x27;商品&#x27;</span>,<span class="string">&#x27;参数&#x27;</span>,<span class="string">&#x27;评论&#x27;</span>,<span class="string">&#x27;推荐&#x27;</span>],</span></span><br><span class="line">        currentIndex:  0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      itemClick(index)&#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.currentIndex = index</span></span><br><span class="line">      &#125;,</span><br><span class="line">      back()&#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$router.go(<span class="number">-1</span>);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.detail</span>&#123;</span></span><br><span class="line">    display: flex;</span><br><span class="line">    font-size: 15px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.detail-item</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">flex</span><span class="selector-pseudo">:1</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.active</span>&#123;</span></span><br><span class="line">    color: var(--color-high-text);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.back</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line">    vertical-align: middle;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="轮播图展示"><a href="#轮播图展示" class="headerlink" title="轮播图展示"></a>轮播图展示</h4><p>在<code>src/network</code>下创建<code>detail.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; request &#125; <span class="keyword">from</span> <span class="string">&quot;./request&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getDetail</span>(<span class="params">iid</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> request(&#123;</span><br><span class="line">      url: <span class="string">&#x27;/detail&#x27;</span>,</span><br><span class="line">      params:&#123;</span><br><span class="line">        iid</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 在<code>src/views/detail/childComps</code>下创建<code>DetailSwiper.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;detail-swiper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">swiper</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">swiper-item</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in banners&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span> <span class="attr">class</span>=<span class="string">&quot;detail-swiper&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;item&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123;Swiper, SwiperItem&#125; <span class="keyword">from</span> <span class="string">&#x27;@/components/common/swiper/index&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;DetailSwiper&quot;</span>,</span></span><br><span class="line">    components: &#123;</span><br><span class="line">      Swiper,SwiperItem</span><br><span class="line">    &#125;,</span><br><span class="line">    props:&#123;</span><br><span class="line">      banners: &#123;</span><br><span class="line"><span class="javascript">        type:<span class="built_in">Array</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>()&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> []</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.detail-swiper</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">height</span><span class="selector-pseudo">:300px</span>;</span></span><br><span class="line">    overflow: hidden;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h4><p>编辑<code>src/network/detail.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6的类,详情数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Goods</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(itemInfo, columns, services) &#123;</span><br><span class="line">    <span class="built_in">this</span>.title = itemInfo.title;</span><br><span class="line">    <span class="built_in">this</span>.desc = itemInfo.desc;</span><br><span class="line">    <span class="built_in">this</span>.newPrice = itemInfo.price;</span><br><span class="line">    <span class="built_in">this</span>.lowNowPrice = itemInfo.lowNowPrice;</span><br><span class="line">    <span class="built_in">this</span>.oldPrice = itemInfo.oldPrice;</span><br><span class="line">    <span class="built_in">this</span>.discount = itemInfo.discountDesc;</span><br><span class="line">    <span class="built_in">this</span>.discountBgColor = itemInfo.discountBgColor;</span><br><span class="line">    <span class="built_in">this</span>.columns = columns;</span><br><span class="line">    <span class="built_in">this</span>.services = services;</span><br><span class="line">    <span class="built_in">this</span>.realPrice = itemInfo.lowNowPrice;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 在<code>src/views/detail/childComps</code>下创建<code>DetailBaseInfo.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 判断对象是否为空 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;base-info&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;Object.keys(goods).length !== 0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info-title&quot;</span>&gt;</span>&#123;&#123; goods.title &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info-price&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;n-price&quot;</span>&gt;</span>&#123;&#123; goods.newPrice &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;goods.oldPrice&quot;</span> <span class="attr">class</span>=<span class="string">&quot;o-price&quot;</span>&gt;</span>&#123;&#123; goods.oldPrice &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:style</span>=<span class="string">&quot;&#123; backgroundColor: goods.discountBgColor &#125;&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">&quot;discount&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-if</span>=<span class="string">&quot;goods.discount&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        &#123;&#123; goods.discount &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info-other&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; goods.columns[0] &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; goods.columns[1] &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; goods.services[goods.services.length - 1].name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info-service&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">&quot;info-service-item&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-for</span>=<span class="string">&quot;index in goods.services.length - 1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-if</span>=<span class="string">&quot;goods.services[index - 1].icon&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;goods.services[index - 1].icon&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; goods.services[index - 1].name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;DetailBaseInfo&quot;</span>,</span></span><br><span class="line">    props: &#123;</span><br><span class="line">      goods: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>() &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> &#123;&#125;;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.base-info</span> &#123;</span></span><br><span class="line">    width: 100%;</span><br><span class="line">    margin-top: 15px;</span><br><span class="line">    padding: 0 10px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#999999</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border-bottom</span>: 5<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#f2f5f8</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.info-title</span> &#123;</span></span><br><span class="line">    text-align: justify;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#222222</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.info-price</span> &#123;</span></span><br><span class="line">    margin-top: 10px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.info-price</span> <span class="selector-class">.n-price</span> &#123;</span></span><br><span class="line">    font-size: 24px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#ff5777</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.info-price</span> <span class="selector-class">.o-price</span> &#123;</span></span><br><span class="line">    font-size: 13px;</span><br><span class="line">    margin-left: 5px;</span><br><span class="line">    text-decoration: line-through;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.info-price</span> <span class="selector-class">.discount</span> &#123;</span></span><br><span class="line">    font-size: 12px;</span><br><span class="line">    position: relative;</span><br><span class="line">    top: -4px;</span><br><span class="line">    margin-left: 5px;</span><br><span class="line">    padding: 3px 6px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#ffffff</span>;</span></span><br><span class="line">    border-radius: 8px;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#ff5777</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.info-other</span> &#123;</span></span><br><span class="line">    font-size: 13px;</span><br><span class="line">    line-height: 30px;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: space-between;</span><br><span class="line">    margin-top: 15px;</span><br><span class="line"><span class="css">    <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">rgba</span>(100, 100, 100, 0<span class="selector-class">.1</span>);</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.info-service</span> &#123;</span></span><br><span class="line">    line-height: 60px;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: space-between;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.info-service-item</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">    position: relative;</span><br><span class="line">    top: 2px;</span><br><span class="line">    width: 14px;</span><br><span class="line">    height: 14px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.info-service-item</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line">    font-size: 13px;</span><br><span class="line">    margin-left: 5px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#333333</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="店铺信息"><a href="#店铺信息" class="headerlink" title="店铺信息"></a>店铺信息</h4><p>编辑<code>src/network/detail.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 店铺数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Shop</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(shopInfo) &#123;</span><br><span class="line">    <span class="built_in">this</span>.logo = shopInfo.shopLogo;</span><br><span class="line">    <span class="built_in">this</span>.name = shopInfo.name;</span><br><span class="line">    <span class="built_in">this</span>.fans = shopInfo.cFans;</span><br><span class="line">    <span class="built_in">this</span>.sells = shopInfo.cSells;</span><br><span class="line">    <span class="built_in">this</span>.score = shopInfo.score;</span><br><span class="line">    <span class="built_in">this</span>.goodsCount = shopInfo.cGoods;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 在<code>src/views/detail/childComps</code>下创建<code>DetailShopInfo.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;shop-info&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;Object.keys(shop).length !== 0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;shop-top&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;shop.logo&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;shop.logo&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>&#123;&#123; shop.name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;shop-middle&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;shop-middle-item shop-middle-left&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info-sells&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sells-count&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123; shop.sells | sellCountFilter &#125;&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sells-text&quot;</span>&gt;</span>总销量<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info-goods&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;goods-count&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123; shop.goodsCount &#125;&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;goods-text&quot;</span>&gt;</span>全部宝贝<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;shop-middle-item shop-middle-right&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in shop.score&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; &#x27;score-better&#x27;: item.isBetter &#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;score&quot;</span>&gt;</span></span><br><span class="line">              &#123;&#123; item.score &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; &#x27;better-more&#x27;: item.isBetter &#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;better&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; item.isBetter ? &quot;高&quot; : &quot;低&quot; &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;shop-bottom&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;enter-shop&quot;</span>&gt;</span>进店逛逛<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;DetailShopInfo&quot;</span>,</span></span><br><span class="line">    props: &#123;</span><br><span class="line">      shop: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>() &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> &#123;&#125;;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    filters: &#123;</span><br><span class="line">      sellCountFilter(value) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (value &lt; <span class="number">10000</span>) <span class="keyword">return</span> value;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> (value / <span class="number">10000</span>).toFixed(<span class="number">1</span>) + <span class="string">&quot;万&quot;</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.shop-info</span> &#123;</span></span><br><span class="line">    padding: 25px 8px;</span><br><span class="line"><span class="css">    <span class="selector-tag">border-bottom</span>: 5<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#f2f5f8</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.shop-top</span> &#123;</span></span><br><span class="line">    line-height: 45px;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.shop-top</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">    width: 45px;</span><br><span class="line">    height: 45px;</span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.1</span>);</span></span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.shop-top</span> <span class="selector-class">.title</span> &#123;</span></span><br><span class="line">    margin-left: 10px;</span><br><span class="line">    vertical-align: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.shop-middle</span> &#123;</span></span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    margin-top: 15px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.shop-middle-item</span> &#123;</span></span><br><span class="line">    flex: 1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.shop-middle-left</span> &#123;</span></span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: space-evenly;</span><br><span class="line">    text-align: center;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#333333</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border-right</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.1</span>);</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.sells-count</span>,</span></span><br><span class="line"><span class="css">  <span class="selector-class">.goods-count</span> &#123;</span></span><br><span class="line">    font-size: 18px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.sells-text</span>,</span></span><br><span class="line"><span class="css">  <span class="selector-class">.goods-text</span> &#123;</span></span><br><span class="line">    font-size: 12px;</span><br><span class="line">    margin-top: 10px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.shop-middle-right</span> &#123;</span></span><br><span class="line">    font-size: 13px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#333333</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.shop-middle-right</span> <span class="selector-tag">table</span> &#123;</span></span><br><span class="line">    width: 120px;</span><br><span class="line">    margin-left: 30px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.shop-middle-right</span> <span class="selector-tag">table</span> <span class="selector-tag">td</span> &#123;</span></span><br><span class="line">    padding: 5px 0;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.shop-middle-right</span> <span class="selector-class">.score</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#5ea732</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.shop-middle-right</span> <span class="selector-class">.score-better</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#f13e3a</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.shop-middle-right</span> <span class="selector-class">.better</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line">    padding: 3px;</span><br><span class="line">    text-align: center;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#ffffff</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#5ea732</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.shop-middle-right</span> <span class="selector-class">.better-more</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#f13e3a</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.shop-bottom</span> &#123;</span></span><br><span class="line">    margin-top: 10px;</span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.enter-shop</span> &#123;</span></span><br><span class="line">    font-size: 14px;</span><br><span class="line">    line-height: 30px;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    width: 150px;</span><br><span class="line">    height: 30px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    border-radius: 10px;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#f2f5f8</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="商品信息"><a href="#商品信息" class="headerlink" title="商品信息"></a>商品信息</h4><p>编辑<code>src/network/detail.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 店铺数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Shop</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(shopInfo) &#123;</span><br><span class="line">    <span class="built_in">this</span>.logo = shopInfo.shopLogo;</span><br><span class="line">    <span class="built_in">this</span>.name = shopInfo.name;</span><br><span class="line">    <span class="built_in">this</span>.fans = shopInfo.cFans;</span><br><span class="line">    <span class="built_in">this</span>.sells = shopInfo.cSells;</span><br><span class="line">    <span class="built_in">this</span>.score = shopInfo.score;</span><br><span class="line">    <span class="built_in">this</span>.goodsCount = shopInfo.cGoods;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>src/views/detail/childComps</code>下创建<code>DetailGoodsInfo.vue</code></p><ul><li>data中<code>counter</code>为<code>计算图片加载个数</code></li><li>data中<code>detailLength</code>为获取的数据<code>detailInfo</code>中<code>detailImage</code>数组的长度</li><li>通过侦听属性<code>watch</code>监听<code>detailImage</code>数组的长度、提高性能</li><li>当counter等于detailImage时才向父组件发送<code>imgLoad</code>事件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;Object.keys(detailInfo).length !== 0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info-text-wrap&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-top-style&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;desc info-text-desc&quot;</span>&gt;</span>&#123;&#123;detailInfo.desc&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-bot-style&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img-list-wrap&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item in detailInfo.detailImage&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;desc&quot;</span>&gt;</span>&#123;&#123;item.key&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in item.list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;item&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span> @<span class="attr">load</span>=<span class="string">&quot;imgLoad&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&#x27;DetailGoodsInfo&#x27;</span>,</span></span><br><span class="line">    props: &#123;</span><br><span class="line">      detailInfo: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>() &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        counter: 0,</span><br><span class="line">        detailLength: 0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      imgLoad() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (++<span class="built_in">this</span>.counter == <span class="built_in">this</span>.detailLength)</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.$emit(<span class="string">&#x27;imgLoad&#x27;</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">      detailInfo() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.detailInfo.detailImage.forEach(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.detailLength += <span class="built_in">this</span>.detailInfo.detailImage[index].list.length</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.info-text-wrap</span> &#123;</span></span><br><span class="line">    position: relative;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.info-text-wrap</span> <span class="selector-class">.text-top-style</span> &#123;</span></span><br><span class="line">    width: 60px;</span><br><span class="line">    height: 1px;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line">    margin-left: 4px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.info-text-wrap</span> <span class="selector-class">.text-top-style</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 4px;</span><br><span class="line"><span class="css">    <span class="selector-tag">top</span>: <span class="selector-tag">-2</span><span class="selector-class">.5px</span>;</span></span><br><span class="line">    display: block;</span><br><span class="line">    content: &#x27;&#x27;;</span><br><span class="line">    width: 5px;</span><br><span class="line">    height: 5px;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#333333</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.info-text-wrap</span> <span class="selector-class">.text-top-style</span> <span class="selector-class">.text-bot-style</span> &#123;</span></span><br><span class="line">    width: 60px;</span><br><span class="line">    height: 1px;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line">    position: absolute;</span><br><span class="line">    right: 4px;</span><br><span class="line">    bottom: 0;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.info-text-wrap</span> <span class="selector-class">.text-top-style</span> <span class="selector-class">.text-bot-style</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 4px;</span><br><span class="line"><span class="css">    <span class="selector-tag">top</span>: <span class="selector-tag">-2</span><span class="selector-class">.5px</span>;</span></span><br><span class="line">    display: block;</span><br><span class="line">    content: &#x27;&#x27;;</span><br><span class="line">    width: 5px;</span><br><span class="line">    height: 5px;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#333333</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.info-text-wrap</span> <span class="selector-class">.text-bot-style</span> &#123;</span></span><br><span class="line">    width: 60px;</span><br><span class="line">    height: 1px;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line">    position: absolute;</span><br><span class="line">    right: 4px;</span><br><span class="line">    bottom: 0;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.info-text-wrap</span> <span class="selector-class">.text-bot-style</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line">    position: absolute;</span><br><span class="line">    right: 0;</span><br><span class="line"><span class="css">    <span class="selector-tag">top</span>: <span class="selector-tag">-2</span><span class="selector-class">.5px</span>;</span></span><br><span class="line">    display: block;</span><br><span class="line">    content: &#x27;&#x27;;</span><br><span class="line">    width: 5px;</span><br><span class="line">    height: 5px;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.info-text-wrap</span> <span class="selector-class">.info-text-desc</span> &#123;</span></span><br><span class="line">    padding: 10px 4px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.desc</span> &#123;</span></span><br><span class="line">    font-size: 14px;</span><br><span class="line">    padding-bottom: 6px;</span><br><span class="line">    line-height: 20px;</span><br><span class="line">    margin: 4px 0;</span><br><span class="line">    text-indent: 10px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.img</span> &#123;</span></span><br><span class="line">    width: 100%;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="参数信息"><a href="#参数信息" class="headerlink" title="参数信息"></a>参数信息</h4><p>编辑<code>src/network/detail.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 尺寸数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsParams</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(info, rule) &#123;</span><br><span class="line">    <span class="comment">// 注: images可能没有值(某些商品有值, 某些没有值)</span></span><br><span class="line">    <span class="built_in">this</span>.image = info.images ? info.images[<span class="number">0</span>] : <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.infos = info.set;</span><br><span class="line">    <span class="built_in">this</span>.sizes = rule.tables;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>src/views/detail/childComps</code>下创建<code>DetailParamInfo.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;Object.keys(paramInfo).length !== 0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;params-wrap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item in paramInfo.rule&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;list in item&quot;</span> <span class="attr">class</span>=<span class="string">&quot;flex&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;list.id&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;listitem in list&quot;</span> <span class="attr">class</span>=<span class="string">&quot;rule-list-item&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;listitem.id&quot;</span>&gt;</span></span><br><span class="line">          &#123;&#123;listitem&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(info, index) in paramInfo.info&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span> <span class="attr">class</span>=<span class="string">&quot;flex info-list-wrap&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info-list-tit&quot;</span>&gt;</span>&#123;&#123;info.key&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;info.value&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&#x27;DetailParamInfo&#x27;</span>,</span></span><br><span class="line">    props: &#123;</span><br><span class="line">      paramInfo: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>() &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.params-wrap</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border-top</span>: 4<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ececec</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border-bottom</span>: 4<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ececec</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.rule-list-item</span> &#123;</span></span><br><span class="line">    font-size: 12px;</span><br><span class="line">    width: 20%;</span><br><span class="line"><span class="css">    <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ececec</span>;</span></span><br><span class="line">    padding: 10px 4px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.info-list-wrap</span> &#123;</span></span><br><span class="line">    font-size: 14px;;</span><br><span class="line"><span class="css">    <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ececec</span>;</span></span><br><span class="line">    padding: 10px 4px;</span><br><span class="line">    line-height: 20px;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.info-list-wrap</span> <span class="selector-class">.info-list-tit</span> &#123;</span></span><br><span class="line">    width: 18%;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="评论信息"><a href="#评论信息" class="headerlink" title="评论信息"></a>评论信息</h4><p>编辑<code>src/common/utils.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 时间格式化</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">formatDate</span>(<span class="params">date, fmt</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/(y+)/</span>.test(fmt)) &#123;</span><br><span class="line">    fmt = fmt.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (date.getFullYear() + <span class="string">&quot;&quot;</span>).substr(<span class="number">4</span> - <span class="built_in">RegExp</span>.$<span class="number">1.</span>length));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> o = &#123;</span><br><span class="line">    <span class="string">&quot;M+&quot;</span>: date.getMonth() + <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;d+&quot;</span>: date.getDate(),</span><br><span class="line">    <span class="string">&quot;h+&quot;</span>: date.getHours(),</span><br><span class="line">    <span class="string">&quot;m+&quot;</span>: date.getMinutes(),</span><br><span class="line">    <span class="string">&quot;s+&quot;</span>: date.getSeconds()</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> o) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`(<span class="subst">$&#123;k&#125;</span>)`</span>).test(fmt)) &#123;</span><br><span class="line">      <span class="keyword">let</span> str = o[k] + <span class="string">&quot;&quot;</span>;</span><br><span class="line">      fmt = fmt.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, <span class="built_in">RegExp</span>.$<span class="number">1.</span>length === <span class="number">1</span> ? str : padLeftZero(str));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> fmt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">padLeftZero</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="string">&quot;00&quot;</span> + str).substr(str.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>src/views/detail/childComps</code>下创建<code>DetailCommentInfo.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;comment-info&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;Object.keys(commentInfo).length !== 0&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info-header&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header-title&quot;</span>&gt;</span>用户评价<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header-more&quot;</span>&gt;</span></span><br><span class="line">          更多</span><br><span class="line">          <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;arrow-right&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info-user&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;commentInfo.user.avatar&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; commentInfo.user.uname &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info-detail&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; commentInfo.content &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info-other&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;date&quot;</span>&gt;</span>&#123;&#123; commentInfo.created | showDate &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; commentInfo.style &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info-imgs&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;item&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in commentInfo.images&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; formatDate &#125; <span class="keyword">from</span> <span class="string">&quot;common/utils&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;DetailCommentInfo&quot;</span>,</span></span><br><span class="line">    props: &#123;</span><br><span class="line">      commentInfo: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">Object</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    filters: &#123;</span><br><span class="line"><span class="javascript">      showDate: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(value * <span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> formatDate(date, <span class="string">&quot;yyyy-MM-dd hh:mm&quot;</span>);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.comment-info</span> &#123;</span></span><br><span class="line">    padding: 5px 12px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#333333</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border-bottom</span>: 5<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#f2f5f8</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.info-header</span> &#123;</span></span><br><span class="line">    line-height: 50px;</span><br><span class="line">    height: 50px;</span><br><span class="line"><span class="css">    <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.1</span>);</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.header-title</span> &#123;</span></span><br><span class="line">    font-size: 15px;</span><br><span class="line">    float: left;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.header-more</span> &#123;</span></span><br><span class="line">    font-size: 13px;</span><br><span class="line">    float: right;</span><br><span class="line">    margin-right: 10px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.info-user</span> &#123;</span></span><br><span class="line">    padding: 10px 0 5px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.info-user</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">    width: 42px;</span><br><span class="line">    height: 42px;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.info-user</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line">    font-size: 15px;</span><br><span class="line">    position: relative;</span><br><span class="line">    top: -15px;</span><br><span class="line">    margin-left: 10px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.info-detail</span> &#123;</span></span><br><span class="line">    padding: 0 5px 15px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.info-detail</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line">    font-size: 14px;</span><br><span class="line"><span class="css">    <span class="selector-tag">line-height</span>: 1<span class="selector-class">.5</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#777777</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.info-detail</span> <span class="selector-class">.info-other</span> &#123;</span></span><br><span class="line">    font-size: 12px;</span><br><span class="line">    margin-top: 10px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#999999</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.info-other</span> <span class="selector-class">.date</span> &#123;</span></span><br><span class="line">    margin-right: 8px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.info-imgs</span> &#123;</span></span><br><span class="line">    margin-top: 10px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.info-imgs</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">    width: 70px;</span><br><span class="line">    height: 70px;</span><br><span class="line">    margin-right: 5px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="推荐信息"><a href="#推荐信息" class="headerlink" title="推荐信息"></a>推荐信息</h4><p>编辑<code>src/network/detail.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getRecommend</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="string">&quot;/recommend&quot;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于推荐信息中图片显示的GoodsList与首页显示的不同所以需要修改<code>GoodsListItem.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;goods-item&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;clickDetail&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;showImage&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> @<span class="attr">load</span>=<span class="string">&quot;imageLoad&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;goods-info&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; goodItem.title &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;price&quot;</span>&gt;</span>&#123;&#123;goodItem.price&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;collect&quot;</span>&gt;</span>&#123;&#123; goodItem.cfav &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;GoodListItem&quot;</span>,</span></span><br><span class="line">    props: &#123;</span><br><span class="line">      goodItem: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>() &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed:&#123;</span><br><span class="line">      showImage()&#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">this</span>.goodItem.img || <span class="built_in">this</span>.goodItem.image</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      imageLoad()&#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$bus.$emit(<span class="string">&#x27;imageLoad&#x27;</span>);</span></span><br><span class="line">      &#125;,</span><br><span class="line">      clickDetail()&#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$router.push(<span class="string">&quot;/detail/&quot;</span>+ <span class="built_in">this</span>.goodItem.iid)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.goods-item</span> &#123;</span></span><br><span class="line">    padding-bottom: 40px;</span><br><span class="line">    position: relative;</span><br><span class="line"></span><br><span class="line">    width: 48%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.goods-item</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">    width: 100%;</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.goods-info</span> &#123;</span></span><br><span class="line">    font-size: 12px;</span><br><span class="line">    position: absolute;</span><br><span class="line">    bottom: 5px;</span><br><span class="line">    left: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.goods-info</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line">    overflow: hidden;</span><br><span class="line">    text-overflow: ellipsis;</span><br><span class="line">    white-space: nowrap;</span><br><span class="line">    margin-bottom: 3px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.goods-info</span> <span class="selector-class">.price</span> &#123;</span></span><br><span class="line">    color: var(--color-high-text);</span><br><span class="line">    margin-right: 20px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.goods-info</span> <span class="selector-class">.collect</span> &#123;</span></span><br><span class="line">    position: relative;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.goods-info</span> <span class="selector-class">.collect</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line">    content: &#x27;&#x27;;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: -15px;</span><br><span class="line">    top: -1px;</span><br><span class="line">    width: 14px;</span><br><span class="line">    height: 14px;</span><br><span class="line">    background: url(&quot;~assets/img/common/collect.svg&quot;) 0 0/14px 14px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="详情页"><a href="#详情页" class="headerlink" title="详情页"></a>详情页</h4><p><code>Detail.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;detail&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">detail-nav-bar</span> <span class="attr">class</span>=<span class="string">&quot;detail-nav&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Scroll</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">DetailSwiper</span> <span class="attr">:banners</span>=<span class="string">&quot;banners&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">DetailBaseInfo</span> <span class="attr">:goods</span>=<span class="string">&quot;goods&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">DetailShopInfo</span> <span class="attr">:shop</span>=<span class="string">&quot;shop&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">DetailGoodsInfo</span> <span class="attr">:detailInfo</span>=<span class="string">&quot;detailInfo&quot;</span> @<span class="attr">imageLoad</span>=<span class="string">&quot;imageLoad&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">DetailParamInfo</span> <span class="attr">:paramInfo</span>=<span class="string">&quot;paramInfo&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">DetailCommentInfo</span> <span class="attr">:commentInfo</span>=<span class="string">&quot;commentInfo&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">GoodList</span> <span class="attr">:goods</span>=<span class="string">&quot;recommendList&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Scroll</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> DetailNavBar <span class="keyword">from</span> <span class="string">&quot;./childComps/DetailNav&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> DetailSwiper <span class="keyword">from</span> <span class="string">&quot;./childComps/DetailSwiper&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> DetailBaseInfo <span class="keyword">from</span> <span class="string">&quot;./childComps/DetailBaseInfo&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> DetailShopInfo <span class="keyword">from</span> <span class="string">&quot;./childComps/DetailShopInfo&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> DetailGoodsInfo <span class="keyword">from</span> <span class="string">&quot;./childComps/DetailGoodsInfo&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> DetailParamInfo <span class="keyword">from</span> <span class="string">&quot;./childComps/DetailParamInfo&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> DetailCommentInfo <span class="keyword">from</span> <span class="string">&quot;./childComps/DetailCommentInfo&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> GoodList <span class="keyword">from</span> <span class="string">&quot;components/contents/good/GoodList&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123;getDetail, getRecommend, Goods, Shop, GoodsParams&#125; <span class="keyword">from</span> <span class="string">&quot;network/detail&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Scroll <span class="keyword">from</span> <span class="string">&quot;components/common/scroll/Scroll&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;Detail&quot;</span>,</span></span><br><span class="line">    components: &#123;</span><br><span class="line">      DetailCommentInfo,</span><br><span class="line">      DetailNavBar,</span><br><span class="line">      DetailSwiper,</span><br><span class="line">      DetailBaseInfo,</span><br><span class="line">      DetailShopInfo,</span><br><span class="line">      DetailGoodsInfo,</span><br><span class="line">      DetailParamInfo,</span><br><span class="line">      GoodList,</span><br><span class="line">      Scroll</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        iid: <span class="literal">null</span>,</span></span><br><span class="line">        banners: [],</span><br><span class="line">        goods: &#123;&#125;,</span><br><span class="line">        shop: &#123;&#125;,</span><br><span class="line">        detailInfo: &#123;&#125;,</span><br><span class="line">        paramInfo: &#123;&#125;,</span><br><span class="line">        commentInfo: &#123;&#125;,</span><br><span class="line">        recommendList: []</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.iid = <span class="built_in">this</span>.$route.params.iid</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">// 发送网络请求</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.getProductDetail();</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.getRecommend();</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      imageLoad() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$refs.scroll.refresh()</span></span><br><span class="line">      &#125;,</span><br><span class="line">      getProductDetail() &#123;</span><br><span class="line"><span class="javascript">        getDetail(<span class="built_in">this</span>.iid).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> data = res.result;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(res)</span></span><br><span class="line"><span class="javascript">          <span class="comment">//获取顶部图片信息</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.banners = data.itemInfo.topImages</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">          <span class="comment">// 获取商品数据,调用封装的ES6的class</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.goods = <span class="keyword">new</span> Goods(data.itemInfo, data.columns, data.shopInfo.services);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">          <span class="comment">// 获取店铺数据</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.shop = <span class="keyword">new</span> Shop(data.shopInfo);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">          <span class="comment">// 获取商品数据</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.detailInfo = data.detailInfo</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">          <span class="comment">//获取商品参数</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.paramInfo = <span class="keyword">new</span> GoodsParams(data.itemParams.info, data.itemParams.rule || &#123;&#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">          <span class="comment">// 获取评论数据</span></span></span><br><span class="line">          if (data.rate.cRate !== 0) &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.commentInfo = data.rate.list[<span class="number">0</span>] || &#123;&#125;;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      getRecommend() &#123;</span><br><span class="line"><span class="javascript">        getRecommend().then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(res.data)</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.recommendList = res.data.list;</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.detail</span> &#123;</span></span><br><span class="line">    position: relative;</span><br><span class="line">    z-index: 9;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">    height: 100vh;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.content</span> &#123;</span></span><br><span class="line">    position: relative;</span><br><span class="line">    height: calc(100% - 44px);</span><br><span class="line">    overflow: hidden;</span><br><span class="line"><span class="css">    <span class="comment">/*position: absolute;*/</span></span></span><br><span class="line"><span class="css">    <span class="comment">/*top: 44px;*/</span></span></span><br><span class="line"><span class="css">    <span class="comment">/*left: 0;*/</span></span></span><br><span class="line"><span class="css">    <span class="comment">/*right: 0;*/</span></span></span><br><span class="line"><span class="css">    <span class="comment">/*bottom: 49px;*/</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="mixin的使用"><a href="#mixin的使用" class="headerlink" title="mixin的使用"></a>mixin的使用</h4><p>解决全局监听产生的bug <a href="https://cn.vuejs.org/v2/api/#mixins">https://cn.vuejs.org/v2/api/#mixins</a> mixins也就是把其他地方的东西整合在一个地方 </p><p>创建<code>src/common/mixins.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;debounce&#125; <span class="keyword">from</span> <span class="string">&quot;./utils&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> imgListenerMixin = &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      imageListener: <span class="literal">null</span>,</span><br><span class="line">      newRefresh:<span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="built_in">this</span>.newRefresh = debounce(<span class="built_in">this</span>.$refs.scroll.refresh, <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.imageListener = <span class="function">() =&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.newRefresh()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建时监听</span></span><br><span class="line">    <span class="built_in">this</span>.$bus.$on(<span class="string">&#x27;imageLoad&#x27;</span>, <span class="built_in">this</span>.imageListener)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编辑<code>src/views/home/Home.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// ...</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 导入</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; imgListenerMixin &#125; <span class="keyword">from</span> <span class="string">&quot;common/mixins&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;Home&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="comment">//...</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//使用  </span></span></span><br><span class="line">    mixins: [imgListenerMixin],</span><br><span class="line">    computed: &#123;</span><br><span class="line">      showGoods() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">this</span>.goods[<span class="built_in">this</span>.currentType].list</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">//...</span></span></span><br><span class="line">    destroyed() &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">//离开Home时取消事件监听</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$bus.$off(<span class="string">&#x27;imageLoad&#x27;</span>,<span class="built_in">this</span>.imageListener);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编辑<code>src/views/detail/Detail.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// ...</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123;imgListenerMixin&#125; <span class="keyword">from</span> <span class="string">&quot;common/mixins&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// ...</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;Detail&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="comment">//...</span></span></span><br><span class="line">    mixins: [imgListenerMixin],</span><br><span class="line"><span class="javascript">    <span class="comment">//...</span></span></span><br><span class="line">    destroyed() &#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$bus.$off(<span class="string">&quot;imageLoad&quot;</span>,<span class="built_in">this</span>.imageListener)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="再次解决详情页滑动的小bug"><a href="#再次解决详情页滑动的小bug" class="headerlink" title="再次解决详情页滑动的小bug"></a>再次解决详情页滑动的小bug</h4><p><code>Detail</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"> <span class="comment">//...</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//...</span></span></span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">// 判断图片加载完成，刷新可滚动区域</span></span></span><br><span class="line">      imageLoad() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.newRefresh()</span></span><br><span class="line"><span class="javascript">        <span class="comment">//this.$refs.scroll.refresh()</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="comment">//...  </span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="标题内容联动"><a href="#标题内容联动" class="headerlink" title="标题内容联动"></a>标题内容联动</h4><p>点击标题,滚动到对应的主题<br>在detail中监听标题的点击,获取index<br>滚动到对应的主题:</p><ul><li><p>获取所有主题的offsetTop</p></li><li><p>问题:在哪里才能获取到正确的offsetTop</p><ol><li>created肯定不行， 压根不能获取元素</li><li>mounted也不行，数据还没有获取到</li><li>获取到数据的回调中也不行，DOM还没有渲染完</li><li><code>$nextTick</code>也不行,因为图片的高度没有被计算在类</li><li>在图片加载完成后,获取的高度才是正确</li></ol></li></ul><p>编辑<code>src/views/detail/childComps/DetailNav.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> NavBar <span class="keyword">from</span> <span class="string">&quot;components/common/navbar/NavBar&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">   <span class="comment">//...</span></span></span><br><span class="line">    methods:&#123;</span><br><span class="line">      itemClick(index)&#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.currentIndex = index</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$emit(<span class="string">&quot;titleClick&quot;</span>,index)</span></span><br><span class="line">      &#125;,</span><br><span class="line">      back()&#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$router.go(<span class="number">-1</span>);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编辑<code>src/views/detail/Detail.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;detail&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">detail-nav-bar</span> <span class="attr">class</span>=<span class="string">&quot;detail-nav&quot;</span> @<span class="attr">titleClick</span>=<span class="string">&quot;titleClick&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;nav&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Scroll</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;scroll&quot;</span> <span class="attr">:probeType</span>=<span class="string">&quot;3&quot;</span> @<span class="attr">scroll</span>=<span class="string">&quot;contentScroll&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">DetailSwiper</span> <span class="attr">:banners</span>=<span class="string">&quot;banners&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">DetailBaseInfo</span> <span class="attr">:goods</span>=<span class="string">&quot;goods&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">DetailShopInfo</span> <span class="attr">:shop</span>=<span class="string">&quot;shop&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">DetailGoodsInfo</span> <span class="attr">:detailInfo</span>=<span class="string">&quot;detailInfo&quot;</span> @<span class="attr">imageLoad</span>=<span class="string">&quot;imageLoad&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">DetailParamInfo</span> <span class="attr">:paramInfo</span>=<span class="string">&quot;paramInfo&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;paramInfo&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">DetailCommentInfo</span> <span class="attr">:commentInfo</span>=<span class="string">&quot;commentInfo&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;commentInfo&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">GoodList</span> <span class="attr">:goods</span>=<span class="string">&quot;recommendList&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;recommendList&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Scroll</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">//...</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">   <span class="comment">//...</span></span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//...</span></span></span><br><span class="line">        navBarTops: [],</span><br><span class="line"><span class="javascript">        getTops: <span class="literal">null</span>,</span></span><br><span class="line">        currentIndex: 0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mixins: [imgListenerMixin],</span><br><span class="line">    created() &#123;</span><br><span class="line"><span class="javascript">     <span class="comment">//...</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.getTops = debounce(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.navBarTops = []</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.navBarTops.push(<span class="number">0</span>)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.navBarTops.push(<span class="built_in">this</span>.$refs.paramInfo.$el.offsetTop)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.navBarTops.push(<span class="built_in">this</span>.$refs.commentInfo.$el.offsetTop)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.navBarTops.push(<span class="built_in">this</span>.$refs.recommendList.$el.offsetTop)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.navBarTops.push(<span class="built_in">Number</span>.MAX_VALUE)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.navBarTops)</span></span><br><span class="line">      &#125;, 100)</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">// 判断图片加载完成，刷新可滚动区域</span></span></span><br><span class="line">      imageLoad() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.newRefresh()</span></span><br><span class="line"><span class="javascript">        <span class="comment">//this.$refs.scroll.refresh()</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.getTops()</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="comment">//...</span></span></span><br><span class="line">      titleClick(index) &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$refs.scroll.scrollTo(<span class="number">0</span>, -<span class="built_in">this</span>.navBarTops[index], <span class="number">200</span>)</span></span><br><span class="line">      &#125;,</span><br><span class="line">      contentScroll(position) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> positionY = -position.y</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> length = <span class="built_in">this</span>.navBarTops.length</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length - <span class="number">1</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (<span class="built_in">this</span>.currentIndex !== i &amp;&amp; (positionY &gt;= <span class="built_in">this</span>.navBarTops[i] &amp;&amp; positionY &lt; <span class="built_in">this</span>.navBarTops[i + <span class="number">1</span>])) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.currentIndex = i</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.$refs.nav.currentIndex = <span class="built_in">this</span>.currentIndex</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">//...</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="底部栏"><a href="#底部栏" class="headerlink" title="底部栏"></a>底部栏</h4><p>在<code>src/views/detail/childComps</code>下创建<code>DetailBottomBar.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bottom-bar&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bar-item bar-left&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon service&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>客服<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon shop&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>店铺<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon select&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>收藏<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bar-item bar-right&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cart&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;addToCart&quot;</span>&gt;</span>加入购物车<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;buy&quot;</span>&gt;</span>购买<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;DetailBottomBar&quot;</span>,</span></span><br><span class="line">    methods: &#123;</span><br><span class="line">      addToCart() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$emit(<span class="string">&#x27;addToCart&#x27;</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.bottom-bar</span> &#123;</span></span><br><span class="line">    height: 58px;</span><br><span class="line">    position: fixed;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">    left: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    display: flex;</span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.bar-item</span> &#123;</span></span><br><span class="line">    flex: 1;</span><br><span class="line">    display: flex;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.bar-item</span>&gt;<span class="selector-tag">div</span> &#123;</span></span><br><span class="line">    flex: 1;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.bar-left</span> <span class="selector-class">.text</span> &#123;</span></span><br><span class="line">    font-size: 13px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.bar-left</span> <span class="selector-class">.icon</span> &#123;</span></span><br><span class="line">    display: block;</span><br><span class="line">    width: 22px;</span><br><span class="line">    height: 22px;</span><br><span class="line">    margin: 10px auto 3px;</span><br><span class="line">    background: url(&quot;~assets/img/detail/detail_bottom.png&quot;) 0 0/100%;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.bar-left</span> <span class="selector-class">.service</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-position</span><span class="selector-pseudo">:0</span> <span class="selector-tag">-54px</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.bar-left</span> <span class="selector-class">.shop</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-position</span><span class="selector-pseudo">:0</span> <span class="selector-tag">-98px</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.bar-right</span> &#123;</span></span><br><span class="line">    font-size: 15px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">    line-height: 58px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.bar-right</span> <span class="selector-class">.cart</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#ffe817</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.bar-right</span> <span class="selector-class">.buy</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#f69</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="BackTop的封装"><a href="#BackTop的封装" class="headerlink" title="BackTop的封装"></a>BackTop的封装</h3><p>由于我们需要在<code>Home.vue</code>和<code>Detail.vue</code>都使用BackTop、此时我们就需要使用mixins</p><p>编辑<code>src/common/mixins.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">import</span> BackTop <span class="keyword">from</span> <span class="string">&quot;components/contents/backtop/BackTop&quot;</span>;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> backTopMixin = &#123;</span><br><span class="line">  data()&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">      isShowBackTop: <span class="literal">false</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    BackTop</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    topClick() &#123;</span><br><span class="line">      <span class="built_in">this</span>.$refs.scroll.scrollTo(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1000</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在<code>Home.vue</code>和<code>Detail.vue</code>导入</p><p>并且在监听<code>Scroll滚动事件中添加</code>来判断是否显示BackTop</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.isShowBackTop = (-position.y) &gt; <span class="number">1000</span></span><br></pre></td></tr></table></figure><h3 id="购物车相关"><a href="#购物车相关" class="headerlink" title="购物车相关"></a>购物车相关</h3><h4 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a><code>Vuex</code></h4><p>确保安装了<code>Vuex</code> </p><p>在<code>src/store</code></p><div class="tabs" id="tab2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab2-1">index.js</button></li><li class="tab"><button type="button" data-href="#tab2-2">mutations-types.js</button></li><li class="tab"><button type="button" data-href="#tab2-3">mutations.js</button></li><li class="tab"><button type="button" data-href="#tab2-4">actions.js</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab2-1"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> mutations <span class="keyword">from</span> <span class="string">&quot;./mutations&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> actions <span class="keyword">from</span> <span class="string">&quot;./actions&quot;</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  cartList: []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab2-2"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ADD_COUNTER = <span class="string">&#x27;add_counter&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ADD_TO_CART = <span class="string">&#x27;add_to_cart&#x27;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab2-3"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  ADD_TO_CART,</span><br><span class="line">  ADD_COUNTER</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;./mutations-types&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  [ADD_COUNTER](state, payload) &#123;</span><br><span class="line">    payload.count+=<span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  [ADD_TO_CART](state, payload) &#123;</span><br><span class="line">    state.cartList.push(payload)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab2-4"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  ADD_TO_CART,</span><br><span class="line">  ADD_COUNTER</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;./mutations-types&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">//注意: 更新操作需要在mutations中进行</span></span><br><span class="line">  addCart(context, payload) &#123;</span><br><span class="line">    <span class="keyword">let</span> oldProduct = context.state.cartList.find(<span class="function"><span class="params">item</span> =&gt;</span> item.iid == payload.iid);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (oldProduct) &#123;</span><br><span class="line">      context.commit(ADD_COUNTER, oldProduct)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      payload.count = <span class="number">1</span></span><br><span class="line">      context.commit(ADD_TO_CART, payload)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>编辑<code>Detail.vue</code> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;DetailBottomBar @addToCart=<span class="string">&quot;addToCart&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">addToCart()&#123;</span><br><span class="line">    <span class="keyword">const</span> product = &#123;&#125;</span><br><span class="line">    product.image = <span class="built_in">this</span>.banners[<span class="number">0</span>];</span><br><span class="line">    product.title = <span class="built_in">this</span>.goods.title;</span><br><span class="line">    product.desc = <span class="built_in">this</span>.goods.desc;</span><br><span class="line">    product.price = <span class="built_in">this</span>.goods.realPrice;</span><br><span class="line">    product.iid = <span class="built_in">this</span>.iid;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.$store.dispatch(<span class="string">&quot;addCart&quot;</span>,product)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="导航栏"><a href="#导航栏" class="headerlink" title="导航栏"></a>导航栏</h4><p>创建<code>src/store/getters.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  cartLength(state)&#123;</span><br><span class="line">    <span class="keyword">return</span> state.cartList.length</span><br><span class="line">  &#125;,</span><br><span class="line">  cartList(state) &#123;</span><br><span class="line">    <span class="keyword">return</span> state.cartList</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编辑<code>src/store/index.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> mutations <span class="keyword">from</span> <span class="string">&quot;./mutations&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> actions <span class="keyword">from</span> <span class="string">&quot;./actions&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> getters <span class="keyword">from</span> <span class="string">&quot;./getters&quot;</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  cartList: []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions,</span><br><span class="line">  getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>编辑<code>src/views/Cart.vue </code>这里使用了<code>mapGetters</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;cart&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">NavBar</span> <span class="attr">class</span>=<span class="string">&quot;cart-nav-bar&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;center&quot;</span>&gt;</span>购物街(&#123;&#123; length &#125;&#125;)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">NavBar</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> NavBar <span class="keyword">from</span> <span class="string">&quot;components/common/navbar/NavBar&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123;mapGetters&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;Cart&quot;</span>,</span></span><br><span class="line">    components: &#123;</span><br><span class="line">      NavBar,</span><br><span class="line">    &#125;,</span><br><span class="line">    computed:&#123;</span><br><span class="line">      ...mapGetters(&#123;</span><br><span class="line"><span class="javascript">        length: <span class="string">&#x27;cartLength&#x27;</span></span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-id">#cart</span> &#123;</span></span><br><span class="line">    height: 100vh;</span><br><span class="line">    position: relative;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.cart-nav-bar</span> &#123;</span></span><br><span class="line">    background-color: var(--color-tint);</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="封装CheckButton"><a href="#封装CheckButton" class="headerlink" title="封装CheckButton"></a>封装CheckButton</h4><p>在<code>src/components/content/checkbutton</code>下创建<code>CheckButton.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;icon-selector&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;&#x27;active&#x27;: value&#125;&quot;</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;~assets/img/cart/tick.svg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;CheckButton&quot;</span>,</span></span><br><span class="line">    props: &#123;</span><br><span class="line">      value: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">Boolean</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="literal">true</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.icon-selector</span> &#123;</span></span><br><span class="line">    position: relative;</span><br><span class="line">    margin: 0;</span><br><span class="line">    width: 18px;</span><br><span class="line">    height: 18px;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">    cursor: pointer;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#ff8198</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border-color</span>: <span class="selector-id">#ff8198</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="封装商品信息"><a href="#封装商品信息" class="headerlink" title="封装商品信息"></a>封装商品信息</h4><p>在<code>src/views/cart/childComps</code>下创建</p><p><code>CartListItem.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;shop-item&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-selector&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">CheckButton</span> @<span class="attr">checkBtnClick</span>=<span class="string">&quot;checkedChange&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;itemInfo.checked&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">CheckButton</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-img&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;itemInfo.image&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;商品图片&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-info&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-title&quot;</span>&gt;</span>&#123;&#123;itemInfo.title&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-desc&quot;</span>&gt;</span>商品描述: &#123;&#123;itemInfo.desc&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info-bottom&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-price left&quot;</span>&gt;</span>¥&#123;&#123;itemInfo.price&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-count right&quot;</span>&gt;</span>x&#123;&#123;itemInfo.count&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> CheckButton <span class="keyword">from</span> <span class="string">&quot;components/contents/checkbutton/CheckButton&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;ShopCartItem&quot;</span>,</span></span><br><span class="line">    props: &#123;</span><br><span class="line"><span class="javascript">      itemInfo: <span class="built_in">Object</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      CheckButton</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">      checkedChange: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.itemInfo.checked = !<span class="built_in">this</span>.itemInfo.checked;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-id">#shop-item</span> &#123;</span></span><br><span class="line">    width: 100%;</span><br><span class="line">    display: flex;</span><br><span class="line">    font-size: 0;</span><br><span class="line">    padding: 5px;</span><br><span class="line"><span class="css">    <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.item-selector</span> &#123;</span></span><br><span class="line">    width: 14%;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    align-items: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.item-title</span>, <span class="selector-class">.item-desc</span> &#123;</span></span><br><span class="line">    overflow: hidden;</span><br><span class="line">    white-space: nowrap;</span><br><span class="line">    text-overflow: ellipsis;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.item-img</span> &#123;</span></span><br><span class="line">    padding: 5px;</span><br><span class="line"><span class="css">    <span class="comment">/*border: 1px solid #ccc;*/</span></span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.item-img</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">    width: 80px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    display: block;</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.item-info</span> &#123;</span></span><br><span class="line">    font-size: 17px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line">    padding: 5px 10px;</span><br><span class="line">    position: relative;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.item-info</span> <span class="selector-class">.item-desc</span> &#123;</span></span><br><span class="line">    font-size: 14px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#666</span>;</span></span><br><span class="line">    margin-top: 15px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.info-bottom</span> &#123;</span></span><br><span class="line">    margin-top: 10px;</span><br><span class="line">    position: absolute;</span><br><span class="line">    bottom: 10px;</span><br><span class="line">    left: 10px;</span><br><span class="line">    right: 10px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.info-bottom</span> <span class="selector-class">.item-price</span> &#123;</span></span><br><span class="line">    color: orangered;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>CartList.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Scroll</span> <span class="attr">ref</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">cart-list-item</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in cartList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span> <span class="attr">:item-info</span>=<span class="string">&quot;item&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Scroll</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Scroll <span class="keyword">from</span> <span class="string">&quot;components/common/scroll/Scroll&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> CartListItem <span class="keyword">from</span> <span class="string">&quot;./CartListItem&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;CartList&quot;</span>,</span></span><br><span class="line">    components: &#123;</span><br><span class="line">      Scroll,</span><br><span class="line">      CartListItem</span><br><span class="line">    &#125;,</span><br><span class="line">    props: &#123;</span><br><span class="line">      cartList:&#123;</span><br><span class="line"><span class="javascript">        type:<span class="built_in">Array</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>()&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> []</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    activated() &#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$refs.content.refresh()</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编辑<code>Cart.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;cart&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">NavBar</span> <span class="attr">class</span>=<span class="string">&quot;cart-nav-bar&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;center&quot;</span>&gt;</span>购物街(&#123;&#123; cartLength &#125;&#125;)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">NavBar</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">CartList</span> <span class="attr">class</span>=<span class="string">&quot;cart-list&quot;</span> <span class="attr">:cart-list</span>=<span class="string">&quot;cartList&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> NavBar <span class="keyword">from</span> <span class="string">&quot;components/common/navbar/NavBar&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> CartList <span class="keyword">from</span> <span class="string">&quot;./childComps/CartList&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123;mapGetters&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;Cart&quot;</span>,</span></span><br><span class="line">    components: &#123;</span><br><span class="line">      NavBar,</span><br><span class="line">      CartList</span><br><span class="line">    &#125;,</span><br><span class="line">    computed:&#123;</span><br><span class="line"><span class="javascript">      ...mapGetters([<span class="string">&#x27;cartLength&#x27;</span>,<span class="string">&#x27;cartList&#x27;</span>])</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-id">#cart</span> &#123;</span></span><br><span class="line">    height: 100vh;</span><br><span class="line">    position: relative;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.cart-nav-bar</span> &#123;</span></span><br><span class="line">    background-color: var(--color-tint);</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.cart-list</span> &#123;</span></span><br><span class="line">    overflow: hidden;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 44px;</span><br><span class="line">    bottom: 49px;</span><br><span class="line">    width: 100%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="底部信息栏"><a href="#底部信息栏" class="headerlink" title="底部信息栏"></a>底部信息栏</h4><p>在<code>src/views/cart/childComps</code>下创建<code>CartBottomBar</code></p><p>几个注意点:</p><ul><li>计算总价格时我们通过<code>filter</code>筛选出选中状态的价格、再使用<code>reduce</code>对价格进行累加</li><li><code>every()</code>是对数组中每一项运行给定函数，如果该函数所有一项返回true,则返回true。一旦有一项不满足则返回false</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bottom-menu&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;checkButton&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">CheckButton</span> <span class="attr">class</span>=<span class="string">&quot;select-all&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;isSelectAll&quot;</span> @<span class="attr">click.native</span>=<span class="string">&quot;checkClick&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">CheckButton</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;checkAll&quot;</span>&gt;</span>全选<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;total-price&quot;</span>&gt;</span>合计: ¥&#123;&#123;totalPrice&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;buy-product&quot;</span>&gt;</span>去计算(&#123;&#123;cartLength&#125;&#125;)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> CheckButton <span class="keyword">from</span> <span class="string">&quot;components/contents/checkbutton/CheckButton&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;BottomBar&quot;</span>,</span></span><br><span class="line">    components: &#123;</span><br><span class="line">      CheckButton</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      totalPrice() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> cartList = <span class="built_in">this</span>.$store.getters.cartList;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> cartList.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> item.checked</span></span><br><span class="line"><span class="javascript">        &#125;).reduce(<span class="function">(<span class="params">preValue, item</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> preValue + item.count * item.price</span></span><br><span class="line">        &#125;, 0).toFixed(2)</span><br><span class="line">      &#125;,</span><br><span class="line">      cartLength() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">this</span>.$store.state.cartList.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> item.checked).length</span></span><br><span class="line">      &#125;,</span><br><span class="line">      isSelectAll() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(<span class="built_in">this</span>.$store.state.cartList.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">this</span>.$store.state.cartList.every(<span class="function">(<span class="params">item</span>)=&gt;</span> item.checked == <span class="literal">true</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      checkClick()&#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="built_in">this</span>.isSelectAll)&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.$store.state.cartList.forEach(<span class="function">(<span class="params">item</span>)=&gt;</span> item.checked = <span class="literal">false</span>)</span></span><br><span class="line"><span class="javascript">        &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.$store.state.cartList.forEach(<span class="function">(<span class="params">item</span>)=&gt;</span> item.checked = <span class="literal">true</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.bottom-menu</span> &#123;</span></span><br><span class="line">    position: fixed;</span><br><span class="line">    left: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    bottom: 49px;</span><br><span class="line">    display: flex;</span><br><span class="line">    height: 44px;</span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.checkButton</span> &#123;</span></span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    margin-left: 10px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.checkButton</span> <span class="selector-class">.checkAll</span> &#123;</span></span><br><span class="line">    line-height: 44px;</span><br><span class="line">    margin-left: 5px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.bottom-menu</span> <span class="selector-class">.total-price</span> &#123;</span></span><br><span class="line">    flex: 1;</span><br><span class="line">    margin-left: 15px;</span><br><span class="line">    font-size: 16px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#666</span>;</span></span><br><span class="line">    line-height: 44px;</span><br><span class="line">    text-align: left;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.bottom-menu</span> <span class="selector-class">.buy-product</span> &#123;</span></span><br><span class="line">    line-height: 44px;</span><br><span class="line">    width: 90px;</span><br><span class="line">    float: right;</span><br><span class="line">    background-color: red;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="封装Toast"><a href="#封装Toast" class="headerlink" title="封装Toast"></a>封装Toast</h3><p>将actions返回Promise对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">addCart(context, payload) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>((<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> oldProduct = context.state.cartList.find(<span class="function"><span class="params">item</span> =&gt;</span> item.iid == payload.iid);</span><br><span class="line">      <span class="keyword">if</span> (oldProduct) &#123;</span><br><span class="line">        context.commit(ADD_COUNTER, oldProduct)</span><br><span class="line">        resolve(<span class="string">&quot;当前商品数量+1&quot;</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        payload.count = <span class="number">1</span></span><br><span class="line">        context.commit(ADD_TO_CART, payload)</span><br><span class="line">        resolve(<span class="string">&quot;添加了此商品&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于我们需要在<code>Detail.vue</code>和<code>Cart.vue</code>中都使用</p><p>在<code>src/components/common/toast</code>下创建</p><p><code>Toast.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;toast&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; message &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;Toast&quot;</span>,</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        message: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript">        isShow: <span class="literal">false</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      show(message, duration = 2000) &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.isShow = <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.message = message</span></span><br><span class="line"><span class="javascript">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.isShow = <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.message = <span class="string">&quot;&quot;</span></span></span><br><span class="line">        &#125;, duration)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.toast</span>&#123;</span></span><br><span class="line">    transform: translate(-50%, -50%);</span><br><span class="line">    position: fixed;</span><br><span class="line">    left: 50%;</span><br><span class="line">    top: 50%;</span><br><span class="line">    z-index: 999;</span><br><span class="line">    padding: 8px 15px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-tag">rgba</span>(0,0,0,<span class="selector-class">.7</span>);</span></span><br><span class="line">    border-radius: 3px;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>index.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Toast <span class="keyword">from</span> <span class="string">&quot;./Toast&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line">obj.install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//创建组件构造器</span></span><br><span class="line">  <span class="keyword">const</span> toastContrustor = Vue.extend(Toast)</span><br><span class="line">  <span class="comment">//new的方式，根据组件构造器，可以创建出来一个组件对象</span></span><br><span class="line">  <span class="keyword">const</span> toast = <span class="keyword">new</span> toastContrustor()</span><br><span class="line">  <span class="comment">//将组件对象，手动挂载到某个元素上</span></span><br><span class="line">  toast.$mount(<span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>))</span><br><span class="line">  <span class="comment">//toast.$el对应的就是创建的div</span></span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(toast.$el)</span><br><span class="line"></span><br><span class="line">  Vue.prototype.$toast = toast</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> obj</span><br></pre></td></tr></table></figure><p>在<code>src/main.js</code>上使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> toast <span class="keyword">from</span> <span class="string">&#x27;components/common/toast&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局实例化$bus事件总线</span></span><br><span class="line">Vue.prototype.$bus = <span class="keyword">new</span> Vue()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册全局Toast</span></span><br><span class="line">Vue.use(toast)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>最后在<code>Detail.vue</code>使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">addToCart()&#123;</span><br><span class="line">    <span class="keyword">const</span> product = &#123;&#125;</span><br><span class="line">    product.image = <span class="built_in">this</span>.banners[<span class="number">0</span>];</span><br><span class="line">    product.title = <span class="built_in">this</span>.goods.title;</span><br><span class="line">    product.desc = <span class="built_in">this</span>.goods.desc;</span><br><span class="line">    product.price = <span class="built_in">this</span>.goods.realPrice;</span><br><span class="line">    product.iid = <span class="built_in">this</span>.iid;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.$store.dispatch(<span class="string">&quot;addCart&quot;</span>,product).then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.$toast.show(res)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者修改<code>CartBottomBar.vue</code>添加一个点击事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cartClick()&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.isSelectAll)&#123;</span><br><span class="line">        <span class="built_in">this</span>.$toast.show(<span class="string">&quot;请选择商品&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h3><h4 id="数据请求-1"><a href="#数据请求-1" class="headerlink" title="数据请求"></a>数据请求</h4><p>在<code>src/network</code>下创建<code>category.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;request&#125; <span class="keyword">from</span> <span class="string">&#x27;./request&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getCategory</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> request(&#123;</span><br><span class="line">        url: <span class="string">&#x27;/category&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getSubcategory</span>(<span class="params">maitKey</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> request(&#123;</span><br><span class="line">      url: <span class="string">&#x27;/subcategory&#x27;</span>,</span><br><span class="line">      params: &#123;</span><br><span class="line">        maitKey</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getCategoryDetail</span>(<span class="params">miniWallkey, type</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> request(&#123;</span><br><span class="line">      url: <span class="string">&#x27;/subcategory/detail&#x27;</span>,</span><br><span class="line">      params: &#123;</span><br><span class="line">        miniWallkey,</span><br><span class="line">        type</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><h4 id="TabMenu"><a href="#TabMenu" class="headerlink" title="TabMenu"></a>TabMenu</h4><p>在<code>src/views/category/childComps</code>下创建<code>TabMenu.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scroll</span> <span class="attr">id</span>=<span class="string">&quot;tab-menu&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menu-list&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">&quot;menu-list-item&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:class</span>=<span class="string">&quot;&#123; active: index === currentIndex &#125;&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in categories&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">click</span>=<span class="string">&quot;itemClick(index)&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        &#123;&#123; item.title &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">scroll</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Scroll <span class="keyword">from</span> <span class="string">&quot;components/common/scroll/Scroll&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&quot;TabMenu&quot;</span>,</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    Scroll</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line"><span class="javascript">    categories: <span class="built_in">Array</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      currentIndex: 0</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    itemClick(index) &#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.currentIndex = index;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$emit(<span class="string">&quot;selectItem&quot;</span>, index);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-id">#tab-menu</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">background-color</span>: <span class="selector-id">#f6f6f6</span>;</span></span><br><span class="line">  height: 100%;</span><br><span class="line">  width: 100px;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.menu-list-item</span> &#123;</span></span><br><span class="line">  height: 45px;</span><br><span class="line">  line-height: 45px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  font-size: 14px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.menu-list-item</span><span class="selector-class">.active</span> &#123;</span></span><br><span class="line">  font-weight: 700;</span><br><span class="line">  color: var(--color-high-text);</span><br><span class="line"><span class="css">  <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">  border-left: 3px solid var(--color-high-text);</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="GridView"><a href="#GridView" class="headerlink" title="GridView"></a>GridView</h4><p>在<code>src/compoments/common/gridView</code>下创建<code>GridView.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-view&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;gridView&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&quot;GridView&quot;</span>,</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    cols: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="number">2</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    hMargin: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="number">8</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    vMargin: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="number">8</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    itemSpace: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="number">8</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    lineSpace: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="number">8</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="javascript">  mounted: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">setTimeout</span>(<span class="built_in">this</span>._autoLayout, <span class="number">20</span>);</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line"><span class="javascript">  updated: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>._autoLayout();</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    _autoLayout: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 1.获取gridEl和children</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> gridEl = <span class="built_in">this</span>.$refs.gridView;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> children = gridEl.children;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 2.设置gridEl的内边距</span></span></span><br><span class="line"><span class="javascript">      gridEl.style.padding = <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.vMargin&#125;</span>px <span class="subst">$&#123;<span class="built_in">this</span>.hMargin&#125;</span>px`</span>;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 3.计算item的宽度</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> itemWidth =</span></span><br><span class="line">        (gridEl.clientWidth -</span><br><span class="line"><span class="javascript">          <span class="number">2</span> * <span class="built_in">this</span>.hMargin -</span></span><br><span class="line"><span class="javascript">          (<span class="built_in">this</span>.cols - <span class="number">1</span>) * <span class="built_in">this</span>.itemSpace) /</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.cols;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; children.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> item = children[i];</span></span><br><span class="line"><span class="javascript">        item.style.width = itemWidth + <span class="string">&quot;px&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="built_in">this</span>.cols !== <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">          item.style.marginRight = <span class="built_in">this</span>.itemSpace + <span class="string">&quot;px&quot;</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (i &gt;= <span class="built_in">this</span>.cols) &#123;</span></span><br><span class="line"><span class="javascript">          item.style.marginTop = <span class="built_in">this</span>.lineSpace + <span class="string">&quot;px&quot;</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.grid-view</span> &#123;</span></span><br><span class="line">  display: flex;</span><br><span class="line">  flex-wrap: wrap;</span><br><span class="line">  justify-content: space-around;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>src/views/category/childComps</code>下创建<code>TabContentCategory.vue</code>用来封装<code>GridView</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">grid-view</span> <span class="attr">:cols</span>=<span class="string">&quot;3&quot;</span> <span class="attr">:lineSpace</span>=<span class="string">&quot;15&quot;</span> <span class="attr">:v-margin</span>=<span class="string">&quot;20&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;subcategories.list&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in subcategories.list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;item.link&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;item-img&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;item.image&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-text&quot;</span>&gt;</span>&#123;&#123;item.title&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">grid-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> GridView <span class="keyword">from</span> <span class="string">&#x27;components/common/gridView/GridView&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;TabContentCategory&quot;</span>,</span></span><br><span class="line">    components: &#123;</span><br><span class="line">      GridView</span><br><span class="line">    &#125;,</span><br><span class="line">    props: &#123;</span><br><span class="line">      subcategories: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>() &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> []</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.panel</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">    width: 100%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.item</span> &#123;</span></span><br><span class="line">    text-align: center;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.item-img</span> &#123;</span></span><br><span class="line">    width: 80%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.item-text</span> &#123;</span></span><br><span class="line">    margin-top: 15px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="其他整合"><a href="#其他整合" class="headerlink" title="其他整合"></a>其他整合</h4><p><code>Category.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;category&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav-bar</span> <span class="attr">class</span>=<span class="string">&quot;nav-bar&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;center&quot;</span>&gt;</span>商品分类<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">nav-bar</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tab-menu</span> <span class="attr">:categories</span>=<span class="string">&quot;categories&quot;</span></span></span><br><span class="line"><span class="tag">                @<span class="attr">selectItem</span>=<span class="string">&quot;selectItem&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">scroll</span> <span class="attr">id</span>=<span class="string">&quot;tab-content&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">:data</span>=<span class="string">&quot;[categoryData]&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">ref</span>=<span class="string">&quot;scroll&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tab-content-category</span> <span class="attr">:subcategories</span>=<span class="string">&quot;showSubcategory&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tab-control</span> <span class="attr">:titles</span>=<span class="string">&quot;[&#x27;综合&#x27;, &#x27;新品&#x27;, &#x27;销量&#x27;]&quot;</span></span></span><br><span class="line"><span class="tag">                       @<span class="attr">itemClick</span>=<span class="string">&quot;tabClick&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">goods-list</span> <span class="attr">:goods</span>=<span class="string">&quot;showCategoryDetail&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">scroll</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> NavBar <span class="keyword">from</span> <span class="string">&#x27;components/common/navbar/NavBar&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> TabMenu <span class="keyword">from</span> <span class="string">&#x27;./childComps/TabMenu&#x27;</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> TabContentCategory <span class="keyword">from</span> <span class="string">&#x27;./childComps/TabContentCategory&#x27;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> TabControl <span class="keyword">from</span> <span class="string">&#x27;components/contents/tabcontrol/TabControl&#x27;</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Scroll <span class="keyword">from</span> <span class="string">&#x27;components/common/scroll/Scroll&#x27;</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> GoodsList <span class="keyword">from</span> <span class="string">&#x27;components/contents/good/GoodList&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123;getCategory, getSubcategory, getCategoryDetail&#125; <span class="keyword">from</span> <span class="string">&quot;network/category&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123;tabControlMixin&#125; <span class="keyword">from</span> <span class="string">&quot;@/common/mixins&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">name: <span class="string">&quot;Category&quot;</span>,</span></span><br><span class="line">    components: &#123;</span><br><span class="line">  NavBar,</span><br><span class="line">      TabMenu,</span><br><span class="line">      TabControl,</span><br><span class="line">      Scroll,</span><br><span class="line">      TabContentCategory,</span><br><span class="line">      GoodsList</span><br><span class="line">    &#125;,</span><br><span class="line">    mixins: [tabControlMixin],</span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">  <span class="keyword">return</span> &#123;</span></span><br><span class="line">    categories: [],</span><br><span class="line">        categoryData: &#123;</span><br><span class="line">        &#125;,</span><br><span class="line">        currentIndex: -1</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line"><span class="javascript">  <span class="comment">// 1.请求分类数据</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>._getCategory()</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">// 2.监听图片加载完成</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.$bus.$on(<span class="string">&#x27;imgLoad&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.$refs.scroll.refresh()</span></span><br><span class="line">    &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">  showSubcategory() &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="built_in">this</span>.currentIndex === <span class="number">-1</span>) <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">this</span>.categoryData[<span class="built_in">this</span>.currentIndex].subcategories</span></span><br><span class="line">      &#125;,</span><br><span class="line">      showCategoryDetail() &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="built_in">this</span>.currentIndex === <span class="number">-1</span>) <span class="keyword">return</span> []</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="built_in">this</span>.categoryData[<span class="built_in">this</span>.currentIndex].categoryDetail[<span class="built_in">this</span>.currentType]</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">  _getCategory() &#123;</span><br><span class="line"><span class="javascript">    getCategory().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 1.获取分类数据</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.categories = res.data.category.list</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2.初始化每个类别的子数据</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.categories.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.categoryData[i] = &#123;</span></span><br><span class="line">              subcategories: &#123;&#125;,</span><br><span class="line">              categoryDetail: &#123;</span><br><span class="line"><span class="javascript">                <span class="string">&#x27;pop&#x27;</span>: [],</span></span><br><span class="line"><span class="javascript">                <span class="string">&#x27;new&#x27;</span>: [],</span></span><br><span class="line"><span class="javascript">                <span class="string">&#x27;sell&#x27;</span>: []</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line"><span class="javascript">          <span class="comment">// 3.请求第一个分类的数据</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>._getSubcategories(<span class="number">0</span>)</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      _getSubcategories(index) &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.currentIndex = index;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> mailKey = <span class="built_in">this</span>.categories[index].maitKey;</span></span><br><span class="line"><span class="javascript">        getSubcategory(mailKey).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.categoryData[index].subcategories = res.data</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.categoryData = &#123;...this.categoryData&#125;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>._getCategoryDetail(<span class="string">&#x27;pop&#x27;</span>)</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>._getCategoryDetail(<span class="string">&#x27;sell&#x27;</span>)</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>._getCategoryDetail(<span class="string">&#x27;new&#x27;</span>)</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      _getCategoryDetail(type) &#123;</span><br><span class="line"><span class="javascript"><span class="comment">// 1.获取请求的miniWallkey</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> miniWallkey = <span class="built_in">this</span>.categories[<span class="built_in">this</span>.currentIndex].miniWallkey;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 2.发送请求,传入miniWallkey和type</span></span></span><br><span class="line"><span class="javascript">    getCategoryDetail(miniWallkey, type).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 3.将获取的数据保存下来</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.categoryData[<span class="built_in">this</span>.currentIndex].categoryDetail[type] = res</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.categoryData = &#123;...this.categoryData&#125;</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      /**</span><br><span class="line">       * 事件响应相关的方法</span><br><span class="line">       */</span><br><span class="line">      selectItem(index) &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>._getSubcategories(index)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-id">#category</span> &#123;</span></span><br><span class="line">    height: 100vh;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.nav-bar</span> &#123;</span></span><br><span class="line">    background-color: var(--color-tint);</span><br><span class="line">    font-weight: 700;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">    z-index: 99;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.content</span> &#123;</span></span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    top: 44px;</span><br><span class="line">    bottom: 49px;</span><br><span class="line">    display: flex;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-id">#tab-content</span> &#123;</span></span><br><span class="line">    height: 100%;</span><br><span class="line">    flex: 1;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="移动端300ms延迟"><a href="#移动端300ms延迟" class="headerlink" title="移动端300ms延迟"></a>移动端300ms延迟</h3><p>安装<code>fastclick</code>插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install fastclick --save</span><br></pre></td></tr></table></figure><p>使用: <code>index.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">import</span> fastclick <span class="keyword">from</span> <span class="string">&#x27;fastclick&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="comment">//移动端 300ms 延迟</span></span><br><span class="line">fastclick.attach(<span class="built_in">document</span>.body)</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><h3 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h3><p><a href="https://github.com/hilongjw/vue-lazyload">https://github.com/hilongjw/vue-lazyload</a></p><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save vue-lazyload</span><br></pre></td></tr></table></figure><p>使用:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> VueLazyload <span class="keyword">from</span> <span class="string">&#x27;vue-lazyload&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueLazyload,&#123;</span><br><span class="line">  loading: <span class="built_in">require</span>(<span class="string">&#x27;./assets/img/common/placeholder.png&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在需要懒加载的图片添加<code>v-lazy</code></p><h3 id="px转vw"><a href="#px转vw" class="headerlink" title="px转vw"></a>px转vw</h3><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install postcss-px-to-viewport -dev--save</span><br></pre></td></tr></table></figure><p>根目录新建<code>postcss.config.js</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: &#123;</span><br><span class="line">      <span class="string">&#x27;postcss-px-to-viewport&#x27;</span>: &#123;</span><br><span class="line">        unitToConvert: <span class="string">&#x27;px&#x27;</span>, <span class="comment">//需要转换的单位，默认为&quot;px&quot;</span></span><br><span class="line">        viewportWidth: <span class="number">375</span>, <span class="comment">// 视窗的宽度，对应的是我们设计稿的宽度</span></span><br><span class="line">        viewportHeight: <span class="number">667</span>,<span class="comment">//视窗的高度，根据375设备的宽度来指定，一般指定667，也可以不配置</span></span><br><span class="line">        unitPrecision: <span class="number">5</span>, <span class="comment">// 指定`px`转换为视窗单位值的小数位数（很多时候无法整除）</span></span><br><span class="line">        viewportUnit: <span class="string">&#x27;vw&#x27;</span>, <span class="comment">// 指定需要转换成的视窗单位，建议使用vw</span></span><br><span class="line">        selectorBlackList: [<span class="string">&#x27;ignore&#x27;</span>, <span class="string">&#x27;tarbar&#x27;</span>,<span class="string">&#x27;tab-bar-item&#x27;</span>], <span class="comment">//指定不转换为视窗单位的类，可以自定义，可以无限添加,建议定义一至两个通用的类名</span></span><br><span class="line">        minPixelValue: <span class="number">1</span>, <span class="comment">// 小于或等于`1px`不转换为视窗单位，你也可以设置为你想要的值</span></span><br><span class="line">        mediaQuery: <span class="literal">false</span>, <span class="comment">// 允许在媒体查询中转换`px`</span></span><br><span class="line">        exclude: [<span class="regexp">/^TabBar/</span>], <span class="comment">//忽略某些文件夹下的文件或特定文件，例如 &#x27;node_modules&#x27; 下的文件</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>虽然跟着视频敲了一边、但是还是有很多不是特别理解的、样式方面还是不是特别熟练</p>]]></content>
      
      
      <categories>
          
          <category> Web教程 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
            <tag> Vue-Router </tag>
            
            <tag> Vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android学习</title>
      <link href="/posts/5d018fb1/"/>
      <url>/posts/5d018fb1/</url>
      
        <content type="html"><![CDATA[<p>封面P站：<a href="https://www.pixiv.net/artworks/83342983">https://www.pixiv.net/artworks/83342983</a></p><p>注意: 不是零基础</p><h2 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h2><p>一般都在<code>layout</code>文件夹内。</p><p>一个布局文件，一般对应一个<code>Activity</code>,在代码中通过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setContentView(R.layout.first_layout);</span><br></pre></td></tr></table></figure><h3 id="布局的分类"><a href="#布局的分类" class="headerlink" title="布局的分类"></a>布局的分类</h3><h4 id="LinearLayout-线性布局"><a href="#LinearLayout-线性布局" class="headerlink" title="LinearLayout 线性布局"></a>LinearLayout 线性布局</h4><blockquote><p>一种使用单个水平行(horizontal)或垂直行(vertical)来组织子项的布局。它会在窗口<strong>长度超出屏幕长度时创建一个滚动条</strong>。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 水平布局 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;按钮一&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;按钮二&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;按钮三&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 垂直布局 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;按钮三&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;按钮四&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;按钮五&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Relative-Layout-相对布局"><a href="#Relative-Layout-相对布局" class="headerlink" title="Relative Layout 相对布局"></a>Relative Layout 相对布局</h4><blockquote><p>让您能够指定子对象彼此之间的相对位置（子对象 A 在子对象 B 左侧）或子对象与父对象的相对位置（与父对象顶部对齐）。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">android:layout_toLeftOf&#x3D;&quot;&quot;          ——该组件位于引用组件的左方</span><br><span class="line">android:layout_toRightOf&#x3D;&quot;&quot;         ——该组件位于引用组件的右方</span><br><span class="line">android:layout_above&#x3D;&quot;&quot;             ——该组件位于引用组件的上方</span><br><span class="line">android:layout_below&#x3D;&quot;&quot;             ——该组件位于引用组件的下方</span><br><span class="line">android:layout_alignParentLeft&#x3D;&quot;&quot;   ——该组件是否对其父组件的左端</span><br><span class="line">android:layout_alignParentRight&#x3D;&quot;&quot;  ——该组件是否对其父组件的右端</span><br><span class="line">android:layout_alignParentTop&#x3D;&quot;&quot;    ——该组件是否对其父组件的顶部</span><br><span class="line">android:layout_alignParentBottom&#x3D;&quot;&quot; ——该组件是否对其父组件的底部</span><br><span class="line">android:layout_centerInParent&#x3D;&quot;&quot;    ——该组件是否相对于父组件居中</span><br><span class="line">android:layout_centerHorizontal&#x3D;&quot;&quot;  ——该组件是否横向居中</span><br><span class="line">android:layout_centerVertical&#x3D;&quot;&quot;    ——该组件是否垂直居中</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">RelativeLayout</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/button1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_alignParentBottom</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/button2&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;2&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_above</span>=<span class="string">&quot;@+id/button1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_toRightOf</span>=<span class="string">&quot;@+id/button1&quot;</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/button3&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;3&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_above</span>=<span class="string">&quot;@+id/button1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_toRightOf</span>=<span class="string">&quot;@+id/button2&quot;</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="FrameLayout-帧布局"><a href="#FrameLayout-帧布局" class="headerlink" title="FrameLayout 帧布局"></a>FrameLayout 帧布局</h4><blockquote><p>帧布局(FrameLayout)直接继承了ViewGroup组件；</p><p>帧布局容器为每一个加入其中的组件都创建了一个空白的区域，这个区域我们称之为一帧，所有每个组件都占据一帧，这些都会根据gravity属性执行自动对齐。</p></blockquote><p>常用XML属性及相关的方法: </p><table><thead><tr><th>XML属性</th><th>相关方法</th><th>说明</th></tr></thead><tbody><tr><td>android:foreground</td><td>setForeground(Drawable)</td><td>设置该帧布局容器的前景图像</td></tr><tr><td>android:foregroundGravity</td><td>setForegroundGravity(int)</td><td>定义绘制前景图像的gracity属性</td></tr></tbody></table><h2 id="基本控件"><a href="#基本控件" class="headerlink" title="基本控件"></a>基本控件</h2><p>字体sp、其他dp</p><p>扩展: 设置大小的单位（字体，也包括控件大小）</p><blockquote><p><strong>dp:</strong> 设备独立像素，不同设备有不同的显示效果,这个和设备硬件有关，不依赖像素。 </p><p><strong>px:</strong> 像素，在 不同设备显示的效果相同。 </p><p><strong>pt:</strong> 标准的长度单位，简单易用，单位换算1pt＝1/72英寸。</p><p><strong>sp:</strong> 用于字体显示。</p></blockquote><h3 id="TextView"><a href="#TextView" class="headerlink" title="TextView"></a>TextView</h3><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><table><thead><tr><th><strong>id</strong></th><th>设置一个组件id，通过findViewById()的方法获取到该对象，然后进行相关设置</th></tr></thead><tbody><tr><td><strong>layout_width</strong></td><td><strong>组件宽度</strong>                                                                                                                            wrap_content: 控件的大小根据里面的内容大小而定，内容越小，则空间越小，反之亦然。                                                                                                                                 match_parent: 控件大小填满整个父容器</td></tr><tr><td><strong>layout_height</strong></td><td><strong>组件高度</strong></td></tr><tr><td><strong>text</strong></td><td>**设置文本内容 **                                                                                                                              将字符串放置在value文件夹的strings.xml文件下                                                                           在activity_main.xml中使用@string/<em>来调用这个字符串资源，”</em>“号代表string定义的name</td></tr><tr><td><strong>background</strong></td><td><strong>背景颜色（或背景图片）</strong></td></tr><tr><td><strong>textColor</strong></td><td><strong>设置字体颜色</strong>                                                                                                                               将颜色配置在colors.xml文件中                                                                                  activity_main.xml中，用@color/*进行调用</td></tr><tr><td><strong>textStyle</strong></td><td><strong>设置字体样式</strong></td></tr><tr><td><strong>textSize</strong></td><td><strong>字体大小</strong></td></tr><tr><td><strong>gravity</strong></td><td><strong>内容的对齐方向</strong>                                                                                                                       center: 居中对齐，位于容器横向和纵向的中央                                                                                     left: 向左对齐，位于容器左边                                                                                                        right: 向右对齐，位于容器右边                                                                                                         bottom:向底对齐，位于容器底部                                                                                             top: 向顶对齐，位于容器顶部                                                                         center_vertical: 位置置于容器的纵向中央部分                                                               center_horizontal: 位置置于容器的横向中央部分                                                               fill_vertical: 纵向延伸填满容器                                                                                                  fiil_horizontal: 横向延伸填满容器                                                                                                fiil:纵向和横向延伸填满容器</td></tr><tr><td><strong>autoLink</strong></td><td><strong>autoLink的属性可以将符合指定格式的文本转换为可单击的超链接形式</strong></td></tr><tr><td><strong>drawableTop</strong></td><td><strong>TextView上部出现一个图片</strong></td></tr></tbody></table><p>TextView实现跑马灯的效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">android:singleLine&#x3D;&quot;true&quot;</span><br><span class="line"></span><br><span class="line">android:ellipsize&#x3D;&quot;marquee&quot;</span><br><span class="line"></span><br><span class="line">android:marqueeRepeatLimit&#x3D;&quot;marquee_forever&quot;</span><br><span class="line"></span><br><span class="line">android:focusable&#x3D;&quot;true&quot;</span><br><span class="line"></span><br><span class="line">android:focusableInTouchMode&#x3D;&quot;true&quot;   &#x2F;&#x2F; 不添加这个属性不能成功跑动起来</span><br><span class="line"></span><br><span class="line">setSelected(true);</span><br></pre></td></tr></table></figure><p>TextView 实现删除线的效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">textview.getPaint().setFlags(Paint.STRIKE_THRU_TEXT_FLAG ); &#x2F;&#x2F;中间横线</span><br><span class="line"></span><br><span class="line">textview.getPaint().setFlags(Paint.UNDERLINE_TEXT_FLAG);&#x2F;&#x2F;下划线</span><br><span class="line"></span><br><span class="line">textview.getPaint().setAntiAlias(true);&#x2F;&#x2F; 抗锯齿</span><br></pre></td></tr></table></figure><p>TextView 一行，最多显示10个字符，剩余的用…代替: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mTitleTxt.setSingleLine();&#x2F;&#x2F; 单行显示mTitleTxt.setMaxEms(10);&#x2F;&#x2F; 最大十个字符mTitleTxt.setEllipsize(TextUtils.TruncateAt.END);&#x2F;&#x2F; 剩余的以...结尾</span><br></pre></td></tr></table></figure><p>TextView 展示字母的时候，明明是小写，但界面上看到的都是大写 解决方案</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">添加属性: </span><br><span class="line"></span><br><span class="line">android:textAllCaps&#x3D;&quot;false&quot;</span><br></pre></td></tr></table></figure><h3 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h3><p>Java-“this”和”类名.this”以及”类名.class”的区分和详解</p><table><thead><tr><th>组合</th><th>用法说明</th></tr></thead><tbody><tr><td>this</td><td>指代当前对象的引用</td></tr><tr><td>类名.class</td><td>指向每个类对应的唯一类对象（类型为Class）</td></tr><tr><td>类名.this</td><td>内部(可以是匿名内部类)类调用外部类的对象时使用，即在内部类中使用时: 外部类对象是外部类名.this，内部类对象则是this</td></tr></tbody></table><h4 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h4><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>android:text=””</td><td>设置bottom上显示的文字</td></tr><tr><td>android:textSize=””</td><td>设置bottom上的文字大小</td></tr><tr><td>android:textColor=””</td><td>设置bottom上的文字颜色</td></tr><tr><td>android:padding=””</td><td>设置bottom的内边距</td></tr><tr><td>android:weight=””</td><td>权重</td></tr><tr><td><corners android:radius="" /></td><td>设置边框样式为圆角</td></tr><tr><td><stroke android:width="" android:color="" /></td><td>设置边框线条粗细及颜色</td></tr></tbody></table><h4 id="实现点击后字体颜色改变"><a href="#实现点击后字体颜色改变" class="headerlink" title="实现点击后字体颜色改变"></a>实现点击后字体颜色改变</h4><p>这里我们将不同功能用不同的xml文件存放，当编写的代码较多时，这样设置有助于检查和修改代码。</p><p>https:////upload-images.jianshu.io/upload_images/18962003-ab2c58dd20ef6d4a.png</p><p>activity_main.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;分享&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;@drawable/text_color&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;显示的文本&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;@drawable/edit_text_color&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@drawable/shape_rectangle&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>shape_rectangle.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--长方形</span></span><br><span class="line"><span class="comment">corners: 圆角的大小</span></span><br><span class="line"><span class="comment">solid: 填充颜色</span></span><br><span class="line"><span class="comment">stroke: 边框颜色 宽度</span></span><br><span class="line"><span class="comment">gradient:渐变色 UI-拟物化 -扁平化设计</span></span><br><span class="line"><span class="comment">padding: 内间距</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:shape</span>=<span class="string">&quot;rectangle&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">stroke</span> <span class="attr">android:color</span>=<span class="string">&quot;@color/colorAccent&quot;</span> <span class="attr">android:width</span>=<span class="string">&quot;1dp&quot;</span> <span class="attr">android:dashWidth</span>=<span class="string">&quot;2dp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">&quot;10dp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">&quot;@color/colorAccent&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">gradient</span> <span class="attr">android:startColor</span>=<span class="string">&quot;#ff0000&quot;</span> <span class="attr">android:centerColor</span>=<span class="string">&quot;#00ff00&quot;</span> <span class="attr">android:endColor</span>=<span class="string">&quot;#0000ff&quot;</span> <span class="attr">android:gradientRadius</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:type</span>=<span class="string">&quot;sweep&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br></pre></td></tr></table></figure><p>edit_text_color.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--高亮状态显示的颜色--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:color</span>=<span class="string">&quot;#0000ff&quot;</span> <span class="attr">android:state_focused</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--正常状态显示的颜色--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:color</span>=<span class="string">&quot;#ff0000&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></span><br></pre></td></tr></table></figure><p>text_color.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注意: 配置有先后顺序</span></span><br><span class="line"><span class="comment">    默认的状态放在后面如果放在前面，优先匹配</span></span><br><span class="line"><span class="comment">    一旦匹配上了，后面的设置无效--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--按下状态的颜色 pressed--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:color</span>=<span class="string">&quot;#ff0000&quot;</span> <span class="attr">android:state_pressed</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--无效 无法点击的颜色 enable--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:color</span>=<span class="string">&quot;#00ff00&quot;</span> <span class="attr">android:state_enabled</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--默认状态--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:color</span>=<span class="string">&quot;#000000&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></span><br></pre></td></tr></table></figure><p>MainActivity.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.android;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="按钮点击事件"><a href="#按钮点击事件" class="headerlink" title="按钮点击事件"></a>按钮点击事件</h4><h5 id="内部类实现"><a href="#内部类实现" class="headerlink" title="内部类实现"></a>内部类实现</h5><p>内部类实现的方法是: 创建一个内部类实现OnClickListener接口并重写onClick()方法，在方法中写入点击事件的逻辑。内部类写完之后需要为按钮设置setOnClickListener(Listener listener)属性，在参数中传入之前创建好的内部类对象即可。使用这种点击事件的好处，当按钮较多时可以在onClick(View v)方法中使用switch语句case属性设置各自不同的点击事件逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    Button button =(Button)findViewById(R.id.button);</span><br><span class="line">    button.setOnClickListener(<span class="keyword">new</span> MyButton());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyButton</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(getApplicationContext(),<span class="string">&quot;已点击按钮&quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="匿名内部类实现"><a href="#匿名内部类实现" class="headerlink" title="匿名内部类实现"></a>匿名内部类实现</h5><p>​     当按钮较少或者只有一个按钮时，就不需要再单独创建一个类实现OnClickListener接口了，可以直接创建OnClickListener的匿名内部类传入按钮的setOnClickListener()参数中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    Button button = (Button) findViewById(R.id.button);</span><br><span class="line">    button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">            Toast.makeText(getApplicationContext(), <span class="string">&quot;已点击按钮&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Activity本身实现事件接口"><a href="#Activity本身实现事件接口" class="headerlink" title="Activity本身实现事件接口"></a>Activity本身实现事件接口</h5><p>除了以上两种方法，还可以在主类中实现该接口，然后重写onClick()方法，这里需要注意的是，button.setOnCLickListener(this);方法中接收了一个参数this，这个this代表的是该Activity的引用。由于Activity实现了OnClickListener接口，所以这里this代表了OnClickListener的引用，在方法中传入this就代表该控件绑定了点击事件的接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Button button = (Button) findViewById(R.id.button);</span><br><span class="line">        button.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">            Toast.makeText(getApplicationContext(),<span class="string">&quot;已点击按钮&quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="EditText"><a href="#EditText" class="headerlink" title="EditText"></a>EditText</h3><h4 id="属性-2"><a href="#属性-2" class="headerlink" title="属性"></a>属性</h4><table><thead><tr><th>hint</th><th>输入框显示的提示文本</th></tr></thead><tbody><tr><td><strong>textColorHint</strong></td><td><strong>输入框显示的提示文本的颜色</strong></td></tr><tr><td><strong>inputType</strong></td><td><strong>限制用户的输入类型</strong></td></tr><tr><td><strong>capitalize</strong></td><td><strong>英文大写设置</strong></td></tr><tr><td><strong>minLines</strong></td><td><strong>最小行数</strong></td></tr><tr><td><strong>maxLines</strong></td><td><strong>最大行数</strong></td></tr><tr><td><strong>SingleLine</strong></td><td><strong>单行不换行</strong></td></tr></tbody></table><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p><strong>inputType: 限制用户的输入类型</strong></p><p>值如下: </p><table><thead><tr><th><strong>text</strong></th><th>普通字符</th></tr></thead><tbody><tr><td><strong>textCapCharacters</strong></td><td>普通字符</td></tr><tr><td><strong>none</strong></td><td>普通字符</td></tr><tr><td><strong>textCapSentences</strong></td><td>字符串中的第一个字母大写</td></tr><tr><td><strong>textCapWords</strong></td><td>字符串中的每个单词的首字母大写</td></tr><tr><td><strong>textMultiLine</strong></td><td>多行输入</td></tr><tr><td><strong>textImeMultiLine</strong></td><td>输入法多行</td></tr><tr><td><strong>textUri</strong></td><td>格式为: URI</td></tr><tr><td><strong>textShortMessage</strong></td><td>格式为: 短消息</td></tr><tr><td><strong>textShortMessage</strong></td><td>格式为: 长消息</td></tr><tr><td><strong>textEmailAddress</strong></td><td>格式为: 电子邮件地址</td></tr><tr><td><strong>textEmailSubject</strong></td><td>格式为: 邮件主题</td></tr><tr><td><strong>textPostalAddress</strong></td><td>格式为: 邮政</td></tr><tr><td><strong>textPersonName</strong></td><td>格式为: 姓名</td></tr><tr><td><strong>textPassword</strong></td><td>格式为: 不可见密码</td></tr><tr><td><strong>textVisiblePassword</strong></td><td>格式为: 可见密码</td></tr><tr><td><strong>textFilter</strong></td><td>格式为: 文本筛选</td></tr><tr><td><strong>textWebEditText</strong></td><td>格式为: 作为网页表单的文本</td></tr><tr><td><strong>number</strong></td><td>格式为: 数字</td></tr><tr><td><strong>numberSigned</strong></td><td>格式为: 有符号数字</td></tr><tr><td><strong>numberDecimal</strong></td><td>格式为: 浮点数</td></tr><tr><td><strong>textPhonetic</strong></td><td>格式为: 拼音输入</td></tr><tr><td><strong>phone</strong></td><td>键盘为: 拨号</td></tr><tr><td><strong>date或者datetime</strong></td><td>键盘为: 日期</td></tr><tr><td><strong>time</strong></td><td>键盘为: 时间</td></tr><tr><td><strong>textAutoCorrect</strong></td><td>前两个自动完成</td></tr><tr><td><strong>textAutoComplete</strong></td><td>前两个自动完成</td></tr><tr><td><strong>textNoSuggestions</strong></td><td>不进行提示</td></tr></tbody></table><p><strong>capitalize:英文大写设置</strong></p><table><thead><tr><th><strong>sentences</strong></th><th>字符串的第一个字母大写</th></tr></thead><tbody><tr><td><strong>words</strong></td><td>字符串中用空格区分单词，每个单词的首字母大写</td></tr><tr><td><strong>characters</strong></td><td>字符串中每一个英文字母都大写</td></tr></tbody></table><h3 id="RadioButton和RadioGroup"><a href="#RadioButton和RadioGroup" class="headerlink" title="RadioButton和RadioGroup"></a>RadioButton和RadioGroup</h3><h4 id="RadioGroup基本属性"><a href="#RadioGroup基本属性" class="headerlink" title="RadioGroup基本属性"></a>RadioGroup基本属性</h4><p>1）orientation: 排列方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">若值为horizontal，则为横向，水平排列: </span><br><span class="line"></span><br><span class="line">android:orientation&#x3D;&quot;horizontal&quot;</span><br><span class="line"></span><br><span class="line">若值为vertical，则为纵向，垂直排列。</span><br><span class="line"></span><br><span class="line">android:orientation&#x3D;&quot;vertical&quot;</span><br></pre></td></tr></table></figure><p>2）checkedButton: 默认选中</p><p>直接调用已经放入在radiogroup中且已有id的radiobutton即可默认选中此项。　　　　</p><h4 id="RadioButton基本属性"><a href="#RadioButton基本属性" class="headerlink" title="RadioButton基本属性"></a>RadioButton基本属性</h4><p>1）checked: 选中状态</p><p>若为true则默认被选中，false则默认不被选中。</p><p>2）text等相关属性: </p><p>text是按钮的文本内容；</p><p>textSize是文本字体大小；</p><p>textColor是文本字体颜色······</p><p>这些属性和TextView一致。</p><p>3）button: 按钮属性</p><p>若button的值设为”@null”则不显示前面的圆形按钮，只显示文本内容本身</p><p>android:button=”@null”</p><h3 id="CheckBox"><a href="#CheckBox" class="headerlink" title="CheckBox"></a>CheckBox</h3><h4 id="属性-3"><a href="#属性-3" class="headerlink" title="属性"></a>属性</h4><p><strong>checkbox和radiobutton的属性基本一致。</strong></p><p>1）checked: 是否被默认选中</p><p><strong>android:checked=”true”</strong></p><p>2）text等相关属性: </p><p>3）button: 按钮属性</p><p>若button的值设为”@null”则不显示前面的方形按钮，只显示文本内容本身</p><p>**CheckBox和RadioButton区别: **</p><table><thead><tr><th><strong>RadioButton</strong></th><th><strong>CheckBox</strong></th></tr></thead><tbody><tr><td>选中后,通过点击无法变为未选中</td><td>选中后，通过点击可以变为未选中</td></tr><tr><td>只能同时选中一个</td><td>能同时选中多个</td></tr><tr><td>大部分UI框架中，默认圆形表示</td><td>大部分UI框架中，默认方形表示</td></tr></tbody></table><h3 id="ImageView"><a href="#ImageView" class="headerlink" title="ImageView"></a>ImageView</h3><h4 id="属性-4"><a href="#属性-4" class="headerlink" title="属性"></a>属性</h4><table><thead><tr><th align="left">属性名</th><th align="left">关联方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">:adjustViewBounds</td><td align="left">setAdjustViewBounds(boolean)</td><td align="left">设置该属性为真可以在ImageView调整边界时保持图片的纵横比例.需要与maxWidth、MaxHeight一起使用，否则单独使用没有效果.</td></tr><tr><td align="left">:baseline</td><td align="left">setBaseline(int)</td><td align="left">视图内基线的偏移量.</td></tr><tr><td align="left">:baselineAlignBottom</td><td align="left">setBaselineAlignBottom(boolean)</td><td align="left">如果为true，将父视图基线与ImageView底部边缘对齐.</td></tr><tr><td align="left">:cropToPadding</td><td align="left">setCropToPadding(boolean)</td><td align="left">如果为真，会剪切图片以适应内边距的大小,与ImageView的paddingXXX和scrollX|Y属性配合使用.</td></tr><tr><td align="left">:maxHeight</td><td align="left">setMaxHeight(int)</td><td align="left">视图最大高度.</td></tr><tr><td align="left">:android:maxWidth</td><td align="left">setMaxWidth(int)</td><td align="left">视图最大宽度.</td></tr><tr><td align="left">:scaleType</td><td align="left">setScaleType(ImageView.ScaleType)</td><td align="left">控制为了使图片适合 ImageView 的大小，应该如何变更图片大小或移动图片.</td></tr><tr><td align="left">:src</td><td align="left">setImageResource(int)</td><td align="left">设置可绘制对象作为 ImageView 显示的内容.</td></tr><tr><td align="left">:tint</td><td align="left">setImageTintList(ColorStateList)</td><td align="left">为图片设置渲染颜色.</td></tr><tr><td align="left">android:tintMode</td><td align="left">setImageTintMode(PorterDuff.Mode)</td><td align="left">图片渲染的混合模式.</td></tr></tbody></table><p>注意:</p><p>scaleType缩放类型设置: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fitXY:对图像的横向与纵向进行独立缩放,使得该图片完全适应ImageView,但是图片的横纵比可能会发生改变</span><br><span class="line">fitStart:保持纵横比缩放图片,知道较长的边与Image的编程相等,缩放完成后将图片放在ImageView的左上角</span><br><span class="line">fitCenter:同上,缩放后放于中间;</span><br><span class="line">fitEnd:同上,缩放后放于右下角;</span><br><span class="line">center:保持原图的大小，显示在ImageView的中心。当原图的size大于ImageView的size，超过部分裁剪处理。</span><br><span class="line">centerCrop:保持横纵比缩放图片,知道完全覆盖ImageView,可能会出现图片的显示不完全</span><br><span class="line">centerInside:保持横纵比缩放图片,直到ImageView能够完全地显示图片</span><br><span class="line">matrix:默认值，不改变原图的大小，从ImageView的左上角开始绘制原图，原图超过ImageView的部分作裁剪处理</span><br></pre></td></tr></table></figure><h4 id="导入网络图片"><a href="#导入网络图片" class="headerlink" title="导入网络图片"></a>导入网络图片</h4><p>在bulid.gradle中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">repositories</span><br><span class="line">&#123;    </span><br><span class="line">mavenCentral()    </span><br><span class="line">google()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation &#39;com.github.bumptech.glide:glide:4.11.0&#39;</span><br><span class="line">    annotationProcessor &#39;com.github.bumptech.glide:compiler:4.11.0&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Glide.with(this).load(图片地址).into(图片控件);</span><br></pre></td></tr></table></figure><h3 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h3><h4 id="属性-5"><a href="#属性-5" class="headerlink" title="属性"></a>属性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// transcript模式: 当ListView显示完成之后，新增一条新Item，ListView的处理模式（不显示新Item/自动滚动到新Item）。  </span></span><br><span class="line"><span class="comment">// disabled: 禁用  </span></span><br><span class="line"><span class="comment">// normal: 默认状态，如果当前的最后一个Item在ListView 显示范围内，adapter 数据集内容变化时就从滚动底部；否则不滚动到底部  </span></span><br><span class="line"><span class="comment">// alwaysScroll: 总是滚动到最新一条， 强制从ListView 的底部开始刷新  </span></span><br><span class="line">android:transcriptMode=<span class="string">&quot;alwaysScroll&quot;</span>   </span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置listview的拖动背景色，该处为去掉拖动背景色  </span></span><br><span class="line">android:cacheColorHint=<span class="string">&quot;#00000000&quot;</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">// listView的item选中时的颜色。默认为橙黄底色。  </span></span><br><span class="line">android:listSelector=<span class="string">&quot;@color/pink&quot;</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 分割线颜色  </span></span><br><span class="line">android:divider=<span class="string">&quot;#cccccc&quot;</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 分割线间距  </span></span><br><span class="line">android:dividerHeight=<span class="string">&quot;1dp&quot;</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 不显示滚动条  </span></span><br><span class="line">android:scrollbars=<span class="string">&quot;none&quot;</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 去掉上边和下边黑色的阴影  </span></span><br><span class="line">android:fadingEdge=<span class="string">&quot;none&quot;</span>   </span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置Item之间无间隙  </span></span><br><span class="line">android:divider=<span class="string">&quot;#00000000&quot;</span>  </span><br><span class="line"><span class="comment">// 设置分割线的图片资源  </span></span><br><span class="line">android:divider=<span class="string">&quot;@drawable/list_driver&quot;</span>   </span><br><span class="line"><span class="comment">// 不想显示分割线  </span></span><br><span class="line">android:divider=<span class="string">&quot;@drawable/@null&quot;</span>   </span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置为true就可以实现滚动条的自动隐藏和显示  </span></span><br><span class="line">android:fadeScrollbars=<span class="string">&quot;true&quot;</span>   </span><br><span class="line">   </span><br><span class="line"><span class="comment">// 加快滑动速度，如果设为true，会在右侧显示快速滚动条  </span></span><br><span class="line">android:fastScrollEnabled=<span class="string">&quot;false&quot;</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击某一条记录，颜色会显示在最上面，记录上的文字被遮住，所以点击文字不放，文字就看不到  </span></span><br><span class="line">android:drawSelectorOnTop=<span class="string">&quot;true&quot;</span>   </span><br><span class="line"><span class="comment">// 点击某条记录不放，颜色会在记录的后面，成为背景色，但是记录内容的文字是可见的  </span></span><br><span class="line">android:drawSelectorOnTop=<span class="string">&quot;false&quot;</span>   </span><br></pre></td></tr></table></figure><ul><li>需要自定义适配器继承BaseAdapter、重写方法</li></ul><h3 id="GridView"><a href="#GridView" class="headerlink" title="GridView"></a>GridView</h3><h4 id="属性-6"><a href="#属性-6" class="headerlink" title="属性"></a>属性</h4><table><thead><tr><th>android:columnWidth</th><th>每列的宽度</th></tr></thead><tbody><tr><td>android:numColumns=”auto_fit”</td><td>列数根据屏幕大小自动适应</td></tr><tr><td>android:verticalSpacing</td><td>垂直方向的间距（行间距）</td></tr><tr><td>android:horizontalSpacing</td><td>水平方向间距（列间距）</td></tr><tr><td>android:stretchMode=”columnWidth|spacingWidth”</td><td>表示缩放模式（与列宽大小同步和行宽大小同步）</td></tr><tr><td>android:cacheColorHint=”#00000000”</td><td>去除拖动时默认的黑色背景</td></tr><tr><td>android:listSelector=”#00000000”</td><td>去除选中时的黄色底色</td></tr><tr><td>android:scrollbars=”none”</td><td>隐藏GridView的滚动条</td></tr><tr><td>android:fadeScrollEnabled=”true”</td><td>设置为true就可以实现滚动条的自动隐藏和显示</td></tr><tr><td>android:fastScrollEnabled=”true”</td><td>GridView出现快速滚动的按钮（至少滚动4页才会显示）</td></tr><tr><td>android:numColumns=””</td><td>设置列数</td></tr></tbody></table><ul><li>需要自定义适配器继承BaseAdapter、重写方法</li></ul><h3 id="ScrollView与HorizontalScrollView"><a href="#ScrollView与HorizontalScrollView" class="headerlink" title="ScrollView与HorizontalScrollView"></a>ScrollView与HorizontalScrollView</h3><h4 id="属性-7"><a href="#属性-7" class="headerlink" title="属性"></a>属性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">android:scrollbars</span><br><span class="line">设置滚动条显示。none（隐藏），horizontal（水平），vertical（垂直）。</span><br><span class="line">android:scrollbarFadeDuration</span><br><span class="line">设置滚动条淡出效果（从有到慢慢的变淡直至消失）时间，以毫秒为单位。Android2.2中滚动条滚动完之后会消失，再滚动又会出来，在1.5、1.6版本里面会一直显示着。</span><br><span class="line">android:scrollbarSize</span><br><span class="line">设置滚动条的宽度。</span><br><span class="line">android:scrollbarStyle</span><br><span class="line">设置滚动条的风格和位置。设置值: insideOverlay、insideInset、outsideOverlay、outsideInset</span><br><span class="line">android:scrollbarThumbHorizontal</span><br><span class="line">设置水平滚动条的drawable。</span><br><span class="line">android:scrollbarThumbVertical</span><br><span class="line">设置垂直滚动条的drawable.</span><br><span class="line">android:scrollbarTrackHorizontal</span><br><span class="line">设置水平滚动条背景（轨迹）的色drawable</span><br><span class="line">android:soundEffectsEnabled</span><br><span class="line">设置点击或触摸时是否有声音效果</span><br></pre></td></tr></table></figure><h3 id="RecyclerView"><a href="#RecyclerView" class="headerlink" title="RecyclerView"></a>RecyclerView</h3><h4 id="RecyclerView-的基本用法"><a href="#RecyclerView-的基本用法" class="headerlink" title="RecyclerView 的基本用法"></a>RecyclerView 的基本用法</h4><p>打开 app/build.gradle 文件，在 dependencies 闭包中添加如下内容(会爆红，但没没事)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation &#39;com.android.support:design:28.0.0&#39;</span><br></pre></td></tr></table></figure><p>基本操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">recyclerView = (RecyclerView) findViewById(R.id.recyclerView);  </span><br><span class="line">LinearLayoutManager layoutManager = <span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);  </span><br><span class="line"><span class="comment">//设置布局管理器  </span></span><br><span class="line">recyclerView.setLayoutManager(layoutManager);  </span><br><span class="line"><span class="comment">//设置为垂直布局，这也是默认的  </span></span><br><span class="line">layoutManager.setOrientation(OrientationHelper.VERTICAL);  </span><br><span class="line"><span class="comment">//设置Adapter  </span></span><br><span class="line">recyclerView.setAdapter(recycleAdapter);  </span><br><span class="line"> <span class="comment">//设置分隔线  </span></span><br><span class="line">recyclerView.addItemDecoration(<span class="keyword">new</span> DividerGridItemDecoration(<span class="keyword">this</span>));  </span><br></pre></td></tr></table></figure><p>可以看到对RecylerView的设置过程，比ListView要复杂一些，这也是RecylerView高度解耦的表现，虽然代码抒写上有点复杂，但它的扩展性是极高的。</p><p>在了解了RecyclerView的一些控制之后，紧接着来看看它的Adapter的写法，RecyclerView的Adapter与ListView的Adapter还是有点区别的，RecyclerView.Adapter，需要实现3个方法: </p><p>①onCreateViewHolder()</p><p>  这个方法主要生成为每个Item inflater出一个View，但是该方法返回的是一个ViewHolder。该方法把View直接封装在ViewHolder中，然后我们面向的是ViewHolder这个实例，当然这个ViewHolder需要我们自己去编写。直接省去了当初的convertView.setTag(holder)和convertView.getTag()这些繁琐的步骤。</p><p>②onBindViewHolder()</p><p>   这个方法主要用于适配渲染数据到View中。方法提供给你了一个viewHolder，而不是原来的convertView。</p><p>③getItemCount()</p><p>   这个方法就类似于BaseAdapter的getCount方法了，即总共有多少个条目。</p><p>看这篇文章:<a href="https://blog.csdn.net/qq_39539367/article/details/80338177">https://blog.csdn.net/qq_39539367/article/details/80338177</a></p><h3 id="WebView"><a href="#WebView" class="headerlink" title="WebView"></a>WebView</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><code>WebView</code>是一个基于<code>webkit</code>引擎、展现<code>web</code>页面的控件。</p><blockquote><p>Android的Webview在低版本和高版本采用了不同的webkit版本内核，4.4后直接使用了Chrome。</p></blockquote><hr><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ul><li>显示和渲染Web页面</li><li>直接使用html文件（网络上或本地assets中）作布局</li><li>可和JavaScript交互调用</li></ul><blockquote><p>WebView控件功能强大，除了具有一般View的属性和设置外，还可以对url请求、页面加载、渲染、页面交互进行强大的处理。</p></blockquote><hr><h4 id="使用介绍"><a href="#使用介绍" class="headerlink" title="使用介绍"></a>使用介绍</h4><p>一般来说Webview可单独使用，可联合其工具类一起使用，所以接下来，我会介绍: </p><ul><li>Webview类自身的常见方法</li><li>Webview的最常用的工具类: WebSettings类、WebViewClient类、WebChromeClient类</li><li>Android 和 Js的交互</li></ul><h5 id="Webview类常用方法"><a href="#Webview类常用方法" class="headerlink" title="Webview类常用方法"></a>Webview类常用方法</h5><p> 加载url</p><p>加载方式根据资源分为三种</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式1. 加载一个网页: </span></span><br><span class="line">webView.loadUrl(<span class="string">&quot;http://www.google.com/&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式2: 加载apk包中的html页面(创建assets文件)</span></span><br><span class="line">webView.loadUrl(<span class="string">&quot;file:///android_asset/test.html&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式3: 加载手机本地的html页面</span></span><br><span class="line">webView.loadUrl(<span class="string">&quot;content://com.android.htmlfileprovider/sdcard/test.html&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式4:  加载 HTML 页面的一小段内容</span></span><br><span class="line">WebView.loadData(String data, String mimeType, String encoding)</span><br><span class="line"><span class="comment">// 参数说明: </span></span><br><span class="line"><span class="comment">// 参数1: 需要截取展示的内容</span></span><br><span class="line"><span class="comment">// 内容里不能出现 ’#’, ‘%’, ‘\’ , ‘?’ 这四个字符，若出现了需用 %23, %25, %27, %3f 对应来替代，否则会出现异常</span></span><br><span class="line"><span class="comment">// 参数2: 展示内容的类型</span></span><br><span class="line"><span class="comment">// 参数3: 字节码</span></span><br></pre></td></tr></table></figure><h5 id="WebView的状态"><a href="#WebView的状态" class="headerlink" title="WebView的状态"></a>WebView的状态</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;激活WebView为活跃状态，能正常执行网页的响应</span><br><span class="line">webView.onResume() ；</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;当页面被失去焦点被切换到后台不可见状态，需要执行onPause</span><br><span class="line">&#x2F;&#x2F;通过onPause动作通知内核暂停所有的动作，比如DOM的解析、plugin的执行、JavaScript执行。</span><br><span class="line">webView.onPause()；</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;当应用程序(存在webview)被切换到后台时，这个方法不仅仅针对当前的webview而是全局的全应用程序的webview</span><br><span class="line">&#x2F;&#x2F;它会暂停所有webview的layout，parsing，javascripttimer。降低CPU功耗。</span><br><span class="line">webView.pauseTimers()</span><br><span class="line">&#x2F;&#x2F;恢复pauseTimers状态</span><br><span class="line">webView.resumeTimers()；</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;销毁Webview</span><br><span class="line">&#x2F;&#x2F;在关闭了Activity时，如果Webview的音乐或视频，还在播放。就必须销毁Webview</span><br><span class="line">&#x2F;&#x2F;但是注意: webview调用destory时,webview仍绑定在Activity上</span><br><span class="line">&#x2F;&#x2F;这是由于自定义webview构建时传入了该Activity的context对象</span><br><span class="line">&#x2F;&#x2F;因此需要先从父容器中移除webview,然后再销毁webview:</span><br><span class="line">rootLayout.removeView(webView); </span><br><span class="line">webView.destroy();</span><br></pre></td></tr></table></figure><h5 id="关于前进-后退网页"><a href="#关于前进-后退网页" class="headerlink" title="关于前进 / 后退网页"></a>关于前进 / 后退网页</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//是否可以后退</span></span><br><span class="line">Webview.canGoBack() </span><br><span class="line"><span class="comment">//后退网页</span></span><br><span class="line">Webview.goBack()</span><br><span class="line"></span><br><span class="line"><span class="comment">//是否可以前进                     </span></span><br><span class="line">Webview.canGoForward()</span><br><span class="line"><span class="comment">//前进网页</span></span><br><span class="line">Webview.goForward()</span><br><span class="line"></span><br><span class="line"><span class="comment">//以当前的index为起始点前进或者后退到历史记录中指定的steps</span></span><br><span class="line"><span class="comment">//如果steps为负数则为后退，正数则为前进</span></span><br><span class="line">Webview.goBackOrForward(intsteps) </span><br></pre></td></tr></table></figure><p>常见用法: Back键控制网页后退</p><ul><li>问题: 在不做任何处理前提下 ，浏览网页时点击系统的”Back”键,整个 Browser 会调用 finish()而结束自身</li><li>目标: 点击返回后，是网页回退而不是推出浏览器</li><li>解决方案: 在当前Activity中处理并消费掉该 Back 事件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKeyDown</span><span class="params">(<span class="keyword">int</span> keyCode, KeyEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((keyCode == KEYCODE_BACK) &amp;&amp; mWebView.canGoBack()) &#123; </span><br><span class="line">        mWebView.goBack();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onKeyDown(keyCode, event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="清除缓存数据"><a href="#清除缓存数据" class="headerlink" title="清除缓存数据"></a>清除缓存数据</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//清除网页访问留下的缓存</span></span><br><span class="line"><span class="comment">//由于内核缓存是全局的因此这个方法不仅仅针对webview而是针对整个应用程序.</span></span><br><span class="line">Webview.clearCache(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//清除当前webview访问的历史记录</span></span><br><span class="line"><span class="comment">//只会webview访问历史记录里的所有记录除了当前访问记录</span></span><br><span class="line">Webview.clearHistory()；</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个api仅仅清除自动完成填充的表单数据，并不会清除WebView存储到本地的数据</span></span><br><span class="line">Webview.clearFormData()；</span><br></pre></td></tr></table></figure><h4 id="常用工具类"><a href="#常用工具类" class="headerlink" title="常用工具类"></a>常用工具类</h4><h5 id="WebSettings类"><a href="#WebSettings类" class="headerlink" title="WebSettings类"></a>WebSettings类</h5><ul><li>作用: 对WebView进行配置和管理</li><li>配置步骤 &amp; 常见方法: </li></ul><p><strong>配置步骤1: 添加访问网络权限</strong>（AndroidManifest.xml）</p><blockquote><p>这是前提！这是前提！这是前提！</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><strong>配置步骤2: 生成一个WebView组件（有两种方式）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式1: 直接在在Activity中生成</span></span><br><span class="line">WebView webView = <span class="keyword">new</span> WebView(<span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法2: 在Activity的layout文件里添加webview控件: </span></span><br><span class="line">WebView webview = (WebView) findViewById(R.id.webView1);</span><br></pre></td></tr></table></figure><p><strong>配置步骤3: 进行配置-利用WebSettings子类</strong>（常见方法）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明WebSettings子类</span></span><br><span class="line">WebSettings webSettings = webView.getSettings();</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果访问的页面中要与Javascript交互，则webview必须设置支持Javascript</span></span><br><span class="line">webSettings.setJavaScriptEnabled(<span class="keyword">true</span>);  </span><br><span class="line"><span class="comment">// 若加载的 html 里有JS 在执行动画等操作，会造成资源浪费（CPU、电量）</span></span><br><span class="line"><span class="comment">// 在 onStop 和 onResume 里分别把 setJavaScriptEnabled() 给设置成 false 和 true 即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//支持插件</span></span><br><span class="line">webSettings.setPluginsEnabled(<span class="keyword">true</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">//设置自适应屏幕，两者合用</span></span><br><span class="line">webSettings.setUseWideViewPort(<span class="keyword">true</span>); <span class="comment">//将图片调整到适合webview的大小 </span></span><br><span class="line">webSettings.setLoadWithOverviewMode(<span class="keyword">true</span>); <span class="comment">// 缩放至屏幕的大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//缩放操作</span></span><br><span class="line">webSettings.setSupportZoom(<span class="keyword">true</span>); <span class="comment">//支持缩放，默认为true。是下面那个的前提。</span></span><br><span class="line">webSettings.setBuiltInZoomControls(<span class="keyword">true</span>); <span class="comment">//设置内置的缩放控件。若为false，则该WebView不可缩放</span></span><br><span class="line">webSettings.setDisplayZoomControls(<span class="keyword">false</span>); <span class="comment">//隐藏原生的缩放控件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//其他细节操作</span></span><br><span class="line">webSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK); <span class="comment">//关闭webview中缓存 </span></span><br><span class="line">webSettings.setAllowFileAccess(<span class="keyword">true</span>); <span class="comment">//设置可以访问文件 </span></span><br><span class="line">webSettings.setJavaScriptCanOpenWindowsAutomatically(<span class="keyword">true</span>); <span class="comment">//支持通过JS打开新窗口 </span></span><br><span class="line">webSettings.setLoadsImagesAutomatically(<span class="keyword">true</span>); <span class="comment">//支持自动加载图片</span></span><br><span class="line">webSettings.setDefaultTextEncodingName(<span class="string">&quot;utf-8&quot;</span>);<span class="comment">//设置编码格式</span></span><br></pre></td></tr></table></figure><p><strong>常见用法: 设置WebView缓存</strong></p><ul><li>当加载 html 页面时，WebView会在/data/data/包名目录下生成 database 与 cache 两个文件夹</li><li>请求的 URL记录保存在 WebViewCache.db，而 URL的内容是保存在 WebViewCache 文件夹下</li><li>是否启用缓存: </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//优先使用缓存: </span></span><br><span class="line">WebView.getSettings().setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK); </span><br><span class="line"><span class="comment">//缓存模式如下: </span></span><br><span class="line">    <span class="comment">//LOAD_CACHE_ONLY: 不使用网络，只读取本地缓存数据</span></span><br><span class="line">    <span class="comment">//LOAD_DEFAULT: （默认）根据cache-control决定是否从网络上取数据。</span></span><br><span class="line">    <span class="comment">//LOAD_NO_CACHE: 不使用缓存，只从网络获取数据.</span></span><br><span class="line">    <span class="comment">//LOAD_CACHE_ELSE_NETWORK，只要本地有，无论是否过期，或者no-cache，都使用缓存中的数据。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//不使用缓存: </span></span><br><span class="line">WebView.getSettings().setCacheMode(WebSettings.LOAD_NO_CACHE);</span><br></pre></td></tr></table></figure><ul><li>结合使用（离线加载）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (NetStatusUtil.isConnected(getApplicationContext())) &#123;</span><br><span class="line">    webSettings.setCacheMode(WebSettings.LOAD_DEFAULT);<span class="comment">//根据cache-control决定是否从网络上取数据。</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    webSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);<span class="comment">//没网，则从本地获取，即离线加载</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">webSettings.setDomStorageEnabled(<span class="keyword">true</span>); <span class="comment">// 开启 DOM storage API 功能</span></span><br><span class="line">webSettings.setDatabaseEnabled(<span class="keyword">true</span>);   <span class="comment">//开启 database storage API 功能</span></span><br><span class="line">webSettings.setAppCacheEnabled(<span class="keyword">true</span>);<span class="comment">//开启 Application Caches 功能</span></span><br><span class="line"></span><br><span class="line">String cacheDirPath = getFilesDir().getAbsolutePath() + APP_CACAHE_DIRNAME;</span><br><span class="line">webSettings.setAppCachePath(cacheDirPath); <span class="comment">//设置  Application Caches 缓存目录</span></span><br></pre></td></tr></table></figure><p>注意:每个 Application 只调用一次 WebSettings.setAppCachePath()，WebSettings.setAppCacheMaxSize()</p><h5 id="WebViewClient类"><a href="#WebViewClient类" class="headerlink" title="WebViewClient类"></a>WebViewClient类</h5><ul><li>作用: 处理各种通知 &amp; 请求事件</li><li>常见方法: </li></ul><p><strong>常见方法1: shouldOverrideUrlLoading()</strong></p><ul><li>作用: 打开网页时不调用系统浏览器， 而是在本WebView中显示；在网页上的所有加载都经过这个方法,这个函数我们可以做很多操作。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//步骤1. 定义Webview组件</span></span><br><span class="line">Webview webview = (WebView) findViewById(R.id.webView1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//步骤2. 选择加载方式</span></span><br><span class="line">  <span class="comment">//方式1. 加载一个网页: </span></span><br><span class="line">  webView.loadUrl(<span class="string">&quot;http://www.google.com/&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//方式2: 加载apk包中的html页面</span></span><br><span class="line">  webView.loadUrl(<span class="string">&quot;file:///android_asset/test.html&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//方式3: 加载手机本地的html页面</span></span><br><span class="line">   webView.loadUrl(<span class="string">&quot;content://com.android.htmlfileprovider/sdcard/test.html&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//步骤3. 复写shouldOverrideUrlLoading()方法，使得打开网页时不调用系统浏览器， 而是在本WebView中显示</span></span><br><span class="line">    webView.setWebViewClient(<span class="keyword">new</span> WebViewClient()&#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</span><br><span class="line">          view.loadUrl(url);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p><strong>常见方法2: onPageStarted()</strong></p><ul><li>作用: 开始载入页面调用的，我们可以设定一个loading的页面，告诉用户程序在等待网络响应。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  webView.setWebViewClient(<span class="keyword">new</span> WebViewClient()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">onPageStarted</span><span class="params">(WebView view, String url, Bitmap favicon)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//设定加载开始的操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>常见方法3: onPageFinished()</strong></p><ul><li>作用: 在页面加载结束时调用。我们可以关闭loading 条，切换程序动作。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  webView.setWebViewClient(<span class="keyword">new</span> WebViewClient()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageFinished</span><span class="params">(WebView view, String url)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//设定加载结束的操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>常见方法4: onLoadResource()</strong></p><ul><li>作用: 在加载页面资源时会调用，每一个资源（比如图片）的加载都会调用一次。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  webView.setWebViewClient(<span class="keyword">new</span> WebViewClient()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onLoadResource</span><span class="params">(WebView view, String url)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//设定加载资源的操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>常见方法5: onReceivedError（）</strong></p><ul><li>作用: 加载页面的服务器出现错误时（如404）调用。</li></ul><blockquote><p>App里面使用webview控件的时候遇到了诸如404这类的错误的时候，若也显示浏览器里面的那种错误提示页面就显得很丑陋了，那么这个时候我们的app就需要加载一个本地的错误提示页面，即webview如何加载一个本地的页面</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//步骤1: 写一个html文件（error_handle.html），用于出错时展示给用户看的提示页面</span></span><br><span class="line"><span class="comment">//步骤2: 将该html文件放置到代码根目录的assets文件夹下</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//步骤3: 复写WebViewClient的onRecievedError方法</span></span><br><span class="line"><span class="comment">//该方法传回了错误码，根据错误类型可以进行不同的错误分类处理</span></span><br><span class="line">    webView.setWebViewClient(<span class="keyword">new</span> WebViewClient()&#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedError</span><span class="params">(WebView view, <span class="keyword">int</span> errorCode, String description, String failingUrl)</span></span>&#123;</span><br><span class="line"><span class="keyword">switch</span>(errorCode)</span><br><span class="line">                &#123;</span><br><span class="line">                <span class="keyword">case</span> HttpStatus.SC_NOT_FOUND:</span><br><span class="line">                    view.loadUrl(<span class="string">&quot;file:///android_assets/error_handle.html&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p><strong>常见方法6: onReceivedSslError()</strong></p><ul><li>作用: 处理https请求</li></ul><blockquote><p>webView默认是不处理https请求的，页面显示空白，需要进行如下设置: </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">webView.setWebViewClient(<span class="keyword">new</span> WebViewClient() &#123;    </span><br><span class="line">        <span class="meta">@Override</span>    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedSslError</span><span class="params">(WebView view, SslErrorHandler handler, SslError error)</span> </span>&#123;    </span><br><span class="line">            handler.proceed();    <span class="comment">//表示等待证书响应</span></span><br><span class="line">        <span class="comment">// handler.cancel();      //表示挂起连接，为默认方式</span></span><br><span class="line">        <span class="comment">// handler.handleMessage(null);    //可做其他处理</span></span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 特别注意: 5.1以上默认禁止了https和http混用，以下方式是开启</span></span><br><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class="line">mWebView.getSettings().setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="WebChromeClient类"><a href="#WebChromeClient类" class="headerlink" title="WebChromeClient类"></a>WebChromeClient类</h5><ul><li>作用: 辅助 WebView 处理 Javascript 的对话框,网站图标,网站标题等等。</li><li>常见使用: </li></ul><p><strong>常见方法1:  onProgressChanged（）</strong></p><ul><li>作用: 获得网页的加载进度并显示</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">webview.setWebChromeClient(<span class="keyword">new</span> WebChromeClient()&#123;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgressChanged</span><span class="params">(WebView view, <span class="keyword">int</span> newProgress)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (newProgress &lt; <span class="number">100</span>) &#123;</span><br><span class="line">              String progress = newProgress + <span class="string">&quot;%&quot;</span>;</span><br><span class="line">              progress.setText(progress);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p><strong>常见方法2:  onReceivedTitle（）</strong></p><ul><li>作用: 获取Web页中的标题</li></ul><blockquote><p>每个网页的页面都有一个标题，比如<a href="https://links.jianshu.com/go?to=http://www.baidu.com">www.baidu.com</a>这个页面的标题即”百度一下，你就知道”，那么如何知道当前webview正在加载的页面的title并进行设置呢？</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">webview.setWebChromeClient(<span class="keyword">new</span> WebChromeClient()&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedTitle</span><span class="params">(WebView view, String title)</span> </span>&#123;</span><br><span class="line">       titleview.setText(title)；</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>常见方法3:  onJsAlert（）</strong></p><ul><li>作用: 支持javascript的警告框</li></ul><blockquote><p>一般情况下在 Android 中为 Toast，在文本里面加入\n就可以换行</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">webview.setWebChromeClient(<span class="keyword">new</span> WebChromeClient() &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onJsAlert</span><span class="params">(WebView view, String url, String message, <span class="keyword">final</span> JsResult result)</span>  </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> AlertDialog.Builder(MainActivity.<span class="keyword">this</span>)</span><br><span class="line">            .setTitle(<span class="string">&quot;JsAlert&quot;</span>)</span><br><span class="line">            .setMessage(message)</span><br><span class="line">            .setPositiveButton(<span class="string">&quot;OK&quot;</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">                    result.confirm();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .setCancelable(<span class="keyword">false</span>)</span><br><span class="line">            .show();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p><strong>常见方法4:  onJsConfirm（）</strong></p><ul><li>作用: 支持javascript的确认框</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">webview.setWebChromeClient(<span class="keyword">new</span> WebChromeClient() &#123;</span><br><span class="line">        </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onJsConfirm</span><span class="params">(WebView view, String url, String message, <span class="keyword">final</span> JsResult result)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> AlertDialog.Builder(MainActivity.<span class="keyword">this</span>)</span><br><span class="line">            .setTitle(<span class="string">&quot;JsConfirm&quot;</span>)</span><br><span class="line">            .setMessage(message)</span><br><span class="line">            .setPositiveButton(<span class="string">&quot;OK&quot;</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">                    result.confirm();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .setNegativeButton(<span class="string">&quot;Cancel&quot;</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">                    result.cancel();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .setCancelable(<span class="keyword">false</span>)</span><br><span class="line">            .show();</span><br><span class="line"><span class="comment">// 返回布尔值: 判断点击时确认还是取消</span></span><br><span class="line"><span class="comment">// true表示点击了确认；false表示点击了取消；</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">            </span><br></pre></td></tr></table></figure><p><strong>常见方法5:  onJsPrompt（）</strong></p><ul><li>作用: 支持javascript输入框</li></ul><blockquote><p>点击确认返回输入框中的值，点击取消返回 null。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">webview.setWebChromeClient(<span class="keyword">new</span> WebChromeClient() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onJsPrompt</span><span class="params">(WebView view, String url, String message, String defaultValue, <span class="keyword">final</span> JsPromptResult result)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> EditText et = <span class="keyword">new</span> EditText(MainActivity.<span class="keyword">this</span>);</span><br><span class="line">    et.setText(defaultValue);</span><br><span class="line">    <span class="keyword">new</span> AlertDialog.Builder(MainActivity.<span class="keyword">this</span>)</span><br><span class="line">            .setTitle(message)</span><br><span class="line">            .setView(et)</span><br><span class="line">            .setPositiveButton(<span class="string">&quot;OK&quot;</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">                    result.confirm(et.getText().toString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .setNegativeButton(<span class="string">&quot;Cancel&quot;</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">                    result.cancel();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .setCancelable(<span class="keyword">false</span>)</span><br><span class="line">            .show();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">            </span><br></pre></td></tr></table></figure><h4 id="WebView与JavaScript的交互"><a href="#WebView与JavaScript的交互" class="headerlink" title="WebView与JavaScript的交互"></a>WebView与JavaScript的交互</h4><p>具体请看我写的文章: <a href="https://www.jianshu.com/p/345f4d8a5cfa">最全面 &amp; 最详细的 Android WebView与JS的交互方式 汇总</a></p><h5 id="注意事项-如何避免WebView内存泄露？"><a href="#注意事项-如何避免WebView内存泄露？" class="headerlink" title="注意事项: 如何避免WebView内存泄露？"></a>注意事项: 如何避免WebView内存泄露？</h5><p>不在xml中定义 Webview ，而是在需要的时候在Activity中创建，并且Context使用 getApplicationgContext()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LinearLayout.LayoutParams params = <span class="keyword">new</span> LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);</span><br><span class="line">mWebView = <span class="keyword">new</span> WebView(getApplicationContext());</span><br><span class="line">mWebView.setLayoutParams(params);</span><br><span class="line">mLayout.addView(mWebView);</span><br></pre></td></tr></table></figure><p>在 Activity 销毁（ WebView ）的时候，先让 WebView 加载null内容，然后移除 WebView，再销毁 WebView，最后置空。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mWebView != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mWebView.loadDataWithBaseURL(<span class="keyword">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;text/html&quot;</span>, <span class="string">&quot;utf-8&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">        mWebView.clearHistory();</span><br><span class="line"></span><br><span class="line">        ((ViewGroup) mWebView.getParent()).removeView(mWebView);</span><br><span class="line">        mWebView.destroy();</span><br><span class="line">        mWebView = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">super</span>.onDestroy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><ul><li>目标: 实现显示”<a href="https://links.jianshu.com/go?to=http://www.baidu.com">www.baidu.com</a>“、获取其标题、提示加载开始 &amp; 结束和获取加载进度</li><li>具体实现: </li></ul><p>步骤1: 添加访问网络权限</p><blockquote><p>这是前提！这是前提！这是前提！</p></blockquote><p><em>AndroidManifest.xml</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>步骤2: 主布局<br> <em>activity_main.xml</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingBottom</span>=<span class="string">&quot;@dimen/activity_vertical_margin&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingLeft</span>=<span class="string">&quot;@dimen/activity_horizontal_margin&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingRight</span>=<span class="string">&quot;@dimen/activity_horizontal_margin&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingTop</span>=<span class="string">&quot;@dimen/activity_vertical_margin&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;com.example.carson_ho.webview_demo.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 获取网站的标题--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/title&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开始加载提示--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/text_beginLoading&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_below</span>=<span class="string">&quot;@+id/title&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--获取加载进度--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_below</span>=<span class="string">&quot;@+id/text_beginLoading&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/text_Loading&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--结束加载提示--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_below</span>=<span class="string">&quot;@+id/text_Loading&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/text_endLoading&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--显示网页区域--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">WebView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/webView1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_below</span>=<span class="string">&quot;@+id/text_endLoading&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;fill_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;fill_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;10dp&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>步骤3: 根据需要实现的功能从而使用相应的子类及其方法（注释很清楚了）</strong><br> <em>MainActivity.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.carson_ho.webview_demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.graphics.Bitmap;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.view.KeyEvent;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"><span class="keyword">import</span> android.webkit.WebChromeClient;</span><br><span class="line"><span class="keyword">import</span> android.webkit.WebSettings;</span><br><span class="line"><span class="keyword">import</span> android.webkit.WebView;</span><br><span class="line"><span class="keyword">import</span> android.webkit.WebViewClient;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    WebView mWebview;</span><br><span class="line">    WebSettings mWebSettings;</span><br><span class="line">    TextView beginLoading,endLoading,loading,mtitle;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        mWebview = (WebView) findViewById(R.id.webView1);</span><br><span class="line">        beginLoading = (TextView) findViewById(R.id.text_beginLoading);</span><br><span class="line">        endLoading = (TextView) findViewById(R.id.text_endLoading);</span><br><span class="line">        loading = (TextView) findViewById(R.id.text_Loading);</span><br><span class="line">        mtitle = (TextView) findViewById(R.id.title);</span><br><span class="line"></span><br><span class="line">        mWebSettings = mWebview.getSettings();</span><br><span class="line"></span><br><span class="line">        mWebview.loadUrl(<span class="string">&quot;http://www.baidu.com/&quot;</span>);</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//设置不用系统浏览器打开,直接显示在当前Webview</span></span><br><span class="line">        mWebview.setWebViewClient(<span class="keyword">new</span> WebViewClient() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</span><br><span class="line">                view.loadUrl(url);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置WebChromeClient类</span></span><br><span class="line">        mWebview.setWebChromeClient(<span class="keyword">new</span> WebChromeClient() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取网站标题</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedTitle</span><span class="params">(WebView view, String title)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;标题在这里&quot;</span>);</span><br><span class="line">                mtitle.setText(title);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取加载进度</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgressChanged</span><span class="params">(WebView view, <span class="keyword">int</span> newProgress)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (newProgress &lt; <span class="number">100</span>) &#123;</span><br><span class="line">                    String progress = newProgress + <span class="string">&quot;%&quot;</span>;</span><br><span class="line">                    loading.setText(progress);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (newProgress == <span class="number">100</span>) &#123;</span><br><span class="line">                    String progress = newProgress + <span class="string">&quot;%&quot;</span>;</span><br><span class="line">                    loading.setText(progress);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置WebViewClient类</span></span><br><span class="line">        mWebview.setWebViewClient(<span class="keyword">new</span> WebViewClient() &#123;</span><br><span class="line">            <span class="comment">//设置加载前的函数</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageStarted</span><span class="params">(WebView view, String url, Bitmap favicon)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;开始加载了&quot;</span>);</span><br><span class="line">                beginLoading.setText(<span class="string">&quot;开始加载了&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//设置结束加载函数</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageFinished</span><span class="params">(WebView view, String url)</span> </span>&#123;</span><br><span class="line">                endLoading.setText(<span class="string">&quot;结束加载了&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//点击返回上一页面而不是退出浏览器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKeyDown</span><span class="params">(<span class="keyword">int</span> keyCode, KeyEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (keyCode == KeyEvent.KEYCODE_BACK &amp;&amp; mWebview.canGoBack()) &#123;</span><br><span class="line">            mWebview.goBack();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onKeyDown(keyCode, event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//销毁Webview</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mWebview != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mWebview.loadDataWithBaseURL(<span class="keyword">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;text/html&quot;</span>, <span class="string">&quot;utf-8&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">            mWebview.clearHistory();</span><br><span class="line"></span><br><span class="line">            ((ViewGroup) mWebview.getParent()).removeView(mWebview);</span><br><span class="line">            mWebview.destroy();</span><br><span class="line">            mWebview = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Demo地址"><a href="#Demo地址" class="headerlink" title="Demo地址"></a>Demo地址</h6><p>源代码: <a href="https://links.jianshu.com/go?to=https://github.com/Carson-Ho/Webview_Cache">Carson_Ho的Github-WebviewDemo</a></p><hr><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ul><li>本文全面介绍了<code>Webview</code>，总结如下</li></ul><p><a href="https://upload-images.jianshu.io/upload_images/944365-6e249d5a3cc7d343.png">https://upload-images.jianshu.io/upload_images/944365-6e249d5a3cc7d343.png</a></p><p>​                                                                                示意图<br>链接: <a href="https://www.jianshu.com/p/3c94ae673e2a">https://www.jianshu.com/p/3c94ae673e2a</a></p><h3 id="Toast"><a href="#Toast" class="headerlink" title="Toast"></a>Toast</h3><p>使用Toast来显示消息提示框非常简单，只需要一下三个步骤: </p><p>创建一个Toast对象。通常有两种方法: 一种是使用构造方式进行创建；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Toast toast&#x3D;new Toast(this);</span><br></pre></td></tr></table></figure><p>另一种是调用Toast类的makeText()方法创建。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Toast toast&#x3D;Toast.makeText(this,&quot;要显示的内容&quot;,Toast.LENGTH_SHORT);</span><br></pre></td></tr></table></figure><p>调用Toast类提供的方法来设置该消息提示框的对齐方式、页边距、显示的内容等等。</p><p> 常用的方法如下: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用于设置消息提示框持续的时间，参数通常使用Toast.LENGTH_LONG或Toast.LENGTH_SHORT</span></span><br><span class="line">setDuration(<span class="keyword">int</span> duration) </span><br><span class="line"></span><br><span class="line"><span class="comment">//用于设置消息提示框的位置，参数grivaty用于指定对齐方式: xOffset和yOffset用于指定具体的偏移值</span></span><br><span class="line">setGravity(<span class="keyword">int</span> gravity,<span class="keyword">int</span> xOffset,<span class="keyword">int</span> yOffset) </span><br><span class="line"></span><br><span class="line"><span class="comment">//用于设置消息提示的页边距</span></span><br><span class="line">setMargin(<span class="keyword">float</span> horizontalMargin,<span class="keyword">float</span> verticalMargin) </span><br><span class="line"></span><br><span class="line"><span class="comment">//用于设置要显示的文本内容</span></span><br><span class="line">setText(CharSequence s) </span><br><span class="line"></span><br><span class="line"><span class="comment">//用于设置将要在提示框中显示的视图</span></span><br><span class="line">setView(View view) </span><br></pre></td></tr></table></figure><h3 id="AlertDialog"><a href="#AlertDialog" class="headerlink" title="AlertDialog"></a>AlertDialog</h3><h4 id="AlertDialog的六种实现方式"><a href="#AlertDialog的六种实现方式" class="headerlink" title="AlertDialog的六种实现方式"></a>AlertDialog的六种实现方式</h4><p>1、创建AlertDialog.Builder对象</p><p>2、调用Builder对象的setTitle方法设置标题，setIcon方法设置图标</p><p>3、调用Builder相关方法如setMessage方法、setItems方法、setSingleChoiceItems方法、setMultiChoiceItems方法、setAdapter方法、setView方法设置不同类型的对话框内容。</p><p>4、调用setPositiveButton、setNegativeButton、setNeutralButton设置多个按钮</p><p>5、调用Builder对象的create()方法创建AlertDialog对象</p><p>6、调用AlertDialog对象的show()方法将对话框显示出来</p><h5 id="创建AlertDialog-Builder对象"><a href="#创建AlertDialog-Builder对象" class="headerlink" title="创建AlertDialog.Builder对象"></a>创建AlertDialog.Builder对象</h5><blockquote><p> import android.support.v7.app.AppCompatActivity;</p><p>import android.support.v7.app.ApplyDialog;</p></blockquote><p>实例化对象的方法: </p><p>AlertDialog.Builder builder =newAlertDialog.Builder(this);//实例化</p><h5 id="调用Builder对象的setTitle方法设置标题，setIcon方法设置图标"><a href="#调用Builder对象的setTitle方法设置标题，setIcon方法设置图标" class="headerlink" title="调用Builder对象的setTitle方法设置标题，setIcon方法设置图标"></a>调用Builder对象的setTitle方法设置标题，setIcon方法设置图标</h5><blockquote><p>builder.setTitle(“Material Design Dialog”);</p><p>builder.setIcon(R.mipmap.ic_launcher);</p></blockquote><h5 id="调用Builder不同方法设置不同类型的对话框内容。"><a href="#调用Builder不同方法设置不同类型的对话框内容。" class="headerlink" title="调用Builder不同方法设置不同类型的对话框内容。"></a>调用Builder不同方法设置不同类型的对话框内容。</h5><p>1.setMessage()   设置对话框内容为简单文本内容</p><blockquote><p>builder.setMessage(“Hello World”);</p></blockquote><p><a href="https://upload-images.jianshu.io/upload_images/9724079-98e8da21451f7a88.png">https://upload-images.jianshu.io/upload_images/9724079-98e8da21451f7a88.png</a></p><p>简单文本弹窗</p><p><strong>2.setItems()  设置文本框内容为简单列表项</strong></p><blockquote><p>finalString [] Items = {“google”,”twitter”,”line”,”QQ”,”weixin”};</p><p>builder.setItems(Items, null);</p></blockquote><p><a href="https://upload-images.jianshu.io/upload_images/9724079-e5e61ba0aa6ccdb6.png">https://upload-images.jianshu.io/upload_images/9724079-e5e61ba0aa6ccdb6.png</a></p><p>简单列表项弹窗</p><p><strong>3.setSingleChoiceItems()   设置对话框内容为单选列表项</strong></p><blockquote><p>finalString [] Items = {“google”,”twitter”,”line”,”QQ”,”weixin”};</p><p>builder.setSingleChoiceItems(Items, 0,null);        //0 为默认选中哪个</p></blockquote><p><a href="https://upload-images.jianshu.io/upload_images/9724079-27a69dc9adfa9cba.png">https://upload-images.jianshu.io/upload_images/9724079-27a69dc9adfa9cba.png</a></p><p>单选列表项弹窗</p><p><strong>4.setMultiChoiceItems()  设置对话框内容为多选项列表</strong></p><blockquote><p>finalString [] Items = {“google”,”twitter”,”line”,”QQ”,”weixin”};</p><p>builder.setMultiChoiceItems(Items, new boolean[]{true, false, false, false, false},null); //设置一个数组代表是否勾选</p></blockquote><p><a href="https://upload-images.jianshu.io/upload_images/9724079-6838f7c6c7d7eb0d.png">https://upload-images.jianshu.io/upload_images/9724079-6838f7c6c7d7eb0d.png</a></p><p>多选列表项弹窗</p><p><strong>5.setAdapter()   设置对话框内容为自定义列表项</strong></p><blockquote><p>finalString [] Items = {“google”,”twitter”,”line”,”QQ”,”weixin”};</p><p>builder.setAdapter(newArrayAdapter(MainActivity.this,android.R.layout.activity_list_item,android.R.id.text1,Items),null);//此处涉及到系统自带布局和自定义布局，以后详述，此处使用系统自带布局activity_list_item为一个列表布局）</p></blockquote><p><a href="https://upload-images.jianshu.io/upload_images/9724079-0215d85ceea3059a.png">https://upload-images.jianshu.io/upload_images/9724079-0215d85ceea3059a.png</a></p><p>自定义列表项弹窗</p><p><strong>6.setView()  设置对话框为自定义View</strong></p><blockquote><p>Viewview =View.inflate(MainActivity.this,R.layout.login,null);</p><p>builder.setView(view);</p></blockquote><p><a href="https://upload-images.jianshu.io/upload_images/9724079-662b1a888760dd8c.png">https://upload-images.jianshu.io/upload_images/9724079-662b1a888760dd8c.png</a></p><p>自定义View弹窗                                        </p><h5 id="调用setPositiveButton、setNegativeButton、setNeutralButton设置多个按钮"><a href="#调用setPositiveButton、setNegativeButton、setNeutralButton设置多个按钮" class="headerlink" title="调用setPositiveButton、setNegativeButton、setNeutralButton设置多个按钮"></a>调用setPositiveButton、setNegativeButton、setNeutralButton设置多个按钮</h5><p>三个按钮跟普通按钮没有什么区别，只是名字有不同，从上到下分别代表确定，否定，和中立</p><blockquote><p>builder.setPositiveButton(“确定”, null);</p><p>builder.setNegativeButton(“取消”, null);</p><p>builder.setNeutralButton(“跳过”,null);</p></blockquote><h5 id="调用Builder对象的create-方法创建AlertDialog对象"><a href="#调用Builder对象的create-方法创建AlertDialog对象" class="headerlink" title="调用Builder对象的create()方法创建AlertDialog对象"></a>调用Builder对象的create()方法创建AlertDialog对象</h5><blockquote><p>builder.create();</p></blockquote><h5 id="调用AlertDialog对象的show-方法将对话框显示出来"><a href="#调用AlertDialog对象的show-方法将对话框显示出来" class="headerlink" title="调用AlertDialog对象的show()方法将对话框显示出来"></a>调用AlertDialog对象的show()方法将对话框显示出来</h5><blockquote><p>builder.show();</p></blockquote><p>链接: <a href="https://www.jianshu.com/p/d3874b8e3ee5">https://www.jianshu.com/p/d3874b8e3ee5</a></p><h3 id="ProgressBar与ProgressDialog"><a href="#ProgressBar与ProgressDialog" class="headerlink" title="ProgressBar与ProgressDialog"></a>ProgressBar与ProgressDialog</h3><h4 id="ProgressBar"><a href="#ProgressBar" class="headerlink" title="ProgressBar"></a>ProgressBar</h4><p>ProgressBar是Android下的进度条，也是为数不多的直接继承于View类的控件,直接子类有AbsSeekBar和ContentLoadingProgressBar，其中AbsSeekBar的子类有SeekBar和RatingBar</p><h5 id="ProgressBar的使用注意"><a href="#ProgressBar的使用注意" class="headerlink" title="ProgressBar的使用注意:"></a>ProgressBar的使用注意:</h5><ul><li>1、ProgressBar有两个进度，一个是android:progress，另一个是android:secondaryProgress。后者主要是为缓存需要所涉及的，比如在看网络视频时候都会有一个缓存的进度条以及还要一个播放的进度，在这里缓存的进度就可以是android:secondaryProgress，而播放进度就是android:progress。</li><li>2、ProgressBar分为确定的和不确定的，上面说的播放进度、缓存等就是确定的。相反地，不确定的就是不清楚、不确定一个操作需要多长时间来完成，这个时候就需要用的不确定的ProgressBar了。这个是由属性android:indeterminate来控制的，如果设置为true的话，那么ProgressBar就可能是圆形的滚动条或者水平的滚动条（由样式决定）。默认情况下，如果是水平进度条，那么就是确定的。</li><li>3、ProgressBar的样式设定其实有两种方式，在API文档中说明的方式如下: <ul><li>Widget.ProgressBar.Horizontal</li><li>Widget.ProgressBar.Small</li><li>Widget.ProgressBar.Large</li><li>Widget.ProgressBar.Inverse</li><li>Widget.ProgressBar.Small.Inverse</li><li>Widget.ProgressBar.Large.Inverse</li></ul></li></ul><p>使用的时候可以这样: style=”@android:style/Widget.ProgressBar.Small”。另外还有一种方式就是使用系统的attr，上面的方式是系统的style: </p><ul><li>style=”?android:attr/progressBarStyle”</li><li>style=”?android:attr/progressBarStyleHorizontal”</li><li>style=”?android:attr/progressBarStyleInverse”</li><li>style=”?android:attr/progressBarStyleLarge”</li><li>style=”?android:attr/progressBarStyleLargeInverse”</li><li>style=”?android:attr/progressBarStyleSmall”</li><li>style=”?android:attr/progressBarStyleSmallInverse”</li><li>style=”?android:attr/progressBarStyleSmallTitle”</li></ul><h5 id="ProgressBar几种比较常用的属性"><a href="#ProgressBar几种比较常用的属性" class="headerlink" title="ProgressBar几种比较常用的属性:"></a>ProgressBar几种比较常用的属性:</h5><p>布局中设置: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">android:progress=<span class="string">&quot;50&quot;</span>——第一显示进度</span><br><span class="line">android:secondaryProgress=<span class="string">&quot;80&quot;</span>——第二显示进度</span><br><span class="line">android:indeterminate=<span class="string">&quot;true&quot;</span>——设置是否精确显示，<span class="literal">true</span>表示不精确显示进度，<span class="literal">false</span>表示精确显示进度</span><br></pre></td></tr></table></figure><p>使用Java代码设置: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">setProgress(<span class="keyword">int</span>) <span class="comment">//设置第一进度</span></span><br><span class="line">setSecondaryProgress(<span class="keyword">int</span>) <span class="comment">//设置第二进度</span></span><br><span class="line">getProgress() <span class="comment">//获取第一进度</span></span><br><span class="line">getSecondaryProgress() <span class="comment">//获取第二进度</span></span><br><span class="line">incrementProgressBy(<span class="keyword">int</span>) <span class="comment">//增加或减少第一进度</span></span><br><span class="line">incrementSecondaryProgressBy(<span class="keyword">int</span>) <span class="comment">//增加或减少第二进度</span></span><br><span class="line">getMax() <span class="comment">//获取最大进度</span></span><br></pre></td></tr></table></figure><h5 id="ProgressBar常见的几种样式"><a href="#ProgressBar常见的几种样式" class="headerlink" title="ProgressBar常见的几种样式"></a>ProgressBar常见的几种样式</h5><ul><li>横向progressBarStyleHorizontal</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="type">ProgressBar</span></span><br><span class="line">        style=<span class="string">&quot;?android:attr/progressBarStyleHorizontal&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;240dp&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_gravity=<span class="string">&quot;center_horizontal&quot;</span></span><br><span class="line">        android:layout_marginTop=<span class="string">&quot;10dp&quot;</span></span><br><span class="line">        android:<span class="built_in">max</span>=<span class="string">&quot;100&quot;</span></span><br><span class="line">        android:progress=<span class="string">&quot;50&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p>效果图:</p><p><a href="https://upload-images.jianshu.io/upload_images/8077710-64c9683e319a801a.png">https://upload-images.jianshu.io/upload_images/8077710-64c9683e319a801a.png</a></p><ul><li>横向Widget.ProgressBar.Horizontal</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="type">ProgressBar</span></span><br><span class="line">        style=<span class="string">&quot;@android:style/Widget.ProgressBar.Horizontal&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;240dp&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_gravity=<span class="string">&quot;center_horizontal&quot;</span></span><br><span class="line">        android:layout_marginTop=<span class="string">&quot;10dp&quot;</span></span><br><span class="line">        android:<span class="built_in">max</span>=<span class="string">&quot;100&quot;</span></span><br><span class="line">        android:progress=<span class="string">&quot;50&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p>效果图:</p><p><a href="https://upload-images.jianshu.io/upload_images/8077710-7e11fecb254949e5.png">https://upload-images.jianshu.io/upload_images/8077710-7e11fecb254949e5.png</a></p><ul><li>圆形:progressBarStyleLarge</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;ProgressBar</span><br><span class="line">        android:layout_gravity=<span class="string">&quot;center_horizontal&quot;</span></span><br><span class="line">        android:layout_marginTop=<span class="string">&quot;10dp&quot;</span></span><br><span class="line">        android:<span class="keyword">id</span>=<span class="string">&quot;@+id/progressBar1&quot;</span></span><br><span class="line">        style=<span class="string">&quot;?android:attr/progressBarStyleLarge&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">         /&gt;</span><br></pre></td></tr></table></figure><p>效果图:</p><p><a href="https://upload-images.jianshu.io/upload_images/8077710-85316f164892ab66.png">https://upload-images.jianshu.io/upload_images/8077710-85316f164892ab66.png</a></p><ul><li>圆形:普通</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;ProgressBar</span><br><span class="line">       android:layout_marginTop=<span class="string">&quot;10dp&quot;</span></span><br><span class="line">       android:<span class="keyword">id</span>=<span class="string">&quot;@+id/progressBar2&quot;</span></span><br><span class="line">       android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">       android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        /&gt;</span><br></pre></td></tr></table></figure><p>效果图:</p><p><a href="https://upload-images.jianshu.io/upload_images/8077710-99788da628dd73d9.png">https://upload-images.jianshu.io/upload_images/8077710-99788da628dd73d9.png</a></p><ul><li>圆形:progressBarStyleSmall</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;ProgressBar</span><br><span class="line">        android:layout_marginTop=<span class="string">&quot;10dp&quot;</span></span><br><span class="line">        android:layout_gravity=<span class="string">&quot;center_horizontal&quot;</span></span><br><span class="line">        android:<span class="keyword">id</span>=<span class="string">&quot;@+id/progressBar3&quot;</span></span><br><span class="line">        style=<span class="string">&quot;?android:attr/progressBarStyleSmall&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">         /&gt;</span><br></pre></td></tr></table></figure><p>效果图:</p><p><a href="https://upload-images.jianshu.io/upload_images/8077710-15f5cdfbcb9bd6f0.png">https://upload-images.jianshu.io/upload_images/8077710-15f5cdfbcb9bd6f0.png</a></p><h6 id="自定义进度条修改进度的颜色"><a href="#自定义进度条修改进度的颜色" class="headerlink" title="自定义进度条修改进度的颜色"></a>自定义进度条修改进度的颜色</h6><p>在布局文件中的style属性就是设置进度条样式的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ProgressBar</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;?android:attr/progressBarStyleHorizontal&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>实际上面的背景文件是位于@android:style/Widget.ProgressBar.Horizontal，既上面的布局可以写成</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ProgressBar</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;@android:style/Widget.ProgressBar.Horizontal&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>查看系统中的水平进度条风格文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;Widget.ProgressBar.Horizontal&quot;</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;indeterminateOnly&quot;</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;progressDrawable&quot;</span>&gt;</span>@drawable/progress_horizontal<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;indeterminateDrawable&quot;</span>&gt;</span>@drawable/progress_indeterminate_horizontal<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;minHeight&quot;</span>&gt;</span>20dip<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;maxHeight&quot;</span>&gt;</span>20dip<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;mirrorForRtl&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的android:progressDrawable属性是设置进度条背景，进入查看</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Copyright (C) 2008 The Android Open Source Project</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">     you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">     You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">          http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">     distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">     See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">     limitations under the License.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">layer-list</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">&quot;@android:id/background&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shape</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">&quot;5dip&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">gradient</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:startColor</span>=<span class="string">&quot;#ff9d9e9d&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:centerColor</span>=<span class="string">&quot;#ff5a5d5a&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:centerY</span>=<span class="string">&quot;0.75&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:endColor</span>=<span class="string">&quot;#ff747674&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:angle</span>=<span class="string">&quot;270&quot;</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">&quot;@android:id/secondaryProgress&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">clip</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">shape</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">&quot;5dip&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">gradient</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">android:startColor</span>=<span class="string">&quot;#80ffd300&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">android:centerColor</span>=<span class="string">&quot;#80ffb600&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">android:centerY</span>=<span class="string">&quot;0.75&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">android:endColor</span>=<span class="string">&quot;#a0ffcb00&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">android:angle</span>=<span class="string">&quot;270&quot;</span></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">clip</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">&quot;@android:id/progress&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">clip</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">shape</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">&quot;5dip&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">gradient</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">android:startColor</span>=<span class="string">&quot;#ffffd300&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">android:centerColor</span>=<span class="string">&quot;#ffffb600&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">android:centerY</span>=<span class="string">&quot;0.75&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">android:endColor</span>=<span class="string">&quot;#ffffcb00&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">android:angle</span>=<span class="string">&quot;270&quot;</span></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">clip</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">layer-list</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，上面文件中的3个item标签分别是设置: 进度条、第二进度条、第一进度条的背景色。这里我们在drawable文件夹下新建一个pb_pd_sp_blog.xml文件，将上面的代码复制进来，并修改背景色。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layer-list</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span> &gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 进度条背景色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">&quot;@android:id/background&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shape</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">&quot;5dip&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">gradient</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:startColor</span>=<span class="string">&quot;#ff9d9e9d&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:centerColor</span>=<span class="string">&quot;#ff5a5d5a&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:centerY</span>=<span class="string">&quot;0.75&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:endColor</span>=<span class="string">&quot;#ff747674&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:angle</span>=<span class="string">&quot;270&quot;</span></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 第二进度条 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">&quot;@android:id/secondaryProgress&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">clip</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">shape</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">&quot;5dip&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">gradient</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:startColor</span>=<span class="string">&quot;#b9a4ff&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:centerColor</span>=<span class="string">&quot;#c6b7ff&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:centerY</span>=<span class="string">&quot;0.75&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:endColor</span>=<span class="string">&quot;#c3b2ff&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:angle</span>=<span class="string">&quot;270&quot;</span></span></span><br><span class="line"><span class="tag">                    /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">clip</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 第二进度条 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">&quot;@android:id/progress&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">clip</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">shape</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">&quot;5dip&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">gradient</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:startColor</span>=<span class="string">&quot;#57e8ff&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:centerColor</span>=<span class="string">&quot;#74ebff&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:centerY</span>=<span class="string">&quot;0.75&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:endColor</span>=<span class="string">&quot;#8eefff&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:angle</span>=<span class="string">&quot;270&quot;</span></span></span><br><span class="line"><span class="tag">                    /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">clip</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layer-list</span>&gt;</span></span><br></pre></td></tr></table></figure><p>https:////upload-images.jianshu.io/upload_images/8077710-577bc82764f7413e.png</p><h6 id="自定义进度条多种属性"><a href="#自定义进度条多种属性" class="headerlink" title="自定义进度条多种属性"></a>自定义进度条多种属性</h6><p>我们不但可以修改进度的颜色,也可以修改其他属性我们可以自定义实现如下效果<br> 布局中的属性设置</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="type">ProgressBar</span></span><br><span class="line">        style=<span class="string">&quot;@android:style/Widget.ProgressBar.Horizontal&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;240dp&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_gravity=<span class="string">&quot;center_horizontal&quot;</span></span><br><span class="line">        android:layout_marginTop=<span class="string">&quot;10dp&quot;</span></span><br><span class="line">        android:<span class="built_in">max</span>=<span class="string">&quot;100&quot;</span></span><br><span class="line">        android:progress=<span class="string">&quot;100&quot;</span></span><br><span class="line">        android:maxHeight=<span class="string">&quot;12dp&quot;</span></span><br><span class="line">        android:minHeight=<span class="string">&quot;12dp&quot;</span></span><br><span class="line">        android:progressDrawable=<span class="string">&quot;@drawable/pb_pd_sp_download&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p>drawable文件夹下的pb_pd_sp_downloadxml定义</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layer-list</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span> &gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 进度条背景色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">&quot;@android:id/background&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shape</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">&quot;6dp&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">solid</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:color</span>=<span class="string">&quot;@color/c_ffffff&quot;</span></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">size</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:height</span>=<span class="string">&quot;12dp&quot;</span></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">stroke</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:width</span>=<span class="string">&quot;2dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:color</span>=<span class="string">&quot;@color/c_c4e9ff&quot;</span></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- &lt;gradient</span></span><br><span class="line"><span class="comment">                android:startColor=&quot;#ff9d9e9d&quot;</span></span><br><span class="line"><span class="comment">                android:centerColor=&quot;#ff5a5d5a&quot;</span></span><br><span class="line"><span class="comment">                android:centerY=&quot;0.75&quot;</span></span><br><span class="line"><span class="comment">                android:endColor=&quot;#ff747674&quot;</span></span><br><span class="line"><span class="comment">                android:angle=&quot;270&quot;</span></span><br><span class="line"><span class="comment">                /&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 第二进度条 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">&quot;@android:id/secondaryProgress&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">clip</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">shape</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">&quot;6dp&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">gradient</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:startColor</span>=<span class="string">&quot;#b9a4ff&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:centerColor</span>=<span class="string">&quot;#c6b7ff&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:centerY</span>=<span class="string">&quot;0.75&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:endColor</span>=<span class="string">&quot;#c3b2ff&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:angle</span>=<span class="string">&quot;270&quot;</span></span></span><br><span class="line"><span class="tag">                    /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">size</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:height</span>=<span class="string">&quot;12dp&quot;</span></span></span><br><span class="line"><span class="tag">                    /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">clip</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 第一进度条 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">&quot;@android:id/progress&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">clip</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">shape</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">&quot;6dp&quot;</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--&lt;solid</span></span><br><span class="line"><span class="comment">                    android:color=&quot;@color/c_0061dd&quot;</span></span><br><span class="line"><span class="comment">                    /&gt;--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">gradient</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:startColor</span>=<span class="string">&quot;@color/c_5cacff&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:centerColor</span>=<span class="string">&quot;@color/c_0061dd&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:endColor</span>=<span class="string">&quot;@color/c_0061dd&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:angle</span>=<span class="string">&quot;45&quot;</span></span></span><br><span class="line"><span class="tag">                    /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">size</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:height</span>=<span class="string">&quot;12dp&quot;</span></span></span><br><span class="line"><span class="tag">                    /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">stroke</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:width</span>=<span class="string">&quot;2dp&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:color</span>=<span class="string">&quot;@android:color/transparent&quot;</span></span></span><br><span class="line"><span class="tag">                    /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--&lt;gradient</span></span><br><span class="line"><span class="comment">                    android:startColor=&quot;#57e8ff&quot;</span></span><br><span class="line"><span class="comment">                    android:centerColor=&quot;#74ebff&quot;</span></span><br><span class="line"><span class="comment">                    android:centerY=&quot;0.75&quot;</span></span><br><span class="line"><span class="comment">                    android:endColor=&quot;#8eefff&quot;</span></span><br><span class="line"><span class="comment">                    android:angle=&quot;270&quot;</span></span><br><span class="line"><span class="comment">                    /&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">clip</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layer-list</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果图:</p><p><a href="https://upload-images.jianshu.io/upload_images/8077710-e7863485c7666ac9.png">https://upload-images.jianshu.io/upload_images/8077710-e7863485c7666ac9.png</a><br>链接: <a href="https://www.jianshu.com/p/f613571addb5">https://www.jianshu.com/p/f613571addb5</a></p><h4 id="ProgressDialog"><a href="#ProgressDialog" class="headerlink" title="ProgressDialog"></a>ProgressDialog</h4><p>ProgressDialog的创建方式有两种，一种是new ProgressDialog，一种是调用ProgressDialog的静态方法show()创建并显示，这种进度条只能是圆形条。</p><p><a href="https://upload-images.jianshu.io/upload_images/11881598-4513061544a34ed3.png">https://upload-images.jianshu.io/upload_images/11881598-4513061544a34ed3.png</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ProgressDialog dialog = ProgressDialog.show(<span class="keyword">this</span>, <span class="string">&quot;提示&quot;</span>, <span class="string">&quot;正在登陆中…&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><h5 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h5><ul><li><p>setProgressStyle: 设置进度条风格，风格为圆形，旋转的。</p></li><li><p>setTitlt: 设置标题</p></li><li><p>setMessage: 设置提示信息；</p></li><li><p>setIcon: 设置标题图标；</p></li><li><p>setIndeterminate: 设置ProgressDialog 的进度条是否不明确；这个属性对于ProgressDailog默认的转轮模式没有实际意义，默认下设置为true，它仅仅对带有ProgressBar的Dialog有作用。修改这个属性为false后可以实时更新进度条的进度。</p></li><li><p>setCancelable: 设置ProgressDialog 是否可以按返回键取消；</p></li><li><p>cancelListner:当前Dialog强制取消之后将会被执行，通常用来清理未完成的任务。</p></li><li><p>setButton: 设置ProgressDialog 的一个Button（需要监听Button事件）；</p></li><li><p>show: 显示ProgressDialog。</p></li><li><p>cancel: 删除progressdialog</p></li><li><p>dismiss:  删除progressdialog 作用和cancel相同</p></li><li><p>setMax(int)、getMax: 设置最大进度条的值</p></li><li><p>setProgress(int)、getProgress: 更新进度条，当然一般都需要Handler的结合来更新进度条</p></li><li><p>incrementProgressBy(int)增加进度条</p></li><li><p>setProgressDrawable: 设置progress发生变化时的进度指示条的背景图</p></li></ul><p>链接: <a href="https://www.jianshu.com/p/a9855cdc4712">https://www.jianshu.com/p/a9855cdc4712</a></p><h4 id="延伸-自定义Dialog"><a href="#延伸-自定义Dialog" class="headerlink" title="延伸: 自定义Dialog"></a>延伸: 自定义Dialog</h4><p><a href="https://blog.csdn.net/sakurakider/article/details/80735400">https://blog.csdn.net/sakurakider/article/details/80735400</a></p><h4 id="PopupWindow"><a href="#PopupWindow" class="headerlink" title="PopupWindow"></a>PopupWindow</h4><h5 id="PopupWindow的相关函数"><a href="#PopupWindow的相关函数" class="headerlink" title="PopupWindow的相关函数"></a>PopupWindow的相关函数</h5><h6 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数:"></a>构造函数:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法一: </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PopupWindow</span> <span class="params">(Context context)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//方法二: </span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PopupWindow</span><span class="params">(View contentView)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//方法三: </span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PopupWindow</span><span class="params">(View contentView, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//方法四: </span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PopupWindow</span><span class="params">(View contentView, <span class="keyword">int</span> width, <span class="keyword">int</span> height, <span class="keyword">boolean</span> focusable)</span></span></span><br></pre></td></tr></table></figure><p>首要注意: 看这里有四个构造函数，但要生成一个PopupWindow最基本的三个条件是一定要设置的: View contentView，int width, int height ；少任意一个就不可能弹出来PopupWindow！！！！</p><p>所以，如果使用方法一来构造PopupWindow，那完整的构造代码应该是这样的: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">View contentView = LayoutInflater.from(MainActivity.<span class="keyword">this</span>).inflate(R.layout.popuplayout, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">PopupWindwo popWnd = PopupWindow (context);</span><br><span class="line"></span><br><span class="line">popWnd.setContentView(contentView);</span><br><span class="line"></span><br><span class="line">popWnd.setWidth(ViewGroup.LayoutParams.WRAP_CONTENT);</span><br><span class="line"></span><br><span class="line">popWnd.setHeight(ViewGroup.LayoutParams.WRAP_CONTENT);</span><br></pre></td></tr></table></figure><p>有关为什么一定要设置width和height的原因，我们后面会讲，这里说一下为什么样强制设置contentView；很简单的原因是因为PopupWindow没有默认布局，它不会像AlertDialog那样只setTitle,就能弹出来一个框。PopupWindow是没有默认布局的，它的布局只有通过我们自己设置才行。由于方法三中，含有了这三个必备条件，不用单独设置contentview或者width、height，所以构造方法三是用的最多的一个构造方法。<br>最后，方法四中的focusable变量不是必须的，有关它的方法和意义，我们会在下一篇中细讲。</p><h6 id="显示函数"><a href="#显示函数" class="headerlink" title="显示函数"></a>显示函数</h6><p>显示函数主要使用下面三个: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//相对某个控件的位置（正左下方），无偏移</span></span><br><span class="line">showAsDropDown(View anchor): </span><br><span class="line"></span><br><span class="line"><span class="comment">//相对某个控件的位置，有偏移;xoff表示x轴的偏移，正值表示向左，负值表示向右；yoff表示相对y轴的偏移，正值是向下，负值是向上；</span></span><br><span class="line">showAsDropDown(View anchor, <span class="keyword">int</span> xoff, <span class="keyword">int</span> yoff): </span><br><span class="line"></span><br><span class="line"><span class="comment">//相对于父控件的位置（例如正中央Gravity.CENTER，下方Gravity.BOTTOM等），可以设置偏移或无偏移</span></span><br><span class="line">showAtLocation(View parent, <span class="keyword">int</span> gravity, <span class="keyword">int</span> x, <span class="keyword">int</span> y): </span><br></pre></td></tr></table></figure><p>这里有两种显示方式:<br>1、显示在某个指定控件的下方<br>showAsDropDown(View anchor):<br>showAsDropDown(View anchor, int xoff, int yoff)；<br>2、指定父视图，显示在父控件的某个位置（Gravity.TOP,Gravity.RIGHT等）<br>showAtLocation(View parent, int gravity, int x, int y)；</p><h6 id="其它函数"><a href="#其它函数" class="headerlink" title="其它函数"></a>其它函数</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dismiss</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//另外几个函数，这里不讲其意义，下篇细讲</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFocusable</span><span class="params">(<span class="keyword">boolean</span> focusable)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTouchable</span><span class="params">(<span class="keyword">boolean</span> touchable)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOutsideTouchable</span><span class="params">(<span class="keyword">boolean</span> touchable)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBackgroundDrawable</span><span class="params">(Drawable background)</span></span></span><br></pre></td></tr></table></figure><p>这几个函数里，这篇只会用到dismiss()，用于不需要的时候，将窗体隐藏掉。</p><h2 id="基本组件"><a href="#基本组件" class="headerlink" title="基本组件"></a>基本组件</h2><h3 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h3><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><h5 id="典型情况下生命周期"><a href="#典型情况下生命周期" class="headerlink" title="典型情况下生命周期"></a>典型情况下生命周期</h5><p><a href="https://img-blog.csdn.net/20180610102358370">https://img-blog.csdn.net/20180610102358370</a></p><p>（1）onCreate: 表示Activity正在被创建，做一些初始化动作，只在创建时调用一次。<br>（2）onStart: 表示Activity正在被启动，这时Activity已经可见，但不在前台，用户看不到也无法交互。<br>（3）onResume: 表示Activity已经可见，并出现在前台开始活动。<br>（4）onPause: 表示Activity正在停止，做一些快速的轻量级回收任务。因为新Activity的onResume方法要等当前Activity的onPause方法调用之后才会调用。此时用户回到原Activity的话，onResume方法会被调用，但在onPause方法停留时间极短，用户很难重现这一场景。当前Activity被部分遮挡时，如弹出一个弹窗，onPause方法被调用，onStop方法不被调用（这一情况经验证，没有看到onPause被调用）。<br>（5）onStop: 表示Activity即将停止，做一些快速的轻量级回收任务。Activity采用透明主题时，onStop方法不会被调用。<br>（6）onDestroy: 表示Activity即将被销毁，做一些回收工作和最终的资源释放，只调用一次。<br>（7）onRestart: 表示Activity正在重新启动，一般是在Activity从不可见变为可见时调用。区别于onStart方法，否则不能知道是正常流程还是从onPause方法恢复的。一般是用户行为导致的，如按Home键返回桌面，或者打开了一个新的Activity，然后又切换回原来的Activity。</p><p>（1）运行状态<br>当一个活动处于返回栈栈顶时，它就处于运行状态。极端情况下系统才会回收这种状态的活动，因为回收运行状态的活动，将会带来极差的用户体验。<br>（2）暂停状态<br>当一个活动不处于栈顶，且部分可见时（如在它之上有一个对话框显示），它处于暂停状态。一般情况下系统也是不愿意回收暂停状态的活动的，因为它仍旧部分可见，回收它，也会造成极差的用户体验。<br>（3）停止状态<br>当一个活动不处于栈顶，且完全不可见时，进入停止状态。这时系统仍然会为这种活动保存相应的状态和成员变量，但这是不安全的，因为当需要内存时，暂停状态的活动随时可能被回收。<br>（4）销毁状态<br>　　当一个活动被移除返回栈后，它就进入了销毁状态。系统最倾向于回收这种状态的活动，以保证内存充足。</p><p>（1）完整生存期<br>活动在onCreate()到onDestroy()方法之间所经历的，就是完整生存期。一般情况下，一个活动会在onCreate()方法中完成各种初始化操作，在onDestroy()方法中完成释放内存的操作。<br>（2）可见生存期<br>活动在onStart()方法和onStop()方法之间所经历的，就是可见生存期。在可见生存期内，活动对于用户总是可见的，即使有可能无法和用户交互。我们可以通过这两个方法，合理地管理那些对用户可见的资源，如在onStart()方法中对资源进行加载，在onStop()方法中，对资源进行释放，从而保证处于停止状态的活动不会占用过多内存。<br>（3）前台生存期<br>活动在onResume()到onPause()之间的所经历的，就是前台生存期。在前台生存期内，活动总是处于运行状态，是可以与用户交互的。</p><p>standard模式正常回调过程:<br>onCreate –&gt; onStart –&gt; onResume –&gt; Activity运行 –&gt; onPause –&gt; onStop –&gt; onDestroy</p><p>onCreat-onDestroy对:<br>在Activity创建和销毁时调用，只调用一次。</p><p>onStart-onStop对:<br>可见不在前台时调用onStart方法，不可见且不在前台时调用onStop方法。随着用户操作或者屏幕亮灭，这两个方法可能会被多次调用。在onStop状态，让Activity重新回到前台，如果应用没有因为内存不足被杀死，那么调用<br>onRestart-&gt; onStart-&gt;onResume-&gt;Activity运行。如果应用进程被系统杀死了，那么要从onCreate方法重新开始。</p><p>onResume-onPause对:<br>可见且在前台时调onResume方法，可见不在前台时调onPause方法。随着用户操作或者屏幕亮灭，这两个方法可能会被多次调用。在onPause状态，让Activity重新回到前台，那么只调用onResume方法，即onResume-&gt;Activity运行。</p><p>惯性:<br>onCreate-&gt;onStart-&gt;onResume-&gt;Activity运行，会按顺序执行到Activity运行。停止时会执行onPause-&gt;onStop，onDestroy方法用户操作时调用。（questionNo: onDestroy方法在结束进程时会调用吗？是惯性到onDestroy吗？answer: 手动结束应用进程时，会onPause-&gt;onStop，但不会调用onDestroy方法。 ）</p><p>详情: <a href="https://blog.csdn.net/hystudio_lzu/article/details/80629571">https://blog.csdn.net/hystudio_lzu/article/details/80629571</a></p><h3 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h3><h4 id="Fragement-概述"><a href="#Fragement-概述" class="headerlink" title="Fragement 概述"></a>Fragement 概述</h4><p>Fragement 与 Activity 生命周期关系 : Fragement 嵌入到 Activity 组件中才可以使用, 其生命周期与 Activity 生命周期相关.</p><p>stop 与 destroy 状态 : Activity 暂停 或者 销毁的时候, 其内部嵌入的所有的 Fragement 也会执行 暂停 或者 销毁 操作;</p><p>活动状态: 只有当 Activity 处于活动状态的时候, 我们才能操作 Fragement;</p><p>Fragement 特征 : </p><ul><li><p>Fragement 与 Activity 交互 : Fragement 调用 getActivity() 获取其 所嵌入的 Activity, Activity 获取 FragementManager 的findFragementById() 或 findFragementByTag() 获取 Fragement;</p></li><li><p>Activity 增删 Fragement : Activity 调用 Fragement 的 add(), remove(), replace() 等方法 添加 删除 替换 Fragement;</p></li><li><p>Fragement 与 Activity 对应关系 : 一个 Activity 中可以嵌入多个 Fragement, 一个 Fragement 可以嵌入多个 Activity;</p></li></ul><p>-生命周期受 Activity 影响: Fragement 的生命周期 受 Activity 生命周期控制;</p><p>Fragement 作用 : Fragement 是为了 Android 中 平台电脑 UI 设计, 开发者不用设计 非常负责的 界面, 只需要设计好模块, 对UI 组件进行分组和 模块化的设计和开发, 简化了 UI 组件;</p><p>Fragement 可复用性 : 同一个 app 应用, 可以在不同的 Activity 中加载同一个 Fragement;</p><h5 id="Fragement-类-和-方法介绍"><a href="#Fragement-类-和-方法介绍" class="headerlink" title="Fragement 类 和 方法介绍"></a>Fragement 类 和 方法介绍</h5><h6 id="Fragement-相关类介绍"><a href="#Fragement-相关类介绍" class="headerlink" title="Fragement 相关类介绍"></a>Fragement 相关类介绍</h6><p>Fragement 子类 : </p><p>DialogFragement : 对话框界面的 Fragement, 显示一个浮动的对话框, 这个对话框可以方便的与 Activity 进行交互, Activity 可以管理这个 Fragment;</p><ul><li><p>ListFragement : 列表界面的 Fragement, 显示一个条目列表, 该列表可以设置一个适配器, 提供了许多管理 列表的函数;</p></li><li><p>PerformanceFragement : 选项设置界面的 Fragement, 该Fragment 创建 类似与 设置 应用程序时很管用;</p></li><li><p>WebViewFragement : WebView 界面的 Fragement;</p></li></ul><h6 id="Fragement-生命周期相关方法介绍"><a href="#Fragement-生命周期相关方法介绍" class="headerlink" title="Fragement 生命周期相关方法介绍"></a>Fragement 生命周期相关方法介绍</h6><p>onCreate() :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onCreate(Bundle savedInstanceState) </span><br></pre></td></tr></table></figure><ul><li><p>回调时机 : 在创建 Fragement 的时候回调;</p></li><li><p>参数解析 : Bundle savedInstance, 用于保存 Fragment 参数 , Fragement 也可以 重写 onSaveInstanceState(Bundle outState) 方法, 保存Fragement状态;</p></li><li><p>执行的动作  : 获取 Frgement 显示的内容, 以及 启动Fragment 传入的参数 , 调用 getArguments() 获取键值对;</p></li></ul><p> onCreateView()  : </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState); </span><br></pre></td></tr></table></figure><ul><li><p>回调时机  : Fragement  绘制界面组件  的时候回调, 该方法返回 View, 这个View就是 Fragement 本身;</p></li><li><p>参数解析 : inflater 布局加载器, 是上下文传入, 不用自己创建; container 加载组件的父容器;</p></li><li><p>执行的操作  : 使用 inflate 布局加载器  加载布局文件, 并未组件设置显示的值 ;</p></li></ul><p> onPause()  : </p><ul><li>回调时机  : Fragement 暂停的时候, 即进入后台的时候 回调;</li></ul><h4 id="Fragment-创建"><a href="#Fragment-创建" class="headerlink" title="Fragment 创建"></a>Fragment 创建</h4><p> Fragment 创建  : </p><ul><li>参数准备  : 创建一个 Bundle 对象, 并向其中设置参数 : </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Bundle bundle &#x3D; new Bundle();  </span><br><span class="line">bundle.putString(&quot;key&quot;, &quot;value&quot;); </span><br></pre></td></tr></table></figure><ul><li>创建 Fragment 对象  : 使用 new MyFragment() 创建对象, 并 调用 myFragment.setArguments(bundle) 方法传入参数;</li></ul><ol><li>MyFragment myFragment = <strong>new</strong> MyFragment(); </li><li>myFragment.setArguments(bundle); </li></ol><p> Fragment嵌入Activity方式  : Fragment 添加到 Activity 中才能显示, 以下是将 Fragment 嵌入 Activity 的方式;</p><ul><li><p>布局文件嵌入  : 在布局文件中 使用 <Fragment /> 元素, 通过定义  android:name = “com.example.MyFragment”  属性指定 Fragment 类;</p></li><li><p>代码方式嵌入  : 调用 FragmentTransaction 对象的 add() 方法向 Activity 中添加 Fragment;</p></li></ul><h5 id="Fragment-与-Activity-通信"><a href="#Fragment-与-Activity-通信" class="headerlink" title="Fragment 与 Activity 通信"></a>Fragment 与 Activity 通信</h5><p> Fragment 获取 Activity  : 调用 Fragment 对象的 getActivity()方法, 即可获取 Fragment 嵌入的 Activity 对象;</p><p> Activity 获取 Fragment  : </p><ul><li><p>Fragment 属性  : 在布局文件中, 可以为 <Fragment /> 元素指定 android:id 和 android:tag 属性;</p></li><li><p>获取方法  : 调用 Activity 的 findFragmentById(int id) 或者 findFragmentByTag(String tag)方法;</p></li></ul><p> Fragment 向 Activity 传递数据  : 将 Activity 当作 接口子类对象 , Fragment 中调用 Activity 中的接口方法;</p><ul><li><p>Fragment 定义接口  : 在 Fragment 内部定义一个  Callback 接口 ;</p></li><li><p>Activity 实现该接口  : MyActivity extends Activity  implement MyFragment.Callback ;</p></li><li><p>Fragment 中获取该接口对象  : 在Fragment 中定义一个 Callback 全局变量, 然后在 onAttach(Activity activity) 方法中, 将 activity 强转为 Callback 对象 ; </p></li><li><p>调用接口方法  : 上面获取了 Callback 对象, 即Activity对象, 调用 Activity 中的  接口方法 , 就能在 Fragment 中调用 Activity 对应的方法了;</p></li></ul><p> Activity 向 Fragment 传递数据  : </p><ul><li><p>创建 Bundle 数据包  : 创建一个 Bundle 对象, 把要存放的键值对 放到这个对象中;</p></li><li><p>设置 Bundle 对象给 Fragment  : 调用 Fragment 对象的 setArguments(Bundle bundle) 方法, 将 Bundle 对象设置给 Fragment;</p></li></ul><h4 id="Fragment-事务管理"><a href="#Fragment-事务管理" class="headerlink" title="Fragment 事务管理"></a>Fragment 事务管理</h4><p> FragmentManager 功能  : FragmentManager 对象 可以通过 activity.getFragmentManager()获取;</p><ul><li><p>获取指定 Fragment  : 通过 findFragmentById() 或者 findFragmentByTag() 方法获取指定 Fragment;</p></li><li><p>弹出栈  : 通过调用 popBackStack(), 将 Fragment 从后台的 栈 中弹出;</p></li><li><p>监听栈  : 通过调用 addOnBackStackChangeListener 注册监听器, 监听 后台栈变化; </p></li></ul><p> FragmentTransaction 对象获取途径  : </p><ul><li><p>获取 FragmentManager 对象  : 调用 Activity 的  getFragmentManager()  获取 FragmentManager 对象;</p></li><li><p>获取 FragmentTansaction 对象  : 调用 FragmentManager 对象的  beginTransaction()  方法获取 FragmentTransaction 对象;</p></li></ul><p> FragmentTransaction(Fragment 事务)作用  : 对 Fragement 进行 增, 删 , 改 操作需要 FragmentTransaction 对象进行操作, 开启 这个事务, 获取 事务对象, 然后执行对 Fragment 的操作, 最后提交事务;</p><ul><li><p>开启事务  :  调用 Fragement 对象的  beginTransaction()  方法可以获取 FragementTransaction 对象;</p></li><li><p>操作碎片  :  FragmentTransaction 对象 中 包含了  add(), remove(), replace()  等方法;</p></li><li><p>提交操作  :  当执行完 Fragement 的操作之后, 可以调用 FragementTransaction 对象的  commit()  方法提交修改;</p></li></ul><p> addToBackStack()方法作用  : 该方法是 FragementTransaction 的方法, 在提交事务前调用该方法, 可以将 事务中执行的操作 添加到 back 栈中, 用户按下 回退键,  修改过的 Fragement 会 回退到 事务执行之前的状态 ;</p><h5 id="Fragment-生命周期"><a href="#Fragment-生命周期" class="headerlink" title="Fragment 生命周期"></a>Fragment 生命周期</h5><h6 id="Fragment-状态"><a href="#Fragment-状态" class="headerlink" title="Fragment 状态"></a>Fragment 状态</h6><p> 活动状态  : Fragment 处于前台,  可见 ,  可以获取焦点 ;</p><p> 暂停状态  : Fragment 嵌入的Activity 也处于暂停状态, 即 Fragment 处于后台,  可见 ,  失去焦点 ; </p><p> 停止状态  : Fragement 嵌入的 Activity 处于停止状态,  不可见 ,  失去焦点 ;</p><p> 销毁状态  : Fragement 所在的 Activity 被销毁, 执行了 onDestroy() 方法, 此时 Fragement 被 完全删除 ;</p><h6 id="Fragement-生命周期相关方法"><a href="#Fragement-生命周期相关方法" class="headerlink" title="Fragement 生命周期相关方法"></a>Fragement 生命周期相关方法</h6><p><a href="https://img-blog.csdn.net/20140802132139900">https://img-blog.csdn.net/20140802132139900</a></p><p> 红色方法  与 Activity 相对应,  蓝色方法  是 自身对应的方法,  棕色方法  单独对应;</p><p> onAttach()  : 嵌入, Fragement 被嵌入到 Activity 时回调该方法, 只会调用一次;</p><p> onCreate()  : 创建, Fragement 创建的时候回调该方法, 只会回调一次;</p><p> onCreateView()  : 绘制, 在 Fragement 绘制的时候回调该方法, 该方法会返回 绘制的 View 组件;</p><p> onActivityCreated()  : 界面创建, Fragement 所嵌入的 Activity 创建完成回调该方法;</p><p> onStart()  : 启动, Fragement 启动时回调, 此时Fragement可见;</p><p> onResume()  : 激活, Fragement 进入前台, 可获取焦点时激活;</p><p> onPause()  : 暂停, Fragement 进入后台, 不可获取焦点时激活;</p><p> onStop() : 停止, Fragement 不可见时回调;</p><p> onestroyView() : 销毁组件, 销毁 Fragement 绘制的 View 组件时回调;</p><p> onDestroy()  : 销毁, 销毁 Fragement 回调;</p><p> onDetach()  : 移除, Fragement 从 Activity 中移除的时候回调;</p><p><a href="https://blog.csdn.net/dai_zhenliang/article/details/38554273">https://blog.csdn.net/dai_zhenliang/article/details/38554273</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>那些年我看过的动漫</title>
      <link href="/posts/4e1c7631/"/>
      <url>/posts/4e1c7631/</url>
      
        <content type="html"><![CDATA[<p class='p center logo large'>那些年我看的动漫</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><div class="note quote"><p>动漫（Animation &amp; Comic），”动漫=动画+漫画”，即动画和漫画的合称，指动画与漫画的集合，取这两个词的第一个字合二为一称之为”动漫”，并非专业术语。  – 百度百科</p></div><p>还记得第一次看动漫的时候、因为初中时最爱游戏王卡牌、所以看的是游戏王ARC-V(当然之前可能还有、但是我不记得了😂)、当初没有手机、在2017年时买了网络机顶盒、从哪之后、开始在电视上追番。文章记录的是自己看过的动漫、目前还在更新的动漫没有算在内、并且会附上观看地址(如果有的话)。我的B站<a href="/bangumis/">追番</a> </p><h2 id="2017年之前"><a href="#2017年之前" class="headerlink" title="2017年之前"></a>2017年之前</h2><p>都忘记了。。。想起来会写上来的、到底有什么呢？ (疯狂回想。。。)</p><h2 id="2017年"><a href="#2017年" class="headerlink" title="2017年"></a>2017年</h2><h3 id="游戏王ARCV"><a href="#游戏王ARCV" class="headerlink" title="游戏王ARCV"></a>游戏王ARCV</h3><img src= "/img/loading.gif" data-lazy-src="https://www.tv-tokyo.co.jp/anime/yugioh-arcv/images/kv.jpg" height="300px"><div class="tabs" id="bangumi1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#bangumi1-1">动漫简介</button></li><li class="tab"><button type="button" data-href="#bangumi1-2">主要角色</button></li><li class="tab"><button type="button" data-href="#bangumi1-3">观感</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="bangumi1-1"><p>首播时间：2014-4-6<br>官网：<a href="https://www.tv-tokyo.co.jp/anime/yugioh-arcv/index2.html">https://www.tv-tokyo.co.jp/anime/yugioh-arcv/index2.html</a><br>制作：ぎゃろっぷ</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">舞台是在日本沿海岸的「舞网市」。决斗的技术在这里尤为突出地进步着。</span><br><span class="line"></span><br><span class="line">由赤马零儿担任社长的狮子公司。就在该公司所开发「拥有质量的立体幻象」的普及之下舞网市诞生了「动作决斗」，博得全世界的人气。</span><br><span class="line"></span><br><span class="line">孩子们向往身为明星的职业决斗者，到了主人公·榊游矢他们所上的「游胜塾」和行业巨头「LDS&#x2F;狮子决斗塾」这些大小不一各式各样的私塾就读，学习着召唤法和决斗风格等。</span><br><span class="line"></span><br><span class="line">就在那样的某日，游矢与职业决斗界的现役冠军会在表演赛来一战，可是……？</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bangumi1-2"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">榊游矢（Yuya Sakaki）: 小野贤章</span><br><span class="line">柊柚子（Yuzu Hiragi）: 稻村优奈</span><br><span class="line">赤马零儿（Reiji Akaba）: 细谷佳正</span><br><span class="line">泽渡慎吾（Shingo Sawatari）: 矢野奖吾</span><br><span class="line">紫云院素良（Sora Shiunin）: 园崎未惠</span><br><span class="line">黑咲隼（Syun Kurosaki）: 金城大和</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bangumi1-3"><p>这是我完整看完的第一个游戏王动漫、虽然每集的评价不高、但是还是一集一集的看完了、给我最大的感受就是新式的召唤方式：<br>灵摆召唤、以及用到了前四部的召唤方式(前面几部都是使用一种召唤方式)、个人当初看的时候还行</p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="超心动！艺术之星"><a href="#超心动！艺术之星" class="headerlink" title="超心动！艺术之星"></a>超心动！艺术之星</h3><p><a href="https://www.bilibili.com/bangumi/media/md5522/"><img src= "/img/loading.gif" data-lazy-src="http://www.magic-kyun.jp/img/top/keyv02e.png" height="300px"></a></p><div class="tabs" id="bangumi2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#bangumi2-1">动漫简介</button></li><li class="tab"><button type="button" data-href="#bangumi2-2">主要角色</button></li><li class="tab"><button type="button" data-href="#bangumi2-3">观感</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="bangumi2-1"><p>原创动画<br>首播时间：2016-10-02<br>官网：<a href="http://www.magic-kyun.jp/">http://www.magic-kyun.jp/</a><br>制作：SUNRISE<br>剧情类型：爱情 校园 歌舞 乙女向</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">艺术成为魔法的世界——。令人们感动的魔法艺术的使用者被称作“魔法艺术家”，并在演艺界等领域活跃。</span><br><span class="line"></span><br><span class="line">在具有魔法艺术家潜质之人集结的私立星之森魔法艺术高中，作为特例的转学生前来就读的“爱咲小花”。</span><br><span class="line"></span><br><span class="line">一转学就立刻被选拔为传统文化祭“星之森夏日祭”实行委员的小花，开始与以未来的艺人为目标的6位男生一同度过令人心跳的学园生活！</span><br><span class="line"></span><br><span class="line">她能否和专攻各类艺术的6名男生一起令“星祭”成功，并被选为一年一度的最优秀男女组合“魔法艺术家王子&amp;公主”呢？</span><br><span class="line"></span><br><span class="line">用魔法让你心动！由此开始的全新文艺复兴！</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bangumi2-2"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">爱咲小花 : 千本木彩花</span><br><span class="line">一条寺帝歌 : 梅原裕一郎</span><br><span class="line">墨之宫葵 : KENN</span><br><span class="line">带刀凛太郎 : 小野友树</span><br><span class="line">庵条瑠衣 : 羽多野涉</span><br><span class="line">土笔茂音 : 苍井翔太</span><br><span class="line">响奏音 : 江口拓也</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bangumi2-3"><p>这部动漫最让我印象深刻的是梅原裕一郎唱的英文歌、当初还因此下载了网易云</p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="清恋"><a href="#清恋" class="headerlink" title="清恋"></a>清恋</h3><p><a href="https://www.agefans.tv/detail/20170010"><img src= "/img/loading.gif" data-lazy-src="http://www.tbs.co.jp/anime/seiren/img/seiren_webtop.png" height="300px"></a></p><div class="tabs" id="bangumi3"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#bangumi3-1">动漫简介</button></li><li class="tab"><button type="button" data-href="#bangumi3-2">主要角色</button></li><li class="tab"><button type="button" data-href="#bangumi3-3">观感</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="bangumi3-1"><p>原创动画<br>首播时间：2017-01-05<br>官网：<a href="http://www.tbs.co.jp/anime/seiren/">http://www.tbs.co.jp/anime/seiren/</a><br>制作：Studio五組 / AXsiZ<br>剧情类型：爱情 校园 后宫</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">高中2年级的夏天。嘉味田正一由于志愿调查表的内容而被班主任叫出来，以此为契机开始感受到对于长大成人的不安。</span><br><span class="line"></span><br><span class="line">这样的他，与各种各样的女孩子相遇……他将会以怎样的未来为目标呢。奔向未来的等身大高中生与清廉可怜的女主角们的恋爱物语，现在开始！</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bangumi3-2"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">常木耀 : 佐仓绫音</span><br><span class="line">宫前透 : 下地紫野</span><br><span class="line">桃乃今日子 : 木村珠莉</span><br><span class="line">嘉味田正一 : 田丸笃志</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bangumi3-3"><p>那时候还不懂啥是美少女。。。再之后看了其他动漫之后才。。。</p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="风夏"><a href="#风夏" class="headerlink" title="风夏"></a>风夏</h3><p><a href="https://www.agefans.tv/detail/20170009"><img src= "/img/loading.gif" data-lazy-src="http://fuuka.tv/core_sys/images/main/top/t_main_img.png" height="300px"></a></p><div class="tabs" id="bangumi4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#bangumi4-1">动漫简介</button></li><li class="tab"><button type="button" data-href="#bangumi4-2">主要角色</button></li><li class="tab"><button type="button" data-href="#bangumi4-3">观感</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="bangumi4-1"><p>首播时间：2017-01-06<br>官网：<a href="http://fuuka.tv/">http://fuuka.tv/</a><br>制作：diomedéa<br>剧情类型：爱情 校园 歌舞</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">刚搬到东京来和三个姐妹一起生活的榛名优，是个性格内向消极、整天拿著手机不放的高中生。视手机如命的他因为种种意外而认识了个性活泼却有点古怪，</span><br><span class="line"></span><br><span class="line">而且居然没有手机的少女·秋月风夏。而另一方面，优在推特上与自己的儿时玩伴·当红歌手冰无小雪联系上了。小雪邀请优前来欣赏自己的演唱会，</span><br><span class="line"></span><br><span class="line">但是优却早已跟风夏约好要出去了。两女一男的三角关系，就此开始。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bangumi4-2"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">秋月风夏 : Lynn</span><br><span class="line">冰无小雪 : 早见沙织</span><br><span class="line">榛名优 : 小林裕介</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bangumi4-3"><p>这部动漫忘了差不多了</p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="Charlotte"><a href="#Charlotte" class="headerlink" title="Charlotte"></a>Charlotte</h3><p><a href="https://www.agefans.tv/detail/20170009"><img src= "/img/loading.gif" data-lazy-src="https://charlotte-anime.jp/assets/img/top/kv_02.jpg" height="300px"></a></p><div class="tabs" id="bangumi5"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#bangumi5-1">动漫简介</button></li><li class="tab"><button type="button" data-href="#bangumi5-2">主要角色</button></li><li class="tab"><button type="button" data-href="#bangumi5-3">观感</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="bangumi5-1"><p>原创动画<br>首播时间：2015-07-04<br>官网：<a href="https://charlotte-anime.jp/">https://charlotte-anime.jp/</a><br>制作：P.A.WORKS<br>剧情类型：爱情 校园 奇幻 治愈 搞笑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">乙坂有宇拥有着只在极少一部分的青春期少年少女身上诱发产生的罕见特殊能力，依靠</span><br><span class="line"></span><br><span class="line">这份能力度过着一帆风顺的学园生活的他，经由与神秘少女友利奈绪的邂逅，揭开了特殊能力者们身上的宿命。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bangumi5-2"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">乙坂有宇 : 内山昂辉</span><br><span class="line">友利奈绪 : 佐仓绫音</span><br><span class="line">高城丈士朗 : 水岛大宙 </span><br><span class="line">西森柚咲&amp;黑羽美砂 : 内田真礼</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bangumi5-3"><p>最大感受：男主在妹妹死后荒废的样子。。。</p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="食戟之灵"><a href="#食戟之灵" class="headerlink" title="食戟之灵"></a>食戟之灵</h3><p><a href="https://www.agefans.tv/detail/20170009"><img src= "/img/loading.gif" data-lazy-src="http://shokugekinosoma.com/core_sys/images/banner/00000006.jpg" height="300px"></a></p><div class="tabs" id="bangumi6"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#bangumi6-1">动漫简介</button></li><li class="tab"><button type="button" data-href="#bangumi6-2">主要角色</button></li><li class="tab"><button type="button" data-href="#bangumi6-3">观感</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="bangumi6-1"><p>首播时间：2015-04-03<br>官网：<a href="http://shokugekinosoma.com/">http://shokugekinosoma.com/</a><br>制作：J.C.STAFF<br>剧情类型：搞笑 校园 竞技 后宫</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">故事描述一个家中经营餐馆“幸平饭店”的中学生幸平创真，每天总是以料理人的父亲为</span><br><span class="line"></span><br><span class="line">目标，不断磨练自己的厨艺。他的父亲心血来潮，叫他进入厨艺专校远月学园就读。创真</span><br><span class="line"></span><br><span class="line">一到那里，不仅邂逅了拥有“神之舌”的女主角薙切绘里奈，而且还在入学典礼的台上出尽风头。</span><br><span class="line"></span><br><span class="line">于是，创真一方面将克服一连串的严峻考题，同时也将和每一位好敌手在料理场上较劲……</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bangumi6-2"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">幸平创真 : 松冈祯丞</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bangumi6-3"><p>这可能是我第一个看的松冈祯丞配音的动漫、虽然动漫的。。。比较大、但是第一季我还是都看完了。后面几季就没看了</p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="学战都市Asterisk"><a href="#学战都市Asterisk" class="headerlink" title="学战都市Asterisk"></a>学战都市Asterisk</h3><p><a href="https://www.bilibili.com/bangumi/media/md2722"><img src= "/img/loading.gif" data-lazy-src="https://asterisk-war.com/assets/img/top/c2/main_lay2.png" height="300px"></a></p><div class="tabs" id="bangumi7"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#bangumi7-1">动漫简介</button></li><li class="tab"><button type="button" data-href="#bangumi7-2">主要角色</button></li><li class="tab"><button type="button" data-href="#bangumi7-3">观感</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="bangumi7-1"><p>首播时间：2015-10-03<br>官网：<a href="https://asterisk-war.com/">https://asterisk-war.com/</a><br>制作：A-1 Pictures<br>剧情类型：科幻 校园 后宫 战斗</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">袭击了二十世纪的地球的前所未有的大灾害·落星雨。在这场大灾害之下，世界多数</span><br><span class="line"></span><br><span class="line">的都市遭到毁灭。但，从陨石中发现的未知元素——万应素，让人类的科学技术加速发展，终于</span><br><span class="line"></span><br><span class="line">诞生出被称作“星脉世代”的、拥有特异之力的新人类。世界最大的综合战斗娱乐项目“星武祭”</span><br><span class="line"></span><br><span class="line">的舞台，由六所学院包围、通称为六芒星的水上学园都市“六花”。转学到星导馆学园高等部</span><br><span class="line"></span><br><span class="line">的特待生·天雾绫斗，为了实现自己的愿望，而发誓在这个都市中战斗。</span><br><span class="line"></span><br><span class="line">炽热灵魂奔走的学园战斗剧，在此开演。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bangumi7-2"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">天雾绫斗 : 田丸笃志</span><br><span class="line">尤莉丝·爱雷克西亚·冯·里斯妃特 : 加隈亚衣</span><br><span class="line">克劳蒂雅·恩菲尔德 : 东山奈央</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bangumi7-3"><p>第一集的精彩战斗以及福利印象比较深。</p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="斩！赤红之瞳"><a href="#斩！赤红之瞳" class="headerlink" title="斩！赤红之瞳"></a>斩！赤红之瞳</h3><p><a href="https://www.agefans.tv/detail/20140029"><img src= "/img/loading.gif" data-lazy-src="http://akame.tv/images/index/top.jpg" height="300px"></a></p><div class="tabs" id="bangumi8"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#bangumi8-1">动漫简介</button></li><li class="tab"><button type="button" data-href="#bangumi8-2">主要角色</button></li><li class="tab"><button type="button" data-href="#bangumi8-3">观感</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="bangumi8-1"><p>首播时间：2014-07-06<br>官网：<a href="http://akame.tv/">http://akame.tv/</a><br>制作：WHITE FOX<br>剧情类型：冒险 热血 奇幻 战斗 犯罪</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    一个国家就如同人会逐渐腐朽，走向毁灭的一天，披着人皮的鬼魅魍魉嚣张跋扈四处横行，天若无法制裁邪恶，我等全员职</span><br><span class="line"></span><br><span class="line">业杀手团将会于黑暗之中给予消逝——</span><br><span class="line"></span><br><span class="line">    帝历 1024 年，出身在因帝国遭受欺压的村庄少年塔兹米 ，怀着拯救村庄的希望，与青梅竹马共同以帝都为目标旅行前往，</span><br><span class="line"></span><br><span class="line">却在夜里遭受盗贼袭击而各自分散。经历各种劫难，好不容易一人到达帝都的塔兹米却见到了帝都真正的姿态。</span><br><span class="line"></span><br><span class="line">    “最近似乎有个专门暗杀帝都官员与富裕人家的杀手集团。”一方面塔兹米听到了这样的传闻。在过夜的贵族家中，塔兹米于</span><br><span class="line"></span><br><span class="line">深夜里发现了他们的存在。杀手集团——————“夜袭”的存在。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bangumi8-2"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">赤瞳 : 雨宫天</span><br><span class="line">塔兹米 : 齐藤壮马</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bangumi8-3"><p>这是我第一次看比较血腥的动漫、所以至今为止也只看了第一季和最后一集、也是第一次看 雨宫天 配音的动漫。</p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="我们仍未知道那天所看见的花的名字。"><a href="#我们仍未知道那天所看见的花的名字。" class="headerlink" title="我们仍未知道那天所看见的花的名字。"></a>我们仍未知道那天所看见的花的名字。</h3><p><a href="https://www.bilibili.com/bangumi/media/md835"><img src= "/img/loading.gif" data-lazy-src="https://www.anohana.jp/img/right_area/01_top/keyvisual.jpg" height="300px"></a></p><div class="tabs" id="bangumi9"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#bangumi9-1">动漫简介</button></li><li class="tab"><button type="button" data-href="#bangumi9-2">主要角色</button></li><li class="tab"><button type="button" data-href="#bangumi9-3">观感</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="bangumi9-1"><p>原创动画<br>首播时间：2011-04-14<br>官网：<a href="http://www.anohana.jp/">http://www.anohana.jp/</a><br>制作：A-1 Pictures<br>剧情类型：爱情 治愈 剧情</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    《我们仍未知道那天所看见的花的名字。》是一部用直达内心的笔触描写青春期的少男</span><br><span class="line"></span><br><span class="line">少女在面对恋情、友情、纠葛时，有欢欣笑容也有伤心泪水的青春原创动画片。</span><br><span class="line"></span><br><span class="line">    从小时候起一直青梅竹马的6人，却在升上高中之后彼此有了距离。不太与人们接触的主角</span><br><span class="line"></span><br><span class="line">宿海仁太、有点被小太妹熏染的安城鸣子、进入重点高中的松雪集与鹤见知利子、放弃读高中</span><br><span class="line"></span><br><span class="line">而展开旅行的久川铁道、只有幼年死去的本间芽衣子（灵魂，最初只有仁太能看见）还是一如从前。</span><br><span class="line"></span><br><span class="line">有一天，面码对仁太说：“帮我实现一个愿望吧”。仁太虽然有点为难，却还是答应帮助面码实现愿望。</span><br><span class="line"></span><br><span class="line">以此为契机，为了实现面码的愿望，分散在各处的大家又再次地聚集在一起。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bangumi9-2"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">宿海仁太 : 入野自由</span><br><span class="line">本间芽衣子 : 茅野爱衣</span><br><span class="line">安城鸣子 : 户松遥</span><br><span class="line">松雪集 : 樱井孝宏</span><br><span class="line">鹤见知利子 : 早见沙织</span><br><span class="line">久川铁道 : 近藤孝行</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bangumi9-3"><p>第一次看这么感人的动漫和看 茅野爱衣 和 户松遥 配音的动漫。</p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="不正经的魔术讲师与禁忌教典"><a href="#不正经的魔术讲师与禁忌教典" class="headerlink" title="不正经的魔术讲师与禁忌教典"></a>不正经的魔术讲师与禁忌教典</h3><p><a href="https://www.agefans.tv/detail/20170022"><img src= "/img/loading.gif" data-lazy-src="http://rokuaka.jp/img/bg2.jpg" height="300px"></a></p><div class="tabs" id="bangumi10"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#bangumi10-1">动漫简介</button></li><li class="tab"><button type="button" data-href="#bangumi10-2">主要角色</button></li><li class="tab"><button type="button" data-href="#bangumi10-3">观感</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="bangumi10-1"><p>首播时间：2017-04-04<br>官网：<a href="http://rokuaka.jp/">http://rokuaka.jp/</a><br>制作：LIDENFILMS<br>剧情类型：搞笑 校园 奇幻 后宫</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">厌恶魔术的魔术讲师所展开的叛逆英雄幻想剧！</span><br><span class="line"></span><br><span class="line">魔术与科学共同发展的世界——卢瓦佛斯。</span><br><span class="line"></span><br><span class="line">位于魔导大国·阿尔扎诺帝国南部的“阿尔扎诺帝国魔法学院”，</span><br><span class="line"></span><br><span class="line">是学习世界最先端魔术的最高峰学舍。</span><br><span class="line"></span><br><span class="line">拥有约四百年历史的这所学院，是所有有志于魔术之道人们的憧憬，</span><br><span class="line"></span><br><span class="line">学院的讲师和学生们也因自己的身份而自豪。</span><br><span class="line"></span><br><span class="line">突然来到这所正统学院赴任的非常勤讲师，格伦·雷达斯。</span><br><span class="line"></span><br><span class="line">“我来教给你们真正的魔术吧”</span><br><span class="line"></span><br><span class="line">被称作“不正经”的这个男人的破天荒授课，就此开始。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bangumi10-2"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">格伦·勒达斯（Glenn Radars） : 齐藤壮马</span><br><span class="line">希丝缇娜·菲伊贝尔（Sistine Fibel） : 藤田茜</span><br><span class="line">露米娅·廷格尔（Rumia Tingel） : 宫本侑芽</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bangumi10-3"><p>又是第一次、看男主装B的动漫、个人观感良好。</p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="冰菓"><a href="#冰菓" class="headerlink" title="冰菓"></a>冰菓</h3><p><a href="https://www.bilibili.com/bangumi/media/md3398/"><img src= "/img/loading.gif" data-lazy-src="http://www.kotenbu.com/images/130315hidatakayamaH.jpg" height="300px"></a></p><div class="tabs" id="bangumi16"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#bangumi16-1">动漫简介</button></li><li class="tab"><button type="button" data-href="#bangumi16-2">主要角色</button></li><li class="tab"><button type="button" data-href="#bangumi16-3">观感</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="bangumi16-1"><p>首播时间：2012-04-23<br>官网：<a href="http://www.kotenbu.com/">http://www.kotenbu.com/</a><br>制作：京都动画<br>剧情类型：校园 悬疑 爱情 治愈 励志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    以节能为座右铭的高中生折木奉太郎， 为一个小小的原因而加入了濒临废社的“古典文学部”。</span><br><span class="line"></span><br><span class="line"> 古典文学部的社员，包括他在社里认识的好奇宝宝，也就是女主角千反田爱瑠，还有他从国中就</span><br><span class="line"></span><br><span class="line">认识的伊原摩耶花和福部里志。 这是他们四人以神山高中为舞台，对一桩桩事件展开推理的青春</span><br><span class="line"></span><br><span class="line">学园推理剧。 “我很好奇！”奉太郎平静的灰色高中生活，因为千反田的这一句话而为之一变！</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bangumi16-2"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">折木奉太郎 : 中村悠一</span><br><span class="line">千反田爱瑠 : 佐藤聪美</span><br><span class="line">福部里志 : 阪口大助</span><br><span class="line">伊原摩耶花 : 茅野爱衣</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bangumi16-3"><p>好看、因为这部番我知道了B站</p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="罪恶王冠"><a href="#罪恶王冠" class="headerlink" title="罪恶王冠"></a>罪恶王冠</h3><p><a href="https://www.bilibili.com/bangumi/media/md1588/"><img src= "/img/loading.gif" data-lazy-src="https://guilty-crown.jp/box/assets/img/img-box01.png" height="300px"></a></p><div class="tabs" id="bangumi11"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#bangumi11-1">动漫简介</button></li><li class="tab"><button type="button" data-href="#bangumi11-2">主要角色</button></li><li class="tab"><button type="button" data-href="#bangumi11-3">观感</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="bangumi11-1"><p>原创动画<br>首播时间：2011-10-14<br>官网：<a href="https://guilty-crown.jp/">https://guilty-crown.jp/</a><br>制作：Production I.G<br>剧情类型：奇幻 冒险 战斗 爱情 犯罪</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    2029年，日本因突然爆发的”Apocalypse Virus（天启病毒）“的蔓延而陷入了混乱之中。</span><br><span class="line">处于无政府状态的日本，受到了由超国家之间所组织成的名为“GHQ”的组织的武力介入</span><br><span class="line">并接受其统治，东京的六本木更成为被封锁的地区。之后又以名为“lost christmas</span><br><span class="line">（失落的圣诞）”的事件为契机，日本失去了独立国家的实质权力，并被赋予了表面上的自治权，</span><br><span class="line">由此人们开始享受短暂的和平。</span><br><span class="line"></span><br><span class="line">    时光流逝，10年后的2039年。少年樱满集怀抱着抑郁的心境，并对世间冷眼相待。</span><br><span class="line">樱满集是在天王州第一高校就读的高中二年生，与同学们保持着一定距离的同时，度过着闲散而又平静的日子。</span><br><span class="line"></span><br><span class="line">然而集安稳的日常在某一天突然宣告结束。那天放学后，在自己中意的老地方和一名少女不期而遇。少女名为楪祈。</span><br><span class="line">她正是集所憧憬，并在网上有着巨大影响力的歌手。而她也有不为人知的一面。祈正是由17岁青少年恙神涯所率领的“葬仪社”</span><br><span class="line">——一个在被封锁的城市中歌颂着从”GHQ“手中得到”日本的解放“而赌上性命不断孤独地战斗着的抵抗组织——的成员之一。</span><br><span class="line"></span><br><span class="line">    集在祈与涯引导之下，与葬仪社而发生了关联。尔后因为关系紧迫获被女主使用了虚空基因组，他的右手上出现了“王之刻印”。</span><br><span class="line">通过刻印，集可以自在地从人的身体里抽取出名为“void（虚空）”的物质，并以借此为武器得到战斗的力量。然而这也仅仅是，</span><br><span class="line">他所背负的“罪之王冠”的物语的开幕罢了……</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bangumi11-2"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">樱满集（おうま しゅう&#x2F; OUMA SHU） : 梶裕贵</span><br><span class="line">楪祈（ゆずりは いのり&#x2F; YUZURIHA INORI） : 茅野爱衣、chelly</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bangumi11-3"><p>就只看了4集、后面看不下去了。</p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="一周的朋友"><a href="#一周的朋友" class="headerlink" title="一周的朋友"></a>一周的朋友</h3><h3 id="漆黑的子弹"><a href="#漆黑的子弹" class="headerlink" title="漆黑的子弹"></a>漆黑的子弹</h3><h3 id="三坪房间的侵略者"><a href="#三坪房间的侵略者" class="headerlink" title="三坪房间的侵略者"></a>三坪房间的侵略者</h3><h3 id="可塑性记忆"><a href="#可塑性记忆" class="headerlink" title="可塑性记忆"></a>可塑性记忆</h3><h3 id="来自风平浪静的明天"><a href="#来自风平浪静的明天" class="headerlink" title="来自风平浪静的明天"></a>来自风平浪静的明天</h3><h2 id="2018年"><a href="#2018年" class="headerlink" title="2018年"></a>2018年</h2><h3 id="魔法禁书目录"><a href="#魔法禁书目录" class="headerlink" title="魔法禁书目录"></a>魔法禁书目录</h3><p><a href="https://www.agefans.tv/detail/20080015"><img src= "/img/loading.gif" data-lazy-src="https://toaru-project.com/index_1_2/core_sys/images/header/top_main_img_bg2.jpg" height="300px"></a></p><div class="tabs" id="bangumi12"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#bangumi12-1">动漫简介</button></li><li class="tab"><button type="button" data-href="#bangumi12-2">主要角色</button></li><li class="tab"><button type="button" data-href="#bangumi12-3">观感</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="bangumi12-1"><p>首播时间：2008-10-04<br>官网：<a href="https://toaru-project.com/index_1_2/">https://toaru-project.com/index_1_2/</a><br>制作：J.C.STAFF<br>剧情类型：搞笑 奇幻 科幻 后宫 战斗</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    故事讲述的是从东京都西部被分割出来的这座都市中，“超能力开发”被列为学校课程的</span><br><span class="line">一部分（学生作为人体科学实验对象）。在二百三十万人口中，有八成都是学生，所以被称为学园都市。</span><br><span class="line">他们每天都在超能力开发上进行相互竞争。根据能力高低不同，可以分为7级，从无能力（level 0）到</span><br><span class="line">超能力（level 5）（level 6为绝对能力者）。故事的主角上条当麻是学园里的一个无能力者，但并非</span><br><span class="line">完全没有能力，他的能力是能够将一切异能之力无效化。他只有右手能够使用这种能力，还给自己的这种</span><br><span class="line">连上帝的奇迹都能抹杀的能力取名为幻想杀手（Imagine-breaker）。而正因为他的右手似乎把神的祝</span><br><span class="line">福都给抹杀掉的缘故，导致自己一直过著不幸的生活。某一个暑假的日子，在家里的阳台上，他遇见了一</span><br><span class="line">位修女；这位少女自称自己的名字叫“茵蒂克丝”（Index），并是从魔法的世界逃了出来，现在正在被</span><br><span class="line">魔法师追赶中。就这样，上条当麻一脚踏进了奇妙而美丽又黑暗的世界，开始了上条当麻与御坂美琴的战斗</span><br><span class="line">……掌握了十万三千本究极魔法书（魔导书）的少女与拥有抹杀一切奇迹的神上之手的少年，将面临一系列故事……   </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bangumi12-2"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">上条当麻 : 阿部敦</span><br><span class="line">茵蒂克丝 : 井口裕香</span><br><span class="line">御坂美琴 : 佐藤利奈</span><br><span class="line">一方通行 : 冈本信彦</span><br><span class="line">神裂火织 : 伊藤静</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bangumi12-3"><p>是以1.5倍速度看的。无能力者男主的装B之路</p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="真实之泪"><a href="#真实之泪" class="headerlink" title="真实之泪"></a>真实之泪</h3><p><a href="https://www.bilibili.com/bangumi/media/md2910/"><img src= "/img/loading.gif" data-lazy-src="http://www.truetears.jp/images/top_mainv_bg20140718.jpg" height="300px"></a></p><div class="tabs" id="bangumi13"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#bangumi13-1">动漫简介</button></li><li class="tab"><button type="button" data-href="#bangumi13-2">主要角色</button></li><li class="tab"><button type="button" data-href="#bangumi13-3">观感</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="bangumi13-1"><p>原创动画<br>首播时间：2008-01-05<br>官网：<a href="http://www.truetears.jp/">http://www.truetears.jp/</a><br>制作：P.A.WORKS<br>剧情类型：爱情 校园 治愈</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">立志成为绘本作家的高中生仲上真一郎和被仲上家收留的在同一高中就读的汤浅比吕</span><br><span class="line">美，还有父母4人一起生活。有一天，真一郎在学校的后院和爬树后掉下的少女石动乃绘</span><br><span class="line">相遇。乃绘由于过去发生的某件事而变得流不出眼泪。真一郎在和她相遇之后，同比吕美、</span><br><span class="line">亲友野伏三代吉、青梅竹马安藤爱子之间的关系还有自己自身的想法都产生了很大的动摇。</span><br><span class="line">他们为了各自的事而烦恼，摸索自己着必须要做的事，逐渐成长。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bangumi13-2"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">仲上真一郎 : 石井真</span><br><span class="line">石动乃绘 : 高垣彩阳</span><br><span class="line">汤浅比吕美 : 名冢佳织</span><br><span class="line">安藤爱子 : 井口裕香</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bangumi13-3"><p>最开始看这部动漫的时候、只看了第一集、后面倒是看完了。</p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="圣诞之吻SS"><a href="#圣诞之吻SS" class="headerlink" title="圣诞之吻SS"></a>圣诞之吻SS</h3><p><a href="https://www.agefans.tv/detail/20100024"><img src= "/img/loading.gif" data-lazy-src="http://www.tbs.co.jp/anime/amagami/1st/images/top_img.jpg" height="300px"></a></p><div class="tabs" id="bangumi14"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#bangumi14-1">动漫简介</button></li><li class="tab"><button type="button" data-href="#bangumi14-2">主要角色</button></li><li class="tab"><button type="button" data-href="#bangumi14-3">观感</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="bangumi14-1"><p>首播时间：2010-07-02<br>官网：<a href="http://www.tbs.co.jp/anime/amagami/1st/">http://www.tbs.co.jp/anime/amagami/1st/</a><br>制作：AIC<br>剧情类型：校园 青春 后宫 治愈</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">橘纯一是一个高中2年级生，由于过去的经历变得不擅长应对恋爱和圣诞节这类事情，一直过着</span><br><span class="line"></span><br><span class="line">没女朋友的寂寞的校园生活。这样的纯一某一天突然想到：“直到高中毕业就这样什么都不做</span><br><span class="line"></span><br><span class="line">真的好吗？”于是，他克服自己的缺点，抱着今年的圣诞节要和女孩子过的想法，与不同的女孩子</span><br><span class="line"></span><br><span class="line">邂逅。纯一将会迎来一个怎么样的圣诞节……</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bangumi14-2"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">橘纯一 : 前野智昭</span><br><span class="line">森岛遥 : 伊藤静</span><br><span class="line">棚町薫 : 佐藤利奈</span><br><span class="line">中多纱江 : 今野宏美</span><br><span class="line">七咲逢 : 野上由加奈</span><br><span class="line">樱井梨穗子 : 新谷良子</span><br><span class="line">绚辻词 : 名冢佳织</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bangumi14-3"><p>最开始看这样类似的番是清恋、男主都太秀了</p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="绝园的暴风雨"><a href="#绝园的暴风雨" class="headerlink" title="绝园的暴风雨"></a>绝园的暴风雨</h3><p><a href="https://www.agefans.tv/detail/20120042"><img src= "/img/loading.gif" data-lazy-src="https://www.zetsuen.net/common/img/top/main.png" height="300px"></a></p><div class="tabs" id="bangumi15"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#bangumi15-1">动漫简介</button></li><li class="tab"><button type="button" data-href="#bangumi15-2">主要角色</button></li><li class="tab"><button type="button" data-href="#bangumi15-3">观感</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="bangumi15-1"><p>首播时间：2012-10-04<br>官网：<a href="https://www.zetsuen.net/">https://www.zetsuen.net/</a><br>制作：BONES<br>剧情类型：科幻 冒险 战斗</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    某一天，最强的魔法使公主锁部叶风被部下左门暗算，困在了无人荒岛；又有一天，一位</span><br><span class="line"></span><br><span class="line">少女被唐突杀害，犯人还未逮捕时间却已流逝；然后又在某一天，围绕着复仇与魔法，超越时间</span><br><span class="line"></span><br><span class="line">与空间战斗正式揭开了序幕！正气和狂气，理性和知性，自信和确信。在悲剧性的不合理的世界</span><br><span class="line"></span><br><span class="line">里，少年少女们的命运交缠纠结，故事开始了。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bangumi15-2"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">泷川吉野 : 内山昂辉</span><br><span class="line">不破真广 : 丰永利行</span><br><span class="line">锁部叶风 : 泽城美雪</span><br><span class="line">不破爱花 : 花泽香菜</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bangumi15-3"><p>有点悬疑。。</p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="魔法禁书目录剧场版-恩底弥翁的奇迹"><a href="#魔法禁书目录剧场版-恩底弥翁的奇迹" class="headerlink" title="魔法禁书目录剧场版 恩底弥翁的奇迹"></a>魔法禁书目录剧场版 恩底弥翁的奇迹</h3><h3 id="樱花庄的宠物女孩"><a href="#樱花庄的宠物女孩" class="headerlink" title="樱花庄的宠物女孩"></a>樱花庄的宠物女孩</h3><h3 id="打工吧！魔王大人"><a href="#打工吧！魔王大人" class="headerlink" title="打工吧！魔王大人"></a>打工吧！魔王大人</h3><h3 id="约会大作战"><a href="#约会大作战" class="headerlink" title="约会大作战"></a>约会大作战</h3><h3 id="我的青春恋爱物语果然有问题"><a href="#我的青春恋爱物语果然有问题" class="headerlink" title="我的青春恋爱物语果然有问题"></a>我的青春恋爱物语果然有问题</h3><h3 id="无彩限的怪灵世界"><a href="#无彩限的怪灵世界" class="headerlink" title="无彩限的怪灵世界"></a>无彩限的怪灵世界</h3><h3 id="声之形"><a href="#声之形" class="headerlink" title="声之形"></a>声之形</h3><h3 id="BEATLESS-没有心跳的少女"><a href="#BEATLESS-没有心跳的少女" class="headerlink" title="BEATLESS -没有心跳的少女-"></a>BEATLESS -没有心跳的少女-</h3><h3 id="ReLIFE"><a href="#ReLIFE" class="headerlink" title="ReLIFE"></a>ReLIFE</h3><h3 id="Re：从零开始的异世界生活"><a href="#Re：从零开始的异世界生活" class="headerlink" title="Re：从零开始的异世界生活"></a>Re：从零开始的异世界生活</h3><h3 id="刀剑神域"><a href="#刀剑神域" class="headerlink" title="刀剑神域"></a>刀剑神域</h3><h3 id="加速世界"><a href="#加速世界" class="headerlink" title="加速世界"></a>加速世界</h3><h3 id="关于我转生变成史莱姆这档事"><a href="#关于我转生变成史莱姆这档事" class="headerlink" title="关于我转生变成史莱姆这档事"></a>关于我转生变成史莱姆这档事</h3><h3 id="超时空要塞Δ"><a href="#超时空要塞Δ" class="headerlink" title="超时空要塞Δ"></a>超时空要塞Δ</h3><h3 id="情热传说-the-X"><a href="#情热传说-the-X" class="headerlink" title="情热传说 the X"></a>情热传说 the X</h3><h3 id="NO-GAME-NO-LIFE-游戏人生"><a href="#NO-GAME-NO-LIFE-游戏人生" class="headerlink" title="NO GAME NO LIFE 游戏人生"></a>NO GAME NO LIFE 游戏人生</h3><h3 id="寻找失去的未来"><a href="#寻找失去的未来" class="headerlink" title="寻找失去的未来"></a>寻找失去的未来</h3><h3 id="青春之旅"><a href="#青春之旅" class="headerlink" title="青春之旅"></a>青春之旅</h3><h3 id="漫画家与助手们"><a href="#漫画家与助手们" class="headerlink" title="漫画家与助手们"></a>漫画家与助手们</h3><h3 id="极黑的布伦希尔特"><a href="#极黑的布伦希尔特" class="headerlink" title="极黑的布伦希尔特"></a>极黑的布伦希尔特</h3><h3 id="七人魔法使"><a href="#七人魔法使" class="headerlink" title="七人魔法使"></a>七人魔法使</h3><h3 id="四月是你的谎言"><a href="#四月是你的谎言" class="headerlink" title="四月是你的谎言"></a>四月是你的谎言</h3><h3 id="山田君与7人魔女"><a href="#山田君与7人魔女" class="headerlink" title="山田君与7人魔女"></a>山田君与7人魔女</h3><h3 id="伪恋"><a href="#伪恋" class="headerlink" title="伪恋"></a>伪恋</h3><h3 id="七大罪"><a href="#七大罪" class="headerlink" title="七大罪"></a>七大罪</h3><h3 id="心灵想要大声呼喊"><a href="#心灵想要大声呼喊" class="headerlink" title="心灵想要大声呼喊"></a>心灵想要大声呼喊</h3><h3 id="路人女主的养成方法"><a href="#路人女主的养成方法" class="headerlink" title="路人女主的养成方法"></a>路人女主的养成方法</h3><h3 id="约会大作战剧场版-万由里裁决"><a href="#约会大作战剧场版-万由里裁决" class="headerlink" title="约会大作战剧场版 万由里裁决"></a>约会大作战剧场版 万由里裁决</h3><h3 id="Punch-Line"><a href="#Punch-Line" class="headerlink" title="Punch Line"></a>Punch Line</h3><h3 id="铳皇无尽的法夫纳"><a href="#铳皇无尽的法夫纳" class="headerlink" title="铳皇无尽的法夫纳"></a>铳皇无尽的法夫纳</h3><h3 id="你的名字。"><a href="#你的名字。" class="headerlink" title="你的名字。"></a>你的名字。</h3><h3 id="告白实行委员会剧场版-从很久以前就喜欢你了"><a href="#告白实行委员会剧场版-从很久以前就喜欢你了" class="headerlink" title="告白实行委员会剧场版 从很久以前就喜欢你了"></a>告白实行委员会剧场版 从很久以前就喜欢你了</h3><h3 id="为美好的世界献上祝福！"><a href="#为美好的世界献上祝福！" class="headerlink" title="为美好的世界献上祝福！"></a>为美好的世界献上祝福！</h3><h3 id="告白实行委员会剧场版-喜欢上你的那个瞬间"><a href="#告白实行委员会剧场版-喜欢上你的那个瞬间" class="headerlink" title="告白实行委员会剧场版 喜欢上你的那个瞬间"></a>告白实行委员会剧场版 喜欢上你的那个瞬间</h3><h3 id="无论何时我们的恋情都是10厘米"><a href="#无论何时我们的恋情都是10厘米" class="headerlink" title="无论何时我们的恋情都是10厘米"></a>无论何时我们的恋情都是10厘米</h3><h3 id="烟花"><a href="#烟花" class="headerlink" title="烟花"></a>烟花</h3><h3 id="欢迎来到实力至上主义的教室"><a href="#欢迎来到实力至上主义的教室" class="headerlink" title="欢迎来到实力至上主义的教室"></a>欢迎来到实力至上主义的教室</h3><h3 id="刀剑神域剧场版-序列之争"><a href="#刀剑神域剧场版-序列之争" class="headerlink" title="刀剑神域剧场版 序列之争"></a>刀剑神域剧场版 序列之争</h3><h3 id="徒然喜欢你"><a href="#徒然喜欢你" class="headerlink" title="徒然喜欢你"></a>徒然喜欢你</h3><h3 id="骑士-amp-魔法"><a href="#骑士-amp-魔法" class="headerlink" title="骑士&amp;魔法"></a>骑士&amp;魔法</h3><h3 id="碧蓝幻想"><a href="#碧蓝幻想" class="headerlink" title="碧蓝幻想"></a>碧蓝幻想</h3><h3 id="从零开始的魔法书"><a href="#从零开始的魔法书" class="headerlink" title="从零开始的魔法书"></a>从零开始的魔法书</h3><h3 id="我的妹妹不可能那么可爱"><a href="#我的妹妹不可能那么可爱" class="headerlink" title="我的妹妹不可能那么可爱"></a>我的妹妹不可能那么可爱</h3><h3 id="埃罗芒阿老师"><a href="#埃罗芒阿老师" class="headerlink" title="埃罗芒阿老师"></a>埃罗芒阿老师</h3><h3 id="Rewrite"><a href="#Rewrite" class="headerlink" title="Rewrite"></a>Rewrite</h3><h3 id="政宗君的复仇"><a href="#政宗君的复仇" class="headerlink" title="政宗君的复仇"></a>政宗君的复仇</h3><h3 id="鲁邦三世-PART5"><a href="#鲁邦三世-PART5" class="headerlink" title="鲁邦三世 PART5"></a>鲁邦三世 PART5</h3><h3 id="重神机潘多拉"><a href="#重神机潘多拉" class="headerlink" title="重神机潘多拉"></a>重神机潘多拉</h3><h3 id="ISLAND"><a href="#ISLAND" class="headerlink" title="ISLAND"></a>ISLAND</h3><h3 id="后街女孩"><a href="#后街女孩" class="headerlink" title="后街女孩"></a>后街女孩</h3><h3 id="DARLING-in-the-FRANXX"><a href="#DARLING-in-the-FRANXX" class="headerlink" title="DARLING in the FRANXX"></a>DARLING in the FRANXX</h3><h3 id="刀剑神域外传-Gun-Gale-Online"><a href="#刀剑神域外传-Gun-Gale-Online" class="headerlink" title="刀剑神域外传 Gun Gale Online"></a>刀剑神域外传 Gun Gale Online</h3><h3 id="Caligula-卡利古拉"><a href="#Caligula-卡利古拉" class="headerlink" title="Caligula 卡利古拉"></a>Caligula 卡利古拉</h3><h3 id="冷然之天秤-帝都幻惑绮谭"><a href="#冷然之天秤-帝都幻惑绮谭" class="headerlink" title="冷然之天秤 帝都幻惑绮谭"></a>冷然之天秤 帝都幻惑绮谭</h3><h3 id="紫罗兰永恒花园"><a href="#紫罗兰永恒花园" class="headerlink" title="紫罗兰永恒花园"></a>紫罗兰永恒花园</h3><h3 id="龙王的工作"><a href="#龙王的工作" class="headerlink" title="龙王的工作"></a>龙王的工作</h3><h3 id="爆肝工程师的异世界狂想曲"><a href="#爆肝工程师的异世界狂想曲" class="headerlink" title="爆肝工程师的异世界狂想曲"></a>爆肝工程师的异世界狂想曲</h3><h3 id="A-I-C-O-Incarnation"><a href="#A-I-C-O-Incarnation" class="headerlink" title="A.I.C.O. -Incarnation-"></a>A.I.C.O. -Incarnation-</h3><h2 id="2019年"><a href="#2019年" class="headerlink" title="2019年"></a>2019年</h2><h3 id="昴宿七星"><a href="#昴宿七星" class="headerlink" title="昴宿七星"></a>昴宿七星</h3><h3 id="擅长捉弄的高木同学"><a href="#擅长捉弄的高木同学" class="headerlink" title="擅长捉弄的高木同学"></a>擅长捉弄的高木同学</h3><h3 id="异世界魔王与召唤少女的奴隶魔术"><a href="#异世界魔王与召唤少女的奴隶魔术" class="headerlink" title="异世界魔王与召唤少女的奴隶魔术"></a>异世界魔王与召唤少女的奴隶魔术</h3><h3 id="叛逆性百万亚瑟王"><a href="#叛逆性百万亚瑟王" class="headerlink" title="叛逆性百万亚瑟王"></a>叛逆性百万亚瑟王</h3><h3 id="原书·原书使"><a href="#原书·原书使" class="headerlink" title="原书·原书使"></a>原书·原书使</h3><h3 id="Re：从零开始的异世界生活-Memory-Snow"><a href="#Re：从零开始的异世界生活-Memory-Snow" class="headerlink" title="Re：从零开始的异世界生活 Memory Snow"></a>Re：从零开始的异世界生活 Memory Snow</h3><h3 id="七原罪剧场版-天空的囚徒"><a href="#七原罪剧场版-天空的囚徒" class="headerlink" title="七原罪剧场版 天空的囚徒"></a>七原罪剧场版 天空的囚徒</h3><h3 id="我想吃掉你的胰脏"><a href="#我想吃掉你的胰脏" class="headerlink" title="我想吃掉你的胰脏"></a>我想吃掉你的胰脏</h3><h3 id="来自多彩世界的明天"><a href="#来自多彩世界的明天" class="headerlink" title="来自多彩世界的明天"></a>来自多彩世界的明天</h3><h3 id="工作细胞"><a href="#工作细胞" class="headerlink" title="工作细胞"></a>工作细胞</h3><h3 id="杀戮天使"><a href="#杀戮天使" class="headerlink" title="杀戮天使"></a>杀戮天使</h3><h3 id="朝花夕誓-于离别之朝束起约定之花"><a href="#朝花夕誓-于离别之朝束起约定之花" class="headerlink" title="朝花夕誓 于离别之朝束起约定之花"></a>朝花夕誓 于离别之朝束起约定之花</h3><h3 id="平凡职业成就世界最强"><a href="#平凡职业成就世界最强" class="headerlink" title="平凡职业成就世界最强"></a>平凡职业成就世界最强</h3><h3 id="我们无法一起学习"><a href="#我们无法一起学习" class="headerlink" title="我们无法一起学习"></a>我们无法一起学习</h3><h3 id="刺客守则"><a href="#刺客守则" class="headerlink" title="刺客守则"></a>刺客守则</h3><h3 id="石纪元"><a href="#石纪元" class="headerlink" title="石纪元"></a>石纪元</h3><h3 id="鬼灭之刃"><a href="#鬼灭之刃" class="headerlink" title="鬼灭之刃"></a>鬼灭之刃</h3><h3 id="重来吧、魔王大人！"><a href="#重来吧、魔王大人！" class="headerlink" title="重来吧、魔王大人！"></a>重来吧、魔王大人！</h3><h3 id="鲁邦三世剧场版-峰不二子的谎言"><a href="#鲁邦三世剧场版-峰不二子的谎言" class="headerlink" title="鲁邦三世剧场版 峰不二子的谎言"></a>鲁邦三世剧场版 峰不二子的谎言</h3><h3 id="贤者之孙"><a href="#贤者之孙" class="headerlink" title="贤者之孙"></a>贤者之孙</h3><h3 id="盾之勇者成名录"><a href="#盾之勇者成名录" class="headerlink" title="盾之勇者成名录"></a>盾之勇者成名录</h3><h3 id="七人魔法使剧场版-天空图书馆与真红的魔王"><a href="#七人魔法使剧场版-天空图书馆与真红的魔王" class="headerlink" title="七人魔法使剧场版 -天空图书馆与真红的魔王-"></a>七人魔法使剧场版 -天空图书馆与真红的魔王-</h3><h3 id="辉夜大小姐想让我告白～天才们的恋爱头脑战～"><a href="#辉夜大小姐想让我告白～天才们的恋爱头脑战～" class="headerlink" title="辉夜大小姐想让我告白～天才们的恋爱头脑战～"></a>辉夜大小姐想让我告白～天才们的恋爱头脑战～</h3><h3 id="五等分的新娘"><a href="#五等分的新娘" class="headerlink" title="五等分的新娘"></a>五等分的新娘</h3><h2 id="2020年"><a href="#2020年" class="headerlink" title="2020年"></a>2020年</h2><h3 id="天使降临到了我身边"><a href="#天使降临到了我身边" class="headerlink" title="天使降临到了我身边"></a>天使降临到了我身边</h3><h3 id="紫罗兰永恒花园-外传-永远与自动手记人偶"><a href="#紫罗兰永恒花园-外传-永远与自动手记人偶" class="headerlink" title="紫罗兰永恒花园 外传 - 永远与自动手记人偶 -"></a>紫罗兰永恒花园 外传 - 永远与自动手记人偶 -</h3><h3 id="濑户的花嫁"><a href="#濑户的花嫁" class="headerlink" title="濑户的花嫁"></a>濑户的花嫁</h3><h3 id="青春期笨蛋不做兔女郎学姐的梦"><a href="#青春期笨蛋不做兔女郎学姐的梦" class="headerlink" title="青春期笨蛋不做兔女郎学姐的梦"></a>青春期笨蛋不做兔女郎学姐的梦</h3><h3 id="青春期笨蛋不做怀梦少女的梦"><a href="#青春期笨蛋不做怀梦少女的梦" class="headerlink" title="青春期笨蛋不做怀梦少女的梦"></a>青春期笨蛋不做怀梦少女的梦</h3><h3 id="笨女孩"><a href="#笨女孩" class="headerlink" title="笨女孩"></a>笨女孩</h3><h3 id="线上游戏的老婆不可能是女生？"><a href="#线上游戏的老婆不可能是女生？" class="headerlink" title="线上游戏的老婆不可能是女生？"></a>线上游戏的老婆不可能是女生？</h3><h3 id="绯弹的亚里亚"><a href="#绯弹的亚里亚" class="headerlink" title="绯弹的亚里亚"></a>绯弹的亚里亚</h3><h3 id="野良神"><a href="#野良神" class="headerlink" title="野良神"></a>野良神</h3><h3 id="如果有妹妹就好了"><a href="#如果有妹妹就好了" class="headerlink" title="如果有妹妹就好了"></a>如果有妹妹就好了</h3><h3 id="我不是说了能力要平均值么！"><a href="#我不是说了能力要平均值么！" class="headerlink" title="我不是说了能力要平均值么！"></a>我不是说了能力要平均值么！</h3><h3 id="因为太怕痛就全点防御力了"><a href="#因为太怕痛就全点防御力了" class="headerlink" title="因为太怕痛就全点防御力了"></a>因为太怕痛就全点防御力了</h3><h3 id="异度侵入-ID-INVADED"><a href="#异度侵入-ID-INVADED" class="headerlink" title="异度侵入 ID:INVADED"></a>异度侵入 ID:INVADED</h3><h3 id="达尔文游戏"><a href="#达尔文游戏" class="headerlink" title="达尔文游戏"></a>达尔文游戏</h3><h3 id="中二病也要谈恋爱！"><a href="#中二病也要谈恋爱！" class="headerlink" title="中二病也要谈恋爱！"></a>中二病也要谈恋爱！</h3><h3 id="中二病也要谈恋爱！剧场版-小鸟游六花改"><a href="#中二病也要谈恋爱！剧场版-小鸟游六花改" class="headerlink" title="中二病也要谈恋爱！剧场版 小鸟游六花改"></a>中二病也要谈恋爱！剧场版 小鸟游六花改</h3><h3 id="期待在地下城邂逅有错吗"><a href="#期待在地下城邂逅有错吗" class="headerlink" title="期待在地下城邂逅有错吗"></a>期待在地下城邂逅有错吗</h3><h3 id="期待在地下城邂逅有错吗剧场版-俄里翁之矢"><a href="#期待在地下城邂逅有错吗剧场版-俄里翁之矢" class="headerlink" title="期待在地下城邂逅有错吗剧场版 俄里翁之矢"></a>期待在地下城邂逅有错吗剧场版 俄里翁之矢</h3><h3 id="剑姬神圣谭"><a href="#剑姬神圣谭" class="headerlink" title="剑姬神圣谭"></a>剑姬神圣谭</h3><h3 id="为美好的世界献上祝福！红传说"><a href="#为美好的世界献上祝福！红传说" class="headerlink" title="为美好的世界献上祝福！红传说"></a>为美好的世界献上祝福！红传说</h3><h3 id="HELLO-WORLD"><a href="#HELLO-WORLD" class="headerlink" title="HELLO WORLD"></a>HELLO WORLD</h3><h3 id="天气之子"><a href="#天气之子" class="headerlink" title="天气之子"></a>天气之子</h3><h3 id="辉夜大小姐想让我告白～天才们的恋爱头脑战～-第二季"><a href="#辉夜大小姐想让我告白～天才们的恋爱头脑战～-第二季" class="headerlink" title="辉夜大小姐想让我告白～天才们的恋爱头脑战～ 第二季"></a>辉夜大小姐想让我告白～天才们的恋爱头脑战～ 第二季</h3><h3 id="星掠者"><a href="#星掠者" class="headerlink" title="星掠者"></a>星掠者</h3><h3 id="白猫计划-零之纪元"><a href="#白猫计划-零之纪元" class="headerlink" title="白猫计划 零之纪元"></a>白猫计划 零之纪元</h3><h3 id="月色真美"><a href="#月色真美" class="headerlink" title="月色真美"></a>月色真美</h3><h2 id="未完继续。。。"><a href="#未完继续。。。" class="headerlink" title="未完继续。。。"></a>未完继续。。。</h2>]]></content>
      
      
      <categories>
          
          <category> 动漫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动漫 </tag>
            
            <tag> 二次元 </tag>
            
            <tag> 回忆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElementUi学习(下)</title>
      <link href="/posts/89755edc/"/>
      <url>/posts/89755edc/</url>
      
        <content type="html"><![CDATA[<h2 id="ElementUi-学习-下"><a href="#ElementUi-学习-下" class="headerlink" title="ElementUi 学习(下)"></a>ElementUi 学习(下)</h2><p>封面P站: <a href="https://www.pixiv.net/artworks/83020324">https://www.pixiv.net/artworks/83020324</a></p><div class="note info"><p>视频教程: <a href="https://www.bilibili.com/video/BV1NK4y187XH">https://www.bilibili.com/video/BV1NK4y187XH</a></p></div><h3 id="小案例"><a href="#小案例" class="headerlink" title="小案例"></a>小案例</h3><p>学习了ElementUi、我们开始使用<code>ElementUi和SpringBoot</code>写一个简单的前后端分离的项目、巩固一下学习的知识</p><div class="btns rounded center grid5">            <a href='https://gitee.com/zykjofficial/StudyProjects/tree/master/2020/07/Vue/elementui_users' title='下载Vue项目源码'><i class='fas fa-download'></i>下载Vue项目源码</a><a href='https://gitee.com/zykjofficial/StudyProjects/tree/master/2020/07/SpringBoot/element_users_api' title='下载SpringBoot源码'><i class='fas fa-download'></i>下载SpringBoot源码</a>          </div><h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><p>使用<code>vuecli4.x脚手架创建项目</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create elementui_users</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200715205406.png" alt="20200715205406.png"></p><p>需要安装 <code>Vue-Router</code>、之后<code>安装ElementUi</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i element-ui -S</span><br></pre></td></tr></table></figure><p>继续安装<code>axios</code>用于发送网络请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios --save</span><br></pre></td></tr></table></figure><p>编辑<code>main.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//导入axios</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//导入ElementUi</span></span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//给 axios 取别名</span></span><br><span class="line">Vue.prototype.$http = axios</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用ElementUi</span></span><br><span class="line">Vue.use(ElementUI)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="基本创建"><a href="#基本创建" class="headerlink" title="基本创建"></a>基本创建</h4><h5 id="NavMenu-导航菜单"><a href="#NavMenu-导航菜单" class="headerlink" title="NavMenu 导航菜单"></a>NavMenu 导航菜单</h5><p>这个项目需要导航栏、我们需要学习一下</p><p><code>el-menu</code>创建导航菜单、通过<code>:default-active</code>绑定默认激活项，<code>el-menu-item</code>为菜单项、<code>index</code>的值与<code>:default-active</code>的值绑定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-menu</span> <span class="attr">:default-active</span>=<span class="string">&quot;activeIndex&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;horizontal&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span>处理中心<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span>&gt;</span>订单管理<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;3&quot;</span>&gt;</span>消息中心<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">        data()&#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//代表默认选择的项</span></span></span><br><span class="line"><span class="javascript">                activeIndex: <span class="string">&#x27;1&#x27;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>官网: <a href="https://element.eleme.cn/#/zh-CN/component/menu">https://element.eleme.cn/#/zh-CN/component/menu</a></p><p>在<code>components</code>下创建<code>Nav.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-menu</span> <span class="attr">:default-active</span>=<span class="string">&quot;activeIndex&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;horizontal&quot;</span> @<span class="attr">select</span>=<span class="string">&quot;handleSelect&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;/index&quot;</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;/users&quot;</span>&gt;</span>用户管理<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;/msgs&quot;</span>&gt;</span>消息中心<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;/orders&quot;</span>&gt;</span>订单管理<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;Nav&quot;</span>,</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                activeIndex: <span class="built_in">this</span>.$route.path</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleSelect(key, keyPath) &#123;</span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$router.push(key)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编辑<code>App.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Nav</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> Nav <span class="keyword">from</span> <span class="string">&#x27;./components/Nav&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line">        data()&#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components:&#123;</span><br><span class="line">            Nav</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="页面创建"><a href="#页面创建" class="headerlink" title="页面创建"></a>页面创建</h5><p>在<code>views</code>目录下创建</p><div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">Index.vue</button></li><li class="tab"><button type="button" data-href="#tab1-2">Msg.vue</button></li><li class="tab"><button type="button" data-href="#tab1-3">Order.vue</button></li><li class="tab"><button type="button" data-href="#tab1-4">User.vue</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是主页<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;Index&quot;</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>消息<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;Msg&quot;</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-3"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>订单<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;Order&quot;</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-4"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>用户<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;User&quot;</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span>3213</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><h5 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h5><p>编辑<code>router/index.js</code></p><p>但是为避免之后使用<code>this.$router.push</code>重复点击一个路由报错</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200715213324.png" alt="20200715213324.png"></p><p>所以我们要在<code>router/index.js</code>添加、问题参考: <a href="https://blog.csdn.net/qq_41687299/article/details/106869943">https://blog.csdn.net/qq_41687299/article/details/106869943</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> originalPush = VueRouter.prototype.push</span><br><span class="line">VueRouter.prototype.push = <span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">location</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> originalPush.call(<span class="built_in">this</span>, location).catch(<span class="function"><span class="params">err</span> =&gt;</span> err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续编辑</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Index <span class="keyword">from</span> <span class="string">&quot;../views/Index&quot;</span></span><br><span class="line"><span class="keyword">import</span> User <span class="keyword">from</span> <span class="string">&quot;../views/User&quot;</span></span><br><span class="line"><span class="keyword">import</span> Order <span class="keyword">from</span> <span class="string">&quot;../views/Order&quot;</span></span><br><span class="line"><span class="keyword">import</span> Msg <span class="keyword">from</span> <span class="string">&quot;../views/Msg&quot;</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="comment">//防止路由重复</span></span><br><span class="line"><span class="keyword">const</span> originalPush = VueRouter.prototype.push</span><br><span class="line">VueRouter.prototype.push = <span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">location</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> originalPush.call(<span class="built_in">this</span>, location).catch(<span class="function"><span class="params">err</span> =&gt;</span> err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">        <span class="comment">//默认页面重定向到index</span></span><br><span class="line">        redirect: <span class="string">&quot;/index&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&quot;/index&quot;</span>,</span><br><span class="line">        name: <span class="string">&quot;index&quot;</span>,</span><br><span class="line">        component: Index</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&quot;/users&quot;</span>,</span><br><span class="line">        name: <span class="string">&quot;users&quot;</span>,</span><br><span class="line">        component: User</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&quot;/msgs&quot;</span>,</span><br><span class="line">        name: <span class="string">&quot;msgs&quot;</span>,</span><br><span class="line">        component: Msg</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&quot;/orders&quot;</span>,</span><br><span class="line">        name: <span class="string">&quot;orders&quot;</span>,</span><br><span class="line">        component: Order</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    mode: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">    base: process.env.BASE_URL,</span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p><code>npm run serve</code>运行项目</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200715215936.gif" alt="20200715215936.gif"></p><p>如上图所示、没有报错就说明成功了</p><h4 id="页面编辑"><a href="#页面编辑" class="headerlink" title="页面编辑"></a>页面编辑</h4><h5 id="主页"><a href="#主页" class="headerlink" title="主页"></a>主页</h5><div class="note info"><p>添加一个轮播图效果</p></div><h6 id="Carousel-走马灯-和-Image-图片"><a href="#Carousel-走马灯-和-Image-图片" class="headerlink" title="Carousel 走马灯 和 Image 图片"></a>Carousel 走马灯 和 Image 图片</h6><p><code>el-carousel</code>创建轮播图、<code>el-carousel-item</code>创建每一项</p><ul><li><code>height指定高度</code></li></ul><p><code>el-image</code>创建图片</p><ul><li><code>:src</code>绑定图片</li><li><code>fit</code>:确定图片如何适应到容器框、有<code>fill / contain / cover / none / scale-down</code></li><li><code>style=&quot;&quot;</code>最好指定高度</li></ul><p>官网: </p><ul><li><a href="https://element.eleme.cn/#/zh-CN/component/carousel">https://element.eleme.cn/#/zh-CN/component/carousel</a></li><li><a href="https://element.eleme.cn/#/zh-CN/component/image">https://element.eleme.cn/#/zh-CN/component/image</a></li></ul><p>所以编辑<code>Index.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-carousel</span> <span class="attr">indicator-position</span>=<span class="string">&quot;outside&quot;</span> <span class="attr">height</span>=<span class="string">&quot;600px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-carousel-item</span> <span class="attr">v-for</span>=<span class="string">&quot;img in imgList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-image</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">style</span>=<span class="string">&quot;height: 600px&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">:src</span>=<span class="string">&quot;img&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">fit</span>=<span class="string">&quot;cover&quot;</span></span></span><br><span class="line"><span class="tag">            &gt;</span><span class="tag">&lt;/<span class="name">el-image</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-carousel-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-carousel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;Index&quot;</span>,</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">                imgList: [</span><br><span class="line"><span class="javascript">                    <span class="string">&#x27;https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/anime/anime0.png&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="string">&#x27;https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/anime/anime1.png&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="string">&#x27;https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/anime/anime2.png&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="string">&#x27;https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/anime/anime3.png&#x27;</span></span></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h5><p>使用Table表格进行创建、用到了<code>自定义表头</code>和<code>自定义列模板</code>相关内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:data</span>=<span class="string">&quot;tableData.filter(data =&gt; !search || data.name.toLowerCase().includes(search.toLowerCase()))&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">                <span class="attr">label</span>=<span class="string">&quot;编号&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 10px&quot;</span>&gt;</span>&#123;&#123; scope.row.id &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">                <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-popover</span> <span class="attr">trigger</span>=<span class="string">&quot;hover&quot;</span> <span class="attr">placement</span>=<span class="string">&quot;top&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名: &#123;&#123; scope.row.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>住址: &#123;&#123; scope.row.address &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;reference&quot;</span> <span class="attr">class</span>=<span class="string">&quot;name-wrapper&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-tag</span> <span class="attr">size</span>=<span class="string">&quot;medium&quot;</span>&gt;</span>&#123;&#123; scope.row.name &#125;&#125;<span class="tag">&lt;/<span class="name">el-tag</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-popover</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;性别&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;生日&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;birth&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;地址&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">                <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;header&quot;</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">v-model</span>=<span class="string">&quot;search&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">placeholder</span>=<span class="string">&quot;输入姓名进行搜索&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span><br><span class="line"><span class="tag">                        @<span class="attr">click</span>=<span class="string">&quot;handleEdit(scope.$index, scope.row)&quot;</span>&gt;</span>编辑</span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span></span></span><br><span class="line"><span class="tag">                        @<span class="attr">click</span>=<span class="string">&quot;handleDelete(scope.$index, scope.row)&quot;</span>&gt;</span>删除</span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;User&quot;</span>,</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                search:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line">                tableData: [&#123;</span><br><span class="line">                    id: 1,</span><br><span class="line"><span class="javascript">                    name: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    sex: <span class="string">&#x27;男&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    birth: <span class="string">&#x27;2000-05-02&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    address: <span class="string">&#x27;上海市普陀区金沙江路 1 弄&#x27;</span></span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    id: 2,</span><br><span class="line"><span class="javascript">                    name: <span class="string">&#x27;王大虎&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    sex: <span class="string">&#x27;男&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    birth: <span class="string">&#x27;1998-03-12&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    address: <span class="string">&#x27;上海市普陀区金沙江路 2 弄&#x27;</span></span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    id: 3,</span><br><span class="line"><span class="javascript">                    name: <span class="string">&#x27;王小妞&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    sex: <span class="string">&#x27;女&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    birth: <span class="string">&#x27;2001-06-02&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    address: <span class="string">&#x27;上海市普陀区金沙江路 3 弄&#x27;</span></span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    id: 4,</span><br><span class="line"><span class="javascript">                    name: <span class="string">&#x27;王大妞&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    sex: <span class="string">&#x27;女&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    birth: <span class="string">&#x27;1999-12-23&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    address: <span class="string">&#x27;上海市普陀区金沙江路 3 弄&#x27;</span></span></span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleEdit(index, row) &#123;</span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(index, row);</span></span><br><span class="line">            &#125;,</span><br><span class="line">            handleDelete(index, row) &#123;</span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(index, row);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="后台搭建"><a href="#后台搭建" class="headerlink" title="后台搭建"></a>后台搭建</h4><h5 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h5><p>通过软件<code>Navicat Premium</code>创建一个<code>elementui_users</code>数据库</p><p>创建 <code>t_users</code>表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_users`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">80</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`birth`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`sex`</span> <span class="built_in">varchar</span>(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`address`</span> <span class="built_in">varchar</span>(<span class="number">120</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><h5 id="SpringBoot项目"><a href="#SpringBoot项目" class="headerlink" title="SpringBoot项目"></a>SpringBoot项目</h5><p>使用IDEA搭建SpringBoot项目</p><div class="justified-gallery"><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200716100715.png" alt="20200716100715.png"><br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200716101208.png" alt="20200716101208.png"></p>          </div><p>使用最新版SpringBoot、如果有问题就降低版本</p><p>我们在<code>pom.xml-&gt;dependencies</code>添加一个<code>druid</code>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编辑<code>src\main\resources\application.properties</code>文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 端口号</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8989</span></span><br><span class="line"><span class="comment">## 应用名</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">elementui_users</span></span><br><span class="line"><span class="comment">## API的上下文路径</span></span><br><span class="line"><span class="meta">server.servlet.context-path</span>=<span class="string">/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#数据库相关</span></span><br><span class="line"><span class="comment">## 使用alibaba的druid数据源</span></span><br><span class="line"><span class="meta">sping.datasource.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="comment">## 数据库驱动</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment">## 数据库地址</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/elementui_users?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="comment">## 用户名</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="comment">## 密码</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="comment">## mybatis</span></span><br><span class="line"><span class="comment">## mapper位置</span></span><br><span class="line"><span class="meta">mybatis.mapper-locations</span>=<span class="string">classpath:com/zykj/mapper/*.xml</span></span><br><span class="line"><span class="comment">#别名</span></span><br><span class="line"><span class="meta">mybatis.type-aliases-package</span>=<span class="string">com.zykj.entity</span></span><br></pre></td></tr></table></figure><div class="tabs" id="tab2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab2-1">创建User实体类</button></li><li class="tab"><button type="button" data-href="#tab2-2">创建UserDao接口</button></li><li class="tab"><button type="button" data-href="#tab2-3">创建UserService接口</button></li><li class="tab"><button type="button" data-href="#tab2-4">创建UserController控制器</button></li><li class="tab"><button type="button" data-href="#tab2-5">Result</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab2-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zykj.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="comment">//链式编程</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//需要格式化一下日期</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab2-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zykj.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zykj.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着在<code>src\main\resources\com\zykj\mapper\</code>创建<code>UserDao.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.zykj.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select id,name,birth,sex,address from t_users</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab2-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zykj.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zykj.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类<code>UserServiceImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zykj.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zykj.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.zykj.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Propagation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// 支持当前事务，如果当前没有事务，就以非事务方式执行。</span></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.SUPPORTS)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        userDao.save(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab2-4"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zykj.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zykj.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.zykj.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.CrossOrigin;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="comment">//解决跨域问题</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;findall&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab2-5"><p>在<code>com.zykj.vo</code>创建Result类、用于保存状态信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zykj.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Result</span> </span>&#123;</span><br><span class="line">    <span class="comment">//默认状态</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> status = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">//返回信息</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><p><code>简单测试一下</code>、在<code>src\test\java\com\zykj</code>下创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zykj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zykj.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestUserService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userService.findAll().forEach(user -&gt; System.out.println(<span class="string">&quot;User: &quot;</span> + user));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有报错说明运行成功</p><h4 id="用户管理相关"><a href="#用户管理相关" class="headerlink" title="用户管理相关"></a>用户管理相关</h4><h5 id="查询所有用户"><a href="#查询所有用户" class="headerlink" title="查询所有用户"></a>查询所有用户</h5><p>修改一下<code>User.vue</code>页面配置axios请求</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;User&quot;</span>,</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                search:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line">                tableData: []</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleEdit(index, row) &#123;</span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(index, row);</span></span><br><span class="line">            &#125;,</span><br><span class="line">            handleDelete(index, row) &#123;</span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(index, row);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line"><span class="javascript">            <span class="comment">//页面创建时发起异步请求</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.$http.get( <span class="string">&#x27;http://localhost:8989/user/findall&#x27;</span>).then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.tableData = res.data</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="添加用户和编辑用户"><a href="#添加用户和编辑用户" class="headerlink" title="添加用户和编辑用户"></a>添加用户和编辑用户</h5><p>编辑<code>UserDao.java</code>、添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//保存用户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新用户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure><p>编辑<code>UserDao.xml</code>添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;save&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">    insert into t_users values (#&#123;id&#125;,#&#123;name&#125;,#&#123;birth&#125;,#&#123;sex&#125;,#&#123;address&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    update t_users set name = #&#123;name&#125;, birth = #&#123;birth&#125;, sex = #&#123;sex&#125; , address = #&#123;address&#125;</span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编辑<code>UserService.java</code>和<code>UserServiceImpl.java</code>分别添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UserService.java</span></span><br><span class="line"><span class="comment">//保存用户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新用户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UserServiceImpl.java</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="comment">// 支持当前事务，如果当前没有事务，就以非事务方式执行。</span></span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.SUPPORTS)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    userDao.save(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    userDao.update(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编辑<code>UserController.java</code>、添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;saveOrUpdate&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">save</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> </span>&#123;</span><br><span class="line">    Result reslut = <span class="keyword">new</span> Result();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(user.getId())) &#123;</span><br><span class="line">            userService.save(user);</span><br><span class="line">            reslut.setMsg(<span class="string">&quot;用户信息添加成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            userService.update(user);</span><br><span class="line">            reslut.setMsg(<span class="string">&quot;用户信息更新成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        reslut.setStatus(<span class="keyword">false</span>);</span><br><span class="line">        reslut.setMsg(<span class="string">&quot;发生错误、请稍后再试...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> reslut;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续修改<code>User.vue</code></p><p>添加了<a href="https://element.eleme.cn/#/zh-CN/component/dialog">Dialog 对话框</a> 、<a href="https://element.eleme.cn/#/zh-CN/component/message">Message 消息提示</a> 、<a href="https://element.eleme.cn/#/zh-CN/component/table">Table 表格</a></p><p>代码不全、只展示修改部分</p><p>问题汇总:</p><ul><li><code>为保证输入日期时间正确显示、需要在 el-date-picker 添加format=&quot;yyyy-MM-dd&quot; </code></li><li>表单验证的规则中: date 验证不能添加<code>type=&#39;date&#39;原因</code>:  <a href="https://blog.csdn.net/weixin_44356673/article/details/107222947">https://blog.csdn.net/weixin_44356673/article/details/107222947</a></li><li>方法: <code>handleEdit</code>中 <code>this.form =  &#123;...row&#125;;</code> 避免数据双向绑定造成的错误(这个问题解决了一下午。。。)</li><li>方法: <code>resetForm</code>中使用<code>this.$refs[formName].clearValidate();</code>清除验证,不用<code>resetFields(对该表单项进行重置，将其值重置为初始值并移除校验结果)</code>会重置为有数据的值。文章: <a href="https://blog.csdn.net/haidong55/article/details/90484138">https://blog.csdn.net/haidong55/article/details/90484138</a></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:data</span>=<span class="string">&quot;tableData.filter(data =&gt; !search || data.name.toLowerCase().includes(search.toLowerCase()))&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span>&gt;</span></span><br><span class="line">            ...</span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;header&quot;</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-input</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">v-model</span>=<span class="string">&quot;search&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">placeholder</span>=<span class="string">&quot;输入姓名进行搜索&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span><br><span class="line"><span class="tag">                            @<span class="attr">click</span>=<span class="string">&quot;handleEdit(scope.$index, scope.row)&quot;</span>&gt;</span>编辑</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                    ...</span><br><span class="line">                <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="tag">&lt;<span class="name">el-dialog</span> @<span class="attr">closed</span>=<span class="string">&quot;closeDialog&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;dialogTitle[title]&quot;</span> <span class="attr">:visible.sync</span>=<span class="string">&quot;dialogFormVisible&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">:close-on-click-modal</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;addfrom&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;form&quot;</span> <span class="attr">label-suffix</span>=<span class="string">&quot;:&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">:label-width</span>=<span class="string">&quot;formLabelWidth&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.name&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;生日&quot;</span> <span class="attr">:label-width</span>=<span class="string">&quot;formLabelWidth&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;birth&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-date-picker</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;选择日期&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;form.birth&quot;</span> <span class="attr">value-format</span>=<span class="string">&quot;yyyy-MM-dd&quot;</span></span></span><br><span class="line"><span class="tag">                                    <span class="attr">style</span>=<span class="string">&quot;width: 100%;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;性别&quot;</span> <span class="attr">:label-width</span>=<span class="string">&quot;formLabelWidth&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;sex&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-radio-group</span> <span class="attr">v-model</span>=<span class="string">&quot;form.sex&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">label</span>=<span class="string">&quot;男&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">label</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-radio-group</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;地址&quot;</span> <span class="attr">:label-width</span>=<span class="string">&quot;formLabelWidth&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;address&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">&quot;textarea&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;form.address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dialog-footer&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;AddSubmit(&#x27;addfrom&#x27;)&quot;</span>&gt;</span>&#123;&#123; dialogTitle[title] &#125;&#125;<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;resetForm(&#x27;addfrom&#x27;)&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;User&quot;</span>,</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                title: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line">                dialogTitle: &#123;</span><br><span class="line"><span class="javascript">                    add: <span class="string">&quot;添加&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    update: <span class="string">&quot;编辑&quot;</span>,</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="javascript">                <span class="comment">//...</span></span></span><br><span class="line"><span class="javascript">                search: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line">                tableData: [],</span><br><span class="line"><span class="javascript">                dialogFormVisible: <span class="literal">false</span>,</span></span><br><span class="line">                form: &#123;</span><br><span class="line"><span class="javascript">                    name: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    birth: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    sex: <span class="string">&#x27;男&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    address: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="javascript">                formLabelWidth: <span class="string">&#x27;120px&#x27;</span>,</span></span><br><span class="line">                rules: &#123;</span><br><span class="line">                    name: [</span><br><span class="line"><span class="javascript">                        &#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入姓名&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                        &#123;<span class="attr">min</span>: <span class="number">3</span>, <span class="attr">max</span>: <span class="number">5</span>, <span class="attr">message</span>: <span class="string">&#x27;长度在 3 到 5 个字符&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>&#125;</span></span><br><span class="line">                    ],</span><br><span class="line"><span class="javascript">                    <span class="comment">// 不能填写type 原因: https://blog.csdn.net/weixin_44356673/article/details/107222947</span></span></span><br><span class="line">                    birth: [</span><br><span class="line"><span class="javascript">                        &#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请选择日期&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>&#125;</span></span><br><span class="line">                    ],</span><br><span class="line">                    sex: [</span><br><span class="line"><span class="javascript">                        &#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请选择性别&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>&#125;</span></span><br><span class="line">                    ],</span><br><span class="line">                    address: [</span><br><span class="line"><span class="javascript">                        &#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请填写地址&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>&#125;</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            <span class="comment">//...</span></span></span><br><span class="line">            saveUserInfo() &#123;</span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.resetForm(<span class="string">&#x27;form&#x27;</span>)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.dialogFormVisible = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.title = <span class="string">&quot;add&quot;</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            handleEdit(index, row) &#123;</span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.resetForm(<span class="string">&#x27;form&#x27;</span>)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.dialogFormVisible = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.title = <span class="string">&quot;update&quot;</span>;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 避免数据双向绑定造成的错误</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.form =  &#123;...row&#125;;</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            <span class="comment">// ...</span></span></span><br><span class="line">            AddSubmit(formName) &#123;</span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$refs[formName].validate(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span></span><br><span class="line">                    if (valid) &#123;</span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.$http.post(<span class="string">&quot;http://localhost:8989/user/saveOrUpdate&quot;</span>, <span class="built_in">this</span>.form).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line">                            if (res.data.status) &#123;</span><br><span class="line"><span class="javascript">                                <span class="built_in">this</span>.$message(&#123;</span></span><br><span class="line"><span class="javascript">                                    message: <span class="string">&quot;恭喜你&quot;</span> + res.data.msg,</span></span><br><span class="line"><span class="javascript">                                    type: <span class="string">&quot;success&quot;</span></span></span><br><span class="line">                                &#125;)</span><br><span class="line"><span class="javascript">                                <span class="comment">//清空表单</span></span></span><br><span class="line"><span class="javascript">                                <span class="built_in">this</span>.form = &#123;&#125;</span></span><br><span class="line"><span class="javascript">                                <span class="comment">//关闭消息框</span></span></span><br><span class="line"><span class="javascript">                                <span class="built_in">this</span>.dialogFormVisible = <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">                                <span class="comment">//重新获取数据</span></span></span><br><span class="line"><span class="javascript">                                <span class="built_in">this</span>.findAllTableData()</span></span><br><span class="line"><span class="javascript">                            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                                <span class="built_in">this</span>.$message.error(res.data.msg);</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;)</span><br><span class="line"><span class="javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.$message.error(<span class="string">&quot;请填写完整数据！&quot;</span>)</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            resetForm(formName) &#123;</span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (<span class="built_in">this</span>.$refs[formName] !== <span class="literal">undefined</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.$refs[formName].clearValidate();</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.form = &#123;<span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            <span class="comment">// ...</span></span></span><br><span class="line">            closeDialog() &#123;</span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.resetForm(<span class="string">&#x27;addfrom&#x27;</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.findAllTableData();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.el-button</span> &#123;</span></span><br><span class="line">        margin: 5px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h5><p>编辑<code>UserDao.java</code>、添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除用户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String id)</span></span>;</span><br></pre></td></tr></table></figure><p>编辑<code>UserDao.xml</code>添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;String&quot;</span>&gt;</span></span><br><span class="line">        delete from t_users where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编辑<code>UserService.java</code>和<code>UserServiceImpl.java</code>分别添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UserService.java</span></span><br><span class="line"><span class="comment">//删除用户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String id)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UserServiceImpl.java</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">    userDao.delete(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编辑<code>UserController.java</code>、添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;delete&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">delete</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line">    Result reslut = <span class="keyword">new</span> Result();</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        userService.delete(id);</span><br><span class="line">        reslut.setMsg(<span class="string">&quot;用户信息删除成功&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        reslut.setStatus(<span class="keyword">false</span>);</span><br><span class="line">        reslut.setMsg(<span class="string">&quot;用户信息删除失败、请稍后再试...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> reslut;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续修改<code>User.vue</code></p><p>添加了<a href="https://element.eleme.cn/#/zh-CN/component/popconfirm">Popconfirm 气泡确认框</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:data</span>=<span class="string">&quot;tableData.filter(data =&gt; !search || data.name.toLowerCase().includes(search.toLowerCase()))&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span>&gt;</span></span><br><span class="line">            ... </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">               ...</span><br><span class="line">                <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">                    ...</span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-popconfirm</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">confirmButtonText</span>=<span class="string">&#x27;好的&#x27;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">cancelButtonText</span>=<span class="string">&#x27;不用了&#x27;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">icon</span>=<span class="string">&quot;el-icon-info&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">iconColor</span>=<span class="string">&quot;red&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">title</span>=<span class="string">&quot;确定删除用户吗？&quot;</span></span></span><br><span class="line"><span class="tag">                            @<span class="attr">onConfirm</span>=<span class="string">&quot;handleDelete(scope.$index, scope.row)&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">slot</span>=<span class="string">&quot;reference&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-popconfirm</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">       ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;User&quot;</span>,</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// ...</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            <span class="comment">// ...</span></span></span><br><span class="line">            handleDelete(index, row) &#123;</span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$http.get(<span class="string">&quot;http://localhost:8989/user/delete&quot;</span>, &#123;</span></span><br><span class="line">                    params: &#123;</span><br><span class="line">                        id: row.id</span><br><span class="line">                    &#125;</span><br><span class="line"><span class="javascript">                &#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line">                    if (res.data.status) &#123;</span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.$message(&#123;</span></span><br><span class="line">                            message: res.data.msg,</span><br><span class="line"><span class="javascript">                            type: <span class="string">&quot;success&quot;</span></span></span><br><span class="line">                        &#125;)</span><br><span class="line"><span class="javascript">                        <span class="comment">//重新获取数据</span></span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.findAllTableData()</span></span><br><span class="line"><span class="javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.$message.error(res.data.msg);</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="comment">//...</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.findAllTableData();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="分页效果"><a href="#分页效果" class="headerlink" title="分页效果"></a>分页效果</h4><p>编辑<code>UserDao.java</code>、添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除用户</span></span><br><span class="line"><span class="comment">//分页查询</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByPage</span><span class="params">(<span class="meta">@Param(&quot;start&quot;)</span> Integer start,<span class="meta">@Param(&quot;rows&quot;)</span> Integer rows)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询总数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">findTotals</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>编辑<code>UserDao.xml</code>添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByPage&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select id,name,birth,sex,address from t_users limit #&#123;start&#125;,#&#123;rows&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findTotals&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Long&quot;</span>&gt;</span></span><br><span class="line">    select count(id) from t_users</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编辑<code>UserService.java</code>和<code>UserServiceImpl.java</code>分别添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UserService.java</span></span><br><span class="line"><span class="comment">//分页查询</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByPage</span><span class="params">(Integer pageNow, Integer rows)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询总数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">findTotals</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UserServiceImpl.java</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByPage</span><span class="params">(Integer pageNow, Integer rows)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> start = (pageNow - <span class="number">1</span>) * rows;</span><br><span class="line">    <span class="keyword">return</span> userDao.findByPage(start, rows);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">findTotals</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userDao.findTotals();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编辑<code>UserController.java</code>、添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;findByPage&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">findByPage</span><span class="params">(<span class="meta">@RequestParam(value = &quot;pageNow&quot;,defaultValue = &quot;1&quot;)</span> Integer pageNow,<span class="meta">@RequestParam(value = &quot;pageSize&quot;,defaultValue = &quot;5&quot;)</span> Integer pageSize)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    List&lt;User&gt; users = userService.findByPage(pageNow, pageSize);</span><br><span class="line">    Long totals = userService.findTotals();</span><br><span class="line">    result.put(<span class="string">&quot;users&quot;</span>, users);</span><br><span class="line">    result.put(<span class="string">&quot;total&quot;</span>, totals);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续修改<code>User.vue</code></p><p>添加了<a href="https://element.eleme.cn/#/zh-CN/component/pagination">Pagination 分页</a></p><p>一定要设置<code>page-size</code>和<code>page-sizes</code>否则不能自定义显示的页数。。。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="tag">&lt;<span class="name">el-row</span> <span class="attr">:gutter</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;8&quot;</span> <span class="attr">:offset</span>=<span class="string">&quot;14&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-pagination</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">layout</span>=<span class="string">&quot;prev, pager, next, jumper, total, sizes&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">:page-size</span>=<span class="string">&quot;size&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">:current-page</span>=<span class="string">&quot;pageNow&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">:page-sizes</span>=<span class="string">&quot;[1,3,5,7,9]&quot;</span></span></span><br><span class="line"><span class="tag">                        @<span class="attr">size-change</span>=<span class="string">&quot;findSize&quot;</span></span></span><br><span class="line"><span class="tag">                        @<span class="attr">current-change</span>=<span class="string">&quot;findPage&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">:total</span>=<span class="string">&quot;totalSize&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">       ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;User&quot;</span>,</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//...</span></span></span><br><span class="line">                totalSize: 0,</span><br><span class="line">                pageNow: 1,</span><br><span class="line">                size: 5,</span><br><span class="line"><span class="javascript">                <span class="comment">//...</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            findSize(size) &#123;</span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.size = size;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.findAllTableData(<span class="built_in">this</span>.pageNow, size)</span></span><br><span class="line">            &#125;,</span><br><span class="line">            findPage(page) &#123;</span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.pageNow = page;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.findAllTableData(page, <span class="built_in">this</span>.size)</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            <span class="comment">//...</span></span></span><br><span class="line">            findAllTableData(page, size) &#123;</span><br><span class="line"><span class="javascript">                page = page == <span class="literal">null</span> ? <span class="number">1</span> : page;</span></span><br><span class="line"><span class="javascript">                size = size == <span class="literal">null</span> ? <span class="number">5</span> : size;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$http.get(<span class="string">&#x27;http://localhost:8989/user/findByPage&#x27;</span>, &#123;</span></span><br><span class="line">                    params: &#123;</span><br><span class="line">                        pageNow: page,</span><br><span class="line">                        pageSize: size</span><br><span class="line">                    &#125;</span><br><span class="line"><span class="javascript">                &#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.tableData = res.data.users</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.totalSize = res.data.total</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">//...</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript"><span class="comment">//...</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h4><p>到这里一个简单的ElementUi项目就完成了、需要打包Vue项目、在Vue项目根目录运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>将生成的项目<code>dist</code>目录下的 <code>static目录</code>与<code>index.html</code>放到SpringBoot项目<code>src\main\resources\static</code>下</p><p>编辑<code>src\main\resources\application.properties</code>文件、添加</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.resources.static-locations</span>=<span class="string">classpath:/static/</span></span><br></pre></td></tr></table></figure><p>之后直接运行SpringBoot项目访问 <a href="http://localhost:8989/">http://localhost:8989</a> 就可以了.</p>]]></content>
      
      
      <categories>
          
          <category> Web教程 </category>
          
          <category> ElementUi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
            <tag> ElementUi </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElementUi学习(上)</title>
      <link href="/posts/906e6f9d/"/>
      <url>/posts/906e6f9d/</url>
      
        <content type="html"><![CDATA[<h2 id="ElementUi-学习-上"><a href="#ElementUi-学习-上" class="headerlink" title="ElementUi 学习(上)"></a>ElementUi 学习(上)</h2><p>封面P站: <a href="https://www.pixiv.net/artworks/82970659">https://www.pixiv.net/artworks/82970659</a></p><link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/zykjofficial/zykjresource@master/css/elementui.css"><p><code>对于向我这样的菜鸡来说还是看视频学、直接看文档太。。。</code></p><div class="note info"><p>视频教程: <a href="https://www.bilibili.com/video/BV1NK4y187XH">https://www.bilibili.com/video/BV1NK4y187XH</a></p></div><h3 id="ElementUi引言"><a href="#ElementUi引言" class="headerlink" title="ElementUi引言"></a>ElementUi引言</h3><p><img src= "/img/loading.gif" data-lazy-src="https://element.eleme.cn/static/theme-index-blue.c38b733.png" alt="官网"></p><ul><li><p>什么时ElementUI？</p><p>  官网: <a href="https://element.eleme.cn/#/zh-CN">https://element.eleme.cn/#/zh-CN</a></p><p>  <code>网站快速成型工具</code>和<code>桌面端组件库</code></p></li><li><p>定义</p><p>  element ui 就是基于vue的一个ui框架，改框架基于vue开发利很多相关的组件，方便我们快速开发页面。</p></li></ul><h3 id="安装与使用"><a href="#安装与使用" class="headerlink" title="安装与使用"></a>安装与使用</h3><ul><li><p>使用vuecli4创建项目</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create elementui</span><br></pre></td></tr></table></figure></li><li><p>npm 安装</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i element-ui -S</span><br></pre></td></tr></table></figure></li><li><p>使用</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="comment">//导入ElementUi</span></span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用ElementUi</span></span><br><span class="line">Vue.use(ElementUI)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="按钮组件"><a href="#按钮组件" class="headerlink" title="按钮组件"></a>按钮组件</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p><button type="button" class="el-button el-button--default"><span>默认按钮</span></button><button type="button" class="el-button el-button--primary"><span>主要按钮</span></button><button type="button" class="el-button el-button--success"><span>成功按钮</span></button><button type="button" class="el-button el-button--info"><span>信息按钮</span></button><button type="button" class="el-button el-button--warning"><span>警告按钮</span></button><button type="button" class="el-button el-button--danger"><span>危险按钮</span></button></p><p><button type="button" class="el-button el-button--default is-plain"><span>朴素按钮</span></button><button type="button" class="el-button el-button--primary is-plain"><span>主要按钮</span></button><button type="button" class="el-button el-button--success is-plain"><span>成功按钮</span></button><button type="button" class="el-button el-button--info is-plain"><span>信息按钮</span></button><button type="button" class="el-button el-button--warning is-plain"><span>警告按钮</span></button><button type="button" class="el-button el-button--danger is-plain"><span>危险按钮</span></button></p><p><button type="button" class="el-button el-button--default is-round"><span>圆角按钮</span></button><button type="button" class="el-button el-button--primary is-round"><span>主要按钮</span></button><button type="button" class="el-button el-button--success is-round"><span>成功按钮</span></button><button type="button" class="el-button el-button--info is-round"><span>信息按钮</span></button><button type="button" class="el-button el-button--warning is-round"><span>警告按钮</span></button><button type="button" class="el-button el-button--danger is-round"><span>危险按钮</span></button></p><p><button type="button" class="el-button el-button--default is-circle"><i class="el-icon-search"></i></button><button type="button" class="el-button el-button--primary is-circle"><i class="el-icon-edit"></i></button><button type="button" class="el-button el-button--success is-circle"><i class="el-icon-check"></i></button><button type="button" class="el-button el-button--info is-circle"><i class="el-icon-message"></i></button><button type="button" class="el-button el-button--warning is-circle"><i class="el-icon-star-off"></i></button><button type="button" class="el-button el-button--danger is-circle"><i class="el-icon-delete"></i></button></p><h5 id="默认按钮"><a href="#默认按钮" class="headerlink" title="默认按钮"></a>默认按钮</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span>&gt;</span>默认按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>主要按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span>&gt;</span>成功按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;info&quot;</span>&gt;</span>信息按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;warning&quot;</span>&gt;</span>警告按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span>&gt;</span>危险按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="朴素按钮"><a href="#朴素按钮" class="headerlink" title="朴素按钮"></a>朴素按钮</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">plain</span>&gt;</span>朴素按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">plain</span>&gt;</span>主要按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span> <span class="attr">plain</span>&gt;</span>成功按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;info&quot;</span> <span class="attr">plain</span>&gt;</span>信息按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;warning&quot;</span> <span class="attr">plain</span>&gt;</span>警告按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">plain</span>&gt;</span>危险按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="圆角按钮"><a href="#圆角按钮" class="headerlink" title="圆角按钮"></a>圆角按钮</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">round</span>&gt;</span>圆角按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">round</span>&gt;</span>主要按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span> <span class="attr">round</span>&gt;</span>成功按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;info&quot;</span> <span class="attr">round</span>&gt;</span>信息按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;warning&quot;</span> <span class="attr">round</span>&gt;</span>警告按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">round</span>&gt;</span>危险按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="图标按钮"><a href="#图标按钮" class="headerlink" title="图标按钮"></a>图标按钮</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-search&quot;</span> <span class="attr">circle</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-edit&quot;</span> <span class="attr">circle</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-check&quot;</span> <span class="attr">circle</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;info&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-message&quot;</span> <span class="attr">circle</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;warning&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-star-off&quot;</span> <span class="attr">circle</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-delete&quot;</span> <span class="attr">circle</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="按钮组件详细使用"><a href="#按钮组件详细使用" class="headerlink" title="按钮组件详细使用"></a>按钮组件详细使用</h4><p><code>elementui</code>的相关的组件都是以<code>el-</code>开头的</p><ul><li><p>创建按钮</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span>&gt;</span>默认按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>按钮的属性使用</p><p>  <code>&lt;el-button 属性名=属性值 &gt;按钮&lt;/el-button&gt;</code></p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;sucess&quot;</span> <span class="attr">size</span>=<span class="string">&quot;medium&quot;</span> <span class="attr">plain</span> <span class="attr">round</span> <span class="attr">circle</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-loading&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>按钮组的使用</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button-group</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-arrow-left&quot;</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>下一页<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-arrow-right el-icon--right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-button-group</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>更多</p><p>  官网: <a href="https://element.eleme.cn/#/zh-CN/component/button">https://element.eleme.cn/#/zh-CN/component/button</a></p></li><li><p>注意</p><p>  在element ui中所有组件都是 <code>el-组件名称</code> 方式进行命名</p><p>  在element ui中组件的属性都是直接将<code>属性名=属性值</code>方式写在对应的组件标签上</p></li></ul><h3 id="文字链接"><a href="#文字链接" class="headerlink" title="文字链接"></a>文字链接</h3><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><p>没有示例、懒得弄了</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ul><li><p>基础用法</p><p>  <code>type=&quot;primary|success|warning|danger|info&quot;</code></p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-link</span> <span class="attr">href</span>=<span class="string">&quot;https://element.eleme.io&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>默认链接<span class="tag">&lt;/<span class="name">el-link</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>下划线: <code>:underline=&quot;false&quot; 默认为true 有下划线</code></p><p>  文字链接下划线</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 需要绑定属性 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-link</span> <span class="attr">:underline</span>=<span class="string">&quot;false&quot;</span>&gt;</span>无下划线<span class="tag">&lt;/<span class="name">el-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-link</span>&gt;</span>有下划线<span class="tag">&lt;/<span class="name">el-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>图标 <code>icon</code></p><p>  带图标的文字链接可增强辨识度</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-link</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-edit&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">el-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-link</span>&gt;</span>查看<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-view el-icon--right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> <span class="tag">&lt;/<span class="name">el-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>官网: <a href="https://element.eleme.cn/#/zh-CN/component/link">https://element.eleme.cn/#/zh-CN/component/link</a></p><h3 id="Layout布局"><a href="#Layout布局" class="headerlink" title="Layout布局"></a>Layout布局</h3><p>通过基础的 <code>24 分栏</code>，迅速简便地创建布局。在element ui中布局组件将页面分为多个行row，每行多分为24栏(列)</p><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><p><code>el-row</code>代表 <code>行</code> 、 <code>el-col</code>代表 <code>列</code>  <code>:span</code> 代表 <code>占用的份数</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;8&quot;</span>&gt;</span>我是8份<span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;8&quot;</span>&gt;</span>我是8份<span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;8&quot;</span>&gt;</span>我是8份<span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="属性的使用"><a href="#属性的使用" class="headerlink" title="属性的使用"></a>属性的使用</h4><ul><li><p>行属性使用</p><p>  <code>:gutter</code>: 栅格间隔 如: <code>:gutter=20</code></p><p>  <code>tag</code>: 将标签渲染成指定标签 如: <code>tag=&quot;span&quot; 渲染成 span标签</code></p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-row</span> <span class="attr">:gutter</span>=<span class="string">&quot;50&quot;</span> <span class="attr">tag</span>=<span class="string">&quot;span&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid red&quot;</span>&gt;</span>我是4份<span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid red&quot;</span>&gt;</span>我是12份<span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid red&quot;</span>&gt;</span>我是2份<span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;6&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid red&quot;</span>&gt;</span>我是6份<span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>列属性使用</p><p>  <code>:offset</code>: 栅格左侧的间隔格数<br>  <code>:push</code>: 栅格向右移动格数<br>  <code>:pull</code>: 栅格向左移动格数    </p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-row</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:offset</span>=<span class="string">&quot;9&quot;</span> <span class="attr">:push</span>=<span class="string">&quot;3&quot;</span> <span class="attr">:span</span>=<span class="string">&quot;12&quot;</span> <span class="attr">xs</span> &gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid red&quot;</span>&gt;</span>我是12份<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;6&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid red&quot;</span>&gt;</span>我是6份<span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>官网: <a href="https://element.eleme.cn/#/zh-CN/component/container">https://element.eleme.cn/#/zh-CN/component/container</a></p><h3 id="Container容器"><a href="#Container容器" class="headerlink" title="Container容器"></a>Container容器</h3><h4 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h4><ul><li><p>创建布局容器</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-container&gt;：外层容器。当子元素中包含 &lt;el-header&gt; 或 &lt;el-footer&gt; 时，全部子元素会垂直上下排列，否则会水平左右排列。</span><br></pre></td></tr></table></figure></li><li><p>容器中的子元素</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-header&gt;：顶栏容器。</span><br><span class="line"></span><br><span class="line">&lt;el-aside&gt;：侧边栏容器。</span><br><span class="line"></span><br><span class="line">&lt;el-main&gt;：主要区域容器。</span><br><span class="line"></span><br><span class="line">&lt;el-footer&gt;：底栏容器。</span><br></pre></td></tr></table></figure></li><li><p>容器嵌套</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-header</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-header</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 容器的嵌套 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- aside --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-aside</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是菜单<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- main --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-main</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是中心内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- footer --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-footer</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是尾部内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.el-header</span>, <span class="selector-class">.el-footer</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#B3C0D1</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line">    text-align: center;</span><br><span class="line">    line-height: 60px;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="css">  <span class="selector-class">.el-aside</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#D3DCE6</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line">    text-align: center;</span><br><span class="line">    line-height: 200px;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="css">  <span class="selector-class">.el-main</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#E9EEF3</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line">    text-align: center;</span><br><span class="line">    line-height: 160px;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="css">  <span class="selector-tag">body</span> &gt; <span class="selector-class">.el-container</span> &#123;</span></span><br><span class="line">    margin-bottom: 40px;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="css">  <span class="selector-class">.el-container</span><span class="selector-pseudo">:nth-child(5)</span> <span class="selector-class">.el-aside</span>,</span></span><br><span class="line"><span class="css">  <span class="selector-class">.el-container</span><span class="selector-pseudo">:nth-child(6)</span> <span class="selector-class">.el-aside</span> &#123;</span></span><br><span class="line">    line-height: 260px;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="css">  <span class="selector-class">.el-container</span><span class="selector-pseudo">:nth-child(7)</span> <span class="selector-class">.el-aside</span> &#123;</span></span><br><span class="line">    line-height: 320px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>水平容器 <code>direction=&quot;horizontal&quot;</code></p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-container</span> <span class="attr">direction</span>=<span class="string">&quot;horizontal&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-header</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-header</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 容器的嵌套 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- aside --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-aside</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是菜单<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- main --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-main</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是中心内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- footer --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-footer</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是尾部内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>垂直容器 <code>direction=&quot;vertical&quot;</code> 子元素中有 <code>el-header</code> 或 <code>el-footer</code> 时为 vertical</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-container</span> <span class="attr">direction</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-header</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-header</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 容器的嵌套 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- aside --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-aside</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是菜单<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- main --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-main</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是中心内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- footer --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-footer</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是尾部内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">el-footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="属性的使用-1"><a href="#属性的使用-1" class="headerlink" title="属性的使用"></a>属性的使用</h4><p><code>el-header</code> 中的<code>height</code>属性: 顶栏高度、默认: <code>60px</code></p><p><code>el-aside</code>中的<code>width</code>属性: 侧边栏宽度、默认: <code>300px</code></p><p><code>el-footer</code> 中的<code>height</code>属性: 底栏高度、默认: <code>60px</code></p><p>官网: <a href="https://element.eleme.cn/#/zh-CN/component/container">https://element.eleme.cn/#/zh-CN/component/container</a></p><h3 id="Form相关组件"><a href="#Form相关组件" class="headerlink" title="Form相关组件"></a>Form相关组件</h3><h4 id="Radio-单选框"><a href="#Radio-单选框" class="headerlink" title="Radio 单选框"></a>Radio 单选框</h4><h5 id="使用-3"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h5><ul><li><p><code>创建Radio按钮</code></p><p>  使用需要添加<code>v-model</code>和<code>label</code>属性</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">v-model</span>=<span class="string">&quot;label&quot;</span> <span class="attr">label</span>=<span class="string">&quot;男&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">v-model</span>=<span class="string">&quot;label&quot;</span> <span class="attr">label</span>=<span class="string">&quot;女&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;Radio&quot;</span>,</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                label: <span class="string">&#x27;男&#x27;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>创建Radio按钮组</code></p><p>  结合<code>el-radio-group</code>元素和子元素<code>el-radio</code>可以实现单选组</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-radio-group</span> <span class="attr">v-model</span>=<span class="string">&quot;radio&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">:label</span>=<span class="string">&quot;3&quot;</span>&gt;</span>备选项3<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">:label</span>=<span class="string">&quot;6&quot;</span>&gt;</span>备选项6<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">:label</span>=<span class="string">&quot;9&quot;</span>&gt;</span>备选项9<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-radio-group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data () &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        radio: 3</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>绑定事件</p><p>   <code>change</code>: 绑定值变化时触发的事件、选中的 <code>Radio中label的值</code></p>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">v-model</span>=<span class="string">&quot;label&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;changRadio&quot;</span> <span class="attr">label</span>=<span class="string">&quot;男&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">v-model</span>=<span class="string">&quot;label&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;changRadio&quot;</span> <span class="attr">label</span>=<span class="string">&quot;女&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">     <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">         name: <span class="string">&quot;Radio&quot;</span>,</span></span><br><span class="line">         data() &#123;</span><br><span class="line"><span class="javascript">             <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                 label: <span class="string">&#x27;男&#x27;</span>,</span></span><br><span class="line">             &#125;</span><br><span class="line">         &#125;,</span><br><span class="line">         methods:&#123;</span><br><span class="line">             changRadio()&#123;</span><br><span class="line"><span class="javascript">                 <span class="built_in">console</span>.log(<span class="built_in">this</span>.label)</span></span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建按钮样式Radio组</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-radio-group</span> <span class="attr">v-model</span>=<span class="string">&quot;radio1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-radio-button</span> <span class="attr">label</span>=<span class="string">&quot;上海&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-radio-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-radio-button</span> <span class="attr">label</span>=<span class="string">&quot;北京&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-radio-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-radio-button</span> <span class="attr">label</span>=<span class="string">&quot;广州&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-radio-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-radio-button</span> <span class="attr">label</span>=<span class="string">&quot;深圳&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-radio-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-radio-group</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">     <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">         name: <span class="string">&quot;Radio&quot;</span>,</span></span><br><span class="line">         data() &#123;</span><br><span class="line"><span class="javascript">             <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                 radio1: <span class="string">&#x27;上海&#x27;</span>,</span></span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p> Radio组属性:</p><p> 注意: <code>text-color 和 fill 只对el-radio-button生效 </code></p><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>value / v-model</code></td><td align="left">绑定值</td><td align="left"><code>string / number / </code>boolean</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left"><code>size</code></td><td align="left">单选框组尺寸，仅对按钮形式的 Radio 或带有边框的 Radio 有效</td><td align="left"><code>string</code></td><td align="left"><code>medium / small / mini</code></td><td align="left">—</td></tr><tr><td align="left"><code>disabled</code></td><td align="left">是否禁用</td><td align="left"><code>boolean</code></td><td align="left">—</td><td align="left"><code>false</code></td></tr><tr><td align="left"><code>text-color</code></td><td align="left"><code>按钮形式</code>的 Radio 激活时的文本颜色</td><td align="left"><code>string</code></td><td align="left">—</td><td align="left"><code>#ffffff</code></td></tr><tr><td align="left"><code>fill</code></td><td align="left"><code>按钮形式</code>的 Radio 激活时的填充色和边框色</td><td align="left"><code>string</code></td><td align="left">—</td><td align="left"><code>#409EFF</code></td></tr></tbody></table></li></ul><h5 id="属性的使用-2"><a href="#属性的使用-2" class="headerlink" title="属性的使用"></a>属性的使用</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">v-model</span>=<span class="string">&quot;label&quot;</span> <span class="attr">label</span>=<span class="string">&quot;女&quot;</span> <span class="attr">disabled</span> <span class="attr">border</span> <span class="attr">size</span>=<span class="string">&quot;medium&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">v-model</span>=<span class="string">&quot;label&quot;</span> <span class="attr">label</span>=<span class="string">&quot;女&quot;</span> <span class="attr">border</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>value / v-model</code></td><td align="left">绑定值</td><td align="left"><code>string / number / boolean</code></td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left"><code>label</code></td><td align="left">Radio 的 value</td><td align="left"><code>string / number / boolean</code></td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left"><code>disabled</code></td><td align="left">是否禁用</td><td align="left"><code>boolean</code></td><td align="left">—</td><td align="left"><code>false</code></td></tr><tr><td align="left"><code>border</code></td><td align="left">是否显示边框</td><td align="left"><code>boolean</code></td><td align="left">—</td><td align="left"><code>false</code></td></tr><tr><td align="left"><code>size</code></td><td align="left">Radio 的尺寸，仅在 border 为真时有效</td><td align="left"><code>string</code></td><td align="left"><code>medium / small / mini</code></td><td align="left">—</td></tr><tr><td align="left"><code>name</code></td><td align="left">原生 name 属性</td><td align="left"><code>string</code></td><td align="left">—</td><td align="left">—</td></tr></tbody></table><p>官网: <a href="https://element.eleme.cn/#/zh-CN/component/radio">https://element.eleme.cn/#/zh-CN/component/radio</a></p><h4 id="CheckBox-多选框"><a href="#CheckBox-多选框" class="headerlink" title="CheckBox 多选框"></a>CheckBox 多选框</h4><h5 id="使用-4"><a href="#使用-4" class="headerlink" title="使用"></a>使用</h5><ul><li><p><code>创建CheckBox多选框</code></p><p>  <code>el-checkbox</code> 需要使用<code>v-model</code>绑定<code>Boolean</code>值变量，选中为<code>true</code></p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">v-model</span>=<span class="string">&quot;check&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;CheckBox&quot;</span>,</span></span><br><span class="line">        data()&#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">                check: <span class="literal">true</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>创建CheckBox多选框组</code> </p><p>  使用<code>el-checkbox-group</code>+ <code>el-checkbox</code></p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-checkbox-group</span> <span class="attr">v-model</span>=<span class="string">&quot;checkList&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">label</span>=<span class="string">&quot;复选框 A&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">label</span>=<span class="string">&quot;复选框 B&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">label</span>=<span class="string">&quot;复选框 C&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">label</span>=<span class="string">&quot;禁用&quot;</span> <span class="attr">disabled</span>&gt;</span><span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">label</span>=<span class="string">&quot;选中且禁用&quot;</span> <span class="attr">disabled</span>&gt;</span><span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-checkbox-group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data () &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        checkList: [<span class="string">&#x27;选中且禁用&#x27;</span>,<span class="string">&#x27;复选框 A&#x27;</span>]</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>绑定事件</p><p>  使用 <code>@change</code></p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">v-model</span>=<span class="string">&quot;check&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;CheckBox&quot;</span>,</span></span><br><span class="line">        data()&#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">                check: <span class="literal">true</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            checkbox()&#123;</span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="built_in">this</span>.check);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="属性的使用-3"><a href="#属性的使用-3" class="headerlink" title="属性的使用"></a>属性的使用</h5><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>label</code></td><td align="left">选中状态的值（只有在<code>checkbox-group</code>或者绑定对象类型为<code>array</code>时有效）</td><td align="left"><code>string / number / boolean</code></td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left"><code>true-label</code></td><td align="left">选中时的值</td><td align="left"><code>string / number</code></td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left"><code>false-label</code></td><td align="left">没有选中时的值</td><td align="left"><code>string / number</code></td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left"><code>disabled</code></td><td align="left">是否禁用</td><td align="left"><code>boolean</code></td><td align="left">—</td><td align="left"><code>false</code></td></tr><tr><td align="left"><code>border</code></td><td align="left">是否显示边框</td><td align="left"><code>boolean</code></td><td align="left">—</td><td align="left"><code>false</code></td></tr><tr><td align="left"><code>size</code></td><td align="left">Checkbox 的尺寸，仅在 border 为真时有效</td><td align="left"><code>string</code></td><td align="left"><code>medium / small / mini</code></td><td align="left">—</td></tr><tr><td align="left"><code>name</code></td><td align="left">原生 name 属性</td><td align="left"><code>string</code></td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left"><code>checked</code></td><td align="left">当前是否勾选</td><td align="left"><code>boolean</code></td><td align="left">—</td><td align="left"><code>false</code></td></tr></tbody></table><p>官网: <a href="https://element.eleme.cn/#/zh-CN/component/checkbox">https://element.eleme.cn/#/zh-CN/component/checkbox</a></p><h4 id="Input-输入框"><a href="#Input-输入框" class="headerlink" title="Input 输入框"></a>Input 输入框</h4><h5 id="使用-5"><a href="#使用-5" class="headerlink" title="使用"></a>使用</h5><ul><li><p>创建input输入框</p><p>  使用<code>el-input</code></p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;input&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入内容&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      input: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h5><p><code>常用属性</code></p><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>type</code></td><td align="left">类型</td><td align="left"><code>string</code></td><td align="left">text，textarea 和其他 <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form__types">原生 input 的 type 值</a></td><td align="left"><code>text</code></td></tr><tr><td align="left"><code>maxlength</code></td><td align="left">原生属性，最大输入长度</td><td align="left"><code>number</code></td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left"><code>minlength</code></td><td align="left">原生属性，最小输入长度</td><td align="left"><code>number</code></td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left"><code>show-word-limit</code></td><td align="left">是否显示输入字数统计，只在 <code>type = &quot;text&quot;</code> 或 <code>type = &quot;textarea&quot;</code> 时有效</td><td align="left"><code>boolean</code></td><td align="left">—</td><td align="left"><code>false</code></td></tr><tr><td align="left"><code>placeholder</code></td><td align="left">输入框占位文本</td><td align="left"><code>string</code></td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left"><code>clearable</code></td><td align="left">是否可清空</td><td align="left"><code>boolean</code></td><td align="left">—</td><td align="left"><code>false</code></td></tr><tr><td align="left"><code>show-password</code></td><td align="left">是否显示切换密码图标</td><td align="left"><code>boolean</code></td><td align="left">—</td><td align="left"><code>false</code></td></tr><tr><td align="left"><code>disabled</code></td><td align="left">禁用</td><td align="left"><code>boolean</code></td><td align="left">—</td><td align="left"><code>false</code></td></tr><tr><td align="left"><code>size</code></td><td align="left">输入框尺寸，只在 <code>type!=&quot;textarea&quot;</code> 时有效</td><td align="left"><code>string</code></td><td align="left"><code>medium / small / mini</code></td><td align="left">—</td></tr><tr><td align="left"><code>prefix-icon</code></td><td align="left">输入框头部图标</td><td align="left"><code>string</code></td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left"><code>suffix-icon</code></td><td align="left">输入框尾部图标</td><td align="left"><code>string</code></td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left"><code>rows</code></td><td align="left">输入框行数，只对 <code>type=&quot;textarea&quot;</code> 有效</td><td align="left"><code>number</code></td><td align="left">—</td><td align="left"><code>2</code></td></tr><tr><td align="left"><code>autosize</code></td><td align="left">自适应内容高度，只对 <code>type=&quot;textarea&quot;</code> 有效，可传入对象，如，{ minRows: 2, maxRows: 6 }</td><td align="left"><code>boolean / object</code></td><td align="left">—</td><td align="left"><code>false</code></td></tr><tr><td align="left"><code>autocomplete</code></td><td align="left">原生属性，自动补全</td><td align="left"><code>string</code></td><td align="left"><code>on, off</code></td><td align="left"><code>off</code></td></tr></tbody></table><h5 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h5><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left"><code>blur</code></td><td align="left">在 Input 失去焦点时触发</td><td align="left"><code>(event: Event)</code></td></tr><tr><td align="left"><code>focus</code></td><td align="left">在 Input 获得焦点时触发</td><td align="left"><code>(event: Event)</code></td></tr><tr><td align="left"><code>change</code></td><td align="left">仅在输入框失去焦点或用户按下回车时触发</td><td align="left"><code>(value: string / number)</code></td></tr><tr><td align="left"><code>input</code></td><td align="left">在 Input 值改变时触发</td><td align="left"><code>(value: string / number)</code></td></tr><tr><td align="left"><code>clear</code></td><td align="left">在点击由 <code>clearable</code> 属性生成的清空按钮时触发</td><td align="left">—</td></tr></tbody></table><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>方法的使用<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;inputs&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;focusInputs&quot;</span>&gt;</span>focus方法<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;blurInputs&quot;</span>&gt;</span>blur方法<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot; Input&quot;</span>,</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>&#123;&#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line"><span class="javascript">        <span class="comment">//调用focus方法</span></span></span><br><span class="line">            focusInputs()&#123;</span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$refs.inputs.focus();</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            <span class="comment">//调用失去焦点方法</span></span></span><br><span class="line">            blurInputs()&#123;</span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$refs.inputs.blur();</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结</p><ul><li>在使用组件的方法时需要在对应的组件中加入<code>ref=&quot;组件别名&quot;</code></li><li>在调用方法时直接使用<code>this.$refs.组件别名.方法名()</code></li></ul><p>官网: <a href="https://element.eleme.cn/#/zh-CN/component/input">https://element.eleme.cn/#/zh-CN/component/input</a></p><h4 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h4><p><code>注意</code>: 在elementui中所有组件都存在<code>属性</code>、<code>事件</code>和<code>方法</code><br><code>属性</code>: 直接写在对应的组件标签上使用方式:<code>属性名=属性值方式</code><br><code>事件</code>: 直接使用vue绑定事件方式写在对应的组件标签上、使用方式:<code> @事件名=vue中事件处理函数</code><br><code>方法</code>: </p><ol><li>在对应组件标签上使用<code>ref=组件别名</code></li><li>通过使用<code>this.$refs.组件别名.方法名()</code>进行调用</li></ol><h4 id="Select-选择器"><a href="#Select-选择器" class="headerlink" title="Select 选择器"></a>Select 选择器</h4><h5 id="使用-6"><a href="#使用-6" class="headerlink" title="使用"></a>使用</h5><p>使用 <code>el-select</code> <code>el-option</code> 创建 、动态绑定数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;value&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-option</span>  <span class="attr">v-for</span>=<span class="string">&quot;option in options&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;option.value&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;option.value&quot;</span> <span class="attr">:label</span>=<span class="string">&quot;option.label&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;Select&quot;</span>,</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">                options: [&#123;</span><br><span class="line"><span class="javascript">                    value: <span class="string">&#x27;选项1&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    label: <span class="string">&#x27;黄金糕&#x27;</span></span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line"><span class="javascript">                    value: <span class="string">&#x27;选项2&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    label: <span class="string">&#x27;双皮奶&#x27;</span></span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line"><span class="javascript">                    value: <span class="string">&#x27;选项3&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    label: <span class="string">&#x27;蚵仔煎&#x27;</span></span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line"><span class="javascript">                    value: <span class="string">&#x27;选项4&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    label: <span class="string">&#x27;龙须面&#x27;</span></span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line"><span class="javascript">                    value: <span class="string">&#x27;选项5&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    label: <span class="string">&#x27;北京烤鸭&#x27;</span></span></span><br><span class="line">                &#125;],</span><br><span class="line"><span class="javascript">                value: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意:</p><ol><li>要求下拉列表中必须存在<code>option</code>的<code>value</code>属性值</li><li>要求<code>select</code>中必须使用<code>v-model</code>进行数据绑定</li></ol><h5 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h5><p>去官网看更佳</p><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">value / v-model</td><td align="left">绑定值</td><td align="left">boolean / string / number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">multiple</td><td align="left">是否多选</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">disabled</td><td align="left">是否禁用</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">value-key</td><td align="left">作为 value 唯一标识的键名，绑定值为对象类型时必填</td><td align="left">string</td><td align="left">—</td><td align="left">value</td></tr><tr><td align="left">size</td><td align="left">输入框尺寸</td><td align="left">string</td><td align="left">medium/small/mini</td><td align="left">—</td></tr><tr><td align="left">clearable</td><td align="left">是否可以清空选项</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">collapse-tags</td><td align="left">多选时是否将选中值按文字的形式展示</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">multiple-limit</td><td align="left">多选时用户最多可以选择的项目数，为 0 则不限制</td><td align="left">number</td><td align="left">—</td><td align="left">0</td></tr><tr><td align="left">name</td><td align="left">select input 的 name 属性</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">autocomplete</td><td align="left">select input 的 autocomplete 属性</td><td align="left">string</td><td align="left">—</td><td align="left">off</td></tr><tr><td align="left">auto-complete</td><td align="left">下个主版本弃用</td><td align="left">string</td><td align="left">—</td><td align="left">off</td></tr><tr><td align="left">placeholder</td><td align="left">占位符</td><td align="left">string</td><td align="left">—</td><td align="left">请选择</td></tr><tr><td align="left">filterable</td><td align="left">是否可搜索</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">allow-create</td><td align="left">是否允许用户创建新条目，需配合 <code>filterable</code> 使用</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">filter-method</td><td align="left">自定义搜索方法</td><td align="left">function</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">remote</td><td align="left">是否为远程搜索</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">remote-method</td><td align="left">远程搜索方法</td><td align="left">function</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">loading</td><td align="left">是否正在从远程获取数据</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">loading-text</td><td align="left">远程加载时显示的文字</td><td align="left">string</td><td align="left">—</td><td align="left">加载中</td></tr><tr><td align="left">no-match-text</td><td align="left">搜索条件无匹配时显示的文字，也可以使用<code>slot=&quot;empty&quot;</code>设置</td><td align="left">string</td><td align="left">—</td><td align="left">无匹配数据</td></tr><tr><td align="left">no-data-text</td><td align="left">选项为空时显示的文字，也可以使用<code>slot=&quot;empty&quot;</code>设置</td><td align="left">string</td><td align="left">—</td><td align="left">无数据</td></tr><tr><td align="left">popper-class</td><td align="left">Select 下拉框的类名</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">reserve-keyword</td><td align="left">多选且可搜索时，是否在选中一个选项后保留当前的搜索关键词</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">default-first-option</td><td align="left">在输入框按下回车，选择第一个匹配项。需配合 <code>filterable</code> 或 <code>remote</code> 使用</td><td align="left">boolean</td><td align="left">-</td><td align="left">false</td></tr><tr><td align="left">popper-append-to-body</td><td align="left">是否将弹出框插入至 body 元素。在弹出框的定位出现问题时，可将该属性设置为 false</td><td align="left">boolean</td><td align="left">-</td><td align="left">true</td></tr><tr><td align="left">automatic-dropdown</td><td align="left">对于不可搜索的 Select，是否在输入框获得焦点后自动弹出选项菜单</td><td align="left">boolean</td><td align="left">-</td><td align="left">false</td></tr></tbody></table><h5 id="事件-1"><a href="#事件-1" class="headerlink" title="事件"></a>事件</h5><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数(默认传入参数)</th></tr></thead><tbody><tr><td align="left"><code>change</code></td><td align="left">选中值发生变化时触发</td><td align="left">目前的选中值</td></tr><tr><td align="left"><code>visible-change</code></td><td align="left">下拉框出现/隐藏时触发</td><td align="left">出现则为 true，隐藏则为 false</td></tr><tr><td align="left"><code>remove-tag</code></td><td align="left">多选模式下移除tag时触发</td><td align="left">移除的tag值</td></tr><tr><td align="left"><code>clear</code></td><td align="left">可清空的单选模式下用户点击清空按钮时触发</td><td align="left">—</td></tr><tr><td align="left"><code>blur</code></td><td align="left">当 input 失去焦点时触发</td><td align="left"><code>(event: Event)</code></td></tr><tr><td align="left"><code>focus</code></td><td align="left">当 input 获得焦点时触发</td><td align="left"><code>(event: Event)</code></td></tr></tbody></table><h5 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h5><p>通过<code>ref</code>给组件取别名、<code>this.$refs.别名.方法名()</code> 调用</p><table><thead><tr><th align="left">方法名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">focus</td><td align="left">使 input 获取焦点</td></tr><tr><td align="left">blur</td><td align="left">使 input 失去焦点，并隐藏下拉框</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">ref</span>=<span class="string">&quot;select&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;value&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-option</span>  <span class="attr">v-for</span>=<span class="string">&quot;option in options&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;option.value&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;option.value&quot;</span> <span class="attr">:label</span>=<span class="string">&quot;option.label&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;selectFocus&quot;</span>&gt;</span>focus<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;Select&quot;</span>,</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">                options: [&#123;</span><br><span class="line"><span class="javascript">                    value: <span class="string">&#x27;选项1&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    label: <span class="string">&#x27;黄金糕&#x27;</span></span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line"><span class="javascript">                    value: <span class="string">&#x27;选项2&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    label: <span class="string">&#x27;双皮奶&#x27;</span></span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line"><span class="javascript">                    value: <span class="string">&#x27;选项3&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    label: <span class="string">&#x27;蚵仔煎&#x27;</span></span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line"><span class="javascript">                    value: <span class="string">&#x27;选项4&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    label: <span class="string">&#x27;龙须面&#x27;</span></span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line"><span class="javascript">                    value: <span class="string">&#x27;选项5&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    label: <span class="string">&#x27;北京烤鸭&#x27;</span></span></span><br><span class="line">                &#125;],</span><br><span class="line"><span class="javascript">                value: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            selectFocus()&#123;</span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$refs.select.focus();</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>官网: <a href="https://element.eleme.cn/#/zh-CN/component/select">https://element.eleme.cn/#/zh-CN/component/select</a></p><h4 id="Switch-开关"><a href="#Switch-开关" class="headerlink" title="Switch 开关"></a>Switch 开关</h4><h5 id="使用-7"><a href="#使用-7" class="headerlink" title="使用"></a>使用</h5><p>通过使用<code>el-switch</code>创建、<code>v-model</code>绑定值实现切换</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-switch</span> <span class="attr">v-model</span>=<span class="string">&quot;value&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-switch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;Switchs&quot;</span>,</span></span><br><span class="line">        data()&#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">                value: <span class="literal">true</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="属性-2"><a href="#属性-2" class="headerlink" title="属性"></a>属性</h5><p>见官网</p><h5 id="事件-2"><a href="#事件-2" class="headerlink" title="事件"></a>事件</h5><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left">change</td><td align="left">switch 状态发生变化时的回调函数</td><td align="left">新状态的值</td></tr></tbody></table><h5 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h5><table><thead><tr><th align="left">方法名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">focus</td><td align="left">使 Switch 获取焦点</td></tr></tbody></table><p>官网: <a href="https://element.eleme.cn/#/zh-CN/component/switch">https://element.eleme.cn/#/zh-CN/component/switch</a> </p><h4 id="DatePicker日期选择器"><a href="#DatePicker日期选择器" class="headerlink" title="DatePicker日期选择器"></a>DatePicker日期选择器</h4><h5 id="使用-8"><a href="#使用-8" class="headerlink" title="使用"></a>使用</h5><p><code>el-data-picker</code>创建、<code>v-model</code>绑定值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-date-picker</span> <span class="attr">v-model</span>=<span class="string">&quot;createTime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;DatePickers&quot;</span>,</span></span><br><span class="line">        data()&#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">                createTime: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="属性-3"><a href="#属性-3" class="headerlink" title="属性"></a>属性</h5><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">value / v-model</td><td align="left">绑定值</td><td align="left">date(DatePicker) / array(DateRangePicker)</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">readonly</td><td align="left">完全只读</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">disabled</td><td align="left">禁用</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">editable</td><td align="left">文本框可输入</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">clearable</td><td align="left">是否显示清除按钮</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">size</td><td align="left">输入框尺寸</td><td align="left">string</td><td align="left">large, small, mini</td><td align="left">—</td></tr><tr><td align="left">placeholder</td><td align="left">非范围选择时的占位内容</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">start-placeholder</td><td align="left">范围选择时开始日期的占位内容</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">end-placeholder</td><td align="left">范围选择时结束日期的占位内容</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">type</td><td align="left">显示类型</td><td align="left">string</td><td align="left">year/month/date/dates/ week/datetime/datetimerange/ daterange/monthrange</td><td align="left">date</td></tr><tr><td align="left">format</td><td align="left">显示在输入框中的格式</td><td align="left">string</td><td align="left">见<a href="https://element.eleme.cn/#/zh-CN/component/date-picker#ri-qi-ge-shi">日期格式</a></td><td align="left">yyyy-MM-dd</td></tr><tr><td align="left">align</td><td align="left">对齐方式</td><td align="left">string</td><td align="left">left, center, right</td><td align="left">left</td></tr><tr><td align="left">popper-class</td><td align="left">DatePicker 下拉框的类名</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">picker-options</td><td align="left">当前时间日期选择器特有的选项参考下表</td><td align="left">object</td><td align="left">—</td><td align="left">{}</td></tr><tr><td align="left">range-separator</td><td align="left">选择范围时的分隔符</td><td align="left">string</td><td align="left">—</td><td align="left">‘-‘</td></tr><tr><td align="left">default-value</td><td align="left">可选，选择器打开时默认显示的时间</td><td align="left">Date</td><td align="left">可被<code>new Date()</code>解析</td><td align="left">—</td></tr><tr><td align="left">default-time</td><td align="left">范围选择时选中日期所使用的当日内具体时刻</td><td align="left">string[]</td><td align="left">数组，长度为 2，每项值为字符串，形如<code>12:00:00</code>，第一项指定开始日期的时刻，第二项指定结束日期的时刻，不指定会使用时刻 <code>00:00:00</code></td><td align="left">—</td></tr><tr><td align="left">value-format</td><td align="left">可选，绑定值的格式。不指定则绑定值为 Date 对象</td><td align="left">string</td><td align="left">见<a href="https://element.eleme.cn/#/zh-CN/component/date-picker#ri-qi-ge-shi">日期格式</a></td><td align="left">—</td></tr><tr><td align="left">name</td><td align="left">原生属性</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">unlink-panels</td><td align="left">在范围选择器里取消两个日期面板之间的联动</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">prefix-icon</td><td align="left">自定义头部图标的类名</td><td align="left">string</td><td align="left">—</td><td align="left">el-icon-date</td></tr><tr><td align="left">clear-icon</td><td align="left">自定义清空图标的类名</td><td align="left">string</td><td align="left">—</td><td align="left">el-icon-circle-close</td></tr><tr><td align="left">validate-event</td><td align="left">输入时是否触发表单的校验</td><td align="left">boolean</td><td align="left">-</td><td align="left">true</td></tr></tbody></table><h5 id="Picker-Options-和-shortcuts使用"><a href="#Picker-Options-和-shortcuts使用" class="headerlink" title="Picker Options 和 shortcuts使用"></a>Picker Options 和 shortcuts使用</h5><ul><li><code>Picker Options</code>: 用来对日期控件做自定义配置</li><li><code>Shortcuts</code>: 用来增加日期组件的快捷键面板</li></ul><h6 id="shortcuts使用"><a href="#shortcuts使用" class="headerlink" title="shortcuts使用"></a>shortcuts使用</h6><p><code>shortcuts: [ text: &#39;xxx&#39;, onClick(picker)&#123;&#125;]</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-date-picker</span></span></span><br><span class="line"><span class="tag">                <span class="attr">v-model</span>=<span class="string">&quot;value&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">align</span>=<span class="string">&quot;right&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">type</span>=<span class="string">&quot;date&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">placeholder</span>=<span class="string">&quot;选择日期&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:picker-options</span>=<span class="string">&quot;pickerOptions&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;DatePickers&quot;</span>,</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">                pickerOptions: &#123;</span><br><span class="line">                    disabledDate(time) &#123;</span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> time.getTime() &gt; <span class="built_in">Date</span>.now();</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    shortcuts: [&#123;</span><br><span class="line"><span class="javascript">                        text: <span class="string">&#x27;今天&#x27;</span>,</span></span><br><span class="line">                        onClick(picker) &#123;</span><br><span class="line"><span class="javascript">                            picker.$emit(<span class="string">&#x27;pick&#x27;</span>, <span class="keyword">new</span> <span class="built_in">Date</span>());</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, &#123;</span><br><span class="line"><span class="javascript">                        text: <span class="string">&#x27;昨天&#x27;</span>,</span></span><br><span class="line">                        onClick(picker) &#123;</span><br><span class="line"><span class="javascript">                            <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line">                            date.setTime(date.getTime() - 3600 * 1000 * 24);</span><br><span class="line"><span class="javascript">                            picker.$emit(<span class="string">&#x27;pick&#x27;</span>, date);</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, &#123;</span><br><span class="line"><span class="javascript">                        text: <span class="string">&#x27;一周前&#x27;</span>,</span></span><br><span class="line">                        onClick(picker) &#123;</span><br><span class="line"><span class="javascript">                            <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line">                            date.setTime(date.getTime() - 3600 * 1000 * 24 * 7);</span><br><span class="line"><span class="javascript">                            picker.$emit(<span class="string">&#x27;pick&#x27;</span>, date);</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;]</span><br><span class="line">                &#125;,</span><br><span class="line"><span class="javascript">                value: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="PickerOptions使用"><a href="#PickerOptions使用" class="headerlink" title="PickerOptions使用"></a>PickerOptions使用</h6><p><code>pickerOptions: &#123;&#125;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-date-picker</span></span></span><br><span class="line"><span class="tag">                <span class="attr">v-model</span>=<span class="string">&quot;value2&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">align</span>=<span class="string">&quot;right&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">type</span>=<span class="string">&quot;date&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">placeholder</span>=<span class="string">&quot;选择日期&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:picker-options</span>=<span class="string">&quot;pickerOptions&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;DatePickers&quot;</span>,</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">                pickerOptions: &#123;</span><br><span class="line"><span class="javascript">                    <span class="comment">//不可用的日期</span></span></span><br><span class="line">                    disabledDate(time) &#123;</span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> time.getTime() &gt; <span class="built_in">Date</span>.now();</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;    </span><br><span class="line"><span class="javascript">                value: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="事件-3"><a href="#事件-3" class="headerlink" title="事件"></a>事件</h5><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left">change</td><td align="left">用户确认选定的值时触发</td><td align="left">组件绑定值。格式与绑定值一致，可受 <code>value-format</code> 控制</td></tr><tr><td align="left">blur</td><td align="left">当 input 失去焦点时触发</td><td align="left">组件实例</td></tr><tr><td align="left">focus</td><td align="left">当 input 获得焦点时触发</td><td align="left">组件实例</td></tr></tbody></table><h5 id="方法-3"><a href="#方法-3" class="headerlink" title="方法"></a>方法</h5><table><thead><tr><th align="left">方法名</th><th align="left">说明</th><th align="left">参数</th></tr></thead><tbody><tr><td align="left">focus</td><td align="left">使 input 获取焦点</td><td align="left">—</td></tr></tbody></table><p>官网: <a href="https://element.eleme.cn/#/zh-CN/component/date-picker">https://element.eleme.cn/#/zh-CN/component/date-picker</a></p><h4 id="Upload-上传"><a href="#Upload-上传" class="headerlink" title="Upload 上传"></a>Upload 上传</h4><h5 id="使用-9"><a href="#使用-9" class="headerlink" title="使用"></a>使用</h5><p>使用<code>el-uoload</code>创建 、一定要写<code>action</code>图片上传地址、否则会报错</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-upload</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;upload-demo&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">action</span>=<span class="string">&quot;https://jsonplaceholder.typicode.com/posts/&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:on-preview</span>=<span class="string">&quot;handlePreview&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:on-remove</span>=<span class="string">&quot;handleRemove&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:before-remove</span>=<span class="string">&quot;beforeRemove&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">multiple</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:limit</span>=<span class="string">&quot;3&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:on-exceed</span>=<span class="string">&quot;handleExceed&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:file-list</span>=<span class="string">&quot;fileList&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>点击上传<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;tip&quot;</span> <span class="attr">class</span>=<span class="string">&quot;el-upload__tip&quot;</span>&gt;</span>只能上传jpg/png文件，且不超过500kb<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&#x27;Uploads&#x27;</span>,</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">                fileList: [&#123;</span><br><span class="line"><span class="javascript">                    name: <span class="string">&#x27;food.jpeg&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    url: <span class="string">&#x27;https://fuss10.elemecdn.com/3/63/4e7f3a15429bfda99bce42a18cdd1jpeg.jpeg?imageMogr2/thumbnail/360x360/format/webp/quality/100&#x27;</span></span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line"><span class="javascript">                    name: <span class="string">&#x27;food2.jpeg&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    url: <span class="string">&#x27;https://fuss10.elemecdn.com/3/63/4e7f3a15429bfda99bce42a18cdd1jpeg.jpeg?imageMogr2/thumbnail/360x360/format/webp/quality/100&#x27;</span></span></span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleRemove(file, fileList) &#123;</span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(file, fileList);</span></span><br><span class="line">            &#125;,</span><br><span class="line">            handlePreview(file) &#123;</span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(file);</span></span><br><span class="line">            &#125;,</span><br><span class="line">            handleExceed(files, fileList) &#123;</span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$message.warning(<span class="string">`当前限制选择 3 个文件，本次选择了 <span class="subst">$&#123;files.length&#125;</span> 个文件，共选择了 <span class="subst">$&#123;files.length + fileList.length&#125;</span> 个文件`</span>);</span></span><br><span class="line">            &#125;,</span><br><span class="line">            beforeRemove(file, fileList) &#123;</span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">this</span>.$confirm(<span class="string">`确定移除 <span class="subst">$&#123;file.name&#125;</span>？`</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="属性-4"><a href="#属性-4" class="headerlink" title="属性"></a>属性</h5><p>看官网了解更多</p><h5 id="方法-4"><a href="#方法-4" class="headerlink" title="方法"></a>方法</h5><table><thead><tr><th align="left">方法名</th><th align="left">说明</th><th align="left">参数</th></tr></thead><tbody><tr><td align="left">clearFiles</td><td align="left">清空已上传的文件列表（该方法不支持在 before-upload 中调用）</td><td align="left">—</td></tr><tr><td align="left">abort</td><td align="left">取消上传请求</td><td align="left">（ file: fileList 中的 file 对象 ）</td></tr><tr><td align="left">submit</td><td align="left">手动上传文件列表</td><td align="left">—</td></tr></tbody></table><p>官网: <a href="https://element.eleme.cn/#/zh-CN/component/upload">https://element.eleme.cn/#/zh-CN/component/upload</a></p><h4 id="Form表单"><a href="#Form表单" class="headerlink" title="Form表单"></a>Form表单</h4><h5 id="使用-10"><a href="#使用-10" class="headerlink" title="使用"></a>使用</h5><ul><li><p>使用<code>el-form</code>定义一个表单,<code>el-form-item</code>定义每一项、其属性<code>label</code>为输入框关联的label文字</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;form&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;80px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;用户名&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;密码&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">        data()&#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line">                form: &#123;</span><br><span class="line"><span class="javascript">                    username: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    password: <span class="string">&quot;&quot;</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    </span><br></pre></td></tr></table></figure></li><li><p>行内表单</p><p>  <code>:inline=&quot;true&quot;</code> 使得组件在一行显示</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:inline</span>=<span class="string">&quot;true&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;form&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;80px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;用户名&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;密码&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;Forms&quot;</span>,</span></span><br><span class="line">        data()&#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line">                form: &#123;</span><br><span class="line"><span class="javascript">                    username: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    password: <span class="string">&quot;&quot;</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="属性-5"><a href="#属性-5" class="headerlink" title="属性"></a>属性</h5><p>定义在<code>el-input</code></p><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">type</td><td align="left">类型</td><td align="left">string</td><td align="left">text，textarea 和其他 <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form__types">原生 input 的 type 值</a></td><td align="left">text</td></tr><tr><td align="left">value / v-model</td><td align="left">绑定值</td><td align="left">string / number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">maxlength</td><td align="left">原生属性，最大输入长度</td><td align="left">number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">minlength</td><td align="left">原生属性，最小输入长度</td><td align="left">number</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">show-word-limit</td><td align="left">是否显示输入字数统计，只在 <code>type = &quot;text&quot;</code> 或 <code>type = &quot;textarea&quot;</code> 时有效</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">placeholder</td><td align="left">输入框占位文本</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">clearable</td><td align="left">是否可清空</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">show-password</td><td align="left">是否显示切换密码图标</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">disabled</td><td align="left">禁用</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">size</td><td align="left">输入框尺寸，只在 <code>type!=&quot;textarea&quot;</code> 时有效</td><td align="left">string</td><td align="left">medium / small / mini</td><td align="left">—</td></tr><tr><td align="left">prefix-icon</td><td align="left">输入框头部图标</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">suffix-icon</td><td align="left">输入框尾部图标</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">rows</td><td align="left">输入框行数，只对 <code>type=&quot;textarea&quot;</code> 有效</td><td align="left">number</td><td align="left">—</td><td align="left">2</td></tr><tr><td align="left">autosize</td><td align="left">自适应内容高度，只对 <code>type=&quot;textarea&quot;</code> 有效，可传入对象，如，{ minRows: 2, maxRows: 6 }</td><td align="left">boolean / object</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">autocomplete</td><td align="left">原生属性，自动补全</td><td align="left">string</td><td align="left">on, off</td><td align="left">off</td></tr><tr><td align="left">auto-complete</td><td align="left">下个主版本弃用</td><td align="left">string</td><td align="left">on, off</td><td align="left">off</td></tr><tr><td align="left">name</td><td align="left">原生属性</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">readonly</td><td align="left">原生属性，是否只读</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">max</td><td align="left">原生属性，设置最大值</td><td align="left">—</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">min</td><td align="left">原生属性，设置最小值</td><td align="left">—</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">step</td><td align="left">原生属性，设置输入字段的合法数字间隔</td><td align="left">—</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">resize</td><td align="left">控制是否能被用户缩放</td><td align="left">string</td><td align="left">none, both, horizontal, vertical</td><td align="left">—</td></tr><tr><td align="left">autofocus</td><td align="left">原生属性，自动获取焦点</td><td align="left">boolean</td><td align="left">true, false</td><td align="left">false</td></tr><tr><td align="left">form</td><td align="left">原生属性</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">label</td><td align="left">输入框关联的label文字</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">tabindex</td><td align="left">输入框的tabindex</td><td align="left">string</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">validate-event</td><td align="left">输入时是否触发表单的校验</td><td align="left">boolean</td><td align="left">-</td><td align="left">true</td></tr></tbody></table><h5 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h5><p>通过给<code>el-form</code>绑定<code>:rules</code>、<code>el-form-item</code>绑定<code>prop</code>属性</p><p>个人总结(仅代表个人见解):</p><ul><li><code>ref=&quot;xxx&quot;</code> 绑定form表单、用于<code>表单提交时</code>调用<code>this.$refs.xxx.validate((valid)=&gt;&#123;&#125;)</code> </li><li><code>:model=xx</code> 绑定数据</li><li><code>:rules=&quot;xxx&quot;</code>绑定表单验证规则、定义在<code>data()&#123; return&#123;&#125; &#125;</code>中<ul><li><code>xxx:&#123; xx1:[], xx2,[] &#125;</code></li><li>简单的表单验证:<code>xxx1:[&#123;required: true, message: &#39;请输入用户名&#39;, trigger: &#39;blur&#39;&#125;, &#123;min: 3, max: 5, message: &#39;长度在 3 到 5 个字符&#39;, trigger: &#39;blur&#39;&#125;]</code>请按照字面意思理解</li><li>自定义表单验证:<code>xxx2: [&#123;validator: checkPassword, trigger: &#39;blur&#39;&#125;]</code>、<code>checkPassword</code>自定义函数需要定义在<code>data中</code>、有三个参数: <code>rule, value, callback</code>、验证失败可以<code>callback(new Error(&quot;错误信息&quot;))</code>、验证成功需要调用<code>callback</code>、<code>切记</code></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- :rules 绑定验证方法  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;formLogin&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;formLogin&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rulesLogin&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;80px&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;用户名&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;formLogin.username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;密码&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;formLogin.password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 提交方法submitForm 需要传入 :rules绑定的方法  --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submitForm(&#x27;formLogin&#x27;)&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;Forms&quot;</span>,</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="javascript">            <span class="comment">//自定义验证方法</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> checkPassword = <span class="function">(<span class="params">rule, value, callback</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (!(<span class="regexp">/^[\w_-]&#123;6,16&#125;$/</span>).test(value)) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;密码不符合规范&quot;</span>))</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="javascript">                <span class="comment">//验证成功需要返回callback()</span></span></span><br><span class="line">                callback();</span><br><span class="line">            &#125;;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">                formLogin: &#123;</span><br><span class="line"><span class="javascript">                    username: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    password: <span class="string">&quot;&quot;</span></span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="javascript">                <span class="comment">//这里是验证规则</span></span></span><br><span class="line">                rulesLogin: &#123;</span><br><span class="line">                    username: [</span><br><span class="line"><span class="javascript">                        <span class="comment">// trigger代表何时验证</span></span></span><br><span class="line"><span class="javascript">                        &#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入用户名&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                        &#123;<span class="attr">min</span>: <span class="number">3</span>, <span class="attr">max</span>: <span class="number">5</span>, <span class="attr">message</span>: <span class="string">&#x27;长度在 3 到 5 个字符&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>&#125;</span></span><br><span class="line">                    ],</span><br><span class="line"><span class="javascript">              <span class="comment">// validator定义自定义验证方法</span></span></span><br><span class="line"><span class="javascript">                    password: &#123;<span class="attr">validator</span>: checkPassword, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>&#125;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            submitForm(formName) &#123;</span><br><span class="line"><span class="javascript">                <span class="comment">// 调用验证</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$refs[formName].validate(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span></span><br><span class="line">                    if (valid) &#123;</span><br><span class="line"><span class="javascript">                        alert(<span class="string">&#x27;submit!&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">&#x27;error submit!!&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>官网: <a href="https://element.eleme.cn/#/zh-CN/component/form">https://element.eleme.cn/#/zh-CN/component/form</a></p><h3 id="Notice相关组件"><a href="#Notice相关组件" class="headerlink" title="Notice相关组件"></a>Notice相关组件</h3><h4 id="Alert-警告"><a href="#Alert-警告" class="headerlink" title="Alert 警告"></a>Alert 警告</h4><h5 id="使用-11"><a href="#使用-11" class="headerlink" title="使用"></a>使用</h5><p><code>el-alert</code>创建、<code>type</code>指定样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-alert</span> <span class="attr">title</span>=<span class="string">&quot;成功提示的文案&quot;</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-alert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-alert</span> <span class="attr">title</span>=<span class="string">&quot;消息提示的文案&quot;</span> <span class="attr">type</span>=<span class="string">&quot;info&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-alert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-alert</span> <span class="attr">title</span>=<span class="string">&quot;警告提示的文案&quot;</span> <span class="attr">type</span>=<span class="string">&quot;warning&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-alert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-alert</span> <span class="attr">title</span>=<span class="string">&quot;错误提示的文案&quot;</span> <span class="attr">type</span>=<span class="string">&quot;error&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-alert</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="属性-6"><a href="#属性-6" class="headerlink" title="属性"></a>属性</h5><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">title</td><td align="left">标题</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">type</td><td align="left">主题</td><td align="left">string</td><td align="left">success/warning/info/error</td><td align="left">info</td></tr><tr><td align="left">description</td><td align="left">辅助性文字。也可通过默认 slot 传入</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">closable</td><td align="left">是否可关闭</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">center</td><td align="left">文字是否居中</td><td align="left">boolean</td><td align="left">—</td><td align="left">true</td></tr><tr><td align="left">close-text</td><td align="left">关闭按钮自定义文本</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">show-icon</td><td align="left">是否显示图标</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">effect</td><td align="left">选择提供的主题</td><td align="left">string</td><td align="left">light/dark</td><td align="left">light</td></tr></tbody></table><p>官网: <a href="https://element.eleme.cn/#/zh-CN/component/alert">https://element.eleme.cn/#/zh-CN/component/alert</a></p><h4 id="Message-消息提示"><a href="#Message-消息提示" class="headerlink" title="Message 消息提示"></a>Message 消息提示</h4><h5 id="使用-12"><a href="#使用-12" class="headerlink" title="使用"></a>使用</h5><p>通过<code>this.$message(&quot;消息内容&quot;)</code>显示消息</p><p><code>const h = this.$createElement</code>可以创建自定义元素来自定义消息样式、<code>this.$message(&#123; message: h(&#39;标签名&#39;,样式，内容) &#125;)</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">:plain</span>=<span class="string">&quot;true&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;open&quot;</span>&gt;</span>打开消息提示<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">:plain</span>=<span class="string">&quot;true&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;openVn&quot;</span>&gt;</span>VNode<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;Messages&quot;</span>,</span></span><br><span class="line">        methods: &#123;</span><br><span class="line">            open() &#123;</span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$message(<span class="string">&#x27;这是一条消息提示&#x27;</span>);</span></span><br><span class="line">            &#125;,</span><br><span class="line">            openVn() &#123;</span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> h = <span class="built_in">this</span>.$createElement;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$message(&#123;</span></span><br><span class="line"><span class="javascript">                    message: h(<span class="string">&#x27;p&#x27;</span>, <span class="literal">null</span>, [</span></span><br><span class="line"><span class="javascript">                        h(<span class="string">&#x27;span&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;内容可以是 &#x27;</span>),</span></span><br><span class="line"><span class="javascript">                        h(<span class="string">&#x27;i&#x27;</span>, &#123; <span class="attr">style</span>: <span class="string">&#x27;color: teal&#x27;</span> &#125;, <span class="string">&#x27;VNode&#x27;</span>)</span></span><br><span class="line">                    ])</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还可以指定消息状态 <code>this.$message(&#123; messge:&#39;消息内容&#39;,type:&#39;sucess&#39; &#125;)</code> type可以为<code>sucess|warning|error</code>、或者直接<code>this.$message.sucess(&#39;消息内容&#39;)</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">:plain</span>=<span class="string">&quot;true&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;open2&quot;</span>&gt;</span>成功<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">:plain</span>=<span class="string">&quot;true&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;open3&quot;</span>&gt;</span>警告<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">:plain</span>=<span class="string">&quot;true&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;open1&quot;</span>&gt;</span>消息<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">:plain</span>=<span class="string">&quot;true&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;open4&quot;</span>&gt;</span>错误<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    methods: &#123;</span><br><span class="line">      open1() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$message(<span class="string">&#x27;这是一条消息提示&#x27;</span>);</span></span><br><span class="line">      &#125;,</span><br><span class="line">      open2() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$message(&#123;</span></span><br><span class="line"><span class="javascript">          message: <span class="string">&#x27;恭喜你，这是一条成功消息&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          type: <span class="string">&#x27;success&#x27;</span></span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      open3() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$message(&#123;</span></span><br><span class="line"><span class="javascript">          message: <span class="string">&#x27;警告哦，这是一条警告消息&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          type: <span class="string">&#x27;warning&#x27;</span></span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      open4() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$message.error(<span class="string">&#x27;错了哦，这是一条错误消息&#x27;</span>);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="属性-7"><a href="#属性-7" class="headerlink" title="属性"></a>属性</h5><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">类型</th><th align="left">可选值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">message</td><td align="left">消息文字</td><td align="left">string / VNode</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">type</td><td align="left">主题</td><td align="left">string</td><td align="left">success/warning/info/error</td><td align="left">info</td></tr><tr><td align="left">iconClass</td><td align="left">自定义图标的类名，会覆盖 <code>type</code></td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">dangerouslyUseHTMLString</td><td align="left">是否将 message 属性作为 HTML 片段处理</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">customClass</td><td align="left">自定义类名</td><td align="left">string</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">duration</td><td align="left">显示时间, 毫秒。设为 0 则不会自动关闭</td><td align="left">number</td><td align="left">—</td><td align="left">3000</td></tr><tr><td align="left">showClose</td><td align="left">是否显示关闭按钮</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">center</td><td align="left">文字是否居中</td><td align="left">boolean</td><td align="left">—</td><td align="left">false</td></tr><tr><td align="left">onClose</td><td align="left">关闭时的回调函数, 参数为被关闭的 message 实例</td><td align="left">function</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">offset</td><td align="left">Message 距离窗口顶部的偏移量</td><td align="left">number</td><td align="left">—</td><td align="left">20</td></tr></tbody></table><p>官网: <a href="https://element.eleme.cn/#/zh-CN/component/message">https://element.eleme.cn/#/zh-CN/component/message</a></p><h3 id="Table-表格"><a href="#Table-表格" class="headerlink" title="Table 表格"></a>Table 表格</h3><h4 id="使用-13"><a href="#使用-13" class="headerlink" title="使用"></a>使用</h4><ul><li><p>基本使用</p><p>  使用<code>el-table</code>创建表格、<code>:data</code>绑定数据，<code>el-table-column</code>定义列<code>、</code>label<code>为</code>显示的标题<code>、</code>prop<code>属性写</code>列内容的字段名`</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;编号&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;年龄&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;Tables&quot;</span>,</span></span><br><span class="line">        data()&#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line">                tableData:[</span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">&#x27;zykj&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,</span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">name</span>:<span class="string">&#x27;skx&#x27;</span>,<span class="attr">age</span>:<span class="number">15</span>&#125;</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>自定义列模板</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span> <span class="attr">border</span> <span class="attr">stripe</span> <span class="attr">highlight-current-row</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;编号&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;年龄&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;age&quot;</span> <span class="attr">sortable</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleEdit(scope.$index, scope.row)&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleDelete(scope.$index, scope.row)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;Tables&quot;</span>,</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">                tableData: [</span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;zykj&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;,</span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;skx&#x27;</span>, <span class="attr">age</span>: <span class="number">15</span>&#125;</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleEdit(index, row) &#123;</span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(index, row);</span></span><br><span class="line">            &#125;,</span><br><span class="line">            handleDelete(index, row) &#123;</span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(index, row);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>自定义表头</p><p>  表头支持自定义、如搜索功能</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;tableData.filter(data =&gt; !search || data.name.toLowerCase().includes(search.toLowerCase()))&quot;</span> <span class="attr">border</span> <span class="attr">stripe</span> <span class="attr">highlight-current-row</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;编号&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;年龄&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;age&quot;</span> <span class="attr">sortable</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;header&quot;</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;search&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入关键字搜索&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleEdit(scope.$index, scope.row)&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleDelete(scope.$index, scope.row)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;Tables&quot;</span>,</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">                tableData: [</span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;zykj&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;,</span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;skx&#x27;</span>, <span class="attr">age</span>: <span class="number">15</span>&#125;</span></span><br><span class="line">                ],</span><br><span class="line"><span class="javascript">                search: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleEdit(index, row) &#123;</span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(index, row);</span></span><br><span class="line">            &#125;,</span><br><span class="line">            handleDelete(index, row) &#123;</span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(index, row);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="属性-8"><a href="#属性-8" class="headerlink" title="属性"></a>属性</h4><p>见官网</p><p>官网: <a href="https://element.eleme.cn/#/zh-CN/component/table">https://element.eleme.cn/#/zh-CN/component/table</a></p>]]></content>
      
      
      <categories>
          
          <category> Web教程 </category>
          
          <category> ElementUi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
            <tag> ElementUi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Axios学习</title>
      <link href="/posts/5650a45b/"/>
      <url>/posts/5650a45b/</url>
      
        <content type="html"><![CDATA[<h2 id="Axios学习"><a href="#Axios学习" class="headerlink" title="Axios学习"></a>Axios学习</h2><div class="note info"><p>视频教程: <a href="https://www.bilibili.com/video/BV15741177Eh?p=141">https://www.bilibili.com/video/BV15741177Eh?p=141</a></p></div><h3 id="选择什么网络模块"><a href="#选择什么网络模块" class="headerlink" title="选择什么网络模块?"></a>选择什么网络模块?</h3><h4 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h4><p>选择一: <code>传统的Ajax是基于XMLHttpRequest(XHR)</code></p><p>为什么不用它呢?</p><ul><li>非常好解释, 配置和调用方式等非常混乱.</li><li>编码起来看起来就非常蛋疼.</li><li>所以真实开发中很少直接使用, 而是使用jQuery-Ajax</li></ul><h4 id="jQuery-Ajax"><a href="#jQuery-Ajax" class="headerlink" title="jQuery-Ajax"></a>jQuery-Ajax</h4><p>选择二: <code>在前面的学习中, 我们经常会使用jQuery-Ajax</code></p><ul><li>相对于传统的Ajax非常好用.</li></ul><p>为什么不选择它呢?</p><ul><li>首先, 我们先明确一点: 在Vue的整个开发中都是不需要使用jQuery了.</li><li>那么, 就意味着为了方便我们进行一个网络请求, 特意引用一个jQuery, 你觉得合理吗?</li><li>jQuery的代码1w+行.</li><li>Vue的代码才1w+行.</li><li>完全没有必要为了用网络请求就引用这个重量级的框架.</li></ul><h4 id="Vue-resource"><a href="#Vue-resource" class="headerlink" title="Vue-resource"></a>Vue-resource</h4><p>选择三: <code>官方在Vue1.x的时候, 推出了Vue-resource.</code></p><ul><li>Vue-resource的体积相对于jQuery小很多.</li><li>另外Vue-resource是官方推出的.</li></ul><p>为什么不选择它呢?</p><ul><li>在Vue2.0退出后, Vue作者就在GitHub的Issues中说明了去掉vue-resource, 并且以后也不会再更新.</li><li>那么意味着以后vue-reource不再支持新的版本时, 也不会再继续更新和维护.</li><li>对以后的项目开发和维护都存在很大的隐患.</li></ul><h4 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h4><p>Vue作者推荐,axios有非常多的优点, 并且用起来也非常方便.</p><p><code>特性</code></p><ul><li>从浏览器中创建 <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest">XMLHttpRequests</a></li><li>从 node.js 创建 <a href="http://nodejs.org/api/http.html">http</a> 请求</li><li>支持 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a> API</li><li>拦截请求和响应</li><li>转换请求数据和响应数据</li><li>取消请求</li><li>自动转换 JSON 数据</li><li>客户端支持防御 <a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery">XSRF</a></li></ul><h3 id="axiox请求方式"><a href="#axiox请求方式" class="headerlink" title="axiox请求方式"></a>axiox请求方式</h3><ul><li><code>axios(config)</code></li><li><code>axios.request(config)</code></li><li><code>axios.get(url[, config])</code></li><li><code>axios.delete(url[, config])</code></li><li><code>axios.head(url[, config])</code></li><li><code>axios.post(url[, data[, config]])</code></li><li><code>axios.put(url[, data[, config]])</code></li><li><code>axios.patch(url[, data[, config]])</code></li></ul><h3 id="axios的基本使用"><a href="#axios的基本使用" class="headerlink" title="axios的基本使用"></a>axios的基本使用</h3><ul><li><p>安装</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios --save</span><br></pre></td></tr></table></figure></li><li><p>使用</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入 axios</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span></span><br><span class="line"></span><br><span class="line">axios(&#123;</span><br><span class="line">    <span class="comment">// url 是用于请求的服务器 URL</span></span><br><span class="line">    url: <span class="string">&quot;http://123.207.32.32:8000/home/multidata&quot;</span>,</span><br><span class="line">    <span class="comment">// method 是创建请求时使用的方法</span></span><br><span class="line">    <span class="comment">//不写type默认为get请求</span></span><br><span class="line">    type: <span class="string">&quot;get&quot;</span></span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  <img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200711175552.png" alt="20200711175552.png"></p></li><li><p>get请求参数拼接 <code>params</code> 是即将与请求一起发送的 URL 参数</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入 axios</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span></span><br><span class="line"></span><br><span class="line">axios(&#123;</span><br><span class="line">    <span class="comment">//不使用 params 可以直接拼接 http://123.207.32.32:8000/home/data?type=pop&amp;page=3</span></span><br><span class="line">    url: <span class="string">&quot;http://123.207.32.32:8000/home/data&quot;</span>,</span><br><span class="line">    type: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">    params:&#123;</span><br><span class="line">        type: <span class="string">&#x27;pop&#x27;</span>,</span><br><span class="line">        page :<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="常见请求的参数"><a href="#常见请求的参数" class="headerlink" title="常见请求的参数"></a>常见请求的参数</h3><ul><li><p>Get请求</p><p>  <code>axios.get(url, params).then(res =&gt; &#123; do something &#125;)</code></p><p>  例子:</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">&quot;xxx&quot;</span>, &#123;</span><br><span class="line">  params :&#123;</span><br><span class="line">      id: <span class="number">1</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123; consloe.log(res.data) &#125;)</span><br></pre></td></tr></table></figure></li><li><p>Post请求    </p><p>  <code>axios.post(url, data).then(res =&gt; &#123; do something &#125;)</code></p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">&quot;xxx&quot;</span>, <span class="built_in">this</span>.form).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123; consloe.log(res.data) &#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="axios的并发请求"><a href="#axios的并发请求" class="headerlink" title="axios的并发请求"></a>axios的并发请求</h3><p>当想同时请求多个地址时、就需要使用<code>axios.all(iterable)</code> 类似: <code>axios.all([axios(&#123;&#125;),axios(&#123;&#125;),...]).then()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入 axios</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span></span><br><span class="line"></span><br><span class="line">axios.all([axios(&#123;</span><br><span class="line">    url: <span class="string">&quot;http://123.207.32.32:8000/home/multidata&quot;</span>,</span><br><span class="line">    type: <span class="string">&quot;get&quot;</span></span><br><span class="line">&#125;), axios(&#123;</span><br><span class="line">    url: <span class="string">&quot;http://123.207.32.32:8000/home/data&quot;</span>,</span><br><span class="line">    type: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">    params: &#123;</span><br><span class="line">        type: <span class="string">&#x27;pop&#x27;</span>,</span><br><span class="line">        page: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)]).then(<span class="function">(<span class="params">results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//打印的是一个数组对象</span></span><br><span class="line">    <span class="built_in">console</span>.log(results)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200711203105.png" alt="20200711203105.png"></p><p>使用 <code>axios.spread</code> 可将数组 [res1,res2] 展开为 res1, res2</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">axios.all([axios(&#123;</span><br><span class="line">    url: <span class="string">&quot;http://123.207.32.32:8000/home/multidata&quot;</span>,</span><br><span class="line">    type: <span class="string">&quot;get&quot;</span></span><br><span class="line">&#125;), axios(&#123;</span><br><span class="line">    url: <span class="string">&quot;http://123.207.32.32:8000/home/data&quot;</span>,</span><br><span class="line">    type: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">    params: &#123;</span><br><span class="line">        type: <span class="string">&#x27;pop&#x27;</span>,</span><br><span class="line">        page: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)]).then(axios.spread(<span class="function">(<span class="params">data1, data2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data1, data2)</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200711203625.png" alt="20200711203625.png"></p><h3 id="axios的全局配置"><a href="#axios的全局配置" class="headerlink" title="axios的全局配置"></a>axios的全局配置</h3><p>事实上, 在开发中可能很多参数都是固定的、这个时候我们可以进行一些抽取, 也可以利用axios的全局配置</p><p><code>axios.defaults.baseURL = &#39;123.207.32.32:8000&#39;</code><br><code>axios.defaults.headers.post[&#39;Content-Type&#39;] = &#39;application/x-www-form-urlencoded&#39;;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入 axios</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//全局配置</span></span><br><span class="line">axios.defaults.baseURL = <span class="string">&quot;http://123.207.32.32:8000&quot;</span></span><br><span class="line">axios.defaults.timeout = <span class="number">5000</span> <span class="comment">//单位: 毫秒</span></span><br><span class="line"></span><br><span class="line">axios.all([axios(&#123;</span><br><span class="line">    url: <span class="string">&quot;/home/multidata&quot;</span>,</span><br><span class="line">    type: <span class="string">&quot;get&quot;</span></span><br><span class="line">&#125;), axios(&#123;</span><br><span class="line">    url: <span class="string">&quot;/home/data&quot;</span>,</span><br><span class="line">    type: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">    params: &#123;</span><br><span class="line">        type: <span class="string">&#x27;pop&#x27;</span>,</span><br><span class="line">        page: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)]).then(axios.spread(<span class="function">(<span class="params">data1, data2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data1, data2)</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><p>通过配置全局的baseURL可以省略掉这前面固定的部分，发送请求只需要填写后面的部分即可组合起来请求地址，发送请求。</p><h4 id="请求配置"><a href="#请求配置" class="headerlink" title="请求配置"></a>请求配置</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="comment">// url 是用于请求的服务器 URL</span></span><br><span class="line">  url: <span class="string">&#x27;/user&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// method 是创建请求时使用的方法</span></span><br><span class="line">  method: <span class="string">&#x27;get&#x27;</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// baseURL 将自动加在 url 前面，除非 url 是一个绝对 URL。</span></span><br><span class="line">  <span class="comment">// 它可以通过设置一个 baseURL 便于为 axios 实例的方法传递相对 URL</span></span><br><span class="line">  baseURL: <span class="string">&#x27;https://some-domain.com/api/&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// transformRequest 允许在向服务器发送前，修改请求数据</span></span><br><span class="line">  <span class="comment">// 只能用在 &#x27;PUT&#x27;, &#x27;POST&#x27; 和 &#x27;PATCH&#x27; 这几个请求方法</span></span><br><span class="line">  <span class="comment">// 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream</span></span><br><span class="line">  transformRequest: [<span class="function"><span class="keyword">function</span> (<span class="params">data, headers</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对 data 进行任意转换处理</span></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// transformResponse 在传递给 then/catch 前，允许修改响应数据</span></span><br><span class="line">  transformResponse: [<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对 data 进行任意转换处理</span></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// headers 是即将被发送的自定义请求头</span></span><br><span class="line">  headers: &#123;<span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// params 是即将与请求一起发送的 URL 参数</span></span><br><span class="line">  <span class="comment">// 必须是一个无格式对象(plain object)或 URLSearchParams 对象</span></span><br><span class="line">  params: &#123;</span><br><span class="line">    ID: <span class="number">12345</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">   <span class="comment">// paramsSerializer 是一个负责 params 序列化的函数</span></span><br><span class="line">  <span class="comment">// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</span></span><br><span class="line">  paramsSerializer: <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Qs.stringify(params, &#123;<span class="attr">arrayFormat</span>: <span class="string">&#x27;brackets&#x27;</span>&#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// data 是作为请求主体被发送的数据</span></span><br><span class="line">  <span class="comment">// 只适用于这些请求方法 &#x27;PUT&#x27;, &#x27;POST&#x27;, 和 &#x27;PATCH&#x27;</span></span><br><span class="line">  <span class="comment">// 在没有设置 transformRequest 时，必须是以下类型之一：</span></span><br><span class="line">  <span class="comment">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span></span><br><span class="line">  <span class="comment">// - 浏览器专属：FormData, File, Blob</span></span><br><span class="line">  <span class="comment">// - Node 专属： Stream</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: <span class="string">&#x27;Fred&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// timeout 指定请求超时的毫秒数(0 表示无超时时间)</span></span><br><span class="line">  <span class="comment">// 如果请求话费了超过 `timeout` 的时间，请求将被中断</span></span><br><span class="line">  timeout: <span class="number">1000</span>,</span><br><span class="line"></span><br><span class="line">   <span class="comment">// withCredentials 表示跨域请求时是否需要使用凭证</span></span><br><span class="line">  withCredentials: <span class="literal">false</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// adapter 允许自定义处理请求，以使测试更轻松</span></span><br><span class="line">  <span class="comment">// 返回一个 promise 并应用一个有效的响应 (查阅 [response docs](#response-api)).</span></span><br><span class="line">  adapter: <span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line"> <span class="comment">// auth 表示应该使用 HTTP 基础验证，并提供凭据</span></span><br><span class="line">  <span class="comment">// 这将设置一个 `Authorization` 头，覆写掉现有的任意使用 `headers` 设置的自定义 `Authorization`头</span></span><br><span class="line">  auth: &#123;</span><br><span class="line">    username: <span class="string">&#x27;janedoe&#x27;</span>,</span><br><span class="line">    password: <span class="string">&#x27;s00pers3cret&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">   <span class="comment">// responseType 表示服务器响应的数据类型，可以是 &#x27;arraybuffer&#x27;, &#x27;blob&#x27;, &#x27;document&#x27;, &#x27;json&#x27;, &#x27;text&#x27;, &#x27;stream&#x27;</span></span><br><span class="line">  responseType: <span class="string">&#x27;json&#x27;</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// responseEncoding indicates encoding to use for decoding responses</span></span><br><span class="line">  <span class="comment">// Note: Ignored for `responseType` of &#x27;stream&#x27; or client-side requests</span></span><br><span class="line">  responseEncoding: <span class="string">&#x27;utf8&#x27;</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// xsrfCookieName 是用作 xsrf token 的值的cookie的名称</span></span><br><span class="line">  xsrfCookieName: <span class="string">&#x27;XSRF-TOKEN&#x27;</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// xsrfHeaderName is the name of the http header that carries the xsrf token value</span></span><br><span class="line">  xsrfHeaderName: <span class="string">&#x27;X-XSRF-TOKEN&#x27;</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// onUploadProgress 允许为上传处理进度事件</span></span><br><span class="line">  onUploadProgress: <span class="function"><span class="keyword">function</span> (<span class="params">progressEvent</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do whatever you want with the native progress event</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// onDownloadProgress 允许为下载处理进度事件</span></span><br><span class="line">  onDownloadProgress: <span class="function"><span class="keyword">function</span> (<span class="params">progressEvent</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对原生进度事件的处理</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">   <span class="comment">// maxContentLength 定义允许的响应内容的最大尺寸</span></span><br><span class="line">  maxContentLength: <span class="number">2000</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// validateStatus 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，promise 将被 resolve; 否则，promise 将被 rejecte</span></span><br><span class="line">  validateStatus: <span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">300</span>; <span class="comment">// default</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// maxRedirects 定义在 node.js 中 follow 的最大重定向数目</span></span><br><span class="line">  <span class="comment">// 如果设置为0，将不会 follow 任何重定向</span></span><br><span class="line">  maxRedirects: <span class="number">5</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// socketPath defines a UNIX Socket to be used in node.js.</span></span><br><span class="line">  <span class="comment">// e.g. &#x27;/var/run/docker.sock&#x27; to send requests to the docker daemon.</span></span><br><span class="line">  <span class="comment">// Only either `socketPath` or `proxy` can be specified.</span></span><br><span class="line">  <span class="comment">// If both are specified, `socketPath` is used.</span></span><br><span class="line">  socketPath: <span class="literal">null</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// httpAgent 和 httpsAgent 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。允许像这样配置选项：</span></span><br><span class="line">  <span class="comment">// keepAlive 默认没有启用</span></span><br><span class="line">  httpAgent: <span class="keyword">new</span> http.Agent(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">  httpsAgent: <span class="keyword">new</span> https.Agent(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// &#x27;proxy&#x27; 定义代理服务器的主机名称和端口</span></span><br><span class="line">  <span class="comment">// auth 表示 HTTP 基础验证应当用于连接代理，并提供凭据</span></span><br><span class="line">  <span class="comment">// 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。</span></span><br><span class="line">  proxy: &#123;</span><br><span class="line">    host: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    port: <span class="number">9000</span>,</span><br><span class="line">    auth: &#123;</span><br><span class="line">      username: <span class="string">&#x27;mikeymike&#x27;</span>,</span><br><span class="line">      password: <span class="string">&#x27;rapunz3l&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// cancelToken 指定用于取消请求的 cancel token</span></span><br><span class="line">  <span class="comment">// （查看后面的 Cancellation 这节了解更多）</span></span><br><span class="line">  cancelToken: <span class="keyword">new</span> CancelToken(<span class="function"><span class="keyword">function</span> (<span class="params">cancel</span>) </span>&#123;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="axios的实例"><a href="#axios的实例" class="headerlink" title="axios的实例"></a>axios的实例</h3><p>为什么要创建axios的实例呢? <code>可以设置默认配置、规定配置</code></p><p>可以使用自定义配置新建一个 axios 实例 <code>axios.create([config])</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">    baseURL: <span class="string">&quot;http://123.207.32.32:8000&quot;</span>,</span><br><span class="line">    timeout: <span class="number">5000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">instance(&#123;</span><br><span class="line">    url: <span class="string">&quot;/home/multidata&quot;</span>,</span><br><span class="line">    type: <span class="string">&quot;get&quot;</span></span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200711221107.png" alt="20200711221107.png"></p><h3 id="axios的封装"><a href="#axios的封装" class="headerlink" title="axios的封装"></a>axios的封装</h3><p>为了保证代码的后期维护、我们需要对axios进行封装</p><p>在src下创建<code>network/request.js</code></p><div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">操作</button></li><li class="tab"><button type="button" data-href="#tab1-2">Promise形式</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">        baseURL: <span class="string">&quot;http://123.207.32.32:8000&quot;</span>,</span><br><span class="line">        timeout: <span class="number">5000</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> instance(config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;request&#125; <span class="keyword">from</span> <span class="string">&quot;./network/request&quot;</span>;</span><br><span class="line"></span><br><span class="line">request(&#123;</span><br><span class="line">    url: <span class="string">&quot;/home/multidata&quot;</span>,</span><br><span class="line">    type: <span class="string">&quot;get&quot;</span></span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//1.创建axios的实例</span></span><br><span class="line">    <span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">      baseURL: <span class="string">&#x27;http://123.207.32.32:8000/&#x27;</span>,</span><br><span class="line">      timeout: <span class="number">50000</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送网络请求</span></span><br><span class="line">    instance(config)</span><br><span class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(res)</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;request&#125; <span class="keyword">from</span> <span class="string">&quot;./network/request&quot;</span>;</span><br><span class="line"></span><br><span class="line">request(&#123;</span><br><span class="line">  url: <span class="string">&#x27;home/multidata&#x27;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="axios的拦截器"><a href="#axios的拦截器" class="headerlink" title="axios的拦截器"></a>axios的拦截器</h3><p>在请求或响应被 <code>then</code> 或 <code>catch</code> 处理前拦截它们。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>查看代码</span></div>    <div class="hide-content"><p><code>request.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">        baseURL: <span class="string">&quot;http://123.207.32.32:8000&quot;</span>,</span><br><span class="line">        timeout: <span class="number">5000</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    instance.interceptors.request.use(<span class="function"><span class="params">config</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;拦截的请求&quot;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(config)</span><br><span class="line">        <span class="comment">// 拦截了请求要返回</span></span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    instance.interceptors.response.use(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;拦截的响应&quot;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(response);</span><br><span class="line">        <span class="keyword">return</span>  response.data</span><br><span class="line">    &#125;,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> instance(config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>main.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;request&#125; <span class="keyword">from</span> <span class="string">&quot;./network/request&quot;</span>;</span><br><span class="line"></span><br><span class="line">request(&#123;</span><br><span class="line">    url: <span class="string">&quot;/home/multidata&quot;</span>,</span><br><span class="line">    type: <span class="string">&quot;get&quot;</span></span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;请求成功返回的结果&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div></div><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200712100002.png" alt="20200712100002.png"></p>]]></content>
      
      
      <categories>
          
          <category> Web教程 </category>
          
          <category> Axios </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuex学习</title>
      <link href="/posts/413c71da/"/>
      <url>/posts/413c71da/</url>
      
        <content type="html"><![CDATA[<h2 id="Vuex学习"><a href="#Vuex学习" class="headerlink" title="Vuex学习"></a>Vuex学习</h2><div class="note info"><p>文章中的资料来自: <a href="https://github.com/zhangtianyi0110/VueLearnNotes/blob/master/19-vuex/19-vuex.md">https://github.com/zhangtianyi0110/VueLearnNotes/blob/master/19-vuex/19-vuex.md</a> 、自己优化<br>视频: <a href="https://www.bilibili.com/video/BV15741177Eh/?p=129">https://www.bilibili.com/video/BV15741177Eh/?p=129</a></p></div><h3 id="什么是Vuex"><a href="#什么是Vuex" class="headerlink" title="什么是Vuex"></a>什么是Vuex</h3><div class="note info"><p>Vuex就是一个状态管理模式，为什么叫模式？</p></div><p>因为Vuex包含了一套对<code>state(状态)</code>的操作规范，集中存储管理应用的所有组件的状态。</p><blockquote><p>状态管理</p></blockquote><ul><li><p>简单来说就是管理各个组件共享的数据，类似session</p></li><li><p>session可以存数据，存的过程就是管理，数据的每一次赋值就是当次状态。</p></li><li><p>Vuex在Vue实例顶层中。</p><p>  Vuex也可以理解为java中的一个map，这个map是static(静态资源)的，每次获取map的值，都需要调用java的api，比如<code>map.get(key)</code>获取对应的值，也可以放入数据<code>map.put(data)</code>，而且这个数据是所有类都可以调用的，只需要导入这个map就能使用里面的共享数据。</p><p>  不了解java也没关系，你也可以理解成为百度百科就是一个容纳百科知识的容器，你要搜vuex，百科就会出现vuex的描述，这个搜索就是获取状态，如果你角色百科的vuex描述有误。你也可以发起修改操作，改成正确的vuex描述，这个修改操作就是修改vuex在百科里面的状态。当然你可以搜索修改vuex，别人也可以，因为这个状态是共享的。</p><p>  简单来看实现这个功能好像我们自己封装一个对象就能实现，但是<code>Vuex有一个特性就是响应式</code>。如果我们自己封装对象想做到完美响应式比较麻烦，所有Vuex帮我们做了这个事情。</p></li></ul><blockquote><p>什么状态需要Vuex去管理？</p></blockquote><ul><li>比如用户的登录的状态（token）、用户的信息（头像、名称、地理位置信息）等等</li><li>比如商品的收藏，购物车的商品等等</li><li>这些状态应该是响应式的，用户昵称、头像修改了需要响应</li></ul><blockquote><p>Vuex简单模型</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://vuex.vuejs.org/flow.png" alt="vuex简单模型"></p><ul><li><code>state</code>，驱动应用的数据源；</li><li><code>view</code>，以声明方式将 state 映射到视图；</li><li><code>actions</code>，响应在 view 上的用户输入导致的状态变化。</li></ul><p>这是一个单页面数据流向，比如想要修改用户昵称，当前用户昵称的状态是A，通过输入框输入了新的昵称B，调用ajax请求后端修改成功后将state改成B，然后视图响应用户昵称的变化从A到B。</p><p>但是，当我们的应用遇到多个组件共享状态时，单向数据流的简洁性很容易被破坏：</p><ul><li>多个视图依赖于同一状态。</li><li>来自不同视图的行为需要变更同一状态。</li><li>所以我们需要vuex的规范操作来管理状态。</li></ul><h3 id="Vuex基本使用"><a href="#Vuex基本使用" class="headerlink" title="Vuex基本使用"></a>Vuex基本使用</h3><blockquote><p>传统方法使用父子组件数据传递</p></blockquote><p>使用Vue-CLI4创建项目</p><div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">修改App.vue</button></li><li class="tab"><button type="button" data-href="#tab1-2">创建HelloVuex.vue</button></li><li class="tab"><button type="button" data-href="#tab1-3">总结</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count--&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hello-vuex</span> <span class="attr">:count</span>=<span class="string">&quot;count&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> HelloVuex <span class="keyword">from</span> <span class="string">&#x27;./components/HelloVuex&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line">  data () &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      message: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line">      count: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    HelloVuex</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;HelloVuex&#x27;</span>,</span></span><br><span class="line">  data () &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      message: <span class="string">&#x27;HelloVuex&#x27;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line"><span class="javascript">    count: <span class="built_in">Number</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-3"><p>此时我们使用了父子组件通信来完成子组件<code>HelloVuex</code>获取父组件的<code>count</code>。</p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>如果不是父子组件如何通信，此时就需要vuex了，还是这2个组件，现在不使用父子通信，直接使用vuex。</p><blockquote><p>使用vuex管理状态</p></blockquote><ul><li><p>使用<code>npm install vuex --save</code>安装Vuex</p></li><li><p>安装插件<code>Vue.use(Vuex)</code>，在src下新建一个store文件夹，新建一个<code>index.js</code></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.安装插件</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.创建对象</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123; <span class="comment">// 状态集合</span></span><br><span class="line">    count: <span class="number">0</span> <span class="comment">// 具体的状态数据</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.导出store对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure></li><li><p>修改<code>App.vue</code>和<code>HelloVuex.vue</code>，直接使用<code>$store.state.count</code>获取count值</p><p>  <code>App.vue</code></p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; $store.state.count &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;$store.state.count++&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;$store.state.count--&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hello-vuex</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> HelloVuex <span class="keyword">from</span> <span class="string">&#x27;./components/HelloVuex&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">      name: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line">      data () &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">          message: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      components: &#123;</span><br><span class="line">        HelloVuex</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  <code>HelloVuex.vue</code></p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是HelloVuex的count：&#123;&#123; $store.state.count &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;HelloVuex&#x27;</span>,</span></span><br><span class="line">  data () &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      message: <span class="string">&#x27;HelloVuex&#x27;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  一般不会直接使用<code>$store.state.count</code>获取vuex中的状态，也不是直接使用<code>$store.state.count++</code>来操作vuex中的状态。</p></li></ul><h3 id="Vuex的流程"><a href="#Vuex的流程" class="headerlink" title="Vuex的流程"></a>Vuex的流程</h3><p><img src= "/img/loading.gif" data-lazy-src="https://vuex.vuejs.org/vuex.png" alt="状态管理图例"></p><ul><li><code>Vue Components</code>是vue组件</li><li><code>Mutations</code> ：更改 Vuex 的 store 中的状态的唯一方法是提交 mutation</li><li><code>State</code> 是vuex中状态的集合</li><li>Actions与Mutations 类似，经常与后端交互，不同在于：<ul><li>Action 提交的是 mutation，而不是直接变更状态。</li><li>Action 可以包含任意异步操作。</li></ul></li></ul><div class="note download"><p>想要更好的调试Vue项目可以下载Chrome插件 <code>vue-devtools</code></p></div><div class="note idea"><p>组件中修改 <code>state</code>，通过提交 <code>mutation</code>，修改完成后vuex帮我们响应到vue组件上。</p></div><p>案例:</p><ul><li><p>修改<code>index.js</code>使用<code>mutation</code></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建对象</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123; <span class="comment">// 状态集合</span></span><br><span class="line">    count: <span class="number">200</span> <span class="comment">// 具体的状态数据</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123; <span class="comment">// 操作修改 state（状态） 默认有一个 state 参数</span></span><br><span class="line">    increment (state) &#123; <span class="comment">// 增加</span></span><br><span class="line">      state.count++</span><br><span class="line">    &#125;,</span><br><span class="line">    decrement (state) &#123; <span class="comment">// 减少</span></span><br><span class="line">      state.count--</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>修改<code>App.vue</code>提交<code>mutation</code></p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; $store.state.count &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sub&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hello-vuex</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> HelloVuex <span class="keyword">from</span> <span class="string">&#x27;./components/HelloVuex&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line">  data () &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      message: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    HelloVuex</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    add () &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">// 通过commit内填入mutations里的方法    </span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;increment&#x27;</span>)</span></span><br><span class="line">    &#125;,</span><br><span class="line">    sub () &#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;decrement&#x27;</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>通过<code>vue-devtools</code>测试</p><p>  <img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200707211854.png" alt="vue-devtools测试"></p></li></ul><p>​    测试发现没有问题与直接使用<code>$store.state.count++</code>效果一致，通过提交mutation修改了状态state，在<code>vue-devtools</code>中也能跟踪state变化以及提交的mutation。</p><h3 id="Vuex的核心概念"><a href="#Vuex的核心概念" class="headerlink" title="Vuex的核心概念"></a>Vuex的核心概念</h3><ul><li><code>State</code></li><li><code>Getters</code></li><li><code>Mutation</code></li><li><code>Action</code></li><li><code>Moudule</code></li></ul><h4 id="State（单一状态树）"><a href="#State（单一状态树）" class="headerlink" title="State（单一状态树）"></a>State（单一状态树）</h4><p>Vuex 使用<code>单一状态树</code>—— 用一个对象就包含了全部的应用层级状态。至此它便作为一个“唯一数据源 (<a href="https://en.wikipedia.org/wiki/Single_source_of_truth">SSOT</a>)”而存在。。这也意味着，每个应用将仅仅包含一个 store 实例。单一状态树让我们能够直接地定位任一特定的状态片段，在调试的过程中也能轻易地取得整个当前应用状态的快照。</p><p>简单说就是把数据所有有关的数据封装到一个对象中，这个对象就是store实例，无论是数据的状态（state），以及对数据的操作（mutation、action）等都在store实例中，便于管理维护操作。</p><p><code>state</code>直接通过<code>this.$store.state</code>获取state对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="mapstate辅助函数"><a href="#mapstate辅助函数" class="headerlink" title="mapstate辅助函数"></a>mapstate辅助函数</h5><p>当一个组件需要获取多个状态的时候，将这些状态都声明为计算属性会有些重复和冗余。为了解决这个问题，我们可以使用 <code>mapState</code> 辅助函数帮助我们生成计算属性，让你少按几次键：</p><p><code>store/index.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    name: <span class="string">&quot;zykj&quot;</span>,</span><br><span class="line">    count: <span class="number">200</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>App.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; name &#125;&#125;</span><br><span class="line">        &#123;&#123; countAlias &#125;&#125;</span><br><span class="line">        &#123;&#123; countPlusLocalState &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//在使用mapState之前,要导入这个辅助函数</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">                localCount: 200</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;&#125;,</span><br><span class="line">        computed: mapState(&#123;</span><br><span class="line"><span class="javascript">            <span class="comment">// 箭头函数可使代码更简练</span></span></span><br><span class="line"><span class="javascript">            name: <span class="function">(<span class="params">state</span>) =&gt;</span> state.name,</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">// 传字符串参数 &#x27;count&#x27; 等同于 `state =&gt; state.count`</span></span></span><br><span class="line"><span class="javascript">            countAlias: <span class="string">&#x27;count&#x27;</span>,</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">// 为了能够使用 this 获取局部状态，必须使用常规函数</span></span></span><br><span class="line">            countPlusLocalState(state) &#123;</span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> state.count + <span class="built_in">this</span>.localCount</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Getters"><a href="#Getters" class="headerlink" title="Getters"></a>Getters</h4><p>Getters类似计算属性，帮我们做一些重复的事情。</p><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>案例</span></div>    <div class="hide-content"><p>有这样一个store实例，我们需要获取年龄大于20岁的学生数量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123; <span class="comment">// 状态集合</span></span><br><span class="line">    students: [</span><br><span class="line">      &#123;<span class="attr">id</span>: <span class="number">110</span>, <span class="attr">name</span>: <span class="string">&#x27;zzz&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;18&#x27;</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">id</span>: <span class="number">111</span>, <span class="attr">name</span>: <span class="string">&#x27;ttt&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;20&#x27;</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">id</span>: <span class="number">112</span>, <span class="attr">name</span>: <span class="string">&#x27;yyy&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;22&#x27;</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">id</span>: <span class="number">113</span>, <span class="attr">name</span>: <span class="string">&#x27;zty&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;25&#x27;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>你可能会这样写这样一个计算属性去获取年龄大于20岁的学生数量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    stuCount() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.$store.state.students.filter(<span class="function"><span class="params">student</span> =&gt;</span> student.age &gt; <span class="number">20</span>).length</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果很多组件中需要年龄大于20岁的学生数量，你可能会将这个计算属性复制，将filter函数写很多遍，但是如果你有Getters。</p></blockquote><ul><li><p>在store实例中定义getters</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">    getStudentCounts: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state.students.filter(<span class="function"><span class="params">s</span> =&gt;</span> s.age &gt; <span class="number">20</span>).length</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过属性调用getters</p><p>  现在只需要调用getters的getStudents对象，就能获取数量。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    stuCount() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.$store.getters.getStudents</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>如果你想查询指定ID（传入ID）的学生信息。</p></blockquote><p>你也可以通过让 <code>getter 返回一个函数</code>，来实现给 getter 传参。在你对 store 里的数组进行查询时非常有用。</p><ul><li><p>定义<code>getters</code></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写法1</span></span><br><span class="line">getters: &#123;</span><br><span class="line">    getStuById: <span class="function"><span class="params">state</span> =&gt;</span> <span class="function"><span class="params">id</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state.students.find(<span class="function"><span class="params">s</span> =&gt;</span> s.id === id)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//写法2</span></span><br><span class="line">getters: &#123;</span><br><span class="line">    getStuById(state)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">age</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> state.students.find(<span class="function"><span class="params">s</span> =&gt;</span> s.id === id)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过方法访问</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    stuById() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.$store.getters.getStuById(<span class="number">110</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  传入学生ID为110，输出就可以获得结构</p></li></ul></div></div><p>Vuex允许在 store 中定义”getter”(可以认为是 store 的计算属性)。就像计算属性一样，getter 是响应式的，只有当数据发送改变才会重新计算。</p><p>Getter的参数：<code>state 作为其第一个参数</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    data: [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">&#x27;...&#x27;</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">&#x27;...&#x27;</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    doneData: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.data.filter(<span class="function"><span class="params">todo</span> =&gt;</span> todo.done)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="通过属性访问"><a href="#通过属性访问" class="headerlink" title="通过属性访问"></a>通过属性访问</h5><p>Getter 会暴露为 <code>store.getters</code> 对象，以<code>属性的形式</code>访问这些值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.getters.doneData <span class="comment">// -&gt; [&#123; id: 1, text: &#x27;...&#x27;, done: true &#125;]</span></span><br></pre></td></tr></table></figure><p>Getter可以将 <code>getter</code> 作为第二个参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">  doneDataCount: <span class="function">(<span class="params">state, getters</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getters.doneData.length</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">store.getters.doneTodosCount <span class="comment">// -&gt; 1</span></span><br></pre></td></tr></table></figure><p>我们可以很容易地在任何组件中使用它：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  doneDataCount () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.$store.getters.doneDataCount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，getter 在通过属性访问时是作为 Vue 的响应式系统的一部分缓存其中的。</p><h5 id="通过方法访问"><a href="#通过方法访问" class="headerlink" title="通过方法访问"></a>通过方法访问</h5><p>通过 getter <code>返回一个函数</code>，实现 getter 传参。在你对 store 里的数组进行查询时非常有用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">  getDataById(state)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> state.data.find(<span class="function"><span class="params">todo</span> =&gt;</span> todo.id === id)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">store.getters.getDataById(<span class="number">2</span>) <span class="comment">// -&gt; &#123; id: 2, text: &#x27;...&#x27;, done: false &#125;</span></span><br></pre></td></tr></table></figure><p>注意，getter 在通过方法访问时，每次都会去进行调用，而不会缓存结果。</p><h5 id="mapGetters-辅助函数"><a href="#mapGetters-辅助函数" class="headerlink" title="mapGetters 辅助函数"></a>mapGetters 辅助函数</h5><p>自己理解：不需要每次在计算属性中返回 actions </p><p>通过<code>import &#123; mapGetters &#125; from &#39;vuex&#39;</code>导入</p><p>如：我们想获取数组的长度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    data: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    dataLength(state)&#123;</span><br><span class="line">        <span class="keyword">return</span> state.data.length</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在组件中使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; dataLength &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">      name: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line">      data () &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      computed: &#123;</span><br><span class="line"><span class="javascript">        <span class="comment">// 数组形式</span></span></span><br><span class="line"><span class="javascript">        ...mapGetters([<span class="string">&#x27;dataLength&#x27;</span>])</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 对象形式</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//...mapGetters(&#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//  //  把 `this.length` 映射为 `this.$store.getters.dataLength`</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//  length: &#x27;dataLength&#x27;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// &#125;)</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Mutation（状态更新）"><a href="#Mutation（状态更新）" class="headerlink" title="Mutation（状态更新）"></a>Mutation（状态更新）</h4><p><img src= "/img/loading.gif" data-lazy-src="https://vuex.vuejs.org/vuex.png" alt="状态管理图例"></p><ul><li><p>Vuex的store状态更新的唯一方式：<code>提交Mutation</code></p></li><li><p>Mutation主要包括两个部分：</p><ol><li>字符串的事件类型（type）</li><li>一个回调函数（handler），这个回调函数就是我们实际进行状态更改的地方，该回调函数的第一个参数就是state</li></ol></li><li><p>Mutation的定义方式</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mutation: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">        state.count++</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过Mutation更新(修改state里的数据)</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  mutation() &#123;</span><br><span class="line">     <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;increment&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="Mutation-接受单个参数"><a href="#Mutation-接受单个参数" class="headerlink" title="Mutation 接受单个参数"></a>Mutation 接受单个参数</h5><p>mutation携带的参数被称为是mutation的<code>载荷(Payload)</code></p><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>案例</span></div>    <div class="hide-content"><p>在Vuex流程的案例上修改，添加2个按钮分别是让state中的<code>count+5</code>、<code>count+10</code>，增加2个按钮</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addCount(5)&quot;</span>&gt;</span>+5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addCount(10)&quot;</span>&gt;</span>+10<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新增addCount方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">addCount (count) &#123;</span><br><span class="line">    <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;addCount&#x27;</span>, count) <span class="comment">// 将count传入</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新增一个mutation</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mutation: &#123;</span><br><span class="line">addCount (state, count) &#123; <span class="comment">// 第二个参数是count，第一个始终是state</span></span><br><span class="line">state.count += count</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h5 id="Mutation-接受多个参数"><a href="#Mutation-接受多个参数" class="headerlink" title="Mutation 接受多个参数"></a>Mutation 接受多个参数</h5><p>如果mutation需要接受多个参数，此时可以传一个对象</p><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>案例</span></div>    <div class="hide-content"><p>例如新增一个功能点击按钮新增一个学生，此时需要传学生的ID、姓名、年龄，可以封装成一个学生对象传入。</p><ol><li><p>新增按钮</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addStu()&quot;</span>&gt;</span>新增一个指定的学生<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>新增mutation</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">addStu (state, stu) &#123;</span><br><span class="line">    state.students.push(stu) <span class="comment">// 向数组中添加指定的stu</span></span><br><span class="line">    <span class="built_in">console</span>.log(state.students.find(<span class="function"><span class="params">s</span> =&gt;</span> s.id === stu.id)) <span class="comment">// 输出打印查看state中是否有新增stu</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>新增(methods)方法</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">addStu () &#123;</span><br><span class="line">    <span class="keyword">const</span> stu = &#123; <span class="attr">id</span>: <span class="number">114</span>, <span class="attr">name</span>: <span class="string">&#x27;zykj&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;35&#x27;</span>&#125;</span><br><span class="line">    <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;addStu&#x27;</span>, stu)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></div></div><h5 id="Mutation-的提交风格"><a href="#Mutation-的提交风格" class="headerlink" title="Mutation 的提交风格"></a>Mutation 的提交风格</h5><ol><li><p>普通提交风格</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$store.commot(<span class="string">&#x27;increment&#x27;</span>, count)</span><br></pre></td></tr></table></figure><p> 此时count传过去的就是<code>count=10</code></p></li><li><p>对象方式提交</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$store.commit(&#123;</span><br><span class="line">    type: <span class="string">&#x27;addCount&#x27;</span>,</span><br><span class="line">    count</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">addCount (state, payload) &#123; <span class="comment">// 此时传入的就不是一个count值了，而是一个对象</span></span><br><span class="line">    <span class="comment">//获取时也是通过对象</span></span><br><span class="line">state.count += payload.count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 此时count传过去是一个对象<code>payload（载荷）</code></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    type: <span class="string">&#x27;incrementCount&#x27;</span>,</span><br><span class="line">    count: <span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="Vuex的响应式原理"><a href="#Vuex的响应式原理" class="headerlink" title="Vuex的响应式原理"></a>Vuex的响应式原理</h5><ol><li>Vuex的store的state是响应式的，当state中的数据发生改变时，Vue组件会自动更新。</li><li>响应式需要遵循规则<ul><li>state的对象需要初始化</li><li>如果需要给state中的对象添加新属性的时候，使用以下方式<ol><li>使用<code>Vue.set(obj, &#39;newProp&#39;, 123)</code></li><li><code>用新对象替换旧对象</code></li></ol></li></ul></li></ol><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>查看示例</span></div>    <div class="hide-content"><ol><li><p>在state中增加一个对象user</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">user: &#123;</span><br><span class="line">    name: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    sex: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在app.vue增加按钮修改信息</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; $store.state.user &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updateInfo()&quot;</span>&gt;</span>修改信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>app.vue增加按updateInfo()方法</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">updateInfo () &#123;</span><br><span class="line">   <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;updateInfo&#x27;</span>, <span class="number">12</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在mutation中添加updateInfo()</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">updateInfo (state, age) &#123;</span><br><span class="line">    state.user.age = age</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>点击<code>修改信息</code>按钮，发现state的值变化了，但是页面没有响应变化(是因为直接修改数据不是相应式的、需要使用其他方法)</p></li><li><p>使用<code>Vue.set()</code>方法支持响应式</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">updateInfo (state, age) &#123;</span><br><span class="line">    <span class="comment">// state.user.age = age</span></span><br><span class="line">    Vue.set(state.user, <span class="string">&#x27;age&#x27;</span>, <span class="number">12</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>再次点击<code>修改信息</code>按钮，发现变响应式了</p></li></ol></div></div><blockquote><p>总结</p></blockquote><ol><li><p>state未初始化属性（<code>age</code>）</p><ul><li>使用直接赋值的方式不能响应式</li><li>需要使用<code> Vue.set(state.user, &#39;age&#39;, 12)</code></li></ul></li><li><p>state已经初始化了，可以使用直接赋值方式</p></li><li><p>关于删除属性</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该方法没有响应式，需要使用Vue.delete</span></span><br><span class="line"><span class="comment">// delete state.user.age</span></span><br><span class="line">Vue.delete(state.user, age)<span class="comment">// 响应式删除age</span></span><br></pre></td></tr></table></figure></li></ol><h5 id="Mutation-的类型常量"><a href="#Mutation-的类型常量" class="headerlink" title="Mutation 的类型常量"></a>Mutation 的类型常量</h5><p>一个vue文件中有关mutation的方法太多了，常常可能写错，所有可以在store文件夹下定义一个<code>mutation-type.js</code>的常量。</p><ol><li><p>定义一个<code>mutation-type.js</code>的常量、并将其导出</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">updateInfo (state, age) &#123;</span><br><span class="line">      <span class="comment">// state.user.age = age</span></span><br><span class="line">      Vue.set(state.user, <span class="string">&#x27;age&#x27;</span>, <span class="number">12</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改<code>App.vue</code>的updateinfo方法</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入变量</span></span><br><span class="line"><span class="keyword">import</span> &#123; UPDATEINFO &#125; <span class="keyword">from</span> <span class="string">&#x27;./store/mutation-type&#x27;</span></span><br><span class="line"></span><br><span class="line">[UPDATEINFO] () &#123;</span><br><span class="line"><span class="built_in">this</span>.$store.commit(UPDATEINFO, <span class="number">12</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改store的<code>index.js</code>，将mutation的方法名也改成常量使用方式</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; UPDATEINFO &#125; <span class="keyword">from</span> <span class="string">&#x27;./mutation-type&#x27;</span></span><br><span class="line"></span><br><span class="line">[UPDATEINFO] (state, age) &#123;</span><br><span class="line">    <span class="comment">// state.user.age = age</span></span><br><span class="line">    Vue.set(state.user, <span class="string">&#x27;age&#x27;</span>, <span class="number">12</span>)</span><br><span class="line">    <span class="comment">// 该方法没有响应式，需要使用Vue.delete</span></span><br><span class="line">    <span class="comment">// delete state.user.age</span></span><br><span class="line">    <span class="comment">// Vue.delete(state.user, age)// 响应式删除age</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 这样保证了所有的方法都定义在<code>mutation-type.js</code>中，不会出问题。</p></li></ol><h5 id="Mutation-必须是同步函数"><a href="#Mutation-必须是同步函数" class="headerlink" title="Mutation 必须是同步函数"></a>Mutation 必须是同步函数</h5><p>一条重要的原则就是要记住 <code>mutation 必须是同步函数</code>。为什么？请参考下面的例子：</p><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>查看示例</span></div>    <div class="hide-content"><p>使用mutation操作更新state的时候，使用异步修改数据。</p><p>修改updateInfo()方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[UPDATEINFO] (state, age) &#123;</span><br><span class="line">    Vue.set(state.user, <span class="string">&#x27;age&#x27;</span>, <span class="number">12</span>)</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; <span class="comment">// 延时模拟异步网络请求</span></span><br><span class="line">        state.user.name = <span class="string">&#x27;lisi&#x27;</span></span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现页面的数据改变了，但是vue-devtools工具中并未跟踪到改变。所以我们不要在mutation中进行异步操作。这里就引出了我们之后要学习的 Action</p></div></div><p>现在想象，我们正在 debug 一个 app 并且观察 devtool 中的 mutation 日志。每一条 mutation 被记录，devtools 都需要捕捉到前一状态和后一状态的快照。然而，在上面的例子中 mutation 中的异步函数中的回调让这不可能完成：因为当 mutation 触发的时候，回调函数还没有被调用，devtools 不知道什么时候回调函数实际上被调用——实质上任何在回调函数中进行的状态的改变都是不可追踪的。<code>简单来说就是在mutation上使用异步函数会导致devtools不能追踪</code></p><h4 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h4><p>Action 类似于 mutation，不同在于：</p><ul><li>Action 提交的是 mutation，而不是直接变更状态。</li><li>Action 可以包含任意<code>异步操作</code>。</li></ul><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>查看示例</span></div>    <div class="hide-content"><ol><li><p>新增一个mutation</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">updateName (state, name) &#123;</span><br><span class="line">state.user.name = name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>新增一个actions：第一个参数默认为 context (上下文),第二个参数为 传入的参数</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">    <span class="comment">// context：上下文 </span></span><br><span class="line">    aUpdateInfo (context, name) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        context.commit(<span class="string">&#x27;updateName&#x27;</span>, <span class="string">&#x27;zykj&#x27;</span>)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>App.vue</code>中新增一个按钮修改user对象姓名</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>异步修改的信息:&#123;&#123; $store.state.user &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;aUpdateInfo()&quot;</span>&gt;</span>异步修改信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>给按钮新增方法</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">aUpdateInfo () &#123;</span><br><span class="line">    <span class="comment">// 第一个参数为actions中的函数、第二个为参数</span></span><br><span class="line"><span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;aUpdateInfo&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>点击<code>异步修改信息</code>按钮测试</p><p> 在点击按钮之后，信息修改了，dev-tools也能跟踪到state的变化。通过<code>$store.dispacth()</code>方法来调用actions，发送异步请求，在actions中需要提交mutation来修改state。</p></li><li><p><code>actions回调，在异步操作后，成功或者失败都应该会有回调</code>，<code>$store.dispacth()</code>返回一个Promise对象，修改actions，返回一个Promise对象，成功调用<code>resolve(msg)</code>，将成功的<code>msg</code>传入</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">    <span class="comment">// context：上下文</span></span><br><span class="line">    aUpdateInfo (context, name) &#123;</span><br><span class="line">        <span class="keyword">let</span> msg = <span class="string">&#x27;响应成功&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                context.commit(<span class="string">&#x27;updateName&#x27;</span>, <span class="string">&#x27;zykj&#x27;</span>)</span><br><span class="line">                resolve(msg)</span><br><span class="line">            &#125;, <span class="number">1000</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改<code>aUpdateInfo()</code>方法，获取回调参数<code>msg</code>，此时的<code>response</code>就是actions中回调的<code>msg</code>，也可以支持失败的回调，只要actions中使用了reject，在<code>aUpdateInfo()</code>方法中catch回调结果就能获取resjct对象回传结果。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aUpdateInfo () &#123;</span><br><span class="line">    <span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;aUpdateInfo&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(response)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>再次点击<code>异步修改信息</code>，打印结果信息</p><blockquote><p>Actions 支持同样的载荷方式(payload)和对象方式进行分发</p></blockquote> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以载荷形式分发</span></span><br><span class="line">store.dispatch(<span class="string">&#x27;aUpdateInfo&#x27;</span>, &#123;</span><br><span class="line">  name: <span class="string">&#x27;lisi&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以对象形式分发</span></span><br><span class="line">store.dispatch(&#123;</span><br><span class="line">  type: <span class="string">&#x27;aUpdateInfo&#x27;</span>,</span><br><span class="line">  name: <span class="string">&#x27;lisi&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol></div></div><h5 id="分发-Action"><a href="#分发-Action" class="headerlink" title="分发 Action"></a>分发 Action</h5><p>Action 通过 <code>store.dispatch</code> 方法触发：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.dispatch(<span class="string">&#x27;mutation中的函数名&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="组合-Action"><a href="#组合-Action" class="headerlink" title="组合 Action"></a>组合 Action</h5><p>Action 通常是异步的，那么如何知道 action 什么时候结束呢？更重要的是，我们如何才能组合多个 action，以处理更加复杂的异步流程？</p><p>首先，你需要明白 <code>store.dispatch</code> 可以处理被触发的 action 的处理函数返回的 Promise，并且 <code>store.dispatch</code> 仍旧返回 Promise：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  actionA (&#123; commit &#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        commit(<span class="string">&#x27;someMutation&#x27;</span>)</span><br><span class="line">        resolve()</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在你可以：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">store.dispatch(<span class="string">&#x27;actionA&#x27;</span>).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在另外一个 action 中也可以：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  actionB (&#123; dispatch, commit &#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> dispatch(<span class="string">&#x27;actionA&#x27;</span>).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      commit(<span class="string">&#x27;someOtherMutation&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个 <code>store.dispatch</code> 在不同模块中可以触发多个 action 函数。在这种情况下，只有当所有触发函数完成后，返回的 Promise 才会执行。</p><h4 id="moudules（模块）"><a href="#moudules（模块）" class="headerlink" title="moudules（模块）"></a>moudules（模块）</h4><p>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。</p><p>为了解决以上问题，Vuex 允许我们将 store 分割成<code>模块（module）</code>。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割。</p><p>比如这样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  state: <span class="function">() =&gt;</span> (&#123; ... &#125;),</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;,</span><br><span class="line">  getters: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">  state: <span class="function">() =&gt;</span> (&#123; ... &#125;),</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    a: moduleA,</span><br><span class="line">    b: moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.state.a <span class="comment">// -&gt; moduleA 的状态</span></span><br><span class="line">store.state.b <span class="comment">// -&gt; moduleB 的状</span></span><br></pre></td></tr></table></figure><h5 id="模块的局部状态"><a href="#模块的局部状态" class="headerlink" title="模块的局部状态"></a>模块的局部状态</h5><ol><li><p>模块内部的<code>mutation 和 getter</code>，接收的第一个参数是<code>模块的局部状态对象(state)</code>。</p></li><li><p>模块内部的 action，局部状态是 <code>context.state</code> ，根节点状态则为 <code>context.rootState</code>。</p></li><li><p>对于模块内部的 getter，第三个参数是<code>根节点状态(rootState)</code>。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  state: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;),</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      <span class="comment">// 这里的 state 对象是模块的局部状态</span></span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    incrementIfOddOnRootSum (context) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((context.state.count + context.rootState.count) % <span class="number">2</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        context.commit(<span class="string">&#x27;increment&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    doubleCount (state, getters, rootState) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(rootState.count) <span class="comment">// 获取的是根状态的count</span></span><br><span class="line">      <span class="keyword">return</span> state.count * <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意actions的context</p></blockquote> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">    incrementIfOddOnRootSum (&#123; state, commit, rootState &#125;) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((context.state.count + context.rootState.count) % <span class="number">2</span> === <span class="number">1</span>) &#123;</span><br><span class="line">            context.commit(<span class="string">&#x27;increment&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <code>&#123; state, commit, rootState &#125;</code>对应<code>context</code>对象中的属性，使用ES6的对象解构。</p></li></ol><h5 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h5><div class="note info"><p>官网教程: <a href="https://vuex.vuejs.org/zh/guide/modules.html">https://vuex.vuejs.org/zh/guide/modules.html</a></p></div><p>默认情况下，模块内部的 action、mutation 和 getter 是注册在<code>全局命名空间</code>的, 这样使得多个模块能够对同一 mutation 或 action 作出响应。</p><p>我们已经知道了，模块内部的 action、mutation 和 getter 默认是注册在全局命名空间的。如果我们只想让他们在当前的模块中生效，应该怎么办呢？</p><p>通过添加 <code>namespaced: true</code> 的方式使其成为带命名空间的模块。当模块被注册后，它的所有 getter、action 及 mutation 都会自动根据模块注册的路径调整命名。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    account: &#123;</span><br><span class="line">      namespaced: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 模块内容（module assets）</span></span><br><span class="line">      state: <span class="function">() =&gt;</span> (&#123; ... &#125;), <span class="comment">// 模块内的状态已经是嵌套的了，使用 `namespaced` 属性不会对其产生影响</span></span><br><span class="line">      getters: &#123;</span><br><span class="line">        isAdmin () &#123; ... &#125; <span class="comment">// -&gt; getters[&#x27;account/isAdmin&#x27;]</span></span><br><span class="line">      &#125;,</span><br><span class="line">      actions: &#123;</span><br><span class="line">        login () &#123; ... &#125; <span class="comment">// -&gt; dispatch(&#x27;account/login&#x27;)</span></span><br><span class="line">      &#125;,</span><br><span class="line">      mutations: &#123;</span><br><span class="line">        login () &#123; ... &#125; <span class="comment">// -&gt; commit(&#x27;account/login&#x27;)</span></span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 嵌套模块</span></span><br><span class="line">      modules: &#123;</span><br><span class="line">        <span class="comment">// 继承父模块的命名空间</span></span><br><span class="line">        myPage: &#123;</span><br><span class="line">          state: <span class="function">() =&gt;</span> (&#123; ... &#125;),</span><br><span class="line">          getters: &#123;</span><br><span class="line">            profile () &#123; ... &#125; <span class="comment">// -&gt; getters[&#x27;account/profile&#x27;]</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 进一步嵌套命名空间</span></span><br><span class="line">        posts: &#123;</span><br><span class="line">          namespaced: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">          state: <span class="function">() =&gt;</span> (&#123; ... &#125;),</span><br><span class="line">          getters: &#123;</span><br><span class="line">            popular () &#123; ... &#125; <span class="comment">// -&gt; getters[&#x27;account/posts/popular&#x27;]</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>启用了命名空间的 getter 和 action 会收到局部化的 <code>getter</code>，<code>dispatch</code> 和 <code>commit</code>。换言之，<code>你在使用模块内容（module assets）时不需要在同一模块内额外添加空间名前缀</code>。更改 <code>namespaced</code> 属性后不需要修改模块内的代码。</p><h6 id="在带命名空间的模块内访问全局内容（Global-Assets）"><a href="#在带命名空间的模块内访问全局内容（Global-Assets）" class="headerlink" title="在带命名空间的模块内访问全局内容（Global Assets）"></a>在带命名空间的模块内访问全局内容（Global Assets）</h6><p>如果你希望使用全局 state 和 getter，<code>rootState</code> 和 <code>rootGetters</code> 会作为第三和第四参数传入 getter，也会通过 <code>context</code> 对象的属性传入 action。</p><p>若需要在全局命名空间内分发 action 或提交 mutation，将 <code>&#123; root: true &#125;</code> 作为第三参数传给 <code>dispatch</code> 或 <code>commit</code> 即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">modules: &#123;</span><br><span class="line">  foo: &#123;</span><br><span class="line">    namespaced: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    getters: &#123;</span><br><span class="line">      <span class="comment">// 在这个模块的 getter 中，`getters` 被局部化了</span></span><br><span class="line">      <span class="comment">// 你可以使用 getter 的第四个参数来调用 `rootGetters`</span></span><br><span class="line">      someGetter (state, getters, rootState, rootGetters) &#123;</span><br><span class="line">        getters.someOtherGetter <span class="comment">// -&gt; &#x27;foo/someOtherGetter&#x27;</span></span><br><span class="line">        rootGetters.someOtherGetter <span class="comment">// -&gt; &#x27;someOtherGetter&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      someOtherGetter: <span class="function"><span class="params">state</span> =&gt;</span> &#123; ... &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    actions: &#123;</span><br><span class="line">      <span class="comment">// 在这个模块中， dispatch 和 commit 也被局部化了</span></span><br><span class="line">      <span class="comment">// 他们可以接受 `root` 属性以访问根 dispatch 或 commit</span></span><br><span class="line">      someAction (&#123; dispatch, commit, getters, rootGetters &#125;) &#123;</span><br><span class="line">        getters.someGetter <span class="comment">// -&gt; &#x27;foo/someGetter&#x27;</span></span><br><span class="line">        rootGetters.someGetter <span class="comment">// -&gt; &#x27;someGetter&#x27;</span></span><br><span class="line"></span><br><span class="line">        dispatch(<span class="string">&#x27;someOtherAction&#x27;</span>) <span class="comment">// -&gt; &#x27;foo/someOtherAction&#x27;</span></span><br><span class="line">        dispatch(<span class="string">&#x27;someOtherAction&#x27;</span>, <span class="literal">null</span>, &#123; <span class="attr">root</span>: <span class="literal">true</span> &#125;) <span class="comment">// -&gt; &#x27;someOtherAction&#x27;</span></span><br><span class="line"></span><br><span class="line">        commit(<span class="string">&#x27;someMutation&#x27;</span>) <span class="comment">// -&gt; &#x27;foo/someMutation&#x27;</span></span><br><span class="line">        commit(<span class="string">&#x27;someMutation&#x27;</span>, <span class="literal">null</span>, &#123; <span class="attr">root</span>: <span class="literal">true</span> &#125;) <span class="comment">// -&gt; &#x27;someMutation&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      someOtherAction (ctx, payload) &#123; ... &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="在带命名空间的模块注册全局-action"><a href="#在带命名空间的模块注册全局-action" class="headerlink" title="在带命名空间的模块注册全局 action"></a>在带命名空间的模块注册全局 action</h6><p>若需要在带命名空间的模块注册全局 action，你可添加 <code>root: true</code>，并将这个 action 的定义放在函数 <code>handler</code> 中。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  actions: &#123;</span><br><span class="line">    someOtherAction (&#123;dispatch&#125;) &#123;</span><br><span class="line">      dispatch(<span class="string">&#x27;someAction&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  modules: &#123;</span><br><span class="line">    foo: &#123;</span><br><span class="line">      namespaced: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">      actions: &#123;</span><br><span class="line">        someAction: &#123;</span><br><span class="line">          root: <span class="literal">true</span>,</span><br><span class="line">          handler (namespacedContext, payload) &#123; ... &#125; <span class="comment">// -&gt; &#x27;someAction&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><p>Vuex 并不限制你的代码结构。但是，它规定了一些需要遵守的规则：</p><ol><li>应用层级的状态应该集中到单个 store 对象中。</li><li>提交 <code>mutation</code> 是更改状态的唯一方法，并且这个过程是同步的。</li><li>异步逻辑都应该封装到 <code>action</code> 里面。</li></ol><p>只要你遵守以上规则，如何组织代码随你便。如果你的 store 文件太大，只需将 action、mutation 和 getter 分割到单独的文件。</p><p>对于大型应用，我们会希望把 Vuex 相关代码分割到模块中。下面是项目结构示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">├── index.html</span><br><span class="line">├── main.js</span><br><span class="line">├── api</span><br><span class="line">│   └── ... ## 抽取出API请求</span><br><span class="line">├── components</span><br><span class="line">│   ├── App.vue</span><br><span class="line">│   └── ...</span><br><span class="line">└── store</span><br><span class="line">    ├── index.js          ## 我们组装模块并导出 store 的地方</span><br><span class="line">    ├── actions.js        ## 根级别的 action</span><br><span class="line">    ├── mutations.js      ## 根级别的 mutation</span><br><span class="line">    └── modules</span><br><span class="line">        ├── cart.js       ## 购物车模块</span><br><span class="line">        └── products.js   ## 产品模块</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web教程 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用CSS或者Pr做出新拟态效果</title>
      <link href="/posts/581025ac/"/>
      <url>/posts/581025ac/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><div class="tip">    <p>「新拟态」英文名Neumorphism，也有设计师称为 Soft Ui（软UI）。简单来说就是一种类似浮雕的效果，介于扁平与投影之间。</p></div><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>我们可以在<a href="https://codepen.io/">CodePen</a>搜索有关的 <a href="https://codepen.io/search/pens?q=Neumorphism">https://codepen.io/search/pens?q=Neumorphism</a></p><div class="justified-gallery"><p><img src= "/img/loading.gif" data-lazy-src="https://assets.codepen.io/1952340/internal/screenshots/pens/XWJeKNO.default.png" alt="https://codepen.io/dev_loop/details/XWJeKNO"><br><img src= "/img/loading.gif" data-lazy-src="https://assets.codepen.io/2821450/internal/screenshots/pens/YzyaRPN.default.png" alt="https://codepen.io/ricardoolivaalonso/pen/YzyaRPN"><br><img src= "/img/loading.gif" data-lazy-src="https://assets.codepen.io/243575/internal/screenshots/pens/JjoaadE.default.png" alt="https://codepen.io/travisw/pen/JjoaadE"><br><img src= "/img/loading.gif" data-lazy-src="https://assets.codepen.io/769557/internal/screenshots/pens/MWWBPQj.default.png" alt="https://codepen.io/MoustafaJazzar/details/MWWBPQj"></p>          </div><p>接下来、我们使用css和pr来做出拟态效果吧</p><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><div class="note info"><p>大佬的视频教程:<a href="https://www.bilibili.com/video/BV1U7411C78K">超简单Html 新拟态网页图标 手把手教学 新手必会！</a></p></div><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>查看代码</span></div>    <div class="hide-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>拟态图标<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        body &#123;</span><br><span class="line"><span class="css">            <span class="comment">/* 水平垂直居中 */</span></span></span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 100vh;</span><br><span class="line">            display: flex;</span><br><span class="line">            justify-content: center;</span><br><span class="line">            align-items: center;</span><br><span class="line"><span class="css">            <span class="comment">/* 设置背景颜色 #efeee 比较适用 */</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#efeeee</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.container</span> &#123;</span></span><br><span class="line">            width: 700px;</span><br><span class="line">            height: 600px;</span><br><span class="line">            display: flex;</span><br><span class="line"><span class="css">            <span class="comment">/* 平均分布在一行中，两端保留一半的空间 */</span></span></span><br><span class="line">            justify-content: space-around;</span><br><span class="line"><span class="css">            <span class="comment">/* 多行显示 */</span></span></span><br><span class="line">            flex-wrap: wrap;</span><br><span class="line"><span class="css">            <span class="comment">/* 各行向伸缩容器的中间位置对齐 */</span></span></span><br><span class="line">            align-items: center;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.container</span> <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            display: flex;</span><br><span class="line">            justify-content: space-around;</span><br><span class="line"><span class="css">            <span class="comment">/* 设置主轴是垂直方向 */</span></span></span><br><span class="line">            flex-direction: column;</span><br><span class="line">            align-items: center;</span><br><span class="line">            align-content: center;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 140px;</span><br><span class="line">            margin: 20px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.container</span> <span class="selector-class">.box</span> <span class="selector-class">.img</span> &#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line"><span class="css">            <span class="selector-tag">box-shadow</span>: 18<span class="selector-tag">px</span> 18<span class="selector-tag">px</span> 30<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.1</span>),</span></span><br><span class="line">                -18px -18px 30px rgba(255, 255, 255, 1);</span><br><span class="line">            border-radius: 20px;</span><br><span class="line">            display: flex;</span><br><span class="line">            align-items: center;</span><br><span class="line">            justify-content: center;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#efeeee</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">transition</span>: <span class="selector-tag">box-shadow</span> <span class="selector-class">.2s</span> <span class="selector-tag">ease-out</span>;</span></span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.container</span> <span class="selector-class">.box</span> <span class="selector-class">.img</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">            width: 60px;</span><br><span class="line"><span class="css">            <span class="selector-tag">transition</span>: <span class="selector-tag">width</span> <span class="selector-class">.2s</span> <span class="selector-tag">ease-out</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.container</span> <span class="selector-class">.box</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line">            color: slategray;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.container</span> <span class="selector-class">.box</span> <span class="selector-class">.img</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">box-shadow</span>: 0 0 0 <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.2</span>),</span></span><br><span class="line"><span class="css">                0 0 0 <span class="selector-tag">rgba</span>(255, 255, 255, 0<span class="selector-class">.8</span>),</span></span><br><span class="line"><span class="css">                <span class="selector-tag">inset</span> 18<span class="selector-tag">px</span> 18<span class="selector-tag">px</span> 30<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.1</span>),</span></span><br><span class="line">                inset -18px -18px 30px rgba(255, 255, 255, 1);</span><br><span class="line"><span class="css">            <span class="selector-tag">transition</span>: <span class="selector-tag">box-shadow</span> <span class="selector-class">.2s</span> <span class="selector-tag">ease-out</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.container</span> <span class="selector-class">.box</span> <span class="selector-class">.img</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">            width: 58px;</span><br><span class="line"><span class="css">            <span class="selector-tag">transition</span>: <span class="selector-tag">width</span> <span class="selector-class">.2s</span> <span class="selector-tag">ease-out</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://zykjofficial.tk/img/pwa/512.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>卓越科技<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://zykjofficial.tk/img/pwa/512.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>卓越科技<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://zykjofficial.tk/img/pwa/512.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>卓越科技<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://zykjofficial.tk/img/pwa/512.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>卓越科技<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://zykjofficial.tk/img/pwa/512.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>卓越科技<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://zykjofficial.tk/img/pwa/512.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>卓越科技<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://zykjofficial.tk/img/pwa/512.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>卓越科技<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://zykjofficial.tk/img/pwa/512.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>卓越科技<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://zykjofficial.tk/img/pwa/512.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>卓越科技<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://zykjofficial.tk/img/pwa/512.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>卓越科技<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://zykjofficial.tk/img/pwa/512.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>卓越科技<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://zykjofficial.tk/img/pwa/512.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>卓越科技<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://zykjofficial.tk/img/pwa/512.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>卓越科技<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://zykjofficial.tk/img/pwa/512.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>卓越科技<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://zykjofficial.tk/img/pwa/512.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>卓越科技<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><p>这个代码的核心就是设置<code>box-shadow(盒子阴影)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">box-shadow: 18px 18px 30px rgba(0, 0, 0, 0.1),</span><br><span class="line">           -18px -18px 30px rgba(255, 255, 255, 1);</span><br></pre></td></tr></table></figure><p>修改盒子阴影可以看到更好的效果</p><style>.bg{    height:200px;    width:200px;    background-color:#efeeee;    padding-top:50px;}.box{    margin: 0 auto;    height:100px;    width:100px;    border-radius:20px;    box-shadow: 18px 18px 30px rgba(0, 0, 0, 0.1),               -18px -18px 30px rgba(255, 255, 255, 1);}</style><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看示例    </button><span class="hide-content"><div class="bg">    <div class="box"></div></div></span></div><p>当然、通过这个网站 <a href="https://neumorphism.io/">https://neumorphism.io/</a> 也可以可视化的修改样式</p><h3 id="Pr"><a href="#Pr" class="headerlink" title="Pr"></a>Pr</h3><div class="note info"><p>大佬的视频教程: <a href="https://www.bilibili.com/video/BV1ev411B7wh">如何在PR中做出简单的拟态效果</a></p></div><div class="tip">    <p>这里使用的的PR2019</p></div><ol><li><p>打开PR、<code>文件-&gt;新建-&gt;项目</code>、为自己的项目重命名、保存在合适的位置就可以确定了</p></li><li><p><code>文件-&gt;新建-&gt;序列</code></p><p> <img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200708222833.png" alt="新建序列"></p></li><li><p>创建颜色遮罩</p><p> <img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/202007082236.gif" alt="颜色遮罩"></p></li><li><p><code>文件-&gt;新建-&gt;创建旧版标题</code> 外描边</p><p> <img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200708224815.png" alt="颜色旧版标题"></p></li><li><p><code>文件-&gt;新建-&gt;创建旧版标题</code> 内填充</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/202007082251.gif" alt="颜色旧版标题"> </p></li><li><p>效果中添加<code>边缘斜面</code>、<code>相机模糊</code> 给外描边所在的字幕、适当改变<code>相机模糊</code>的参数百分比模糊可以看到更好的效果</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200708230130.png" alt="效果"></p></li></ol><p>就这样、效果就完成了</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> Pr </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs学习</title>
      <link href="/posts/d8fc8ff1/"/>
      <url>/posts/d8fc8ff1/</url>
      
        <content type="html"><![CDATA[<h2 id="Nodejs学习"><a href="#Nodejs学习" class="headerlink" title="Nodejs学习"></a>Nodejs学习</h2><div class="note danger"><p>本教程里的资料来源于网友的资料，自己整理以供学习。</p></div><h3 id="Nodejs"><a href="#Nodejs" class="headerlink" title="Nodejs"></a>Nodejs</h3><h4 id="什么是Node-js"><a href="#什么是Node-js" class="headerlink" title="什么是Node.js"></a>什么是Node.js</h4><ol><li>基于谷歌ChromeV8引擎的JS运行环境(<code>不是框架不是库，而是一个可以不通过浏览器而解析JS语言的运行环境</code>)，Node中只有一些服务器操作级别API(如文件读写、网络服务构建、网络通信、http服务器等)，没有BOM/DOM</li><li>Node是通过事件驱动、无阻塞输入输出模型而实现轻量和高效的</li><li>Node生态包npm是世界上最大的开源库生态系统</li></ol><h4 id="Node-js可以做什么"><a href="#Node-js可以做什么" class="headerlink" title="Node.js可以做什么"></a>Node.js可以做什么</h4><ol><li>Web服务器后台</li><li>命令行工具(npm、git、hexo)</li><li>游戏服务器</li></ol><h4 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h4><blockquote><p>(node package manager: node包管理器)</p></blockquote><div class="note info"><p>package.json(包描述文件)</p></div><p>一个项目最好有一个package.json文件，可以保存你在开发过程中安装的包的信息</p><p>在安装包的时候 使用 <code>npm install --save 包名</code> 安装 即会自动将包名添加到<code>package.json</code>中，也可以通过<code>npm init</code> 初始化创建</p><p>如果移植项目，且有<code>package.json</code>文件，则可以直接执行<code>npm install</code>安装这些包 </p><div class="note info"><p>常用命令：</p></div><ul><li><p><code>npm --version</code> 查看版本</p></li><li><p><code>npm install --global npm</code>  升级npm</p></li><li><p><code>npm init</code> 生成package.json包</p></li><li><p><code>npm init -y</code>  省略向导生成package.json包</p></li><li><p><code>npm install 包名 (缩写: npm i 包名)</code>   安装包名(只下载)</p></li><li><p><code>npm install 包名 --save (缩写: npm i-S 包名)</code>  下载并且保存为package.json文件中的依赖项</p></li><li><p><code>npm i --save-dev</code> 中的dev代表这个包只是暂时使用，上线后即销毁不再使用用，在packjson文件里会保存在<code>devDependencies</code>项里，当我们转移项目使用<code>npm install --production</code>命令安装依赖包时会忽略<code>devDependencies</code>里的包</p></li><li><p><code>npm uninstall 包名 (缩写: npm un 包名)</code> 卸载包(只删除，依旧保留依赖项)</p></li><li><p><code>npm uninstall --save 包名 (缩写: npm un -S 包名)</code>  卸载包，同时删除依赖项  </p></li><li><p><code>npm help</code> 查看使用帮助</p></li><li><p><code>npm 命令 --help</code> 查看该命令的使用帮助</p></li></ul><h4 id="如何利用Node-js解析js文件"><a href="#如何利用Node-js解析js文件" class="headerlink" title="如何利用Node.js解析js文件"></a>如何利用Node.js解析js文件</h4><ol><li><p>创建编写js文件</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Hello world&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>输入 node +文件名 解析执行</p><p> <img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200705170044.png" alt="20200705170044.png"></p></li></ol><h3 id="原生Node-js"><a href="#原生Node-js" class="headerlink" title="原生Node.js"></a>原生Node.js</h3><h4 id="Node-js中的JavaScript"><a href="#Node-js中的JavaScript" class="headerlink" title="Node.js中的JavaScript"></a>Node.js中的JavaScript</h4><p>包含四大部分: </p><ol><li>即原本的ECMAScript</li><li>node定义的核心模块，包含了很多服务器级别的API(如fs、url、http、os等)</li><li>第三方模块(通过npm下载的模块，如art-template)</li><li>用户自定义模块(自己创建的js文件)</li></ol><h5 id="模块的加载"><a href="#模块的加载" class="headerlink" title="模块的加载"></a>模块的加载</h5><ul><li><p>语法: <code>require(模块名)</code> </p></li><li><p>require的作用:</p><ol><li><p>执行外部模块中的语句 </p></li><li><p>拿到被加载文件导出的接口对象<code>export(即核心模块的原理)</code></p></li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取操作系统信息 </span></span><br><span class="line"><span class="keyword">var</span> os = <span class="built_in">require</span>(<span class="string">&#x27;os&#x27;</span>); </span><br><span class="line"><span class="comment">//操作路径 </span></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br></pre></td></tr></table></figure><p><code>require亦可引入自定义模块</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./test.js&#x27;</span>);</span><br></pre></td></tr></table></figure><p>注意: </p><ol><li><p>相对路径必须加<code>./</code></p></li><li><p>可以忽略<code>后缀名</code></p></li><li><p>node没有全局作用域，没有文档一说，只有模块作用域，一个js文件中的变量函数无法直接被外部引用，想引用只能通过export对象</p></li></ol><h5 id="利用require引用其他js文件中的变量函数"><a href="#利用require引用其他js文件中的变量函数" class="headerlink" title="利用require引用其他js文件中的变量函数"></a>利用require引用其他js文件中的变量函数</h5><blockquote><p>利用接口对象<code>exports</code>或者<code>module.exports</code></p></blockquote><ul><li><p>导出多个变量</p><p>  <code>exports.变量名 = xxx;</code></p><p>  <code>module.exports.变量名 = xxx;</code></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//b.js中的代码 </span></span><br><span class="line"><span class="keyword">var</span> foo =<span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x,y</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">exports</span>.foo = foo;</span><br><span class="line"><span class="built_in">exports</span>.add = add;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a.js中的代码 </span></span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">&#x27;./b.js&#x27;</span>); <span class="comment">//返回b.js中的export对象给bbianliang </span></span><br><span class="line"><span class="built_in">console</span>.log(b.foo +<span class="string">&#x27; world!&#x27;</span>); <span class="comment">//输出hello world!</span></span><br><span class="line"><span class="built_in">console</span>.log(b.add(<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;world&#x27;</span>)); <span class="comment">//输出helloworld </span></span><br></pre></td></tr></table></figure></li><li><p>如果想直接导出一个变量，则必须用以下形式:</p><p>  <code>module.exports = 变量</code></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br></pre></td></tr></table></figure><p>  这样引入这个模块时就<code>直接得到一个数组而不用对象的属性获取</code></p></li></ul><ul><li>原理: 每个模块都有一个<code>module对象</code>，里面<code>存着exports对象</code>，每个模块最后都默认<code>返回module.exports</code>，而直接使用的exports是对这个属性的引用，存储的是module.exports对象的地址，所以如果直接对exports直接赋值是无法改变module.exports的值的，只能在根本上改变，即直接改变module.exports的值</li></ul><h5 id="模块的加载顺序"><a href="#模块的加载顺序" class="headerlink" title="模块的加载顺序"></a>模块的加载顺序</h5><p>模块会优先从缓存中加载，例如下面: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js </span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./a.js&#x27;</span>); </span><br><span class="line"><span class="keyword">var</span> fn = <span class="built_in">require</span>(<span class="string">&#x27;./b.js&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(fn); </span><br><span class="line"></span><br><span class="line"><span class="comment">//a.js </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;a.js has been loaded!&#x27;</span>); </span><br><span class="line"><span class="keyword">var</span> fn = <span class="built_in">require</span>(<span class="string">&#x27;./b.js&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(fn); </span><br><span class="line"></span><br><span class="line"><span class="comment">//b.js </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;b.js has been loaded!&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a.js has been loaded!</span><br><span class="line">b.js has been loaded!</span><br><span class="line">[Function]</span><br><span class="line">[Function]</span><br></pre></td></tr></table></figure><p>解析: 结果不会出现两次<code>b.js has been loaded!</code>，因为a中已经加载过b了，所以不会再次执行，但是还是会取得其中接口对象，这样的优点是避免重复加载，提高效率。</p><h5 id="三种模块的加载原理"><a href="#三种模块的加载原理" class="headerlink" title="三种模块的加载原理"></a>三种模块的加载原理</h5><blockquote><p>用户自定义模块: 如果发现为路径形式的模块，则直接按照路径加载</p></blockquote><p><code>./</code> :当前目录(文件操作可以忽略，自定义模块标识符必须有)</p><p><code>../</code> :上一级目录</p><p><code>/</code> : 当前文件所属磁盘根路径(<code>C:/</code> <code>D:/</code>) 几乎不用</p><br/><blockquote><p> 核心模块: 核心模块的本质也是文件，已经被编译到二进制文件中 按照名字加载即可</p></blockquote><br/><blockquote><p> 第三方模块: 凡是第三方模块都必须通过npm来下载，使用的时候通过<code>require(&#39;包名&#39;)</code>的形式加载才可以使用</p></blockquote><p>步骤: </p><ol><li><p>如果判断不是为核心模块也不是路径形式，则会找当前文件所处目录下的<code>node_module</code>目录下的同名目录中<code>package.json</code>中的main属性 main属性包含了入口模块 然后加载指向的文件</p></li><li><p>如果<code>package.json</code>文件不存在或者main指定的入口模块也没有 就会自动找目录下的index.js index.js为默认备选项</p></li><li><p>如果以上所有都不成立则会进入上一级目录中的node_module目录查找</p></li><li><p>如果上一级还没有，则继续往上一级查找 直至报错</p></li></ol><p>注意: 一个项目有且只能有一个<code>node_module</code>文件夹</p><h4 id="fs文件操作模块"><a href="#fs文件操作模块" class="headerlink" title="fs文件操作模块"></a>fs文件操作模块</h4><blockquote><p>Nodejs有文件操作能力，通过引入文件系统模块，其中包含了各种文件操作API</p></blockquote><h5 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h5><p>步骤: </p><ol><li><p>首先用<code>require</code>引入模块，需要什么功能，就引入什么模块，引入模块其实就相当于引入一些相关语法。操控文件则要引入<code>file-system</code>模块，用字符串fs表示</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>利用fs模块的readFile方法读取文件</p><p> <code>fs模块变量.readFile(文件地址，可选参数[编码格式],回调函数(error，data)&#123;&#125;)</code></p><p> 回调函数有两个参数，<code>第一个是读取发生错误时返回的错误对象</code>，<code>第二个是读取的数据,读取后的数据是二进制代码</code>，可以在回调函数中将其转为字符串，JS中的转换成字符串的方法都能实现<code>toString</code> <code>String + &quot;&quot;</code>、也可以传入<code>第二个可选参数进行配置</code>，读取后的文件会自动按照其值解码。如传入<code>&#39;utf8&#39;</code>,则会按照<code>utf8解码</code></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">fs.readFile(<span class="string">&#x27;write.txt&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error,data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(error) &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;读取文件失败&#x27;</span>); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(data +<span class="string">&#x27;&#x27;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;); </span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">&#x27;write.txt&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error,data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(error) &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;读取文件失败&#x27;</span>); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h5 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h5><p>步骤: </p><ol><li><p>首先用require引入模块，需要什么功能，就引入什么模块，操控文件则要引入file-system模块，用字符串fs表示</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>使用fs模块的writeFile方法</p><p> <code>fs模块变量.writeFile(文件地址，写入内容，回调函数(error)&#123;&#125;)</code></p><p> 回调函数有一个形参error，用于写入错误时返回错误信息</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.writeFile(<span class="string">&#x27;./write.txt&#x27;</span>,<span class="string">&#x27;hello world！！！！！&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(error) &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;写入失败&#x27;</span>); <span class="comment">// console.log(error);</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;写入成功!&#x27;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h5 id="追加文件"><a href="#追加文件" class="headerlink" title="追加文件"></a>追加文件</h5><p><code>fs.appendFile(文件地址，追加内容，回调函数(error)&#123;&#125;)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.appendFile(<span class="string">&#x27;t1.txt&#x27;</span>,<span class="string">&#x27;这是写入的内容&#x27;</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;追加成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h5><p><code>s.unlink(文件地址，回调函数(error)&#123;&#125;)</code> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  删除文件</span></span><br><span class="line">fs.unlink(<span class="string">&#x27;1.txt&#x27;</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;删除文件成功&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="读取文件列表"><a href="#读取文件列表" class="headerlink" title="读取文件列表"></a>读取文件列表</h5><p>利用<code>fs模块</code>变量的<code>readdir</code>方法</p><p><code>fs.readdir(路径名，function(error,files) &#123;&#125;)</code></p><p>回调函数的两个参数分别是<code>错误对象</code>以及<code>读取到的文件名列表(数组形式)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fs.readdir(<span class="string">&#x27;./read.txt&#x27;</span>,<span class="function"><span class="keyword">function</span> (<span class="params">error,files</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">if</span> (error) &#123; </span><br><span class="line">        <span class="keyword">return</span> res.end(<span class="string">&#x27;404 can not found&#x27;</span>); </span><br><span class="line">    &#125;                 </span><br><span class="line">    <span class="built_in">console</span>.log(files);   </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="Http模块"><a href="#Http模块" class="headerlink" title="Http模块"></a>Http模块</h4><blockquote><p>Node.js中有http模块(字符串http表示)可以快速构建Web服务器</p></blockquote><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><ol><li><p>加载http模块</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>利用<code>http.createServe</code>创建服务器实例</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br></pre></td></tr></table></figure></li><li><p>设置request事件，当客户端发送请求时则触发该事件并调用其回调函数</p><p> <code>服务器实例.on(&quot;request&quot;,回调函数(request,response)&#123;&#125;)</code></p><p> 回调函数中有两个参数<code>request</code>和<code>response</code></p><p> <code>request</code></p><ul><li><p><code>req</code> : 它表示一个正在进行的请求，可以获取一些请求信息，比如请求路径</p></li><li><p><code>req.url</code>: 返回请求路径</p></li><li><p><code>req.headers</code>:  打印全部请求头信息–对象形式</p></li><li><p><code>req.method</code>:  请求的方式</p><p><code>response</code></p></li><li><p><code>res</code>: 可以给客户端发送响应信息</p></li><li><p><code>res.setHeader()</code>: 设置响应头，告诉客户端解码方式，如果响应的是html页面且html页面中元数据meta已经声明解码方式则可忽视</p></li><li><p><code>res.statusCode</code>: 设置状态码数字</p></li><li><p><code>res.status.message</code>: 设置状态码文字</p></li><li><p><code>res.write(相应内容)</code>: 向客户端发送响应信息 write之后必须调用end方法用以告诉客户端已经输出完毕、可以有多句res.write</p></li><li><p><code>res.end(数据)</code>: 完成发送请求 必须跟在response.write之后 每个request事件只能有一句<code>res.end</code></p><p>  也可以直接通过<code>response.end</code>传送数据 <code>response.end(数据)</code> 支持字符串和二进制数据，会直接将二进制转为字符串    </p></li></ul><div class="tip">    <p>可以与request的url属性搭配使用实现不同请求传递不同信息</p></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server.on(<span class="string">&quot;request&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;i got you&#x27;</span>);   </span><br><span class="line">    <span class="keyword">if</span>(request.url == <span class="string">&#x27;/haha&#x27;</span>) &#123; </span><br><span class="line">        response.write(<span class="string">&#x27;haha&#x27;</span>); <span class="comment">//如果请求的是haha地址，则页面显示haha    </span></span><br><span class="line">        response.end(); <span class="comment">//结束响应</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        response.end(<span class="string">&#x27;please go to /haha&#x27;</span>); <span class="comment">//如果请求的不是haha地址，则会显示左边内容   </span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><div class="tip">    <p>也可以传送文件数据</p></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(req.url == <span class="string">&#x27;/html&#x27;</span>) &#123; </span><br><span class="line">    res.setHeader(<span class="string">&#x27;Content-type&#x27;</span>,<span class="string">&#x27;text/html;charset=utf-8&#x27;</span>);</span><br><span class="line">    fs.readFile(<span class="string">&#x27;./resource/index.html&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error,data</span>)</span>&#123; </span><br><span class="line">        <span class="keyword">if</span>(error) &#123; </span><br><span class="line">            res.end(<span class="string">&#x27;读取失败!&#x27;</span>); </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="comment">// res.end支持字符串也支持二进制 所以不用转换 </span></span><br><span class="line">            res.end(data); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.url == <span class="string">&#x27;/plain&#x27;</span>) &#123; </span><br><span class="line">    res.setHeader(<span class="string">&#x27;Content-type&#x27;</span>,<span class="string">&#x27;text/plain;charset=utf-8&#x27;</span>);</span><br><span class="line">    fs.readFile(<span class="string">&#x27;./resource/index.txt&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error,data</span>)</span>&#123; </span><br><span class="line">        <span class="keyword">if</span>(error) &#123; </span><br><span class="line">            res.end(<span class="string">&#x27;读取失败!&#x27;</span>); </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            res.end(data); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.url == <span class="string">&#x27;/img&#x27;</span>) &#123; </span><br><span class="line">    <span class="comment">// 图片的MIME类型为image/jpg 一般可以不用设定 </span></span><br><span class="line">    res.setHeader(<span class="string">&#x27;Content-type&#x27;</span>,<span class="string">&#x27;image/jpg;charset=utf-8&#x27;</span>);</span><br><span class="line">    fs.readFile(<span class="string">&#x27;./resource/82710.jpg&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error,data</span>)</span>&#123; </span><br><span class="line">        <span class="keyword">if</span>(error) &#123; </span><br><span class="line">            res.end(<span class="string">&#x27;读取失败！&#x27;</span>); </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            res.end(data); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意: <code>response.end</code>方法支持传送二进制数据，所以不用转化获取的文件数据就可以直接发送</p></li><li><p>使用<code>listen方法</code>绑定端口号，并启动服务器对其监听，启动后调用其回调函数</p><p> <code>服务器实例.listen(端口号,回调函数)</code></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;服务器启动成功 可以通过 http://127.0.0.1:3000 访问&#x27;</span>); </span><br><span class="line">&#125;);<span class="comment">//启动成功后，node环境中则会输出上面语句</span></span><br></pre></td></tr></table></figure></li><li><p>在node环境中打开该js文件，启动服务器(node环境中<code>ctrl+c</code>可以关闭服务器</p></li></ol><h5 id="http的重定向"><a href="#http的重定向" class="headerlink" title="http的重定向"></a>http的重定向</h5><p><code>res.statusCode = 302;</code></p><p><code>res.statusCode</code>: 此属性控制在刷新标头时将发送到客户端的状态代码</p><p><code>res.setHeader(&#39;Location&#39;,路径)</code></p><p><code>res.end()</code></p><h4 id="URL模块"><a href="#URL模块" class="headerlink" title="URL模块"></a>URL模块</h4><blockquote><p>url模块可以对url地址进行一些操作</p></blockquote><h5 id="加载模块"><a href="#加载模块" class="headerlink" title="加载模块"></a>加载模块</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="解析地址方法"><a href="#解析地址方法" class="headerlink" title="解析地址方法"></a>解析地址方法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url.parse(<span class="string">&#x27;http://www.baidu.com&#x27;</span>,布尔值)</span><br></pre></td></tr></table></figure><p>返回地址的详细信息</p><p><code>其中第二个参数如果为true，则会将地址中的query参数转为对象，默认为false</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200705181137.png" alt="20200705181137.png"></p><p><code>pathname</code>: 返回路径</p><p><code>query</code>: 返回参数</p><h4 id="Path模块"><a href="#Path模块" class="headerlink" title="Path模块"></a>Path模块</h4><blockquote><p>可以对路径进行操作，注意不是操作URL</p></blockquote><h5 id="加载方式"><a href="#加载方式" class="headerlink" title="加载方式"></a>加载方式</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="模块方法"><a href="#模块方法" class="headerlink" title="模块方法"></a>模块方法</h5><ul><li><p><code>path.basename(路径)</code>: 获取路径中最后的文件名</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.basename(<span class="string">&#x27;c://a/b/c/index.js&#x27;</span>,<span class="string">&#x27;.js&#x27;</span>) <span class="comment">//返回&#x27;index&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p><code>parse.dirname</code>: 获取路径中的目录部分</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.dirname(<span class="string">&#x27;c://a/b/c/index.js&#x27;</span>) <span class="comment">//返回&#x27;c://a/b/c&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p><code>parse.extname</code>: 获取路径中文件的扩展名    </p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.extname(<span class="string">&#x27;c://a/b/c/index.js&#x27;</span>) <span class="comment">//返回.js</span></span><br></pre></td></tr></table></figure></li><li><p><code>path.join(路径1，路径2)</code>: 将路径拼接起来</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.join(<span class="string">&#x27;c://a/b/c&#x27;</span>,<span class="string">&#x27;index.js&#x27;</span>) <span class="comment">//返回&#x27;c://a/b/c/index.js&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p><code>path.parse(路径)</code>: 将路径里的元素分别提取出来</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.parse(<span class="string">&#x27;c://a/b/c/index.js&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul><h4 id="Node中的dirname和-filename"><a href="#Node中的dirname和-filename" class="headerlink" title="Node中的dirname和__filename"></a>Node中的<code>dirname</code>和<code>__filename</code></h4><p>node中除了require、exports等相关模块之外，还有两个特殊的成员</p><ul><li><p><code>__dirname</code>: 可以获取当前文件所属目录的绝对路径</p></li><li><p><code>__filename</code>: 可以获取当前文件的绝对路径</p></li></ul><p>注意: </p><ol><li><p>文件操作中的<code>./</code>是相对于执行终端的路径的目录而不是当前文件的目录,如果在别的路径下打开终端执行该文件则会找不到要读取的文件，所以在写文件路径时一般使用<code>path模块</code>的<code>path.join</code>将<code>__dirname</code>和文件拼接起来</p></li><li><p>在大部分文件操作路径中一般都是用绝对路径，而为了防止项目移植时绝对路径失效，所以应该使用动态的绝对路径，也就是<code>dirname</code>和<code>filename</code></p></li><li><p>模块加载中的<code>./</code>则不受影响，是相对于当前文件的目录，不需要使用<code>dirname</code>和<code>filename</code></p></li></ol><h4 id="art-template模板引擎模块"><a href="#art-template模板引擎模块" class="headerlink" title="art-template模板引擎模块"></a>art-template模板引擎模块</h4><p>步骤: </p><ol><li><p>加载模板引擎模块并赋予某个变量</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> template = <span class="built_in">require</span>(<span class="string">&#x27;art-template&#x27;</span>);</span><br></pre></td></tr></table></figure><p> 注意: <code>下载的模板叫什么名字就加载时就填什么名字</code></p></li><li><p>使用模板引擎的<code>render</code>方法</p><p> <code>template.render(字符串，填充对象)</code> :返回的是填充后的字符串</p><p> 可以只写第一个参数快速返回一个页面，但是如果页面里有待填充的script标签则不能以这种方式发送，因为会被填充掉</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ret = template.render(<span class="string">&#x27;hello &#123;&#123;name&#125;&#125;&#x27;</span>,&#123;<span class="attr">name</span>:<span class="string">&#x27;bruce&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">`&lt;!DOCTYPE html&gt; </span></span><br><span class="line"><span class="string">           &lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="string">           &lt;head&gt;</span></span><br><span class="line"><span class="string">           &lt;meta charset=&quot;UTF-8&quot; /&gt;</span></span><br><span class="line"><span class="string">           &lt;title&gt;Document&lt;/title&gt;</span></span><br><span class="line"><span class="string">           &lt;/head&gt;</span></span><br><span class="line"><span class="string">           &lt;body&gt; </span></span><br><span class="line"><span class="string">            大家好 我叫 &#123;&#123;name&#125;&#125;, 我今年 &#123;&#123;age&#125;&#125; 岁了,我来自 &#123;&#123;province&#125;&#125; ,我喜欢 &#123;&#123;each hobbies&#125;&#123;&#123;$value&#125;&#125; &#123;&#123;/each&#125;&#125; </span></span><br><span class="line"><span class="string">           &lt;/body&gt;</span></span><br><span class="line"><span class="string">            &lt;/html&gt;`</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ret = template.render(str,&#123;<span class="attr">name</span>:<span class="string">&#x27;bruce&#x27;</span>,<span class="attr">age</span>:<span class="number">29</span>,<span class="attr">province</span>:<span class="string">&#x27;guangdong&#x27;</span>,<span class="attr">hobbies</span>:[<span class="string">&#x27;dance&#x27;</span>,<span class="string">&#x27;sing&#x27;</span>,<span class="string">&#x27;rap&#x27;</span>,<span class="string">&#x27;basketball&#x27;</span>]&#125;);</span><br></pre></td></tr></table></figure><p> 如果要填充的是外部的文件，则读取文件后要记得将其转为字符串</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>); </span><br><span class="line"><span class="keyword">var</span> content = &#123;<span class="attr">name</span>:<span class="string">&#x27;bruce&#x27;</span>,<span class="attr">age</span>:<span class="number">29</span>,<span class="attr">province</span>:<span class="string">&#x27;guangdong&#x27;</span>,<span class="attr">hobbies</span>:[<span class="string">&#x27;dance&#x27;</span>,<span class="string">&#x27;sing&#x27;</span>,<span class="string">&#x27;rap&#x27;</span>,<span class="string">&#x27;basketball&#x27;</span>]&#125;;</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">&#x27;template.html&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error,data</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(error) &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;404 not found&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    data = data.toString(); </span><br><span class="line">    <span class="keyword">var</span> ret = template.render(data,content);</span><br><span class="line">    <span class="built_in">console</span>.log(ret);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p> 配合<code>http模块</code>使用</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>); </span><br><span class="line"><span class="keyword">var</span> server = http.createServer(); </span><br><span class="line"></span><br><span class="line">server.on(<span class="string">&#x27;request&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(req.url === <span class="string">&#x27;/template&#x27;</span>) &#123; </span><br><span class="line">        fs.readFile(<span class="string">&#x27;template.html&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error,data</span>)</span>&#123; </span><br><span class="line">            <span class="keyword">if</span>(error) &#123; </span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;404 not found&#x27;</span>); </span><br><span class="line">            &#125; </span><br><span class="line">            data = data.toString(); </span><br><span class="line">            <span class="keyword">var</span> ret = template.render(data,content); </span><br><span class="line">            res.end(ret);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(<span class="string">&#x27;3000&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;running...&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h4 id="formidable模块实现文件上传"><a href="#formidable模块实现文件上传" class="headerlink" title="formidable模块实现文件上传"></a>formidable模块实现文件上传</h4><blockquote><p>利用formidable第三方模块可以实现文件的上传</p></blockquote><p>使用步骤: </p><ol><li><p>安装</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --S formidable</span><br></pre></td></tr></table></figure></li><li><p>加载</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> formidable = <span class="built_in">require</span>(<span class="string">&#x27;formidable&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>路由监听配置</p><ol><li><p>先创建一个form对象用以接收文件</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> form  = <span class="keyword">new</span> formidable.IncomingForm()</span><br></pre></td></tr></table></figure></li><li><p>进行配置(可选)</p><p> <code>form.encoding = &quot;utf-8&quot;</code>: 设置文件解码方式</p><p> <code>form.uploadDir = __dirname + &#39;/img&#39;</code>: 设置上传文件存放位置</p><p> <code>form.keepExtensions = true;</code>: 设置文件是否保留后缀名</p><p> <code>form.multiples = true;</code>: 设置是否为多个文件，如果为true，则files参数会以数组显示</p></li><li><p>对文件解析并用回调函数进行操作</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">form.parse(req,<span class="function"><span class="keyword">function</span>(<span class="params">err,fields,files</span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p> 文件解析后，文件信息解析完成后会挂载到req上，文本的信息将挂载到fileds上，文件的信息将挂载到files上面(包括存放的绝对地址、文件大小、文件名字、文件mime类型)。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">&#x27;/files&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> form = <span class="keyword">new</span> formidable.IncomingForm();</span><br><span class="line">    form.keepExtensions = <span class="literal">true</span>;</span><br><span class="line">    form.multiples = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(form.type);</span><br><span class="line">    form.uploadDir = path.join(__dirname,<span class="string">&quot;/img&quot;</span>);</span><br><span class="line">    form.parse(req, <span class="function"><span class="keyword">function</span>(<span class="params">err, fields, files</span>) </span>&#123;</span><br><span class="line">        res.setHeader(<span class="string">&#x27;Content-type&#x27;</span>,<span class="string">&#x27;text/plain;charset=utf8&#x27;</span>);</span><br><span class="line">        res.end(<span class="built_in">JSON</span>.stringify(&#123;fields,files&#125;))</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol></li></ol><h4 id="客户端渲染数据和服务端渲染数据的区别"><a href="#客户端渲染数据和服务端渲染数据的区别" class="headerlink" title="客户端渲染数据和服务端渲染数据的区别"></a>客户端渲染数据和服务端渲染数据的区别</h4><ul><li><p>客户端渲染(SPA:single page application): 用户通过地址栏或者链接标签进入一个新的链接后，向服务器<code>发出请求</code>，<code>服务器直接根据链接返回一个html页面(没有数据)</code>，页面中的<code>数据渲染则是由页面中的ajax完成</code>，<code>ajax再次向服务器发出请求数据的请求</code>，然后<code>对页面进行渲染</code></p><p>  简单理解即浏览器发送页面请求，服务器返回的是一个模板页面，浏览器从上至下解析过程中需要发送ajax请求获取数据，最后再调用模板引擎(art-template等)渲染HTML结构，并把渲染后的结果添加到页面指定容器中。</p></li><li><p>服务端渲染(SSR:server side rendering): 用户通过地址栏或者链接进入一个服务器所监听的服务器的路径，服务器则根据<code>该路径返回一个页面(有数据)</code>，页面的数据渲染在服务器内由服务器完成，<code>客户端只需要发送一次请求</code>，<code>不用ajax</code></p><p>  以Node为例，就是服务器根据请求<code>req.url</code>读取对应html页面，将其转为字符串，再利用模板引擎将从数据库读取到数据渲染到页面中的某个结构中，再将这个字符串用<code>res.end()</code>发送出去</p></li></ul><div class="tip">    <p>如何区分两者？</p></div><p>服务端渲染的页面数据可以通过浏览器审查元素看到。而客户端无法看到。</p><br/><div class="tip">    <p>两者本质的区别？</p></div><p>客户端渲染和服务器端渲染的最重要的区别就是究竟是谁来完成html文件的完整拼接，如果是在服务器端完成的，然后返回给客户端，就是服务器端渲染，而如果是前端做了更多的工作完成了html的拼接，则就是客户端渲染。</p><br/><div class="tip">    <p>服务器端渲染的优缺点是？</p></div><p>优点: </p><ol><li>前端耗时少。因为后端拼接完了html，浏览器只需要直接渲染出来。</li><li>有利于SEO。因为在后端有完整的html页面，所以爬虫更容易爬取获得信息，更有利于SEO。</li><li>无需占用客户端资源。即解析模板的工作完全交由后端来做，客户端只要解析标准的html页面即可，这样对于客户端的资源占用更少，尤其是移动端，也可以更省电。</li><li>后端生成静态化文件。即生成缓存片段，这样就可以减少数据库查询浪费的时间了，且对于数据变化不大的页面非常高效 。</li></ol><p>缺点: </p><ol><li>不利于前后端分离，开发效率低。使用服务器端渲染，则无法进行分工合作，则对于前端复杂度高的项目，不利于项目高效开发。另外，如果是服务器端渲染，则前端一般就是写一个静态html文件，然后后端再修改为模板，这样是非常低效的，并且还常常需要前后端共同完成修改的动作； 或者是前端直接完成html模板，然后交由后端。另外，如果后端改了模板，前端还需要根据改动的模板再调节css，这样使得前后端联调的时间增加。</li><li>占用服务器端资源。即服务器端完成html模板的解析，如果请求较多，会对服务器造成一定的访问压力。而如果使用前端渲染，就是把这些解析的压力分摊了前端，而这里确实完全交给了一个服务器。</li></ol><br/><div class="tip">    <p>客户端渲染的优缺点是？</p></div><p>优点: </p><ol><li>前后端分离。前端专注于前端UI，后端专注于api开发，且前端有更多的选择性，而不需要遵循后端特定的模板。</li><li>体验更好。比如，我们将网站做成SPA或者部分内容做成SPA，这样，尤其是移动端，可以使体验更接近于原生app。</li></ol><p>缺点: </p><ol><li>前端响应较慢。如果是客户端渲染，前端还要进行拼接字符串的过程，需要耗费额外的时间，不如服务器端渲染速度快。</li><li>不利于SEO。目前比如百度、谷歌的爬虫对于SPA都是不认的，只是记录了一个页面，所以SEO很差。因为服务器端可能没有保存完整的html，而是前端通过js进行dom的拼接，那么爬虫无法爬取信息。 除非搜索引擎的seo可以增加对于JavaScript的爬取能力，这才能保证seo。</li></ol><h3 id="REPL-read-eval-print-loop"><a href="#REPL-read-eval-print-loop" class="headerlink" title="REPL(read eval print loop)"></a>REPL(read eval print loop)</h3><blockquote><p>代表一个快速的检测API的方法</p></blockquote><p>在命令行中输入node，回车就可以直接执行js代码进行一些node的api的测试</p><h3 id="Express框架的使用"><a href="#Express框架的使用" class="headerlink" title="Express框架的使用"></a>Express框架的使用</h3><blockquote><p>Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。<br> 使用 Express 可以快速地搭建一个完整功能的网站。</p></blockquote><ol><li><p>安装</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save express</span><br></pre></td></tr></table></figure></li><li><p>加载包</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>创建服务器</p><p> <code>var 变量 = express() </code></p><p> 相当于<code>var server = http.createServer()</code></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = express();</span><br></pre></td></tr></table></figure></li><li><p>两种路由</p><ul><li><p>接收get方式</p><p>  <code>app.get(path,function(req,res)&#123;&#125;)</code></p><p>  当服务器收到get请求路径<code>path(第一个参数)</code>的时候，触发事件 相当于<code>server.on(&#39;request&#39;,function(req,res))</code>以及其中地址判断的封装 </p><p>  第一个参数可以是具体的路径、路径模式、正则表达式的路径模式、以及这三者集合起来的数组</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    res.send(<span class="string">&#x27;hello express!&#x27;</span>);   </span><br><span class="line">    res.send(req.query); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>  注意: 使用<code>res.send</code>发送会自动解码不需要设置响应头，可以通过<code>req.query</code>属性快速获取get方式提交的参数</p></li><li><p>接收post方式</p><p>  <code>app.post(path,function(req,res)&#123;&#125;)</code></p></li></ul></li><li><p>监听</p><p> <code>app.listen(端口号，function()&#123;&#125;)</code></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;app is running at port 3000.&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h4 id="express的中间件概念"><a href="#express的中间件概念" class="headerlink" title="express的中间件概念"></a>express的中间件概念</h4><p>中间件就是http请求和服务器响应之间对请求的处理函数，通过中间件，可以对数据进行操作使得我们能方便地操作请求数据编写服务器响应。如<code>body-parse中间件</code>对post请求的参数进行处理让我们可以通过<code>res.body</code>快速获取请求参数，<code>express-session</code>中间件可以让我们对数据进行保存，<code>express.static是express内置中间件</code>，可以让我们快速处理静态资源，<code>express.Router路由中间件</code>等等</p><p>Express中，对中间进行了几种分类: </p><ol><li><p>不关心请求路径和请求方法的中间件，通过<code>app.use</code>函数实现</p><p><code>app.use(function(req,res,next)&#123;&#125;)</code></p><p>客户端发起的任意请求都会经过这个中间件函数进行处理</p><p>next指下一个满足路径条件的中间件，如果有执行next，那么这个<code>中间件执行完后就会执行下一个满足条件的中间件</code>，<code>如果没有next，就会忽略后面所有中间件</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">    <span class="comment">//满足所有、执行下一个满足条件</span></span><br><span class="line">    next();</span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line">app.use(<span class="string">&#x27;/a&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;aa&#x27;</span>);</span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line">app.use(<span class="string">&#x27;/b&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;bb&#x27;</span>);</span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">//输入/b路径 结果为1  bb</span></span><br></pre></td></tr></table></figure></li><li><p>关心请求路径的中间件,通过app.use函数实现</p><p> <code>app.use(路径，function(req,res,next)&#123;&#125;)</code></p><p> 客户端发起的以第一个参数开头的路径才会进入该中间件</p></li><li><p>严格匹配路径的中间件，通过<code>app.get/app.post</code>等实现</p></li></ol><p><code>中间件的执行机制</code> </p><ol><li><p>中间件的第一次执行是同步的，当一个请求发出到达服务器后，则按照顺序匹配所有中间件，当找到一个匹配时，则进入该中间件</p></li><li><p>如果该中间件最后没有执行next函数，则该请求在此中间件终止，如果有，则会直接进入后面匹配的中间件中(不是按顺序！)</p></li><li><p>重复1-2步</p></li></ol><p>所以，对于一些封装请求数据方便我们操作以及处理静态资源的中间件我们应该放在路由之前编写，否则在编写路由时就无法使用封装好的数据。而对于404页面应该放在所有中间件后面，这样无法找到的页面则会返回404页面</p><p><code>中间件日志</code></p><p>通过无路径中间件来写入每一次http请求到日志中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function">(<span class="params">req,res,next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> log = <span class="string">`请求方法:<span class="subst">$&#123;req.method&#125;</span>,请求URL:<span class="subst">$&#123;req.url&#125;</span>,请求路径:<span class="subst">$&#123;req.path&#125;</span>,请求时间:<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;</span>`</span>; </span><br><span class="line">    fs.appendFile(<span class="string">&#x27;./log.txt&#x27;</span>,log,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123; </span><br><span class="line">        <span class="keyword">if</span>(err) &#123; </span><br><span class="line">            <span class="keyword">return</span> res.end(<span class="string">&#x27;日志写入失败&#x27;</span>);</span><br><span class="line">        &#125; </span><br><span class="line">        next();</span><br><span class="line">    &#125;) </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>错误日志中间件</code></p><ol><li><p>利用<code>try...catch...</code>捕获路由解析中发生的错误，将其写入错误日志</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123; </span><br><span class="line">        <span class="keyword">const</span> msg = <span class="built_in">JSON</span>.parse(&#123;<span class="string">&#x27;abc&#x27;</span>&#125;); </span><br><span class="line">        res.json(msg); </span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(e.message); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p> 访问日志和错误日志都可以写成单独一个中间件保存到数据库中</p></li><li><p>错误收集统一处理中间件</p><p> 中间件回调函数参数如果是四个，第一个就是前面中间件中next返回的错误对象</p><p> 注意: 一定要四个参数 才能正确接收错误对象</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function">(<span class="params">err,req,res,next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> error_log = <span class="string">`</span></span><br><span class="line"><span class="string">错误名:<span class="subst">$&#123;err.name&#125;</span> </span></span><br><span class="line"><span class="string">错误信息:<span class="subst">$&#123;err.message&#125;</span> </span></span><br><span class="line"><span class="string">错误堆栈:<span class="subst">$&#123;err.stack&#125;</span> </span></span><br><span class="line"><span class="string">错误时间:<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;</span></span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">    fs.appendFile(<span class="string">&#x27;./err_log.txt&#x27;</span>,error_log,<span class="function"><span class="params">err</span> =&gt;</span> &#123; </span><br><span class="line">        res.writeHead(<span class="number">500</span>,&#123;&#125;); </span><br><span class="line">        res.end(<span class="string">&#x27;500 服务器正忙，请稍后重试&#x27;</span>); </span><br><span class="line">    &#125;) </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h4 id="express快速处理静态资源-使用express-static中间件"><a href="#express快速处理静态资源-使用express-static中间件" class="headerlink" title="express快速处理静态资源(使用express.static中间件)"></a>express快速处理静态资源(使用express.static中间件)</h4><p><code>express.static(root，[选项])</code>: 该root参数指定要从其提供静态资产的根目录。该功能通过<code>req.url</code>与提供的root目录结合来确定要提供的文件。当找不到文件时，它不会发送404响应，而是调用<code>next()</code>继续前进到下一个中间件，从而允许堆栈和回退。</p><p><code>express.use(以什么路径开头，express.static(公开的资源的目录))</code></p><p>当以<code>/public开头</code>时，去路径<code>./public/</code>目录中找对应的资源</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="string">&#x27;/public&#x27;</span>,express.static(<span class="string">&#x27;./public/&#x27;</span>));</span><br></pre></td></tr></table></figure><p>必须是<code>/a/public</code>目录中的资源路径 即以<code>a代替了public</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="string">&#x27;/a/&#x27;</span>,express.static(<span class="string">&#x27;./public/&#x27;</span>));</span><br></pre></td></tr></table></figure><p>如果没有第一个参数，则可以通过省略<code>/public</code>的方式来访问其中资源 即直接输入其中文件路径名就可以访问 不能添加public</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.static(<span class="string">&#x27;./public/&#x27;</span>));</span><br></pre></td></tr></table></figure><h4 id="express中模板引擎的使用"><a href="#express中模板引擎的使用" class="headerlink" title="express中模板引擎的使用"></a>express中模板引擎的使用</h4><ol><li><p>安装模块</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save art-template </span><br><span class="line">npm install --save express-art-template</span><br></pre></td></tr></table></figure></li><li><p>配置(配置该选项之后<code>res.render</code>方法就可以用了)</p><p> <code>server.engine(ext，回调)</code>: 将给定的模板引擎注册callback为ext。</p><p> <code>server.engine(模板文件后缀名，加载express-art--template包)</code></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> server = express(); </span><br><span class="line">server.engine(<span class="string">&#x27;html&#x27;</span>,<span class="built_in">require</span>(<span class="string">&#x27;express-art-template&#x27;</span>));</span><br></pre></td></tr></table></figure></li><li><p>渲染</p><p> <code>res.render(&#39;模板名&#39;,数据对象)</code>: 渲染模板并发送</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.get(<span class="string">&#x27;/&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>) </span>&#123; </span><br><span class="line">    res.render(<span class="string">&#x27;index.html&#x27;</span>,&#123;<span class="attr">comments</span>:comments&#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p> 注意:  第一个参数不能写路径 应该直接写文件名 默认会去项目中的views目录中查找 文件名必须以配置时第一个参数为后缀</p></li></ol><h4 id="express中的重定向"><a href="#express中的重定向" class="headerlink" title="express中的重定向"></a>express中的重定向</h4><p><code>res.redirect(路径)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server.get(<span class="string">&#x27;/pinglun&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>) </span>&#123; </span><br><span class="line">    req.query.dateTime = <span class="string">&#x27;2019-10-29&#x27;</span>;</span><br><span class="line">    comments.unshift(req.query); </span><br><span class="line">    res.redirect(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="express中的发送文件"><a href="#express中的发送文件" class="headerlink" title="express中的发送文件"></a>express中的发送文件</h4><p><code>res.sendFile(absolutePath)</code>: 路径必须为绝对路径</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server.get(<span class="string">&#x27;/&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    res.sendfile(<span class="string">&#x27;public/index1.html&#x27;</span>); </span><br><span class="line">    </span><br><span class="line"><span class="comment">//等同于效果</span></span><br><span class="line">res.sendFile(path.join(__dirname, <span class="string">&#x27;../public&#x27;</span>, <span class="string">&#x27;index1.html&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//第三种写法</span></span><br><span class="line">res.sendFile(<span class="string">&#x27;index1.html&#x27;</span>, &#123; <span class="attr">root</span>: path.join(__dirname, <span class="string">&#x27;../public&#x27;</span>) &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="express中读取post主体-req-query只能获取get方式的数据"><a href="#express中读取post主体-req-query只能获取get方式的数据" class="headerlink" title="express中读取post主体(req.query只能获取get方式的数据)"></a>express中读取post主体(req.query只能获取get方式的数据)</h4><ol><li><p>安装</p><p> 下载<code>body-parser</code>中间件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install body-parser</span><br></pre></td></tr></table></figure></li><li><p>加载</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bodyparser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>配置</p><p> 接收两种格式的数据</p><p> <code>app.use(bodyparser.urlencoded())</code></p><p> <code>app.use(bodyparser.json())</code></p></li><li><p>使用</p><p> 在路由中用res的属性body获取即可(返回对象)</p><p> <code>res.body</code></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">&#x27;/pinglun&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(res.body);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h4 id="express中的router中间件"><a href="#express中的router中间件" class="headerlink" title="express中的router中间件"></a>express中的router中间件</h4><p>在express中可以通过express最高级对象的<code>Router方法</code>生成一个router对象，router对象是一个隔离的中间价，不属于任何http对象，可以对其进行路由配置(get/post等)。可以通过<code>app.use(router对象)</code>将其作为一个应用赋予http对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>); </span><br><span class="line"><span class="keyword">var</span> router = express.Router(); </span><br><span class="line">router.get(<span class="string">&#x27;/students/new&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">    res.render(<span class="string">&#x27;new.html&#x27;</span>);</span><br><span class="line">&#125;) </span><br><span class="line">app.use(router);</span><br></pre></td></tr></table></figure><p>该特性可以让我们进行模块化开发，将入口文件和路由文件分开，路由文件将创建好的router对象通过exports.module导出，入口文件加载路有文件获取并使用use函数即可</p><h4 id="express中的session中间件"><a href="#express中的session中间件" class="headerlink" title="express中的session中间件"></a>express中的session中间件</h4><p>session就是会话<strong>，</strong>会话是一个比连接粒度更大的概念<strong>，</strong>一次会话可能包含多次连接，每次连接都被认为是会话的一次操作。</p><p>session 的技术实现上: 会对每一次对话产生一个唯一的标识id进行标识。将数据存在该id下就可以实现状态的保存</p><p>session生命周期: 当用户在Web页面之间跳转时，存储在 Session 对象中的变量将不会丢失，而是在整个用户会话中一直存在下去，如果会话关掉(客户端关掉)，那么就消失</p><p>当用户请求来自应用程序的 Web 页面时，如果该用户还没有会话，则 Web 服务器将自动创建一个 Session 对象。当会话过期或被放弃后，服务器将终止该会话。在Exrpess中，默认不支持Session和Cookie，可以使用第三方中间件: express-session来解决</p><p>步骤: </p><ol><li><p>安装</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express-session</span><br></pre></td></tr></table></figure></li><li><p>配置 一定要在app.use(router)之前 </p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.use(session(&#123; </span><br><span class="line">    secret:<span class="string">&#x27;keyboard cat&#x27;</span>, <span class="comment">//配置加密字符串，会在原有加密基础上和这个字符串拼接起来加密，增加安全性 </span></span><br><span class="line">    resave:<span class="literal">false</span>, </span><br><span class="line">    saveUninitialized:<span class="literal">true</span> <span class="comment">//无论是否使用session都默认给客户端一把钥匙</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure></li><li><p>使用 </p><p> 可以通过<code>req.session</code>来访问和设置Session数据</p><p> 添加Session数据:<code>req.session.foo = &#39;bar&#39;</code></p><p> 访问Session数据:<code>req.session.foo</code></p></li></ol><h3 id="插件说明"><a href="#插件说明" class="headerlink" title="插件说明"></a>插件说明</h3><blockquote><p>Nodemon插件: 可以自动重启服务器，不用每次修改js后手动重启</p></blockquote><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev nodemon</span><br></pre></td></tr></table></figure><p>使用:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nodemon 文件.js</span><br></pre></td></tr></table></figure><h3 id="Node中使用MongoDB数据库"><a href="#Node中使用MongoDB数据库" class="headerlink" title="Node中使用MongoDB数据库"></a>Node中使用MongoDB数据库</h3><blockquote><p>可以使用官方的mongdb包来操作，也可以使用第三方mongoose包</p></blockquote><h4 id="MongoDB的数据结构"><a href="#MongoDB的数据结构" class="headerlink" title="MongoDB的数据结构"></a>MongoDB的数据结构</h4><p>可以如下面理解:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">一个数据库test:&#123;</span><br><span class="line"></span><br><span class="line">test里的一个集合:cat&#123;</span><br><span class="line"></span><br><span class="line">cat集合里的一条文档:&#123;name: &#39;Zildjian&#39;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面以mongoose为例</p><h4 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h4><ol><li><p>加载包</p><p> <code>变量名 = require(&#39;mongoose&#39;);</code></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>连接到一个数据库</p><p> <code>mongoose.connect(mongodb://域名/数据库名)</code></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongoose.connect(<span class="string">&#x27;mongodb://localhost/zykj&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>设计集合结构</p><ul><li><p>获取一个Schema构造函数用以创建结构对象</p><p>  <code>变量名 = mongoose.Schema</code></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Schema = mongoose.Schema;</span><br></pre></td></tr></table></figure></li><li><p>构造结构</p><p>  <code>var 结构名 = new Schema(文档结构)</code></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> blogSchema = <span class="keyword">new</span> Schema(&#123; <span class="attr">title</span>: <span class="built_in">String</span>, <span class="attr">author</span>:<span class="built_in">String</span>, <span class="attr">body</span>:<span class="built_in">String</span> &#125;)</span><br></pre></td></tr></table></figure><p>  即创建了一个名为blogSchema的文档结构</p></li></ul></li><li><p>发布模型(创建一个集合对象)</p><p> <code>mongoose.model</code>: 将一个架构发布为model 也就是创建了一个集合，<code>第一个参数为集合的名字</code>,<code>第二个参数为这个新建集合存储的文档的格式(大写会转为小写，在后面会加s) 返回一个构造函数</code></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> User = mongoose.model(<span class="string">&#x27;User&#x27;</span>,blogSchema);</span><br></pre></td></tr></table></figure><p> 返回一个构造函数用以创建新文档，此时数据库中已有名为users的集合，该集合的文档结构就是blogSchema的对象的结构，但还没有数据</p></li></ol><h4 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h4><ol><li><p>新增数据</p><p> new创建一个模型的实例对象即可，数据结构按照设置好的Schema模板来</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> art1 = <span class="keyword">new</span> User(&#123; <span class="attr">title</span>:<span class="string">&#x27;how to kill you&#x27;</span>, <span class="attr">author</span>:<span class="string">&#x27;bruce chen&#x27;</span>, <span class="attr">body</span>:<span class="string">&#x27;just use fucking pencil!&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure><p> 持久化存储: 将创建好的User对象调用<code>save</code>方法即可 可传入回调函数</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">art1.save(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(err) &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;保存成功!&#x27;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>查询数据</p><ul><li><p>查询全部</p><p>  调用模型对象的<code>find</code>方法: 参数为回调函数,函数的参数<code>第一个是错误对象</code>,<code>第二个查询结果</code> 结果都包裹在数组中</p><p>  <code>User.find(function(err,data)&#123;&#125;)</code></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">User.find(<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(err) &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>按条件查询</p><p>  依旧是find方法:<code>第一个参数是数组形式的查询条件</code>,<code>第二个为查询完成后的回调函数,返回数组形式</code>,返回多个符合条件的文档</p><p>  <code>User.find(&#123;条件&#125;,function(err,data)&#123;&#125;)</code></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">User.find(&#123;<span class="attr">author</span>:<span class="string">&#x27;bruce huang&#x27;</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(err) &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>查找符合条件的第一个</p><p>  <code>findOne方法</code>:按照条件查找第一个符合条件的文档  返回对象形式</p><p>  <code>User.findOne(&#123;条件&#125;,function(err,data)&#123;&#125;)</code></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">User.findOne(&#123;<span class="attr">author</span>:<span class="string">&#x27;bruce huang&#x27;</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(err) &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>  注意: 用find方法查找数据时，即使数据为空，也会返回一个空数组，所以判定应当判定长度而不是变量</p></li></ul></li><li><p>删除数据</p><p> 利用模型的remove方法 </p><p> <code>User.remove(条件,回调函数(错误对象，返回结果))</code></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">User.remove(&#123;<span class="attr">author</span>:<span class="string">&#x27;bruce huang&#x27;</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(err) &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(data); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>更改数据</p><p> 利用模型对象的</p><p> <code>User.findByIdAndUpdate(id值，修改的值(对象形式),回调函数)</code></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">User.findByIdAndUpdate(<span class="string">&#x27;5dc5583de916d516a8577746&#x27;</span>,&#123;<span class="string">&#x27;body&#x27;</span>:<span class="string">&#x27;not pencil&#x27;</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(err) &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(err); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(data); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p> 注意: 当用数据库读取到的_id数据渲染页面时，页面中应该写成id，不要写_id</p></li><li><p>分段读取数据</p><p> <code>mongoose.find().skip(n).limit(n).exec((err,data) =&gt; &#123;&#125;)</code></p><ul><li><p><code>skip(n)</code>: 代表跳过n条数据</p></li><li><p><code>limit(n)</code>: 代表只读取n条数据</p></li><li><p>exec回调函数的第二个参数data代表读取到的内容</p><p>一般用于页面分页的处理，可以配合<code>twb-pagination</code>使用</p></li></ul></li></ol><h4 id="关于异步编程-回调地狱、promise"><a href="#关于异步编程-回调地狱、promise" class="headerlink" title="关于异步编程(回调地狱、promise)"></a>关于异步编程(回调地狱、promise)</h4><blockquote><p>什么是回调地狱？</p><p>当有多个异步事件时，其输出结果顺序是不定的，一般取决于文件大小。如下面代码</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">fs.readFile(<span class="string">&#x27;./data/a.txt&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(err) &#123; </span><br><span class="line">        <span class="comment">// return </span></span><br><span class="line">        res.end(<span class="string">&#x27;failed&#x27;</span>); </span><br><span class="line">        <span class="keyword">throw</span> err; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">&#x27;./data/b.txt&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(err) &#123; </span><br><span class="line">        <span class="comment">// return </span></span><br><span class="line">        res.end(<span class="string">&#x27;failed&#x27;</span>); </span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>所以为了让事件按照我们想要的顺序生成结果，我们可以将后执行的事件嵌入先执行的事件的回调函数里，如下面代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">fs.readFile(<span class="string">&#x27;./data/c.txt&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) &#123; </span><br><span class="line">        <span class="comment">// return </span></span><br><span class="line">        res.end(<span class="string">&#x27;failed&#x27;</span>);</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    fs.readFile(<span class="string">&#x27;./data/b.txt&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>) </span>&#123; </span><br><span class="line">        <span class="keyword">if</span>(err) &#123; </span><br><span class="line">            <span class="comment">// return </span></span><br><span class="line">            res.end(<span class="string">&#x27;failed&#x27;</span>); </span><br><span class="line">            <span class="keyword">throw</span> err; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="built_in">console</span>.log(data) </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>但是如果事件太多，那么代码就会太冗长，难以维护，形成了回调地狱</p><p>解决这个问题，我们可以使用ES6新增语法<code>Promise</code></p><h3 id="表单的同步提交-默认-和异步提交-ajax"><a href="#表单的同步提交-默认-和异步提交-ajax" class="headerlink" title="表单的同步提交(默认)和异步提交(ajax)"></a>表单的同步提交(默认)和异步提交(ajax)</h3><p>表单具有默认的提交行为，默认是同步的，同步表单提交，浏览器会锁死(转圈儿)等待服务端的响应结果。表单的同步提交之后，无论服务端响应的是什么，都会直接把响应的结果覆盖掉当前页面。</p><p>后来有人想到了一种办法，来解决这个问题。即提交表达后在服务器重定位到相同的页面，通过模板引擎将要提示的信息渲染到页面上(现在仍有网站使用这种方式)</p><p>再后来出现了ajax，实现不用刷新页面也能获取服务器发送的数据的效果</p><h3 id="Node中Babel转码器的部署"><a href="#Node中Babel转码器的部署" class="headerlink" title="Node中Babel转码器的部署"></a>Node中Babel转码器的部署</h3><p>虽然现在浏览器对ES6的支持性普遍很好，但是考虑到一些旧版浏览器用户以及我们可能会想通过es6模块语法实现模块化开发，所以我们需要babel转码器将我们写的es6代码转为浏览器普遍支持的代码以便于开发和上线</p><h4 id="部署Babel的第一步"><a href="#部署Babel的第一步" class="headerlink" title="部署Babel的第一步"></a>部署Babel的第一步</h4><p>Babel 的配置文件是<code>.babelrc</code>，存放在项目的根目录下。使用 Babel 的第一步，就是配置这个文件。</p><p>该文件用来设置转码规则和插件，基本格式如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;    </span><br><span class="line">    &quot;present&quot;:[    </span><br><span class="line">        &quot;@babel&#x2F;env&quot;,     </span><br><span class="line">        &quot;@babel&#x2F;preset-react&quot;  </span><br><span class="line">    ],   </span><br><span class="line">    &quot;plugins&quot;:[]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>present字段</code>设定转码规则，可以通过以下代码下载转码规则: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 最新转码规则</span></span><br><span class="line">npm install --save-dev @babel/preset-env </span><br><span class="line"></span><br><span class="line"><span class="comment">## react 转码规则 </span></span><br><span class="line">npm install --save-dev @babel/preset-react</span><br></pre></td></tr></table></figure><p><code>dev的含义</code>: 代表这个包是开发临时使用，保存到 <code>package.json</code> 文件中的 <code>devDependencies</code> 选项中。</p><p>注意: <code>.babelrc</code>文件的配置必不可少</p><h4 id="babel-regitser模块"><a href="#babel-regitser模块" class="headerlink" title="@babel/regitser模块"></a>@babel/regitser模块</h4><p>开发的过程中，需要不断的调试，为了方便，我们需要能实时转码的工具，即每次调用都不需要一个文件一个文件的转码，可以用<code>@babel/regitser</code>模块</p><p>使用方法: </p><ol><li><p>先安装该模块</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @babel/register</span><br></pre></td></tr></table></figure></li><li><p>设立一个入口文件，该文件用于载入<code>babel/register</code>模块并将其中require的js文件进行实时转码</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js </span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;@babel/register&#x27;</span>); </span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./es6.js&#x27;</span>);</span><br></pre></td></tr></table></figure><p> 注意: 必须<code>先引入模块</code>再<code>引入要实时转码的文件</code></p></li><li><p>每当调试时，运行该入口文件即可</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node index.js</span><br></pre></td></tr></table></figure><p> 注意: 该模块只用适合在开发环境使用，用于开发调试时将源代码转换。因为是实时的，如果用于上线后，会影响网站性能</p></li></ol><h4 id="babel-cli"><a href="#babel-cli" class="headerlink" title="@babel/cli"></a>@babel/cli</h4><p>当完成开发后，我们需要将写好的代码完全转码成新的文件用于线上环境，<code>babel/cli</code>工具可以帮助完成。</p><p>这个模块用于命令行中转码使用，可以<code>将js文件代码转码输出到命令行中</code>也可以<code>转码输出到新的文件里</code>，还可以<code>转码整个目录的文件到另一个目录</code></p><p>使用方法: </p><ol><li><p>安装</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @babel/cli</span><br></pre></td></tr></table></figure></li><li><p>使用</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 转码结果输出到标准输出 </span></span><br><span class="line">npx babel example.js </span><br><span class="line"></span><br><span class="line"><span class="comment">## 转码结果写入一个文件 </span></span><br><span class="line"><span class="comment">## --out-file 或 -o 参数指定输出文件 </span></span><br><span class="line">npx babel example.js --out-file compiled.js </span><br><span class="line"><span class="comment">## 或者 </span></span><br><span class="line">npx babel example.js -o compiled.js </span><br><span class="line"></span><br><span class="line"><span class="comment">## 整个目录转码 </span></span><br><span class="line"><span class="comment">## --out-dir 或 -d 参数指定输出目录 </span></span><br><span class="line">npx babel src --out-dir lib </span><br><span class="line"><span class="comment">## 或者 </span></span><br><span class="line">npx babel src -d lib</span><br></pre></td></tr></table></figure><p> 所以可以使用<code>babel src -d lib</code>将src目录下的代码转码生成同名文件并放到lib文件夹中。</p><p> 注意: src是我们开发时写的代码，有es6语法。lib是上线时使用的代码，无es6语法</p></li></ol><h4 id="packagejson文件中script字段用法"><a href="#packagejson文件中script字段用法" class="headerlink" title="packagejson文件中script字段用法"></a>packagejson文件中script字段用法</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;babel-demo&quot;</span>,  </span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span>: &#123;   </span><br><span class="line">        <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,  </span><br><span class="line">        <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;babel demo1.js&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;node main.js&quot;</span>, </span><br><span class="line">        <span class="attr">&quot;prestart&quot;</span>: <span class="string">&quot;npm run build&quot;</span>,   </span><br><span class="line">        <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;node dist/app.js&quot;</span>  </span><br><span class="line">    &#125;,  </span><br><span class="line">    <span class="attr">&quot;devDependencies&quot;</span>: &#123;  </span><br><span class="line">        <span class="attr">&quot;babel-cli&quot;</span>: <span class="string">&quot;^6.22.2&quot;</span>,   </span><br><span class="line">        <span class="attr">&quot;babel-preset-es2015&quot;</span>: <span class="string">&quot;^6.22.0&quot;</span>,  </span><br><span class="line">        <span class="attr">&quot;babel-preset-react&quot;</span>: <span class="string">&quot;^6.22.0&quot;</span> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>script字段</code>用于设置快捷命令执行，即可以通过指定的新命令来执行某些命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">script:&#123;   </span><br><span class="line">命令名: &quot;被代替的命令&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>命令名可以随意起(<code>除了start和prestart</code>)，执行方式为<code>npm run 命令名</code></p><p>比如可以将调试时执行入口函数的命令其名为’dev’</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;build&quot;: &quot;babel demo1.js&quot;，</span><br></pre></td></tr></table></figure><p><code>start命令</code>用于执行上线时所使用的入口函数，<code>prestart的命令</code>会在执行start前自动执行，所以可以用来执行<code>babel/cli</code>工具先将源代码转为上线时所用代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;prestart&quot;: &quot;babel src -d dist&quot;,   </span><br><span class="line">&quot;start&quot;: &quot;node dist&#x2F;app.js&quot;</span><br></pre></td></tr></table></figure><p>所以只要将<code>babel/cli</code>安装在项目中并且<code>babel src -d lib</code>写入<code>script的prestart字段</code>就可以保证每次执行<code>npm run start</code>前都会被转码</p><h3 id="项目的模块化"><a href="#项目的模块化" class="headerlink" title="项目的模块化"></a>项目的模块化</h3><ol><li><p><code>dist文件</code>: 用于存放转码后的源代码，用于上线</p></li><li><p><code>src文件</code>: 用于存放开发过程中的源代码，一般还可以根据不同业务分为不同的文件夹，如路由文件夹、中间件文件夹、数据处理函数文件夹、数据库模型文件夹</p></li><li><p><code>views文件夹</code>: 用于存放页面文件，根据页面不同分成多个子文件夹</p></li><li><p><code>public文件夹</code>: 存放公共文件的文件夹，比如图片、css文件、js文件等</p></li></ol><h3 id="NVM"><a href="#NVM" class="headerlink" title="NVM"></a>NVM</h3><blockquote><p>(Node Version Management)node版本管理工具</p></blockquote><ul><li><p><code>nvm list</code>: 查看所有已安装的 node 版本</p></li><li><p><code>nvm install 版本号</code>: 安装指定版本的 node</p></li><li><p><code>nvm use 版本号</code>: 切换到指定版本号</p></li><li><p><code>nvm proxy 代理地址</code>: 配置代理进行下载</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web教程 </category>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AJAX学习</title>
      <link href="/posts/c747b178/"/>
      <url>/posts/c747b178/</url>
      
        <content type="html"><![CDATA[<div class="note danger"><p>本教程里的资料来源于网友的资料，自己整理以供学习。</p></div><h2 id="AJAX学习"><a href="#AJAX学习" class="headerlink" title="AJAX学习"></a>AJAX学习</h2><h3 id="Ajax-asynchronous-javascript-and-xml"><a href="#Ajax-asynchronous-javascript-and-xml" class="headerlink" title="Ajax(asynchronous javascript and xml)"></a>Ajax(asynchronous javascript and xml)</h3><div class="note info"><p>Ajax描述了一种主要使用脚本操纵HTTP的Web应用架构，主要特点是使用脚本操纵HTTP和Web服务器进行数据交换，不会导致页面重载</p></div><h4 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h4><p>HTTP协议(HyperText Transfer Protocal): 规定Web浏览器如何从Web服务器获取文档和向Web服务器提交表单内容，以及Web服务器如何响应这些请求和提交 </p><p>分为<code>请求报文</code>和<code>响应报文</code></p><p>请求报文包括: </p><ol><li><p>请求行</p><ul><li>HTTP请求的方法(GET或POST)</li><li>正在请求的URL</li></ul></li><li><p>请求头(可选，包含身份验证信息等)</p></li><li><p>请求主体(可选，GET方式没有请求主体)</p></li></ol><p>响应报文包括: </p><ol><li><p>状态行(由文字和数字组成的状态码，用来显示请求的成功和失败。常见的有200 OK、404 NOT FOUND、304 MODIFIED)</p></li><li><p>响应头集合</p></li><li><p>响应主体</p></li></ol><h4 id="XMLHttpRequest的使用"><a href="#XMLHttpRequest的使用" class="headerlink" title="XMLHttpRequest的使用"></a>XMLHttpRequest的使用</h4><blockquote><p>浏览器在XMLHttpRequest类上定义了他们的HTTP API。这个类的每个实例都表示一个独立的请求/响应对，并且这个对象的属性和方法允许指定请求细节和提取响应数据</p></blockquote><h5 id="使用基本步骤"><a href="#使用基本步骤" class="headerlink" title="使用基本步骤"></a>使用基本步骤</h5><p><code>GET方式</code>(适用于URL完全指定请求资源且请求对服务器没有任何服务器作用以及服务器的响应是可缓存时): </p><ol><li><p>实例化XMLHttpRequest对象</p><p> <code>var 变量名 = new XMLHttpRequest()</code></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br></pre></td></tr></table></figure></li><li><p>设置请求行(设置请求方式和请求url，如果有数据则以 <code>?key=value</code> 形式添加在URL后面)</p><p> <code>XHR对象.open(&#39;GET&#39;，请求URL)</code></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;xxx.html?name=bruce&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>设置请求头(GET方式一般不用写)</p><p> <code>XHR对象.setRequestHeader(键名，键值)</code></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.setRequestHeader(<span class="string">&#x27;heima&#x27;</span>,<span class="string">&#x27;hehe&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>向服务器发送(GET方式没有请求主题)</p><p> <code>XHR对象.send(null或者省略)</code></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure></li></ol><p><code>POST方式</code>(在请求主体中常包含额外数据且这些数据常存储到服务器上的数据库中): </p><ol><li><p>实例化XMLHttpRequest对象</p><p> <code>var 变量名 = new XMLHttpRequest()</code></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br></pre></td></tr></table></figure></li><li><p>设置请求行(设置请求方式和请求url)</p><p> <code>XHR对象.open(提交方式，请求URL)</code></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;xxx.html&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>设置请求头(POST一定要写下面的请求头)</p><p> <code>XHR对象.setRequestHeader(键名，键值)</code></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.setRequestHeader(<span class="string">&#x27;Content-type&#x27;</span>,<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span><br></pre></td></tr></table></figure><p> 该请求头的作用是让数据仿效表单提交</p></li><li><p>向服务器发送(post一般有发送主体，数据作为send函数参数发送)</p><p> <code>XHR对象.send(&#39;key1=value&amp;key2=value&#39;)</code></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.send(<span class="string">&#x27;name=jl&amp;friend=avgs&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ol><p>注意: </p><ol><li><p>open中的url参数必须是相对于当前文档的url，否则跨域会报错，除非服务器明确允许跨域请求</p></li><li><p>HTTP请求各部分有指定顺序: 请求方法和url首先到达，然后是请求头，然后是请求主体，调用XMLHttpRequest的方法必须匹配HTTP请求的架构，比如setRequestHeader必须在open后send前</p></li><li><p>open可以设置第三个参数为false(默认为true)实现同步处理HTTP响应</p></li></ol><h5 id="服务器接收响应"><a href="#服务器接收响应" class="headerlink" title="服务器接收响应"></a>服务器接收响应</h5><p><code>不同服务器的代码不同、自行百度</code></p><p>注意: </p><ol><li><p>使用该对象必须在服务器中测试，即对url的访问必须经过服务器。XMLHttpRequest用于同http和https协议一起工作,</p></li><li><p>发送请求等待服务器响应时是不阻塞的</p></li><li><p>服务器的正确解码是假设服务器为这个响应发送了”Content-Type”头和正确的MIME类型用以告诉浏览器数据应解析为的类型。如下表</p></li></ol><table><thead><tr><th>响应数据格式</th><th>应声明的头部</th></tr></thead><tbody><tr><td><code>text</code></td><td><code>header(Content-type: text/plain；charset=utf-8)</code>可不写</td></tr><tr><td><code>XML</code></td><td><code>header(Content-type: text/xml；charset=utf-8)</code>必写</td></tr><tr><td><code>json</code></td><td><code>header(Content-type: appliation/json；charset=utf-8)</code>可不写</td></tr><tr><td><code>html</code></td><td><code>header(Content-type:text/html;charset=utf-8)</code></td></tr></tbody></table><h5 id="客户端获取响应数据-一般用在XHR对象异步处理程序内"><a href="#客户端获取响应数据-一般用在XHR对象异步处理程序内" class="headerlink" title="客户端获取响应数据(一般用在XHR对象异步处理程序内)"></a>客户端获取响应数据(一般用在XHR对象异步处理程序内)</h5><ul><li><p>字符串形式数据</p><p>  <code>responseText可以得到响应主体的文本形式</code></p></li><li><p>XML形式数据(少用，了解即可)</p><p>  <code>responseXML获得Document形式，可以利用选择器获取其中元素的内容</code></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = xhr.responseXML.querySelector(<span class="string">&quot;name&quot;</span>).innerHTML;</span><br></pre></td></tr></table></figure></li></ul><ul><li>JSON形式数据(就是将对象等复杂数组用字符串作为载体传递 其中的所有要解析的键名键值都要用引号包裹**，除非键值是数字，最常用的数据格式)</li></ul><p><code>JSON的特点:</code> </p><ol><li><p>JSON是一种数据的格式</p></li><li><p>JSON和编程语言没有关系，其载体是字符串，基本上所有的语言都支持字符串</p></li><li><p>语法简洁 所有的编程语言都提供了对应的方法解析JSON</p></li></ol><p><code>JSON语法</code></p><ul><li><p>JSON数据格式</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;bruce&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span>:<span class="string">&quot;28&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;skill&quot;</span>:<span class="string">&quot;detective&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  注意: 键名键值都要用双引号包裹，整个值用单引号包裹</p></li><li><p>JSON的转换</p><p>  <code>JSON.parse(字符串)</code>: 将json数据转为对应对象或数组形式</p><p>  <code>JSON.stringify(数组或对象)</code>: 将对象或数组数据转为json格式</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> JSONArr = <span class="string">&#x27;[&quot;绿菜花&quot;,&quot;圣女果&quot;,&quot;大葱&quot;,&quot;番茄&quot;]&#x27;</span>; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(JSONArr)[<span class="number">1</span>]);<span class="comment">//圣女果 </span></span><br><span class="line"><span class="keyword">var</span> JSONArr = <span class="string">&#x27;&#123;&quot;name&quot;:&quot;bruce&quot;,&quot;skill&quot;:&quot;kill&quot;,&quot;friend&quot;:[&quot;alfred&quot;,&quot;clark&quot;,&quot;diana&quot;]&#125;&#x27;</span>; <span class="built_in">console</span>.log(JSONArr);<span class="comment">//输出字符串 </span></span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">JSON</span>.parse(JSONArr);</span><br><span class="line"><span class="built_in">console</span>.log(result.friend[<span class="number">1</span>]);<span class="comment">//clark</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>JSON用法</p><ol><li><p>浏览器发出ajax请求</p></li><li><p>服务器端获取ajax数据(可以读取json文件也可以直接写)</p><p> <code>不同服务器的代码不同、自行百度</code></p><p> 注意: 发送json数据的header可写可不写，一般还是写</p></li><li><p>浏览器接收数据，转化，渲染</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.readyState == <span class="number">4</span>&amp;&amp;<span class="built_in">this</span>.status == <span class="number">200</span>) &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.responseText); <span class="comment">// 转化为对应的数据格式 </span></span><br><span class="line">        <span class="keyword">var</span> arr = <span class="built_in">JSON</span>.parse(<span class="built_in">this</span>.responseText); </span><br><span class="line">        <span class="built_in">console</span>.log(arr); </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; arr.length;i++)&#123; </span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;姓名:&#x27;</span>+ arr[i][<span class="string">&quot;name&quot;</span>] + <span class="string">&#x27;技能:&#x27;</span> + arr[i][<span class="string">&quot;skill&quot;</span>]); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h5 id="客户端异步处理HTTP响应"><a href="#客户端异步处理HTTP响应" class="headerlink" title="客户端异步处理HTTP响应"></a>客户端异步处理HTTP响应</h5><ol><li><p>用onload函数，当服务器成功接收到文件时，触发load事件，调用其中回调函数</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;hi!&#x27;</span>); <span class="comment">// responseText 获取响应报文 </span></span><br><span class="line">    <span class="built_in">console</span>.log(xhr.responseText); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用onreadystatechange函数，当XHR对象的readyState属性发生变化时就会触发并调用其中回调函数</p><p> readyState属性返回一个XHR对象当前所处的状态，其值主要有: </p><table><thead><tr><th>值</th><th>状态</th><th>描述</th></tr></thead><tbody><tr><td>0</td><td><code>UNSENT</code></td><td>代理被创建，但尚未调用 open() 方法</td></tr><tr><td>1</td><td><code>OPENED</code></td><td><code>open()</code>方法已经被调用</td></tr><tr><td>2</td><td><code>HEADER_RECEIVED</code></td><td><code>send()</code>方法已经被调用，并且头部和状态已经可获得</td></tr><tr><td>3</td><td><code>LOADING</code></td><td>下载中;<code>responseText</code>属性已经包含部分数据</td></tr><tr><td>4</td><td><code>DONE</code></td><td>下载操作已完成</td></tr></tbody></table><p>一般可以和status属性配合使用检测XHR对象是否接受到数据。</p><p>statue属性返回XHR对象的响应状态吗。成功一般为200，找不到上传url会返回404</p><p><code>可以利用以下代码完成更健壮的响应检测</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.readyState == <span class="number">4</span> &amp;&amp; <span class="built_in">this</span>.status == <span class="number">200</span>) &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;我触发一次&#x27;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="判断响应数据类型"><a href="#判断响应数据类型" class="headerlink" title="判断响应数据类型"></a>判断响应数据类型</h5><p>可以利用xhr对象的<code>getResponseHeader(获取内容)</code>方法来获取响应头的内容</p><p>检验是否是json</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/json/.test(xhr.getResponseHeader(<span class="string">&quot;Content-type&quot;</span>))</span><br></pre></td></tr></table></figure><p>检验是否是xml</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/xml/.test(xhr.getResponseHeader(<span class="string">&quot;Content-type&quot;</span>))</span><br></pre></td></tr></table></figure><h3 id="jQuery中的Ajax"><a href="#jQuery中的Ajax" class="headerlink" title="jQuery中的Ajax"></a>jQuery中的Ajax</h3><h4 id="jquery的get快捷函数"><a href="#jquery的get快捷函数" class="headerlink" title="jquery的get快捷函数"></a>jquery的get快捷函数</h4><p><code>jQuery.get( url [, data ] [, success ] [, dataType ] )</code></p><p>参数亦可以写成对象形式<code>jQuery.get(&#123;url:&quot;xxx.html&quot;,data:&quot;key=value&quot;,success:function(x)&#123;alert(x)&#125;&#125;)</code></p><p>参数信息: </p><ul><li><p><code> url</code>:提交地址</p></li><li><p><code>data:</code> 提交数据，格式可以为键值对字符串也可以是对象形式</p></li><li><p><code>success</code>: 接收到数据后的回调函数,其中的第一个参数就是接收到的数据</p></li><li><p><code>dataType</code>: 从服务器返回的预期的数据类型</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.get(<span class="string">&quot;data.html&quot;</span>,&#123;<span class="attr">name</span>:<span class="string">&quot;bruce&quot;</span>,<span class="attr">husband</span>:<span class="string">&quot;diana&quot;</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;alert(x)&#125;); </span><br><span class="line"></span><br><span class="line">$.get(<span class="string">&quot;data.html&quot;</span>,<span class="string">&quot;name=rose&amp;husband=jack&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;alert(x)&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="jquery的post快捷函数"><a href="#jquery的post快捷函数" class="headerlink" title="jquery的post快捷函数"></a>jquery的post快捷函数</h4><p><code>jQuery.post( url [, data ] [, success ] [, dataType ] )</code> 同样的，参数也可以写成对象形式</p><p>参数信息: </p><ul><li><p><code>url</code>:提交地址</p></li><li><p><code>data</code>: 提交数据，格式可以为键值对字符串也可以是对象形式</p></li><li><p><code>success</code>: 接收到数据后的回调函数,其中的第一个参数就是接收到的数据</p></li><li><p><code>dataType</code>: 从服务器返回的预期的数据类型</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.post(<span class="string">&quot;data.html&quot;</span>,<span class="string">&quot;name=bruce&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;alert(x)&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="jQuery的ajax函数-可以自己选择post还是get"><a href="#jQuery的ajax函数-可以自己选择post还是get" class="headerlink" title="jQuery的ajax函数(可以自己选择post还是get)"></a>jQuery的ajax函数(可以自己选择post还是get)</h4><p>参数必须以对象形式写</p><p><code>jQuery.ajax(&#123;url:&quot;xxx.html&quot;,type:&quot;get&quot;,data:&quot;name=bruce&quot;,success:function(x)&#123;console.log(x)&#125;&#125;)</code></p><p>参数信息: </p><ul><li><p><code>url</code>:提交地址</p></li><li><p><code>type</code>: 提交方式</p></li><li><p><code>data</code>: 提交数据，格式可以为键值对字符串也可以是对象形式</p></li><li><p><code>beforesend</code>:ajax请求发出前执行的函数</p></li><li><p><code>success</code>: 接收到数据后的回调函数,其中的第一个参数就是接收到的数据，，第二个参数是jQuery状态码，第三个是XHR对象</p></li><li><p><code>error</code>:当响应发生错误时触发，可以接受三个参数，依次代表发起请求的xhr对象，jQuery状态码，发生错误的位置</p></li><li><p><code>complete</code>: 请求完全完成时触发</p></li><li><p><code>dataType</code>: 可以自己声明接收的数据类型而不需要后台声明，包括json、xml等</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123; </span><br><span class="line">    url:<span class="string">&#x27;json.php&#x27;</span>, </span><br><span class="line">    data:&#123; </span><br><span class="line">        name:<span class="string">&quot;bruce&quot;</span>, </span><br><span class="line">        skill:<span class="string">&quot;kill&quot;</span> </span><br><span class="line">    &#125;, </span><br><span class="line">    success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123; </span><br><span class="line">        <span class="built_in">console</span>.log(data); </span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="comment">// error属性在请求失败时会触发 </span></span><br><span class="line">    error:<span class="function"><span class="keyword">function</span>(<span class="params">XMLHttpRequest,textStatus,errorThrown</span>)</span>&#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;error&#x27;</span>); </span><br><span class="line">        <span class="comment">// xhr对象信息 </span></span><br><span class="line">        <span class="built_in">console</span>.log(XMLHttpRequest); </span><br><span class="line">        <span class="comment">// 错误类型 </span></span><br><span class="line">        <span class="built_in">console</span>.log(textStatus); </span><br><span class="line">        <span class="comment">// 错误位置 </span></span><br><span class="line">        <span class="built_in">console</span>.log(errorThrown); </span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="comment">// 请求完成时触发(readyStatus == 4时触发) </span></span><br><span class="line">    complete:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;done&#x27;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="jQuery的其他ajax相关函数"><a href="#jQuery的其他ajax相关函数" class="headerlink" title="jQuery的其他ajax相关函数"></a>jQuery的其他ajax相关函数</h4><p><code>$(document).ajaxStart(function()&#123;&#125;)</code></p><p>document中的任意ajax事件触发时便会触发这个事件中，调用其中回调函数，<code>必须绑定在document上</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ajaxStart(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    $(<span class="string">&quot;.cover&quot;</span>).show(); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>$(document).ajaxComplete(function()&#123;&#125;) </code></p><p>document中的任意ajax事件刚完成时便会触发这个事件，调用其中回调函数，<code>必须绑定在document上</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ajaxComplete(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    $(<span class="string">&quot;.cover&quot;</span>).hide(); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>附: jQuery的Ajax状态码</p><table><thead><tr><th>success</th><th>请求成功完成</th></tr></thead><tbody><tr><td><code>notmodified</code></td><td>请求以正常完成，但是url内容与上次相同</td></tr><tr><td><code>error</code></td><td>请求没有完成，发生某些http错误</td></tr><tr><td><code>timeout</code></td><td>没有在规定时间内完成</td></tr><tr><td><code>parsererror</code></td><td>请求完成，但无法正常解析数据，比如服务器中的数据格式错误</td></tr></tbody></table><h3 id="模板和模板引擎的使用"><a href="#模板和模板引擎的使用" class="headerlink" title="模板和模板引擎的使用"></a>模板和模板引擎的使用</h3><blockquote><p>以template-web引擎为例</p></blockquote><h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><p>即写好的等待被模板引擎渲染数据的html脚本</p><h4 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h4><p>渲染模板的脚本</p><h4 id="模板的创建"><a href="#模板的创建" class="headerlink" title="模板的创建"></a>模板的创建</h4><blockquote><p>用一个script标签，声明其类型为html，然后写入html脚本</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/html&quot;</span> <span class="attr">id</span>=<span class="string">&quot;template&quot;</span>&gt;</span> </span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span> </span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="comment">&lt;!-- 用</span></span><span class="template-variable">&#123;&#123;&#125;&#125;</span><span class="xml"><span class="comment">代表数据填充位置 --&gt;</span> </span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>名字</span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>技能</span><span class="template-variable">&#123;&#123;<span class="name">skill</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>爱好</span><span class="template-variable">&#123;&#123;<span class="name">hobby</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span></span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span> </span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意要写ID，才能被模板引擎找到渲染。其中以 &#123;&#123;键名&#125;&#125; 指定待填充数据的位置</p><h4 id="模板的渲染"><a href="#模板的渲染" class="headerlink" title="模板的渲染"></a>模板的渲染</h4><p>利用模板引擎的template函数</p><ol><li><p>template(渲染的脚本id，保存渲染数据的对象) 返回填充好的字符串，而不是返回节点</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123; <span class="attr">name</span>:<span class="string">&#x27;bruce&#x27;</span>, <span class="attr">skill</span>:<span class="string">&#x27;kill&#x27;</span>, <span class="attr">hobby</span>:<span class="string">&#x27;coding&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">var</span> result = template(<span class="string">&#x27;template&#x27;</span>,data); </span><br><span class="line"><span class="built_in">console</span>.log(result); </span><br><span class="line"></span><br><span class="line"><span class="comment">//结果为 </span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&lt;ul&gt; </span></span><br><span class="line"><span class="comment">       &lt;!-- 用代表数据填充位置 --&gt; </span></span><br><span class="line"><span class="comment">       &lt;li&gt;名字bruce&lt;/li&gt; </span></span><br><span class="line"><span class="comment">       &lt;li&gt;技能kill&lt;/li&gt; </span></span><br><span class="line"><span class="comment">       &lt;li&gt;爱好coding&lt;/li&gt; </span></span><br><span class="line"><span class="comment">&lt;/ul&gt; </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p> 注意: 对象中的键名必须和模板中填充位置的名字一样</p></li><li><p>然后就可以将模板渲染到页面中</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.innerHTML = result;</span><br></pre></td></tr></table></figure></li></ol><h4 id="模板引擎的原理-自己封装"><a href="#模板引擎的原理-自己封装" class="headerlink" title="模板引擎的原理(自己封装)"></a>模板引擎的原理(自己封装)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">template</span>(<span class="params">id,obj</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#&quot;</span>+id); </span><br><span class="line">    script = <span class="built_in">JSON</span>.stringify(script.innerHTML); </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> obj) &#123; </span><br><span class="line">        script = script.replace(<span class="string">&quot;&#123;&#123;&quot;</span>+ k +<span class="string">&quot;&#125;&#125;&quot;</span>,obj[k]); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(script); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="模板引擎其他语句"><a href="#模板引擎其他语句" class="headerlink" title="模板引擎其他语句"></a>模板引擎其他语句</h4><h5 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h5><p>&#123;&#123;if&#125;&#125; &#123;&#123;else&#125;&#125; &#123;&#123;else if&#125;&#125; 用于判断 以&#123;&#123;/if&#125;&#125;结束</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;if male==&#x27;girl&#x27;&#125;&#125; </span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>welcome,mr.&#123;&#123;name&#125;&#125; </span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>bag<span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>kouhong<span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>wow you are&#123;&#123;skill&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">&#123;&#123;else if male ==&#x27;man&#x27;&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>welcome,mr.&#123;&#123;name&#125;&#125; </span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>drag<span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>come on<span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>wow you are&#123;&#123;skill&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">&#123;&#123;/if&#125;&#125;</span><br></pre></td></tr></table></figure><p>输出原文(加@符号即可)</p><p>&#123;&#123;@xxx&#125;&#125; 可以按照其格式解析内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;skill&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;@info&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>//显示为a标签而不是字符串 </span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span> </span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> person = &#123; </span></span><br><span class="line"><span class="javascript">        name:<span class="string">&#x27;monkey king&#x27;</span>, </span></span><br><span class="line"><span class="javascript">        skill:<span class="string">&#x27;fly&#x27;</span>, </span></span><br><span class="line"><span class="handlebars"><span class="xml">        info:&#x27;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">title</span>=<span class="string">&quot;&quot;</span>&gt;</span>monkeyking<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#x27; </span></span></span><br><span class="line">    &#125; </span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.body.innerHTML = template(<span class="string">&#x27;norTemplate&#x27;</span>,person);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h5><p>&#123;&#123;each 循环的属性&#125;&#125; $value(其中的数值) &#123;&#123;/each&#125;&#125; 结束循环</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span>家人们 </span><br><span class="line">    &#123;&#123;each family&#125;&#125; </span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;$value[&#x27;name&#x27;]&#125;&#125;,he can &#123;&#123;$value[&#x27;skill&#x27;]&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;&#123;/each&#125;&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span> </span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> person = &#123; </span></span><br><span class="line"><span class="javascript">        name:<span class="string">&#x27;big&#x27;</span>, </span></span><br><span class="line">        brother:[ </span><br><span class="line"><span class="javascript">            <span class="string">&#x27;two&#x27;</span>, </span></span><br><span class="line"><span class="javascript">            <span class="string">&#x27;three&#x27;</span>, </span></span><br><span class="line"><span class="javascript">            <span class="string">&#x27;four&#x27;</span>, </span></span><br><span class="line"><span class="javascript">            <span class="string">&#x27;five&#x27;</span>, </span></span><br><span class="line"><span class="javascript">            <span class="string">&#x27;six&#x27;</span>, <span class="string">&#x27;seven&#x27;</span></span></span><br><span class="line">        ], </span><br><span class="line">        family:[ </span><br><span class="line"><span class="javascript">            &#123;<span class="attr">name</span>:<span class="string">&#x27;yeye&#x27;</span>,<span class="attr">skill</span>:<span class="string">&#x27;captured&#x27;</span>&#125;, </span></span><br><span class="line"><span class="javascript">            &#123;<span class="attr">name</span>:<span class="string">&#x27;chuanshanjia&#x27;</span>,<span class="attr">skill</span>:<span class="string">&#x27;what say&#x27;</span>&#125;, </span></span><br><span class="line"><span class="javascript">            &#123;<span class="attr">name</span>:<span class="string">&#x27;butterfly&#x27;</span>,<span class="attr">skill</span>:<span class="string">&#x27;fish&#x27;</span>&#125; </span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(template(<span class="string">&#x27;brothers&#x27;</span>,person));</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a>跨域解决方案</h3><ul><li><p><code>同源</code>:协议、主机、端口都一样就是同源</p></li><li><p><code>不同源</code>: 协议主机端口有一个不一样就是不同源</p></li><li><p><code>跨域</code>: 不同源的网站之间发送请求就是跨域</p></li></ul><h4 id="两种跨域解决方案"><a href="#两种跨域解决方案" class="headerlink" title="两种跨域解决方案"></a>两种跨域解决方案</h4><ol><li><p>利用CORS(Cross-Origin Resource Share): </p><p> 在后台数据文件中添加头<code>header(&quot;Acess-Control-Allow-origin:\*&quot;);</code></p><p> 实现条件:</p><ul><li><p>浏览器支持CORS </p></li><li><p>请求的网站开启CROS</p><p>缺点: HTML5才支持</p></li></ul></li><li><p>利用JSONP(JSON with Padding)</p><p> 只需设置script标签的src属性</p><p> 原理: 利用标签src属性可以获取跨域资源的原理，在src中将函数方法等数据传给服务器，服务器中再采用JSON的格式输出，浏览器获得该数据后会自动按照JS语法解析，实现对数据的处理</p><p> 优点: </p><ul><li><p>不受同源策略限制 </p></li><li><p>会自动解码执行包含JSON编码数据的响应体</p><p>注意: </p></li></ul><ol><li><p>src属性充当了Ajax，JSONP与Ajax无关，JSONP只需要一个src属性指向请求地址的script标签</p></li><li><p>回调函数一般统一叫callback</p></li><li><p>JSONP只能发送get请求，不能发送post请求</p></li><li><p>jQuery中的JSONP的原理是动态创建了script标签，其中src等于请求地址+”？”+success方法</p></li><li><p>img不用于JSONP的原因是img的src属性能发送数据，但是服务器的响应一直是一张图片导致客户端无法轻易从中提取信息</p></li><li><p>iframe不用于JSONP的原因是其受限于同源策略</p></li><li><p>对于不可信任的服务器，不该使用这项技术</p></li><li><p>响应内容必须用JS函数名和圆括号包裹起来</p></li></ol></li><li><p>利用跨域消息传递(window对象的postMessage方法，HTML5新增)</p><p> window对象的postMessage方法允许来自非同源的脚本调用，允许有限的通信，通过异步传递的方法。这项技术称为”跨文档消息传递”</p><p> 步骤(以open打开新窗口为例): </p><ol><li><p>弹出一个用于发送信息的窗口</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> w = <span class="built_in">window</span>.open(<span class="string">&#x27;http://192.168.43.112/anotherWayCrossOrigin/receiver.html&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>在弹出的窗口中，打开这个页面的页面向自己传递数据，达到跨域的效果</p><p> <code>Window.postMessage(data,url)</code></p><p> <code>data</code>:任意基本类型或者可以复制的对象，如果想要传递数组或对象可以用JSON数据</p><p> <code>url</code>:指定目标窗口的源(注意是源而不是某个文件，包括协议主机名和端口，除了这些以外的其他参数会被忽略)，会传给指定url下的任何页</p><p> 如果设置为<code>*</code>，则可以传递给任何窗口。如果设定为/，则只能传给与当前页面同源的文件</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;ha&#x27;</span>,<span class="string">&#x27;hey&#x27;</span>,<span class="string">&#x27;he&#x27;</span>]; <span class="built_in">window</span>.opener.postMessage(<span class="built_in">JSON</span>.stringify(arr),<span class="string">&quot;http://127.0.0.1//anotherWayCrossOrigin/index.html&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>在最初页面中，Window对象调用message事件异步处理接收到的信息</p><p> 可以利用该事件的事件对象的属性获取数据，其中包括: </p><ul><li><p><code>e.data</code> 接收到的数据</p></li><li><p><code>e.source</code> 数据源自的Window对象</p></li><li><p><code>e.origin</code>一个字符串，指定消息来源(URL格式)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(e.data));<span class="comment">// [&quot;ha&quot;, &quot;hey&quot;, &quot;he&quot;] </span></span><br><span class="line">    <span class="built_in">console</span>.log(e.source);<span class="comment">//Window对象</span></span><br><span class="line">    <span class="built_in">console</span>.log(e.origin);<span class="comment">//http://192.168.43.112</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ol><p><code>原理总结: 让接收信息的页面跑到发送信息的页面向自己发送信息 发送信息的页面必须是接收信息的页面打开的</code></p><p>跨域消息传递可用于解决以下方面的问题: </p><ul><li>iframe嵌套页面跨域通信</li><li>页面和其打开的新窗口的通信</li><li>多窗口之间消息传递</li></ul><h3 id="XMLHttpRequest2-0"><a href="#XMLHttpRequest2-0" class="headerlink" title="XMLHttpRequest2.0"></a>XMLHttpRequest2.0</h3><h4 id="1-快速格式化表单数据"><a href="#1-快速格式化表单数据" class="headerlink" title="1.快速格式化表单数据"></a>1.快速格式化表单数据</h4><p>利用FormData对象快速格式化form表单元素，然后作为发送主体传送</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sendData = <span class="keyword">new</span> FormData(<span class="built_in">document</span>.querySelector(<span class="string">&quot;form&quot;</span>)); xhr.send(sendData)；</span><br></pre></td></tr></table></figure><h4 id="2-ajax上传文件"><a href="#2-ajax上传文件" class="headerlink" title="2.ajax上传文件"></a>2.ajax上传文件</h4><p>在上面方法基础上在form中添加file表单即可</p><h4 id="3-上传进度监控-兼容性一般"><a href="#3-上传进度监控-兼容性一般" class="headerlink" title="3.上传进度监控(兼容性一般)"></a>3.上传进度监控(兼容性一般)</h4><p>利用xhr对象upload属性的progress事件的事件对象监听上传进度</p><p><code>upload</code>:代表上传过程</p><p><code>e.loaded</code>:已经上传的数据大小</p><p><code>e.total</code>:传输完成的数据大小</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xhr.upload.onprogress = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123; </span><br><span class="line">    <span class="comment">// console.log(e); </span></span><br><span class="line">    <span class="built_in">console</span>.log(e.loaded / e.total); </span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">&quot;.step&quot;</span>).style.width = ((e.loaded / e.total) * <span class="number">200</span>) + <span class="string">&#x27;px&#x27;</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web教程 </category>
          
          <category> AJAX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> AJAX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-router学习</title>
      <link href="/posts/ed3da/"/>
      <url>/posts/ed3da/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue-router"><a href="#Vue-router" class="headerlink" title="Vue-router"></a>Vue-router</h2><div class="note info"><p>文章中的资料来自:<a href="https://github.com/zhangtianyi0110/VueLearnNotes/blob/master/17-vue-router/17-vue-router.md">https://github.com/zhangtianyi0110/VueLearnNotes/blob/master/17-vue-router/17-vue-router.md</a></p><p>视频：<a href="https://www.bilibili.com/video/BV15741177Eh/?p=99">https://www.bilibili.com/video/BV15741177Eh/?p=99</a></p></div><h3 id="路由简介"><a href="#路由简介" class="headerlink" title="路由简介"></a>路由简介</h3><p>什么是路由？</p><ul><li>路由就是通过互联的网络把信息用源地址传送到目的地的活动</li><li>路由提供了两种机制：路由和传送<ul><li>路由是决定数据包从来源到目的地的路径</li><li>转送就是将数据转移</li></ul></li><li>路由表<ul><li>路由表本质就是一个映射表，决定了数据包的指向</li></ul></li></ul><h4 id="前端-后端路由"><a href="#前端-后端路由" class="headerlink" title="前端/后端路由"></a>前端/后端路由</h4><ol><li>后端渲染（服务端渲染） jsp技术 后端路由，后端处理URL和页面映射关系，例如springmvc中的@requestMapping注解配置的URL地址，映射前端页面</li><li>前后端分离（ajax请求数据） 后端只负责提供数据 静态资源服务器（html+css+js） ajax发送网络请求后端服务器，服务器回传数据 js代码渲染dom</li><li>单页面富应用（SPA页面） 前后端分离加上前端路由，前端路由的url映射表不会向服务器请求，是单独url的的页面自己的ajax请求后端，后端只提供api负责响应数据请求。改变url，页面不进行整体的刷新。 整个网站只有一个html页面。</li></ol><h4 id="URL的hash和HTML5的history"><a href="#URL的hash和HTML5的history" class="headerlink" title="URL的hash和HTML5的history"></a>URL的hash和HTML5的history</h4><h5 id="URL的hash"><a href="#URL的hash" class="headerlink" title="URL的hash"></a>URL的hash</h5><ul><li>URL的hash是通过锚点(#)，其本质上改变的是window.location的href属性。</li><li>可以通过直接赋值<code>location.hash</code>来改变href，但是<code>页面并不会发生刷新</code>。</li></ul><blockquote><p>测试</p></blockquote><p>使用命令<code>vue create 项目名称</code>创建新的vuecli4工程,等待创建完成后，使用<code>npm run serve</code>启动服务器，在浏览器通过 <a href="http://localhost:8080/">http://localhost:8080</a> 进入工程主页。 测试通过改变hash，查看是否会刷新页面，浏览器的url地址是否改变。</p><blockquote><p>结论</p></blockquote><p>测试发现url的地址栏改变了变成了<a href="http://localhost:8080/#/zykj">http://localhost:8080/#/zykj</a> ，通过查看network发现只有favicon.ico资源重新请求了，这个是工程的logo图标，其他资源都未请求。可以通过改变hash改变url，此时页面是未刷新的。</p><p>vue-router其实用的就是这样的机制，改变url地址，这个url地址存在一份路由映射表里面，比如<code>/user</code>代表要请求用户页面，只要配置了这个路由表（路由关系），就可以前端跳转而不刷新页面，所有的数据请求都走ajax。</p><h5 id="HTML5的history模式"><a href="#HTML5的history模式" class="headerlink" title="HTML5的history模式"></a>HTML5的history模式</h5><ul><li><p><code>pushState</code></p><p>  同样的使用HTML5的history模式也是不会刷新页面的,history对象<code>栈结构</code>，先进后出，pushState类似压入栈中，back是回退。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hristory.pushState(&#123;&#125;, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;/foo&#x27;</span>)</span><br><span class="line">history.back()</span><br></pre></td></tr></table></figure></li><li><p><code>replaceState</code></p><p>  replaceState模式与pushState模式区别在于replaceState模式浏览器<code>没有返回只是替换(不会保留记录)</code>，不是压入栈中。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">history.replaceState(&#123;&#125;, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;home&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>go</code></p><p>  go只能在pushState模式中使用，go是前进后退到哪个历史页面。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">history.go(<span class="number">-1</span>)<span class="comment">//回退一个页面</span></span><br><span class="line">history.go(<span class="number">1</span>)<span class="comment">//前进一个页面</span></span><br><span class="line">history.forward()<span class="comment">//等价于go(1)</span></span><br><span class="line">history.back()<span class="comment">//等价于go(-1)</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Vue-router安装配置"><a href="#Vue-router安装配置" class="headerlink" title="Vue-router安装配置"></a>Vue-router安装配置</h3><ol><li><p>使用<code>npm install vue-router --save</code>来安装vue-router插件模块</p></li><li><p>在模块化工程中使用它(因为是一个插件，所以可以通过Vue.use来安装路由功能)</p><ul><li>在src下创建一个router文件夹（一般安装vue-router时候会自动创建）用来存放vue-router的路由信息导入路由对象，并且调用<strong>Vue.use(VueRouter)</strong></li><li>创建路由实例，并且传入路由<strong>映射配置</strong></li><li>在vue实例中挂载创建的<strong>路由实例对象</strong></li></ul></li></ol><div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">router文件夹中的index.js</button></li><li class="tab"><button type="button" data-href="#tab1-2">main.js中挂载router对象</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置路由相关信息</span></span><br><span class="line"><span class="comment"> * 1.先导入vue实例和vue-router实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">&#x27;@/components/HelloWorld&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 通过Vue.use(插件)，安装插件</span></span><br><span class="line">Vue.use(Router)</span><br><span class="line"><span class="comment">//3. 创建 router路由对象</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  <span class="comment">//配置路由和组件之间的对应关系</span></span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/&#x27;</span>, <span class="comment">//url</span></span><br><span class="line">    name: <span class="string">&#x27;HelloWorld&#x27;</span>,</span><br><span class="line">    component: HelloWorld <span class="comment">//组件名</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  <span class="comment">//配置路由和组件之间的应用关系</span></span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//4.导出router实例</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  router,<span class="comment">//使用路由对象，简写对象增强写法</span></span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="Vue-router使用"><a href="#Vue-router使用" class="headerlink" title="Vue-router使用"></a>Vue-router使用</h3><h4 id="创建路由组件"><a href="#创建路由组件" class="headerlink" title="创建路由组件"></a>创建路由组件</h4><p>在components文件夹下创建2个组件。</p><div class="tabs" id="tab2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab2-1">Home组件</button></li><li class="tab"><button type="button" data-href="#tab2-2">About组件</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab2-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page-contianer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是首页<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是首页的内容,123456.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/ecmascript-6&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;Home&#x27;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab2-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page-contianer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是关于页面<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是关于页面的内容，about。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/ecmascript-6&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;About&#x27;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><h4 id="配置路由映射"><a href="#配置路由映射" class="headerlink" title="配置路由映射"></a>配置路由映射</h4><blockquote><p>组件和路径映射关系</p></blockquote><p>在路由与组件对应关系配置在<code>routes</code>中。修改index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;@/components/Home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 通过Vue.use(插件)，安装插件</span></span><br><span class="line">Vue.use(Router)</span><br><span class="line"><span class="comment">//3. 创建 router路由对象</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  <span class="comment">//配置路由和组件之间的对应关系</span></span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/home&#x27;</span>,<span class="comment">//home  前端路由地址</span></span><br><span class="line">    name: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">    component: Home <span class="comment">//组件名</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/about&#x27;</span>,<span class="comment">//about 前端路由地址</span></span><br><span class="line">    name: <span class="string">&#x27;About&#x27;</span>,</span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/components/About&#x27;</span>) <span class="comment">//懒加载组件</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  <span class="comment">//配置路由和组件之间的应用关系</span></span><br><span class="line">  routes  <span class="comment">// (缩写) 相当于 routes: routes</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//4.导出router实例</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h4 id="使用路由"><a href="#使用路由" class="headerlink" title="使用路由"></a>使用路由</h4><blockquote><p>通过<code>&lt;router-link&gt;</code>和<code>&lt;router-view&gt;</code></p></blockquote><p>在app.vue中使用<code>&lt;router-link&gt;</code>和<code>&lt;router-view&gt;</code> 两个全局组件显示路由。</p><ul><li><p><code>&lt;router-link&gt;</code>是全局组件，<code>最终被渲染成a标签</code>，但是<code>&lt;router-link&gt;</code>只是标记路由指向类似一个a标签或者按钮一样，但是我们点击a标签要跳转页面或者要显示页面，所以就要用上<code>&lt;router-view&gt;</code>。</p></li><li><p><code>&lt;router-view&gt;</code> 是用来占位的，就是路由对应的组件展示的地方，该标签会根据当前的路径，动态渲染出不同的组件。</p><p>  路由切换的时候切换的是<code>&lt;router-view&gt;</code>挂载的组件，其他不会发生改变。</p></li><li><p><code>&lt;router-view&gt;</code>默认使用<code>hash</code>模式，可以在index.js中mode配置修改为<code>history</code>模式。</p></li></ul><p>app.vue修改template</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用<code>npm run serve</code>启动项目，此时<code>&lt;router-view&gt;</code>在<code>&lt;router-link&gt;</code>下面，那渲染页面就在下面，此时未配置路由的默认值，所以第一次进入网页的时候<code>&lt;router-view&gt;</code>占位的地方是没有内容的。</p><h4 id="路由的默认值和history模式"><a href="#路由的默认值和history模式" class="headerlink" title="路由的默认值和history模式"></a>路由的默认值和history模式</h4><ul><li><p>路由的默认值，修改index.js的routes</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    redirect: <span class="string">&#x27;/home&#x27;</span> <span class="comment">//缺省时候重定向到/home</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//配置路由和组件之间的对应关系</span></span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/home&#x27;</span>, <span class="comment">//home  前端路由地址</span></span><br><span class="line">    name: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">    component: Home <span class="comment">//组件名</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/about&#x27;</span>, <span class="comment">//about 前端路由地址</span></span><br><span class="line">    name: <span class="string">&#x27;About&#x27;</span>,</span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/components/About&#x27;</span>) <span class="comment">//懒加载组件</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>  添加缺省值，并重定向到<code>/home</code>路径，此时打开<a href="http://localhost:8080/">http://localhost:8080</a> ，直接显示home组件内容。</p></li><li><p>修改hash模式为history模式，修改index.js的router对象</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  <span class="comment">//配置路由和组件之间的应用关系</span></span><br><span class="line">  routes,</span><br><span class="line">  mode: <span class="string">&#x27;history&#x27;</span><span class="comment">//修改模式为history</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>  此时发现浏览器地址栏的URL是没有<code>#</code>的。</p></li><li><p>小知识 <a href="https://router.vuejs.org/zh/guide/essentials/redirect-and-alias.html">重定向与别名</a></p><p>  重定向<code>redirect</code>:</p><p>  重定向也是通过 routes 配置来完成，下面例子:</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//从 /a 重定向到 /b：</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/a&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/b&#x27;</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//重定向的目标也可以是一个命名的路由：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/a&#x27;</span>, <span class="attr">redirect</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;foo&#x27;</span> &#125;&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//甚至是一个方法，动态返回重定向目标：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/a&#x27;</span>, <span class="attr">redirect</span>: <span class="function"><span class="params">to</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 方法接收 目标路由 作为参数</span></span><br><span class="line">      <span class="comment">// return 重定向的 字符串路径/路径对象</span></span><br><span class="line">    &#125;&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>  别名<code>alias:</code></p><p>  “重定向”的意思是，当用户访问 <code>/a</code>时，URL 将会被替换成 <code>/b</code>，然后匹配路由为 <code>/b</code>，那么“别名”又是什么呢？</p><p>  <strong><code>/a</code> 的别名是 <code>/b</code>，意味着，当用户访问 <code>/b</code> 时，URL 会保持为 <code>/b</code>，但是路由匹配则为 <code>/a</code>，就像用户访问 <code>/a</code> 一样。</strong></p></li></ul><h4 id="lt-router-link-gt-的其他属性"><a href="#lt-router-link-gt-的其他属性" class="headerlink" title="&lt;router-link&gt;的其他属性"></a><code>&lt;router-link&gt;</code>的其他属性</h4><ol><li><code>to</code>属性：用于跳转到指定路径。</li><li><code>tag</code>属性：可以指定<code>&lt;router-link&gt;</code>之后渲染成什么组件使用<code>&lt;router-link to=&#39;/home&#39; tag=&#39;button&#39;&gt;</code>会被渲染成一个按钮，而不是a标签。</li><li><code>replace</code>属性：在history模式下指定<code>&lt;router-link to=&#39;/home&#39; tag=&#39;button&#39; replace&gt;</code>使用<code>replaceState</code>而不是<code>pushState</code>，此时浏览器的返回按钮是不能使用的。</li><li><code>active-class</code>属性：当<code>&lt;router-link&gt;</code>对应的路由匹配成功的时候，会自动给当前元素设置一个<code>router-link-active</code>的class，设置active-class可以修改默认的名称。</li></ol><p>使用场景:</p><ul><li><p>在进行高亮显示的导航菜单或者底部tabbar时，会用到该属性</p></li><li><p>但是通常不会修改类的属性，会直接使用默认的<code>router-link-active</code></p></li><li><p><code>&lt;router-link to=&#39;/home&#39; tag=&#39;button&#39; active-class=&#39;active&#39;&gt;</code>此时被选中的<code>&lt;router-link&gt;</code>就会有active的class。</p></li><li><p>如果每个<code>&lt;router-link&gt;</code>都要加上<code>active-class=&#39;active&#39;</code>，那就在路由里面统一更改。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  <span class="comment">//配置路由和组件之间的应用关系</span></span><br><span class="line">  routes,</span><br><span class="line">  mode: <span class="string">&#x27;history&#x27;</span>,<span class="comment">//修改模式为history</span></span><br><span class="line">  linkActiveClass: <span class="string">&#x27;active&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">tag</span>=<span class="string">&#x27;button&#x27;</span> <span class="attr">replace</span> <span class="attr">active-class</span>=<span class="string">&#x27;active&#x27;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">active-class</span>=<span class="string">&#x27;active&#x27;</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;App&#x27;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.active</span> &#123;</span></span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  修改app.vue文件此时被选中的<code>&lt;router-link&gt;</code>就有了active属性，给active的class加上字体变红的css。</p></li></ul><h4 id="通过代码修改路由跳转"><a href="#通过代码修改路由跳转" class="headerlink" title="通过代码修改路由跳转"></a>通过代码修改路由跳转</h4><p><code>$router属性</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;router-link to=&quot;/home&quot; tag=&#x27;button&#x27; replace active-class=&#x27;active&#x27;&gt;首页&lt;/router-link&gt; |</span></span><br><span class="line"><span class="comment">    &lt;router-link to=&quot;/about&quot; active-class=&#x27;active&#x27;&gt;关于&lt;/router-link&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;homeClick&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">button</span>&gt;</span>|</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;aboutClick&quot;</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    homeClick() &#123;<span class="comment">//通过代码的路径修改路由</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$router.push(<span class="string">&#x27;/home&#x27;</span>)<span class="comment">//push 等价于pushState</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// this.$router.replace(&#x27;/home&#x27;)//replace 等价于replaceState</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;homeClick&quot;</span>)</span></span><br><span class="line">    &#125;,</span><br><span class="line">    aboutClick() &#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$router.push(<span class="string">&#x27;/about&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      <span class="comment">// this.$router.replace(&#x27;/about&#x27;)//replace 等价于replaceState</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;aboutClick&quot;</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.active</span> &#123;</span></span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改app.vue，将<code>&lt;router-link&gt;</code>换成<code>button</code>等任何组件，添加上点击事件，并写好点击事件响应方法，此时使用<code>this.$router.push(&#39;/home&#39;)</code>，push方法 等价于pushState方法，replace 方法等价于replaceState方法。</p><p>为避免之后使用<code>this.$router.push</code>重复点击一个路由报错</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200715213324.png" alt="20200715213324.png"></p><p>所以我们要在<code>router/index.js</code>添加、问题参考: <a href="https://blog.csdn.net/qq_41687299/article/details/106869943">https://blog.csdn.net/qq_41687299/article/details/106869943</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> originalPush = VueRouter.prototype.push</span><br><span class="line">VueRouter.prototype.push = <span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">location</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> originalPush.call(<span class="built_in">this</span>, location).catch(<span class="function"><span class="params">err</span> =&gt;</span> err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>router.push(location, onComplete?, onAbort?)</code></p><p>  <strong>注意：在 Vue 实例内部，你可以通过 <code>$router</code> 访问路由实例。因此你可以调用 <code>this.$router.push</code>。</strong></p><p>  想要导航到不同的 URL，则使用 <code>router.push</code> 方法。这个方法会向 history 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，则回到之前的 URL。</p><p>  当你点击 <code>&lt;router-link&gt;</code> 时，这个方法会在内部调用，所以说，点击 <code>&lt;router-link :to=&quot;...&quot;&gt;</code> 等同于调用 <code>router.push(...)</code>。</p><table><thead><tr><th>声明式</th><th>编程式</th></tr></thead><tbody><tr><td><code>&lt;router-link :to=&quot;...&quot;&gt;</code></td><td><code>router.push(...)</code></td></tr></tbody></table><p>该方法的参数可以是一个字符串路径，或者一个描述地址的对象。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串</span></span><br><span class="line">router.push(<span class="string">&#x27;home&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象</span></span><br><span class="line">router.push(&#123; <span class="attr">path</span>: <span class="string">&#x27;home&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命名的路由</span></span><br><span class="line">router.push(&#123; <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>, <span class="attr">params</span>: &#123; <span class="attr">userId</span>: <span class="string">&#x27;123&#x27;</span> &#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带查询参数，变成 /register?plan=private</span></span><br><span class="line">router.push(&#123; <span class="attr">path</span>: <span class="string">&#x27;register&#x27;</span>, <span class="attr">query</span>: &#123; <span class="attr">plan</span>: <span class="string">&#x27;private&#x27;</span> &#125;&#125;)</span><br></pre></td></tr></table></figure><p><strong>注意：如果提供了 <code>path</code>，<code>params</code> 会被忽略，上述例子中的 <code>query</code> 并不属于这种情况。取而代之的是下面例子的做法，你需要提供路由的 <code>name</code> 或手写完整的带有参数的 <code>path</code>：</strong></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userId = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">router.push(&#123; <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>, <span class="attr">params</span>: &#123; userId &#125;&#125;) <span class="comment">// -&gt; /user/123</span></span><br><span class="line">router.push(&#123; <span class="attr">path</span>: <span class="string">`/user/<span class="subst">$&#123;userId&#125;</span>`</span> &#125;) <span class="comment">// -&gt; /user/123</span></span><br><span class="line"><span class="comment">// 这里的 params 不生效</span></span><br><span class="line">router.push(&#123; <span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span>, <span class="attr">params</span>: &#123; userId &#125;&#125;) <span class="comment">// -&gt; /user</span></span><br></pre></td></tr></table></figure><p>  同样的规则也适用于 <code>router-link</code> 组件的 <code>to</code> 属性。</p></li></ul><ul><li><p><code>router.replace(location, onComplete?, onAbort?)</code></p><p>  跟 <code>router.push</code> 很像，唯一的不同就是，它不会向 history 添加新记录，而是跟它的方法名一样 —— 替换掉当前的 history 记录。</p><table><thead><tr><th>声明式</th><th>编程式</th></tr></thead><tbody><tr><td><code>&lt;router-link :to=&quot;...&quot; replace&gt;</code></td><td><code>router.replace(...)</code></td></tr></tbody></table></li><li><p><code>router.go(n)</code></p><p>  这个方法的参数是一个整数，意思是在 history 记录中向前或者后退多少步，类似 <code>window.history.go(n)</code>。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在浏览器记录中前进一步，等同于 history.forward()</span></span><br><span class="line">router.go(<span class="number">1</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 后退一步记录，等同于 history.back()</span></span><br><span class="line">router.go(<span class="number">-1</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 前进 3 步记录</span></span><br><span class="line">router.go(<span class="number">3</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 如果 history 记录不够用，那就默默地失败呗</span></span><br><span class="line">router.go(<span class="number">-100</span>)</span><br><span class="line">router.go(<span class="number">100</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="渐入Vue-router"><a href="#渐入Vue-router" class="headerlink" title="渐入Vue-router"></a>渐入Vue-router</h3><h4 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h4><p>一个页面的path路径可能是不确定的，例如可能有<code>/user/aaaa</code>或者<code>/user/bbbb</code>，除了<code>/user</code>之外，后面还跟上了用户ID<code>/user/123</code>等。这种path和component的匹配关系，叫<code>动态路由</code>。</p><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><div class="tabs" id="tab3"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab3-1">新建一个User组件</button></li><li class="tab"><button type="button" data-href="#tab3-2">配置路由参数index.js</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab3-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是用户界面<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是用户页面的内容。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户ID是: &#123;&#123; userId &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;User&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="comment">//通过计算属性  </span></span></span><br><span class="line">  computed:&#123;</span><br><span class="line">    userId() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="built_in">this</span>.$route.params.userId</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>该组件定义一个计算属性，通过<code>this.$route.params.userId</code>获取处于激活状态的路由参数<code>userId</code>。</p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab3-2"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">//通过path定义动态参数</span></span><br><span class="line">    path: <span class="string">&#x27;/user/:userId&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;User&#x27;</span>,</span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/components/User&#x27;</span>) <span class="comment">//懒加载组件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>:userId</code>指定动态路由参数<code>userId</code>。</p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>app.vue中添加user页面的<code>&lt;router-link&gt;</code>，并添加userId变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link :to&#x3D;&quot;&#x2F;user&#x2F; + userId&quot;&gt;用户&lt;&#x2F;router-link&gt;</span><br><span class="line"></span><br><span class="line">data ()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        userId: &#39;zykj&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动项目，点击用户。</p><h5 id="响应路由参数的变化"><a href="#响应路由参数的变化" class="headerlink" title="响应路由参数的变化"></a>响应路由参数的变化</h5><p>当使用路由参数时，例如从 <code>/user/foo</code> 导航到 <code>/user/bar</code>，<strong>原来的组件实例会被复用</strong>。因为两个路由都渲染同个组件，比起销毁再创建，复用则显得更加高效。<strong>不过，这也意味着组件的生命周期钩子不会再被调用</strong>。</p><h5 id="捕获所有路由或-404-Not-found-路由"><a href="#捕获所有路由或-404-Not-found-路由" class="headerlink" title="捕获所有路由或 404 Not found 路由"></a>捕获所有路由或 404 Not found 路由</h5><p>常规参数只会匹配被 <code>/</code> 分隔的 URL 片段中的字符。如果想匹配<strong>任意路径</strong>，我们可以使用通配符 (<code>*</code>)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 会匹配所有路径</span></span><br><span class="line">  path: <span class="string">&#x27;*&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 会匹配以 /user- 开头的任意路径</span></span><br><span class="line">  path: <span class="string">&#x27;/user-*&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p><code>$route</code>是代表处于激活状态的路由，这里指的也就是</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: <span class="string">&#x27;/user/:userId&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;User&#x27;</span>,</span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/components/User&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>$route.params</code>获取 <code>$route</code> 所有的参数，<code>$route.params.userId</code>，获取所有参数中的名字叫<code>userId</code>的属性，此时可以在User组件中动态获取路由参数，也就可以在app.vue中动态设置路由中的<code>userId</code>，其他属性请参考 <code>$route</code> 。</p><h4 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h4><p>平常在一个home页面中，我们可能需要<code>/home/news</code>和<code>/home/message</code>访问一些内容，一个路由映射一个组件就像后端一个api对应一个controller的一个requestMapping一样，访问两个路由也会分别渲染这两个组件。</p><p>要实现嵌套路由：</p><ol><li>创建对应的子组件，并且在路由映射(<code>router/index.js</code>)中配置对应的子路由。</li><li>在组件内部使用<code>&lt;router-view&gt;</code>标签来占位。</li></ol><div class="tabs" id="tab4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab4-1">新建2个组件HomeNews和HomeMessage</button></li><li class="tab"><button type="button" data-href="#tab4-2">配置嵌套路由</button></li><li class="tab"><button type="button" data-href="#tab4-3">修改Home.vue</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab4-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123; item + index + 1 &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;HomeNews&#x27;</span>,</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      list: [<span class="string">&#x27;新闻&#x27;</span>, <span class="string">&#x27;新闻&#x27;</span>, <span class="string">&#x27;新闻&#x27;</span>, <span class="string">&#x27;新闻&#x27;</span>]</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123; item + index + 1 &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;HomeMessage&#x27;</span>,</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      list: [<span class="string">&#x27;消息&#x27;</span>, <span class="string">&#x27;消息&#x27;</span>, <span class="string">&#x27;消息&#x27;</span>, <span class="string">&#x27;消息&#x27;</span>]</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab4-2"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: <span class="string">&#x27;/home&#x27;</span>,<span class="comment">//home  前端路由地址</span></span><br><span class="line">    name: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">    component: Home, <span class="comment">//组件名</span></span><br><span class="line">    <span class="comment">//chidren 子路由</span></span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        redirect: <span class="string">&#x27;/home/news&#x27;</span> <span class="comment">//缺省时候重定向到/home/news</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&#x27;news&#x27;</span>, <span class="comment">//子嵌套路由 无须加/</span></span><br><span class="line">        name: <span class="string">&#x27;News&#x27;</span>,</span><br><span class="line">        component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/components/HomeNews&#x27;</span>) <span class="comment">//懒加载组件</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;Message&#x27;</span>,</span><br><span class="line">        component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/components/HomeMessage&#x27;</span>) <span class="comment">//懒加载组件</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab4-3"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page-contianer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是首页<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是首页的内容,123456.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home/news&quot;</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span>|</span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home/message&quot;</span>&gt;</span>消息<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><h4 id="打包文件解析"><a href="#打包文件解析" class="headerlink" title="打包文件解析"></a>打包文件解析</h4><blockquote><p>问题：打包时候js太大，页面响应缓慢</p></blockquote><p>如果组件模块化了，当路由被访问的时候才开始加载被选中的组件，这样就是懒加载</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写法1:</span></span><br><span class="line">component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/components/User&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//写法2:</span></span><br><span class="line"><span class="keyword">const</span> User = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/components/User&#x27;</span>)</span><br></pre></td></tr></table></figure><p>使用<code>npm run build</code>命令将之前创建的项目打包，打开dist文件夹，目录结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- dist</span><br><span class="line">- - index.html</span><br><span class="line">- - css</span><br><span class="line">- - js</span><br><span class="line">- - - app.xxx.js</span><br><span class="line">- - - mainfest.xxx.js</span><br><span class="line">- - - vendor.xxx.js</span><br></pre></td></tr></table></figure><ul><li><code>app.xxx.js</code>是我们自己编写的业务代码</li><li><code>vendor.xxx.js</code>是第三方框架，例如vue/vue-router/axios等</li><li><code>mainfest.xxx.js</code>是为了打包的代码做底层支持的，一般是webpack帮我们做一些事情</li><li>除了这三个还多了2个js，这2个js文件（0.5bxxx.js和1.e5xxx.js）分别是About和User组件，<code>因为这2个组件是懒加载的所以被分开打包了</code>。</li></ul><p>此时因为是懒加载，需要用到这个组件的时候才会加载，所以不会一次性请求所有js。</p><h4 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h4><p>动态路由说的<code>userId</code>也是参数传递的方式的一种，准备新建一个<code>Profile.vue</code>组件，并配置路由映射，添加指定的<code>&lt;router-link&gt;</code>。</p><div class="tabs" id="tab5"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab5-1">前期准备</button></li><li class="tab"><button type="button" data-href="#tab5-2">在app.vue中设置初始的对象profileInfo</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab5-1"><p><code>Profile.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是档案界面<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是档案页面的内容。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>档案的名字是: &#123;&#123; profileInfo.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>档案的年龄是: &#123;&#123; profileInfo.age &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>档案的身高是: &#123;&#123; profileInfo.height &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;Profile&#x27;</span>,</span></span><br><span class="line">  computed: &#123;</span><br><span class="line">    profileInfo() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="built_in">this</span>.$route.query.profileInfo</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>router/index.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: <span class="string">&#x27;/profile&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;Profile&#x27;</span>,</span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/components/Profile&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>App.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123; path: &#x27;/profile&#x27;, query: &#123; profileInfo &#125; &#125;&quot;</span>&gt;</span>档案<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab5-2"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">data ()&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      userId: <span class="string">&#x27;zykj&#x27;</span>,</span><br><span class="line">      profileInfo: &#123;</span><br><span class="line">        name: <span class="string">&quot;zykj&quot;</span>,</span><br><span class="line">        age: <span class="number">18</span>,</span><br><span class="line">        height: <span class="number">177</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note info"><p>传递参数主要有两种类型：<code>params</code>和<code>query</code></p></div><blockquote><p><code>params</code>的类型也就是动态路由形式</p></blockquote><ul><li>配置路由的格式：<code>/user/:userId</code> <code>:xxx</code>代表参数</li><li>传递的方式：在path后面跟上对应的userId</li><li>传递形成的路径：<code>/user/123</code>，<code>/user/xxx</code></li><li>通过<code>$route.params.userId</code>获取指定userId</li></ul><blockquote><p><code>query</code>的类型</p></blockquote><ul><li>配置路由的格式：<code>/profile</code>，也就是普通的配置</li><li>传递的方式：对象中使用query的key作为传递的方式</li><li>传递形成的路径：<code>/profile?name=zty&amp;age=24&amp;height=177</code>（这个传递的是三个键值对），<code>/profile?profileInfo=%5Bobject%20Object%5D</code>（这个query传递的是一个对象的键值对，key为profileInfo，value是一个对象）</li></ul><p>使用代码编写<code>传递数据</code>，使用<code>button</code>代替<code>&lt;router-link&gt;</code>，并添加点击事件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;userClick&quot;</span>&gt;</span>用户<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;profileClick&quot;</span>&gt;</span>档案<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">userClick() &#123;</span><br><span class="line">    <span class="built_in">this</span>.$router.push(<span class="string">&#x27;/user/&#x27;</span> + <span class="built_in">this</span>.userId)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;userClick&quot;</span>)</span><br><span class="line">&#125;,</span><br><span class="line">profileClick() &#123;</span><br><span class="line">    <span class="keyword">let</span> profileInfo = <span class="built_in">this</span>.profileInfo</span><br><span class="line">    <span class="built_in">this</span>.$router.push(&#123;</span><br><span class="line">        path: <span class="string">&#x27;/profile&#x27;</span>,</span><br><span class="line">        query: &#123;</span><br><span class="line">            profileInfo</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;profileClick&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="命名视图"><a href="#命名视图" class="headerlink" title="命名视图"></a>命名视图</h4><blockquote><p><a href="https://router.vuejs.org/zh/guide/essentials/named-views.html">官网引用</a></p></blockquote><p>有时候想同时 (同级) 展示多个视图，而不是嵌套展示，例如创建一个布局，有 <code>sidebar</code> (侧导航) 和 <code>main</code> (主内容) 两个视图，这个时候命名视图就派上用场了。你可以在界面中拥有多个单独命名的视图，而不是只有一个单独的出口。如果 <code>router-view</code> 没有设置名字，那么默认为 <code>default</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">class</span>=<span class="string">&quot;view one&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">class</span>=<span class="string">&quot;view two&quot;</span> <span class="attr">name</span>=<span class="string">&quot;a&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">class</span>=<span class="string">&quot;view three&quot;</span> <span class="attr">name</span>=<span class="string">&quot;b&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一个视图使用一个组件渲染，因此对于同个路由，多个视图就需要多个组件。确保正确使用 <code>components</code> 配置 (带上 s)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      components: &#123;</span><br><span class="line">        <span class="keyword">default</span>: Foo,</span><br><span class="line">        a: Bar,</span><br><span class="line">        b: Baz</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>最终会在一个视图中显示多个组件</p><h4 id="router和route的由来"><a href="#router和route的由来" class="headerlink" title="router和route的由来"></a>router和route的由来</h4><blockquote><p>$router</p></blockquote><p>vue全局对象<code>this.$router</code>与<code>main.js</code>导入的router对象是一个对象，也就是我们<code>router/index.js</code>导出的对象router。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  router,<span class="comment">//使用路由对象</span></span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//router/index.js</span></span><br><span class="line"><span class="comment">//导出router实例</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><blockquote><p>$route</p></blockquote><p><code>this.$route</code>对象是<code>当前处于活跃的路由</code>，有<code>params</code>和<code>query</code>属性可以用来传递参数。</p><p>查看<code>vue-router</code>源码,在我们项目中的<code>router/index.js</code>中，vue 对于插件必须要使用<code>Vue.use(Router)</code>，来安装插件，也就是执行vue-router的<code>install.js</code>。</p><p>在<a href="https://github.com/vuejs/vue-router/tree/dev/src">vue-router的github</a>源码中查看src结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- xxx</span><br><span class="line">- index.js</span><br><span class="line">- install.js</span><br></pre></td></tr></table></figure><p>其中<code>index.js</code>是入口文件，入口js文件就是导入并执行了<code>install.js</code>文件。</p><p><code>install.js</code>中有注册2个全局组件<code>RouterView</code>和<code>RouterLink</code>，所以我们能使用<code>&lt;router-view&gt;</code>和<code>&lt;router-link&gt;</code>组件。</p><blockquote><p>$router 和 $route 是继承自vue的原型</p></blockquote><p>怎么理解原型？学过java 的都知道有父类和子类，子类也可以有自己的子类，但是他们都有一个处于最顶层的类Object(所有类的父类)。在Vue中就有那一个<code>Vue</code>类似Object，在java中在Object中定义的方法，所有的类都可以使用可以重写，类似的<code>Vue.prototype</code>（Vue的原型）定义的属性方法，他的原型链上的对象都可以使用，而<code>$router</code>和<code>$route</code>都在Vue的原型链上。</p><p>在main.js入口文件中在Vue的原型上定义一个方法test，然后在User组件中尝试调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在vue的原型上添加test方法</span></span><br><span class="line">Vue.prototype.test = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  router,<span class="comment">//使用路由对象</span></span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是用户界面<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是用户页面的内容。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户ID是: &#123;&#123; userId &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;User&#x27;</span>,</span></span><br><span class="line">  computed:&#123;</span><br><span class="line">    userId() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="built_in">this</span>.$route.params.userId</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    btnClick() &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">//所有组件都继承自vue的原型</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.$router)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.$route)</span></span><br><span class="line"><span class="javascript">      <span class="comment">//调用vue原型的test</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.test()</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动项目点击User页面上的按钮，打开浏览器控制台查看日志发现test方法被执行了，而User组件中并未定义test方法，却可以调用。</p><br/><p>继续来读install.js，install.js中一开始就将<code>Vue</code>这个类当参数传入了install方法中，并把<code>Vue</code>赋值给<code>_Vue</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">install</span> (<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (install.installed &amp;&amp; _Vue === Vue) <span class="keyword">return</span></span><br><span class="line">  install.installed == <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line">  _Vue = Vue  </span><br></pre></td></tr></table></figure><p>继续读install.js发现以下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(Vue.prototype, <span class="string">&#x27;$router&#x27;</span>, &#123;</span><br><span class="line">    get () &#123; <span class="keyword">return</span> <span class="built_in">this</span>._routerRoot._router &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//Object.defineProperty用来定义属性</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(Vue.prototype, <span class="string">&#x27;$route&#x27;</span>, &#123;</span><br><span class="line">    get () &#123; <span class="keyword">return</span> <span class="built_in">this</span>._routerRoot._route &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>Object.defineProperty</code>用来定义属性，以上代码就是给<code>Vue.prototype</code>(Vue原型)添加<code>$router</code>和<code>$route</code>属性并给属性赋值，等价于</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.$router = &#123;</span><br><span class="line">  get () &#123; <span class="keyword">return</span> <span class="built_in">this</span>._routerRoot._router &#125;</span><br><span class="line">&#125;</span><br><span class="line">Vue.prototype.$router = &#123;</span><br><span class="line">  get () &#123; <span class="keyword">return</span> <span class="built_in">this</span>._routerRoot._router &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是在Vue的原型上添加<code>$router</code>和<code>$route</code>属性,再查看get()返回值<code>this._routerRoot._router</code></p><p>这里的<code>this.$options.router</code>就是我们main.js入口文件传入的参数<code>router</code>，也就是router/index.js导出的<code>router</code>对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  router,<span class="comment">//使用路由对象</span></span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Vue-router进阶"><a href="#Vue-router进阶" class="headerlink" title="Vue-router进阶"></a>Vue-router进阶</h3><h4 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h4><p>问题：我们经常需要在路由跳转后，例如从用户页面跳转到首页，页面内容虽然可以自己定义，但是只有一个html文件，也只有一个title标签，我们需要改变标题。</p><p>可以使用js去修改title，可以使用vue的生命周期函数在组件被创建的时候修改title标签内容。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">created() &#123;</span><br><span class="line">    <span class="comment">//创建的时候修改title</span></span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">&#x27;关于&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">mounted() &#123;</span><br><span class="line">    <span class="comment">//数据被挂载到dom上的时候修改title</span></span><br><span class="line">&#125;</span><br><span class="line">update() &#123;</span><br><span class="line">    <span class="comment">//页面刷新的时候修改</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然不能每个组件去写生命周期函数，如果我们能监听路由的变化(了解路由从哪来往哪里跳转)，那我们就能在跳转中修改title标签，这就是导航守卫能做的事情。</p><p>修改<code>router/index.js</code></p><blockquote><p>router.beforeEach()称为前置钩子(前置守卫)，顾名思义，跳转之前做一些处理。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前置钩子：从from跳转到to</span></span><br><span class="line"><span class="comment"> * from 来的路由</span></span><br><span class="line"><span class="comment"> * to 要去的路由</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.title = to.matched[<span class="number">0</span>].meta.title <span class="comment">//给目标路由的页面的title赋值</span></span><br><span class="line">  next()<span class="comment">//必须调用，不调用不会跳转</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当然每个路由配置上也要加上meta属性，不然就取不到了，为什么要使用<code>matched[0]</code>，因为如果你是嵌套路由，有没有给子路由添加meta（元数据：描述数据的数据）属性，就会显示<code>undefined</code>，使用<code>matched[0]</code>表示取到匹配的第一个就会找到父路由的meta属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">//配置路由和组件之间的对应关系</span></span><br><span class="line">    path: <span class="string">&#x27;/home&#x27;</span>,<span class="comment">//home  前端路由地址</span></span><br><span class="line">    name: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">    component: Home, <span class="comment">//组件名</span></span><br><span class="line">    <span class="comment">//添加 meta 元数据</span></span><br><span class="line">    meta: &#123;</span><br><span class="line">        title: <span class="string">&#x27;首页&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    children: [</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            redirect: <span class="string">&#x27;/home/news&#x27;</span><span class="comment">//缺省时候重定向到/home/news</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">&#x27;news&#x27;</span>,<span class="comment">//子嵌套路由 无须加/</span></span><br><span class="line">            name: <span class="string">&#x27;News&#x27;</span>,</span><br><span class="line">            component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/components/HomeNews&#x27;</span>) <span class="comment">//懒加载组件</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">            name: <span class="string">&#x27;Message&#x27;</span>,</span><br><span class="line">            component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/components/HomeMessage&#x27;</span>) <span class="comment">//懒加载组件</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动服务测试功能</p><p>前面说了前置守卫<code>router.beforeEach()</code>，相对的应该也存在后置守卫(后置钩子)。</p><blockquote><p>router.afterEach()称为后置守卫(后置钩子)，顾名思义，也就是在跳转之后的回调函数。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 后置钩子</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">router.afterEach(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;后置钩子调用了----&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>路由独享守卫，路由私有的</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: <span class="string">&#x27;/about&#x27;</span>,<span class="comment">//about 前端路由地址</span></span><br><span class="line">    name: <span class="string">&#x27;About&#x27;</span>,</span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/components/About&#x27;</span>),</span><br><span class="line">    beforeEnter: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;来自&#x27;</span> + <span class="keyword">from</span>.path + <span class="string">&#x27;,要去&#x27;</span> + to.path)</span><br><span class="line">      next()</span><br><span class="line">    &#125;,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: <span class="string">&#x27;关于&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>beforeEnter</code>的参数与全局守卫一样，修改<code>about</code>路由的参数，添加路由独享守卫，此时只有跳转到<code>about</code>路由，才会打印日志。</p><blockquote><p>组件内的守卫，直接在组件中定义的属性</p></blockquote><ul><li><code>beforeRouteEnter</code></li><li><code>beforeRouteUpdate</code> (2.2 新增)</li><li><code>beforeRouteLeave</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Foo = &#123;</span><br><span class="line">  template: <span class="string">`...`</span>,</span><br><span class="line">  beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 在渲染该组件的对应路由被 confirm 前调用</span></span><br><span class="line">    <span class="comment">// 不！能！获取组件实例 `this`</span></span><br><span class="line">    <span class="comment">// 因为当守卫执行前，组件实例还没被创建</span></span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteUpdate (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 在当前路由改变，但是该组件被复用时调用</span></span><br><span class="line">    <span class="comment">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span></span><br><span class="line">    <span class="comment">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span><br><span class="line">    <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 导航离开该组件的对应路由时调用</span></span><br><span class="line">    <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>beforeRouteEnter</code> 守卫 <strong>不能</strong> 访问 <code>this</code>，因为守卫在导航确认前被调用,因此即将登场的新组件还没被创建。</p><p>不过，你可以通过传一个回调给 <code>next</code>来访问组件实例。在导航被确认的时候执行回调，并且把组件实例作为回调方法的参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">  next(<span class="function"><span class="params">vm</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 通过 `vm` 访问组件实例</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意 <code>beforeRouteEnter</code> 是支持给 <code>next</code> 传递回调的唯一守卫。对于 <code>beforeRouteUpdate</code> 和 <code>beforeRouteLeave</code> 来说，<code>this</code> 已经可用了，所以<strong>不支持</strong>传递回调，因为没有必要了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteUpdate (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">  <span class="comment">// just use `this`</span></span><br><span class="line">  <span class="built_in">this</span>.name = to.params.name</span><br><span class="line">  next()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个离开守卫<code>通常用来禁止用户在还未保存修改前突然离开</code>。该导航可以通过 <code>next(false)</code> 来取消。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteLeave (to, <span class="keyword">from</span> , next) &#123;</span><br><span class="line">  <span class="keyword">const</span> answer = <span class="built_in">window</span>.confirm(<span class="string">&#x27;Do you really want to leave? you have unsaved changes!&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (answer) &#123;</span><br><span class="line">    next()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next(<span class="literal">false</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结:</p><ul><li>前置守卫和后置守卫都是<strong>全局守卫</strong></li><li><a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E8%B7%AF%E7%94%B1%E7%8B%AC%E4%BA%AB%E7%9A%84%E5%AE%88%E5%8D%AB">路由独享守卫</a></li><li><a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E7%BB%84%E4%BB%B6%E5%86%85%E7%9A%84%E5%AE%88%E5%8D%AB">组件内的守卫</a></li></ul><h3 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h3><p>先给Home组件加上<code>created()</code>和<code>destoryed()</code>2个生命周期函数。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;Home&#x27;</span>,</span></span><br><span class="line">  created() &#123;</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;Home组件被创建了&#x27;</span>)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  destoryed() &#123;</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;Home组件被销毁了&#x27;</span>)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>某个问题的分析</strong></p><p>在首页和关于组件之间路由跳转的时候，Home组件一直重复创建和销毁的过程，每次创建都是新的Home组件，但是我有这样的需求。当我点击首页消息页面，随后跳转到关于页面，又跳转到首页，此时我希望显示的是首页的消息页面而不是默认的新闻页面，此时就需要<code>keep-alive</code>来使组件保持状态，缓存起来，离开路由后，Home组件生命周期的<code>destroyed()</code>不会被调用，Home组件不会被销毁。</p><ul><li><code>keep-alive</code>是Vue内置的一个组件，可以使被包含的组件保留状态，或者避免重新渲染。</li><li><code>router-view</code>也是一个组件，如果用<code>&lt;keep-alive&gt;&lt;router-vie/&gt;&lt;/keep-alive&gt;</code>，将其包起来，所有路径匹配到的视图组件都会被缓存。</li></ul><p><strong>修改<code>app.vue</code>代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再次启动项目，发现还是新闻页面？难道是<code>keep-alive</code>无效？</p><p>仔细看控制台发现，在跳转关于页面的时候Home组件并没有被销毁，说明<code>keep-alive</code>生效了。仔细查看路由配置发现，<code>/home</code>被默认重定向到了<code>/home/news</code>。所以在访问<code>/home</code>的时候每次出来的都是新闻。</p><p><strong>思路</strong></p><ul><li><p>将默认的重定向去掉，但是第一次进入首页，那新闻页面内容又不会显示了。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   path: &#x27;&#x27;,</span></span><br><span class="line"><span class="comment">//   redirect: &#x27;/home/news&#x27;//缺省时候重定向到/home/news</span></span><br><span class="line"><span class="comment">// &#125;,</span></span><br></pre></td></tr></table></figure></li><li><p>为了第一次能使新闻页面内容显示，可以使用<code>created()</code>，将路由用代码的方式手动重定向，也就是push。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">created() &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Home组件被创建了&#x27;</span>)</span><br><span class="line">  <span class="built_in">this</span>.$router.push(<span class="string">&#x27;/home/news&#x27;</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>由于<code>keep-alive</code>组件只创建一次，第一次进入Home组件的时候，新闻页面显示正常，当第二次跳转首页的时候，因为不会再调用<code>created()</code>，所以新闻页面又不会显示了。</p></li><li><p>为了解决问题，在Home组件中引入<code>activated()</code>和<code>deactivated()</code>两个函数，这2个函数与<code>keep-alive</code>有关，不使用<code>keep-alive</code>的这两个函数无效。</p><ul><li><code>activated()</code>当组件属于进入活跃状态的时候调用</li><li><code>deactivated()</code>当组件属于退出活跃状态的时候调用(此时路由已经跳转，所以不能在此方法中修改路由，因为修改的是to路由)</li></ul></li><li><p>为了使第二次进入首页新闻页面可以生效，使用<code>activated()</code>在Home组件使活跃状态时候就重定向</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        path: <span class="string">&#x27;/home/news&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">activated()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;调用actived&#x27;</span>)</span><br><span class="line">    <span class="built_in">this</span>.$router.push(<span class="built_in">this</span>.path)<span class="comment">//在活跃的时候将保存的路由给当前路由</span></span><br><span class="line">&#125;,</span><br><span class="line">deactivated()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;调用actived&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.$route.path)</span><br><span class="line">    <span class="built_in">this</span>.path = <span class="built_in">this</span>.$route.path<span class="comment">//变成不活跃状态，将最后的路由保存起来</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>发现还是不行，由于<code>deactivated()</code>调用的时候，此时路由已经跳转，所以不能在此方法中修改路由，因为修改的是to路由。</p></li><li><p>使用路由守卫(组件内守卫)，<code>beforeRouteLeave (to, from , next)</code>在离开路由的时候将当前的路由赋值给path并保存起来。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">activated()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;调用actived&#x27;</span>)</span><br><span class="line">    <span class="built_in">this</span>.$router.push(<span class="built_in">this</span>.path)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// deactivated()&#123;</span></span><br><span class="line"><span class="comment">//   console.log(&#x27;调用actived&#x27;)</span></span><br><span class="line"><span class="comment">//   console.log(this.$route.path)</span></span><br><span class="line"><span class="comment">//   this.path = this.$route.path</span></span><br><span class="line"><span class="comment">// &#125;,</span></span><br><span class="line">beforeRouterLeave(to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.$route.path)</span><br><span class="line">    <span class="built_in">this</span>.path = <span class="built_in">this</span>.$route.path</span><br><span class="line">    next()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  此时问题完全解决了。</p></li></ul><blockquote><p>keep-alive的属性</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们将<code>&lt;router-view/&gt;</code>包起来，那所有的组件都会缓存，都只会创建一次，如果我们需要某一个组件每次都创建销毁，就需要使用<code>exclude</code>属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">exclude</span>=<span class="string">&#x27;Profile,User&#x27;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时<code>Profile</code>和<code>User</code>组件（这里组件需要有name属性，分别为<code>Profile</code>和<code>User</code>）就被排除在外，每次都会创建和销毁。相对应的也有<code>include</code>属性，顾名思义就是包含，只有选中的才有<code>keep-alive</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">include</span>=<span class="string">&#x27;Profile,User&#x27;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>include</code>和<code>exclude</code>都是使用字符串和正则表达式，使用字符串的时候，注意“,”之后之前都别打空格。</p></blockquote><h3 id="别名配置"><a href="#别名配置" class="headerlink" title="别名配置"></a>别名配置</h3><p>经常的我们向引入图片文件等资源的时候使用相对路径，诸如<code>../assets/xxx</code>这样的使用../获取上一层，如果有多个上层就需要<code>../../xxx</code>等等这样不利于维护代码。此时就需要一个能获取到指定目录的资源的就好了。</p><h4 id="Vue2-x中"><a href="#Vue2-x中" class="headerlink" title="Vue2.x中"></a>Vue2.x中</h4><p>在<code>webpack.base.config</code>中配置使用别名，找到<code>resolve:&#123;&#125;</code>模块，增加配置信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.vue&#x27;</span>, <span class="string">&#x27;.json&#x27;</span>],</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: resolve(<span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;assets&#x27;</span>: resolve(<span class="string">&#x27;src/assets&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;components&#x27;</span>: resolve(<span class="string">&#x27;src/components&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;views&#x27;</span>: resolve(<span class="string">&#x27;src/views&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里<code>@</code>指定目录是<code>src</code>，例如<code>@/components</code>表示<code>src/components</code>目录，<code>assets</code>表示<code>src/assets</code>前缀，如果是<code>assets/img</code>就表示<code>src/assets/img</code>目录、但是使用还需要加<code>~</code> 如: <code>&lt;img src=&quot;~assets/img/tabbar/home.png&quot; /&gt;</code></p><h4 id="Vue3-x中"><a href="#Vue3-x中" class="headerlink" title="Vue3.x中"></a>Vue3.x中</h4><p>默认配置了<code>@</code>为<code>src</code>的别名、如果我们想添加其他别名需要在根目录下创建<code>vue.config.js</code>、可以使用<code>@</code></p><pre><code class="javascript">module.exports = &#123;    configureWebpack: &#123;        resolve:&#123;            extensions:[],            alias:&#123;                &#39;assets&#39;:&#39;@/assets&#39;,                &#39;components&#39;:&#39;@/components&#39;,                &#39;network&#39;:&#39;@/network&#39;,                &#39;views&#39;:&#39;@/views&#39;,            &#125;        &#125;    &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Web教程 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-CLI学习</title>
      <link href="/posts/22686bb0/"/>
      <url>/posts/22686bb0/</url>
      
        <content type="html"><![CDATA[<h2 id="vue-cli起步"><a href="#vue-cli起步" class="headerlink" title="vue-cli起步"></a>vue-cli起步</h2><div class="note info"><p>文章中的资料来自:<a href="https://github.com/zhangtianyi0110/VueLearnNotes/blob/master/16-vue-cli/16-vue-cli.md">https://github.com/zhangtianyi0110/VueLearnNotes/blob/master/16-vue-cli/16-vue-cli.md</a></p><p>视频：<a href="https://www.bilibili.com/video/BV15741177Eh/?p=90">https://www.bilibili.com/video/BV15741177Eh/?p=90</a></p><p>中文官网: <a href="https://cli.vuejs.org/zh/">https://cli.vuejs.org/zh/</a></p></div><h3 id="什么是vue-cli"><a href="#什么是vue-cli" class="headerlink" title="什么是vue-cli"></a>什么是vue-cli</h3><p>Vue CLI 是一个基于 Vue.js 进行快速开发的完整系统，提供：</p><ul><li>通过 <code>@vue/cli</code> 搭建交互式的项目脚手架。</li><li>通过 <code>@vue/cli</code> + <code>@vue/cli-service-global</code> 快速开始零配置原型开发。</li><li>一个运行时依赖 (<code>@vue/cli-service</code>)，该依赖：<ul><li>可升级；</li><li>基于 webpack 构建，并带有合理的默认配置；</li><li>可以通过项目内的配置文件进行配置；</li><li>可以通过插件进行扩展。</li></ul></li><li>一个丰富的官方插件集合，集成了前端生态中最好的工具。</li><li>一套完全图形化的创建和管理 Vue.js 项目的用户界面。</li></ul><p>Vue CLI 致力于将 Vue 生态中的工具基础标准化。它确保了各种构建工具能够基于智能的默认配置即可平稳衔接，这样你可以专注在撰写应用上，而不必花好几天去纠结配置的问题。与此同时，它也为每个工具提供了调整配置的灵活性，无需 eject。</p><h3 id="CLI是什么意思"><a href="#CLI是什么意思" class="headerlink" title="CLI是什么意思"></a>CLI是什么意思</h3><ul><li>CLI是<code>Command-Line Interface</code>，即<code>命令行界面</code>，也叫<code>脚手架</code>。</li><li>vue-cli 是vue.js官方发布的一个vue.js项目的脚手架</li><li>使用vue-cli可以快速搭建vue开发环境和对应的webpack配置</li></ul><h3 id="vue-cli使用"><a href="#vue-cli使用" class="headerlink" title="vue-cli使用"></a>vue-cli使用</h3><blockquote><p>vue-cli使用前提node</p></blockquote><p>vue-cli依赖nodejs环境，vue-cli就是使用了webpack的模板。</p><h4 id="vue-cli4-x"><a href="#vue-cli4-x" class="headerlink" title="vue-cli4.x"></a>vue-cli4.x</h4><p>安装vue脚手架，现在脚手架版本是vue-cli4.x</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## npm 方法</span></span><br><span class="line">npm install -g @vue/cli</span><br><span class="line"></span><br><span class="line"><span class="comment">## yarn 方法</span></span><br><span class="line">yarn global add @vue/cli</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建</span></span><br><span class="line">vue create 项目名称</span><br></pre></td></tr></table></figure><p>安装完成后使用命令查看版本是否正确：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue --version</span><br></pre></td></tr></table></figure><p>如果安装失败自行百度解决</p><h4 id="vue-cli2-x"><a href="#vue-cli2-x" class="headerlink" title="vue-cli2.x"></a>vue-cli2.x</h4><p>官方原文: <a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#%E6%8B%89%E5%8F%96-2-x-%E6%A8%A1%E6%9D%BF-%E6%97%A7%E7%89%88%E6%9C%AC">拉取-2-x-模板-旧版本</a></p><ol><li><p>拉取2.x模板（旧版本）</p><p> Vue CLI &gt;= 3 和旧版使用了相同的 <code>vue</code> 命令，所以 Vue CLI 2 (<code>vue-cli</code>) 被覆盖了。如果你仍然需要使用旧版本的 <code>vue init</code> 功能，你可以全局安装一个桥接工具：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli-init</span><br><span class="line"><span class="comment">## `vue init` 的运行效果将会跟 `vue-cli@2.x` 相同</span></span><br><span class="line">vue init webpack my-project</span><br></pre></td></tr></table></figure></li><li><p>创建工程选项含义</p><p> <img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200616174016.png" alt="创建选项"></p><ul><li><p>project name：项目名字（默认）</p></li><li><p>project description：项目描述</p></li><li><p>author：作者（会默认拉去git的配置）</p></li><li><p>vue build：vue构建时候使用的模式</p><ul><li>runtime+compiler：大多数人使用的，可以编译template模板</li><li>runtime-only：比compiler模式要少6kb，并且效率更高，直接使用render函数</li></ul></li><li><p>install vue-router：是否安装vue路由</p></li><li><p>user eslint to lint your code：是否使用ES规范</p></li><li><p>set up unit tests：是否使用unit测试</p></li><li><p>setup e2e tests with nightwatch：是否使用end 2 end，点到点自动化测试</p></li><li><p>Should we run <code>npm install</code> for you after the project has been created? (recommended)：使用npm还是yarn管理工具</p><p>等待创建工程成功。</p><blockquote><p>注意：如果创建工程时候选择了使用ESLint规范，又不想使用了，需要在config文件夹下的index.js文件中找到useEslint，并改成false。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Use Eslint Loader?</span><br><span class="line">&#x2F;&#x2F; If true, your code will be linted during bundling and</span><br><span class="line">&#x2F;&#x2F; linting errors and warnings will be shown in the console.</span><br><span class="line">useEslint: true,</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="vue-cli2-x的目录结构"><a href="#vue-cli2-x的目录结构" class="headerlink" title="vue-cli2.x的目录结构"></a>vue-cli2.x的目录结构</h3><p>创建完成后(由于安装的模块可能不同、文件也不一样): </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">├── build                           构建脚本目录</span><br><span class="line">│   ├── build.js                        生产环境构建脚本</span><br><span class="line">│   ├── utils.js                        构建相关工具方法</span><br><span class="line">│   ├── webpack.base.conf.js            wabpack基础配置</span><br><span class="line">│   ├── webpack.dev.conf.js             wabpack开发环境配置</span><br><span class="line">│   └── webpack.prod.conf.js            wabpack生产环境配置</span><br><span class="line">├── config                          项目配置</span><br><span class="line">│   ├── dev.env.js                      开发环境变量</span><br><span class="line">│   ├── index.js                        项目配置文件</span><br><span class="line">│   └── prod.env.js                     生产环境变量</span><br><span class="line">├── src                             项目源码目录    </span><br><span class="line">│   ├── main.js                         入口js文件</span><br><span class="line">│   ├── app.vue                         根组件</span><br><span class="line">│   ├── components                      公共组件目录</span><br><span class="line">│   │   └── HelloWorld.vue</span><br><span class="line">│   ├── assets                          资源目录，这里的资源会被wabpack构建</span><br><span class="line">│   │   └── logo.png</span><br><span class="line">│   ├── routes                          前端路由</span><br><span class="line">│   │   └── index.js</span><br><span class="line">│   ├── store                           应用级数据（state）</span><br><span class="line">│   │   └── index.js</span><br><span class="line">│   └── views                           页面目录</span><br><span class="line">│       ├── hello.vue</span><br><span class="line">│       └── notfound.vue</span><br><span class="line">├── package.json                    npm包配置文件，里面定义了项目的npm脚本，依赖包等信息</span><br><span class="line">└── index.html                      入口页面</span><br></pre></td></tr></table></figure><p>其中build和config都是配置相关的文件。</p><h4 id="build和config"><a href="#build和config" class="headerlink" title="build和config"></a>build和config</h4><p>build中将webpack的配置文件做了分离：</p><ul><li><code>webpack.base.conf.js</code>（公共配置）</li><li><code>webpack.dev.conf.js</code>（开发环境）</li><li><code>webpack.prod.conf.js</code>（生产环境）</li></ul><p>我们使用的脚本命令配置在<code>package.json</code>中。</p><p>打包构建：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>如果搭建了本地服务器<code>webpack-dev-server</code>，本地开发环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>此时<code>npm run build</code>打包命令相当于使用node 执行build文件夹下面的build.js文件。</p><ol><li>检查dist文件夹是否已经存在，存在先删除</li><li>如果没有err，就使用webpack的配置打包dist文件夹</li></ol><p>在生产环境，即使用build打包时候，使用的是<code>webpack.prod.conf.js</code>配置文件。</p><p>源码中，显然使用了<code>webpack-merge</code>插件来合并prod配置文件和公共的配置文件，合并成一个配置文件并打包，而<code>webpack.dev.conf.js</code>也是如此操作，在开发环境使用的是dev的配置文件。</p><p>config文件夹中是build的配置文件中所需的一些变量、对象，在<code>webpack.base.conf.js</code>中引入了<code>index.js</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">&#x27;../config&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="src和static"><a href="#src和static" class="headerlink" title="src和static"></a>src和static</h4><p>src源码目录，就是我们需要写业务代码的地方。</p><p>static是放静态资源的地方，static文件夹下的资源会原封不动的打包复制到dist文件夹下。</p><h4 id="其他相关文件"><a href="#其他相关文件" class="headerlink" title="其他相关文件"></a>其他相关文件</h4><h5 id="babelrc文件"><a href="#babelrc文件" class="headerlink" title=".babelrc文件"></a>.babelrc文件</h5><p>.babelrc是ES代码相关转化配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [</span><br><span class="line">    [&quot;env&quot;, &#123;</span><br><span class="line">      &quot;modules&quot;: false,</span><br><span class="line">      &quot;targets&quot;: &#123;</span><br><span class="line">        &quot;browsers&quot;: [&quot;&gt; 1%&quot;, &quot;last 2 versions&quot;, &quot;not ie &lt;&#x3D; 8&quot;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;],</span><br><span class="line">    &quot;stage-2&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;plugins&quot;: [&quot;transform-vue-jsx&quot;, &quot;transform-runtime&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>browsers表示需要适配的浏览器，份额大于1%，最后两个版本，不需要适配ie8及以下版本</li><li>babel需要的插件</li></ol><h5 id="editorconfig文件"><a href="#editorconfig文件" class="headerlink" title=".editorconfig文件"></a>.editorconfig文件</h5><p>.editorconfig是编码配置文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root &#x3D; true</span><br><span class="line"></span><br><span class="line">[*]</span><br><span class="line">charset &#x3D; utf-8</span><br><span class="line">indent_style &#x3D; space</span><br><span class="line">indent_size &#x3D; 2</span><br><span class="line">end_of_line &#x3D; lf</span><br><span class="line">insert_final_newline &#x3D; true</span><br><span class="line">trim_trailing_whitespace &#x3D; true</span><br></pre></td></tr></table></figure><p>一般是配置编码，代码缩进2空格，是否清除空格等。</p><h5 id="eslintignore文件"><a href="#eslintignore文件" class="headerlink" title=".eslintignore文件"></a>.eslintignore文件</h5><p>.eslintignore文件忽略一些不规范的代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;build&#x2F;</span><br><span class="line">&#x2F;config&#x2F;</span><br><span class="line">&#x2F;dist&#x2F;</span><br><span class="line">&#x2F;*.js</span><br></pre></td></tr></table></figure><p>忽略build、config、dist文件夹和js文件。</p><h5 id="gitignore文件"><a href="#gitignore文件" class="headerlink" title=".gitignore文件"></a>.gitignore文件</h5><p>.gitignore是git忽略文件，git提交忽略的文件。</p><h5 id="postcssrc-js文件"><a href="#postcssrc-js文件" class="headerlink" title=".postcssrc.js文件"></a>.postcssrc.js文件</h5><p>css转化是配置的一些。</p><h5 id="index-html文件"><a href="#index-html文件" class="headerlink" title="index.html文件"></a>index.html文件</h5><p>index.html文件是使用<code>html-webpack-plugin</code>插件打包的index.html模板。</p><h5 id="package-json和package-lock-json"><a href="#package-json和package-lock-json" class="headerlink" title="package.json和package-lock.json"></a>package.json和package-lock.json</h5><ol><li>package.json(包管理,记录大概安装的版本)</li><li>package-lock.json(记录真实安装版本)</li></ol><h3 id="ESlint-配置"><a href="#ESlint-配置" class="headerlink" title="ESlint 配置"></a>ESlint 配置</h3><p>确保安装了ESlint、是一个检查代码错误的</p><p>如何关闭？</p><p><code>config-&gt;index.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  dev: &#123;</span><br><span class="line">    ...,  </span><br><span class="line">    <span class="comment">// Use Eslint Loader?</span></span><br><span class="line">    <span class="comment">// If true, your code will be linted during bundling and</span></span><br><span class="line">    <span class="comment">// linting errors and warnings will be shown in the console.</span></span><br><span class="line">    useEslint: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// If true, eslint errors and warnings will also be shown in the error overlay</span></span><br><span class="line">    <span class="comment">// in the browser.</span></span><br><span class="line">    showEslintErrorsInOverlay: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    ... </span><br><span class="line">  &#125;,</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="runtime-compiler和runtime-only区别"><a href="#runtime-compiler和runtime-only区别" class="headerlink" title="runtime-compiler和runtime-only区别"></a>runtime-compiler和runtime-only区别</h3><p>新建两个vuecli2项目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;新建一个以runtime-compiler模式</span><br><span class="line">vue init webpack runtime-compiler</span><br><span class="line">&#x2F;&#x2F;新建一个以runtime-only模式</span><br><span class="line">vue init webpack runtime-only</span><br></pre></td></tr></table></figure><p>两个项目的<code>main.js</code>区别</p><div class="tabs" id="tabs1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tabs1-1">runtime-compiler</button></li><li class="tab"><button type="button" data-href="#tabs1-2">runtime-only</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tabs1-1"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">&#x27;&lt;App/&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs1-2"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">render:<span class="function"><span class="keyword">function</span>(<span class="params">h</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> h(App)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>compiler编译解析template过程</p></blockquote><p><code>vm.options.template</code>解析成<code>ast(abstract syntax tree)</code>抽象语法树，抽象语法树编译成<code>vm.options.render(functions)</code>render函数。render函数最终将template解析的ast渲染成虚拟DOM（<code>virtual dom</code>），最终虚拟dom映射到UI上。</p><p><code>runtime-compiler</code>:  template会被解析 =&gt; ast(抽象语法树) =&gt; 然后编译成render函数 =&gt; 渲染成虚拟DOM（vdom）=&gt; 真实dom(UI) <code>runtime-only</code>:  render =&gt; vdom =&gt; UI     1.性能更高，2.需要代码量更少</p><ul><li><p><code>render</code>函数</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">render:<span class="function"><span class="keyword">function</span>(<span class="params">createElement</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//1.createElement(&#x27;标签&#x27;,&#123;标签属性&#125;,[&#x27;&#x27;])</span></span><br><span class="line">  <span class="keyword">return</span> createElement(<span class="string">&#x27;h2&#x27;</span>,</span><br><span class="line">    &#123;<span class="attr">class</span>:<span class="string">&#x27;box&#x27;</span>&#125;,</span><br><span class="line">    [<span class="string">&#x27;Hello World&#x27;</span>,createElement(<span class="string">&#x27;button&#x27;</span>,[<span class="string">&#x27;按钮&#x27;</span>])])</span><br><span class="line">  <span class="comment">//2.传入组件对象</span></span><br><span class="line">  <span class="comment">//return createElement(cpn)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  h就是一个传入的<code>createElement</code>函数，<code>.vue</code>文件的template是由vue-template-compiler解析。</p><p>  将runtime-compiler的<code>main.js</code>修改</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="comment">// components: &#123; App &#125;,</span></span><br><span class="line">  <span class="comment">// template: &#x27;&lt;App/&gt;&#x27;</span></span><br><span class="line">  <span class="comment">//1.createElement(&#x27;标签&#x27;,&#123;标签属性&#125;,[&#x27;&#x27;])</span></span><br><span class="line">  render(createElement)&#123;</span><br><span class="line">    <span class="keyword">return</span> createElement(<span class="string">&#x27;h2&#x27;</span>,</span><br><span class="line">    &#123;<span class="attr">class</span>:<span class="string">&#x27;box&#x27;</span>&#125;,</span><br><span class="line">    [<span class="string">&#x27;hello vue&#x27;</span>, createElement(<span class="string">&#x27;button&#x27;</span>,[<span class="string">&#x27;按钮&#x27;</span>])])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>  并把config里面的inedx.js的<code>useEslint: true</code>改成false，即关掉eslint规范，打包项目<code>npm run dev</code>，打开浏览器。</p><p>  在修改main.js</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="comment">// components: &#123; App &#125;,</span></span><br><span class="line">  <span class="comment">// template: &#x27;&lt;App/&gt;&#x27;</span></span><br><span class="line">  <span class="comment">//1.createElement(&#x27;标签&#x27;,&#123;标签属性&#125;,[&#x27;&#x27;])</span></span><br><span class="line">  render(createElement)&#123;</span><br><span class="line">    <span class="comment">// return createElement(&#x27;h2&#x27;,</span></span><br><span class="line">    <span class="comment">// &#123;class:&#x27;box&#x27;&#125;,</span></span><br><span class="line">    <span class="comment">// [&#x27;hello vue&#x27;, createElement(&#x27;button&#x27;,[&#x27;按钮&#x27;])])</span></span><br><span class="line">    <span class="comment">//2.传入组件</span></span><br><span class="line">    <span class="keyword">return</span> createElement(App)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>  再次打包，发现App组件被渲染了。</p></li></ul><h3 id="vue-cli4"><a href="#vue-cli4" class="headerlink" title="vue-cli4"></a>vue-cli4</h3><h4 id="vue-cli3配置"><a href="#vue-cli3配置" class="headerlink" title="vue-cli3配置"></a>vue-cli3配置</h4><p><strong>vue-cli4与2版本区别</strong></p><ul><li>vue-cli3基于webpack4打造，vue-cli2是基于webpack3</li><li>vue-cli3的设计原则是”0配置”，移除了配置文件，build和config等</li><li>vue-cli3提供<code>vue ui</code>的命令，提供了可视化配置</li><li>移除了static文件夹，新增了public文件夹，并将index.html移入了public文件夹</li></ul><p>创建vue-cli3项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create vuecli3test</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200618113800.png" alt="vuecli4"></p><p>小知识：如果像删除或者添加自己创建项目的配置可以在 <code>‪C:\Users\Administrator\.vuerc</code> 找到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;useTaobaoRegistry&quot;: false,</span><br><span class="line">  &quot;latestVersion&quot;: &quot;4.4.4&quot;,</span><br><span class="line">  &quot;lastChecked&quot;: 1592451099972,</span><br><span class="line">  &quot;presets&quot;: &#123;</span><br><span class="line">    &quot;zykj&quot;: &#123;</span><br><span class="line">      &quot;useConfigFiles&quot;: true,</span><br><span class="line">      &quot;plugins&quot;: &#123;</span><br><span class="line">        &quot;@vue&#x2F;cli-plugin-babel&quot;: &#123;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除 <code>presets</code> 里的配置就可以了</p><p><strong>目录结构：</strong></p><ul><li>public 类似 static文件夹，里面的资源会原封不动的打包</li><li>src源码文件夹</li></ul><p>使用<code>npm run serve</code>运行服务器，打开浏览器输入<a href="http://localhost:8080/">http://localhost:8080/</a></p><p>打开src下的main.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>Vue.config.productionTip = false</code>构建信息是否显示</p><p>如果vue实例有el选项，vue内部会自动给你执行<code>$mount(&#39;#app&#39;)</code>，如果没有需要自己执行。</p><h4 id="vue-cli4配置"><a href="#vue-cli4配置" class="headerlink" title="vue-cli4配置"></a>vue-cli4配置</h4><p>vue-cli3与vue-cli4配置基本一样。都可以进入图形化界面创建项目。以下以vue-cli4演示:</p><p>在创建vue-cli4项目的时候可以使用<code>vue ui</code>命令进入图形化界面创建项目，可以以可视化的方式创建项目，并配置项。</p><p>vue-cli4配置被隐藏起来了，可以在<code>node_modules</code>文件夹中找到<code>@vue</code>模块，打开其中的<code>cli-service</code>文件夹下的<code>webpack.config.js</code>文件。</p><p>再次打开当前目录下的<code>lib</code>文件夹，发现配置文件<code>service.js</code>，并导入了许多模块，来自与lib下面的config、util等模块</p><p><strong>如何要自定义配置文件</strong></p><p>在项目根目录下新建一个<code>vue.config.js</code>配置文件，必须为<code>vue.config.js</code>，vue-cli4会自动扫描此文件，在此文件中修改配置文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在module.exports中修改配置</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="反向代理配置"><a href="#反向代理配置" class="headerlink" title="反向代理配置"></a>反向代理配置</h4><p>当请求的API有跨域问题时、需要使用代理</p><p>例如 我们使用Axios请求Api时</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mounted()&#123;</span><br><span class="line">    axios.get(<span class="string">&quot;http://m.maoyan.com/ajax/movieOnInfoList?tocken=&quot;</span>).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res.data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就会出现跨域的问题： Response Headers -&gt; access-control-allow-origin:</p><p>此时我们需要在根目录创建<code>vue.config.js</code> <a href="https://cli.vuejs.org/zh/config/#devserver-proxy">https://cli.vuejs.org/zh/config/#devserver-proxy</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">      proxy: &#123;</span><br><span class="line">        <span class="string">&#x27;/ajax&#x27;</span>: &#123;</span><br><span class="line">          target: <span class="string">&#x27;http://m.maoyan.com&#x27;</span>,</span><br><span class="line">          <span class="comment">//ws: true,</span></span><br><span class="line">          changeOrigin: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mounted()&#123;</span><br><span class="line">    axios.get(<span class="string">&quot;/ajax/movieOnInfoList?tocken=&quot;</span>).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res.data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web教程 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习过程中遇到的软件问题</title>
      <link href="/posts/efc9a028/"/>
      <url>/posts/efc9a028/</url>
      
        <content type="html"><![CDATA[<h2 id="软件问题"><a href="#软件问题" class="headerlink" title="软件问题"></a>软件问题</h2><h3 id="解决VSCODE因为在此系统上禁止运行脚本问题"><a href="#解决VSCODE因为在此系统上禁止运行脚本问题" class="headerlink" title="解决VSCODE因为在此系统上禁止运行脚本问题"></a>解决VSCODE因为在此系统上禁止运行脚本问题</h3><div class="note info"><p>原文链接：<a href="https://blog.csdn.net/larpland/article/details/101349586">解决VSCODE”因为在此系统上禁止运行脚本”报错</a></p></div><p>在使用webpack打包时出现了以下错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">版权所有 (C) Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">尝试新的跨平台 PowerShell https://aka.ms/pscore6</span><br><span class="line"></span><br><span class="line">PS E:\Code\Web\WebBasics\Day08-Vue.js\<span class="built_in">test</span>&gt; webpack</span><br><span class="line">webpack : 无法加载文件 C:\Users\Administrator\AppData\Roaming\npm\webpack.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go.microsoft. </span><br><span class="line">com/fwlink/?LinkID=135170 中的 about_Execution_Policies。</span><br><span class="line">所在位置 行:1 字符: 1</span><br><span class="line">+ webpack</span><br><span class="line">+ ~~~~~~~</span><br><span class="line">    + CategoryInfo          : SecurityError: (:) []，PSSecurityException</span><br><span class="line">    + FullyQualifiedErrorId : UnauthorizedAccess</span><br></pre></td></tr></table></figure><p>找了下原因，是因为PowerShell执行策略的问题。</p><p>解决方法：</p><ul><li>以<code>管理员身份</code>运行vscode;</li><li>执行：<code>get-ExecutionPolicy</code>，显示<code>Restricted</code>，表示状态是禁止的;</li><li>执行：<code>set-ExecutionPolicy RemoteSigned</code>;</li><li>这时再执行<code>get-ExecutionPolicy</code>，就显示<code>RemoteSigned</code>;</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200611214512.png" alt="问题1"></p><p>之后运行就不会报错了。</p><p>问题时间：<code>2020-06-11</code></p><h3 id="如何使用PS快速扣头发"><a href="#如何使用PS快速扣头发" class="headerlink" title="如何使用PS快速扣头发"></a>如何使用PS快速扣头发</h3><p>今天有人找我P一张证件照、之前P的一直没有处理好头发、今天看了一下<a href="https://www.bilibili.com/video/BV1sT4y157DX">视频</a>、懂了</p><p>首先我们需要使用PS(这里使用的是PS2019)、<code>快速选择工具</code>将要扣取的部分选中、点击<code>选择并遮住</code>、在右边的<code>视图模式</code>中的<code>模式</code>选择<code>叠加</code>(默认红色、红色部分为未选择部分)、左边选择第二个<code>调整边缘画笔工具</code>、适当对边缘进行调整、调整好之后点击右边的<code>确定</code>、就会选择<code>人物</code>、右键<code>反选</code>就可以扣去背景了</p><p>问题时间：<code>2020-08-01</code></p><h2 id="技术问题"><a href="#技术问题" class="headerlink" title="技术问题"></a>技术问题</h2><h3 id="CSS-与其预处理语言-Sass、Less、Stylus-之间的转化"><a href="#CSS-与其预处理语言-Sass、Less、Stylus-之间的转化" class="headerlink" title="CSS 与其预处理语言 Sass、Less、Stylus 之间的转化"></a>CSS 与其预处理语言 Sass、Less、Stylus 之间的转化</h3><ul><li><p>Sass 转化为 CSS</p><ol><li>官网下载并安装 Ruby，安装完成可以使用 ruby -v 命令查看版本号；</li><li>使用 gem install sass 命令安装 Sass；</li><li>进入需要转换的 Sass 文件的目标位置，使用 sass –watch xxx.sass:xxx.css 命令完成 Sass 到 CSS 的转化（xxx.sass 为待转化的 Sass 文件，.scss，.sass 都行，.sass 文件对代码的排版有着非常严格的要求，没有大括号和分号，.scss 对代码的要求没那么高，xxx.css 为转化后的 CSS 文件）</li></ol></li><li><p>Less 转化为 CSS</p><ol><li>确认你的电脑已经安装了node，可分别使用 node -v 和 npm -v 命令查看 node 和 npm 版本号；</li><li>使用 npm install -g less 命令安装 Less；</li><li>进入需要转换的 Less 文件的目标位置，使用 lessc xxx.less xxx.css 命令完成 Less 到 CSS 的转化（xxx.less 为待转化的 Less 文件，xxx.css 为转化后的 CSS 文件）</li></ol></li><li><p>Stylus 转化为 CSS</p><ol><li>确认你的电脑已经安装了node，可分别使用 node -v 和 npm -v 命令查看 node 和 npm 版本号；</li><li>使用 npm install -g stylus 命令安装 Stylus；</li><li>进入需要转换的 Stylus 文件的目录下，使用 stylus –compress src/ 命令完成 Stylus 到 CSS 的转化（src/ 为待转化的 Stylus 文件所在的目录）</li></ol></li><li><p>CSS 转化为 Stylus</p><ol><li>确认你的电脑已经安装了node，可分别使用 node -v 和 npm -v 命令查看 node 和 npm 版本号；</li><li>使用 npm install -g stylus 命令安装 Stylus；</li><li>进入需要转换的 CSS 文件的目标位置，使用 stylus –css xxx.css xxx.styl 命令完成 CSS 到 Stylus 的转化（xxx.css 为待转化的 CSS 文件，xxx.styl 为转化后的 Stylus 文件）</li></ol></li></ul><p>除了使用命令行进行转化以外，如果代码不是很多，我们还可以选择使用在线工具，比如脚本之家在线工具等。</p><p>大佬原文： <a href="https://blog.csdn.net/qq_36759224/article/details/91492651">https://blog.csdn.net/qq_36759224/article/details/91492651</a></p><h3 id="npm模块管理进阶-—-npm-check-cnpm-构建包更新环境"><a href="#npm模块管理进阶-—-npm-check-cnpm-构建包更新环境" class="headerlink" title="npm模块管理进阶 — npm-check + cnpm 构建包更新环境"></a><a href="https://segmentfault.com/a/1190000011085967">npm模块管理进阶 — npm-check + cnpm 构建包更新环境</a></h3>]]></content>
      
      
      <categories>
          
          <category> 电脑教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电脑 </tag>
            
            <tag> 问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack学习</title>
      <link href="/posts/f13afe2d/"/>
      <url>/posts/f13afe2d/</url>
      
        <content type="html"><![CDATA[<h2 id="webpack学习"><a href="#webpack学习" class="headerlink" title="webpack学习"></a>webpack学习</h2><div class="note info"><p>视频教程：<a href="https://www.bilibili.com/video/BV15741177Eh/?p=74">https://www.bilibili.com/video/BV15741177Eh/?p=74</a></p></div><h3 id="什么是webpack"><a href="#什么是webpack" class="headerlink" title="什么是webpack"></a>什么是webpack</h3><blockquote><p>webpack是一个JavaScript应用的静态模块打包工具。</p></blockquote><p>需要关注的是<strong>模块</strong>和<strong>打包</strong>。<strong>grunt/gulp</strong>都可以打包，那有什么区别。</p><ul><li><p>模块化</p><p>  webpack可以支持前端模块化的一些方案，例如AMD、CMD、CommonJS、ES6。可以处理模块之间的依赖关系。不仅仅是js文件可以模块化，图片、css、json文件等等都可以模块化。</p></li><li><p>打包</p><p>  webpack可以将模块资源打包成一个或者多个包，并且在打包过程中可以处理资源，例如压缩图片，将scss转成css，ES6语法转成ES5语法，将TypeScript转成JavaScript等等操作。<strong>grunt/gulp</strong>也可以打包。</p></li></ul><p><strong>和grunt/gulp的对比</strong></p><ul><li><p>grunt/gulp的核心是Task</p><ul><li>我们可以配置一系列的task，并且定义task要处理的事务（例如ES6/TS转化，图片压缩，scss转css）</li><li>之后可以让grunt/gulp来执行依次这些任务，让整个流程自动化</li><li>所以grunt/gulp也被称为前端自动化任务管理工具</li></ul></li><li><p>看一个gulp例子</p><ul><li><p>task将src下的js文件转化为ES5语法</p></li><li><p>并输入到dist文件夹中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> babel = <span class="built_in">require</span>(<span class="string">&#x27;gulp-babel&#x27;</span>)</span><br><span class="line">gulp.task(<span class="string">&#x27;js&#x27;</span>()=&gt;</span><br><span class="line">    gulp.src(<span class="string">&#x27;src/*.js&#x27;</span>)</span><br><span class="line">        .pipe(babel(&#123;</span><br><span class="line">            presets:[<span class="string">&#x27;es2015&#x27;</span>]</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">&#x27;dist&#x27;</span>))</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>什么时候使用grunt/gulp呢？</p><ul><li>如果工程依赖简单，甚至没有模块化</li><li>只需要进行简单的合并/压缩</li><li>如果模块复杂，相互依赖性强，我们需要使用webpack</li></ul></li><li><p>grunt/glup和webpack区别</p><ul><li>grunt/glup更加强调的是前端自动化流程，模块化不是其核心</li><li>webpack加强模块化开发管理，而文件压缩/合并/预处理等功能，是附带功能</li></ul></li></ul><p>webpack就是前端模块化打包工具</p><h3 id="webpack的安装"><a href="#webpack的安装" class="headerlink" title="webpack的安装"></a>webpack的安装</h3><ol><li>webpack依赖node环境。</li><li>node环境依赖众多包，所以需要npm，npm（node packages manager）node包管理工具</li><li>nvm是node管理工具可以自由切换node环境版本</li></ol><p><strong>全局安装webpack</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack -g</span><br><span class="line">//指定版本安装</span><br><span class="line">npm install webpack@3.6.0 -g</span><br></pre></td></tr></table></figure><blockquote><p>由于vue-cli2基于webpack3.6.0 如果要用vue-cli2的可以使用<code>npm install webpack@3.6.0 -g</code></p></blockquote><p><strong>局部安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack --save-dev</span><br></pre></td></tr></table></figure><ul><li>在终端执行webpack命令，使用的是全局安装。</li><li>当在package.json中定义了scripts时，其中包括了webpack命令，那么使用的是局部webpack</li></ul><h3 id="简单命令"><a href="#简单命令" class="headerlink" title="简单命令"></a>简单命令</h3><p>新建一个文件夹，新建如下结构的目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">├── dist(要发布的文件，已经处理过的)</span><br><span class="line">├── src(源码文件夹)</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   ├── main.js</span><br><span class="line">└─── mathUtils.js</span><br></pre></td></tr></table></figure><p>如上所示在src文件夹（源码文件夹），dist（要发布的文件，已经处理过的）。</p><p>新建入口js文件<code>main.js</code>和<code>mathUtils.js</code>，<code>main.js</code>依赖<code>mathUtils.js</code>。</p><div class="tabs" id="tab-id"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab-id-1">mathUtils.js</button></li><li class="tab"><button type="button" data-href="#tab-id-2">main.js</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab-id-1"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.新建mathUtils.js，用CommonJs规范导出</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1,num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1+num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mul</span>(<span class="params">num1,num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1*num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  add,mul</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab-id-2"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.新建入口js文件main.js 导入mathUtil.js文件，并调用</span></span><br><span class="line"><span class="keyword">const</span> &#123;add,mul&#125; = <span class="built_in">require</span>(<span class="string">&quot;./mathUtils.js&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">10</span>,<span class="number">20</span>))</span><br><span class="line"><span class="built_in">console</span>.log(mul(<span class="number">10</span>,<span class="number">10</span>))</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><ol><li><p>使用webpack命令打包js文件</p><p> 注意：</p><ul><li><p>webpack3使用命令：<code>webpack ./src/main.js ./dist/bundle.js</code></p></li><li><p>webpack4使用命令： <code>webpack ./src/main.js -o ./dist/bundle.js</code> 要加 <code>-o</code> (我使用的是webpack4)</p></li><li><p>webpack4打包成功会报<code>The &#39;mode&#39; option has not been set</code>的警告、不用管、意思时要在模块上使用、这里是单文件(解决办法: <a href="https://www.cnblogs.com/wendj/p/10069882.html">https://www.cnblogs.com/wendj/p/10069882.html</a>)</p><p>打包成功，查看dist文件夹下自动生成了一个<code>bundle.js</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新建入口js文件main.js 导入mathUtil.js文件，并调用</span></span><br><span class="line"><span class="keyword">const</span> &#123;add,mul&#125; = __webpack_require__(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">10</span>,<span class="number">20</span>))</span><br><span class="line"><span class="built_in">console</span>.log(mul(<span class="number">10</span>,<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;),</span><br><span class="line"><span class="comment">/* 1 */</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function"><span class="keyword">function</span>(<span class="params">module, exports</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.新建mathUtils.js，用CommonJs规范导出</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1,num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1+num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mul</span>(<span class="params">num1,num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1*num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  add,mul</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内容很多，其中包含<code>mathUtils.js</code>和<code>main.js</code> 内容，打包成功。</p></li></ul></li><li><p>新建一个index.html文件，导入bundle.js</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>webpack入门<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 3.新建一个indexhtml文件并使用 webpack ./src/main.js -o ./dist/bundle.js webpack4使用此命令 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 4.引用webpack打包后的js文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./dist/bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 可以成功打印、就说明成功了</p></li><li><p>新建一个<code>info.js</code>使用ES6的语法导出</p><ul><li><p>info.js</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//es6语法导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name:<span class="string">&#x27;zzz&#x27;</span>,</span><br><span class="line">  age:<span class="number">24</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>main.js导入info.js</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用es6语法导入</span></span><br><span class="line"><span class="keyword">import</span> info <span class="keyword">from</span> <span class="string">&#x27;./info.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(info.name)</span><br><span class="line"><span class="built_in">console</span>.log(info.age)</span><br></pre></td></tr></table></figure><p>  再次使用<code>webpack ./src/main.js -o ./dist/bundle.js</code>，重新打包</p></li></ul></li><li><p>打开index.html测试</p><p> 总结: webpack可以帮我们打包js文件，只要指定入口文件（main.js）和输出的文件（bundle.js），不管是es6的模块化还是CommonJs的模块化，webpack都可以帮我们打包，还可以帮我们处理模块之间的依赖。</p></li></ol><h3 id="webpack配置"><a href="#webpack配置" class="headerlink" title="webpack配置"></a>webpack配置</h3><h4 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h4><p>如果每次都用webpack命令自己写入口文件和出口文件会很麻烦，此时我们可以使用webpack的配置。</p><blockquote><p>准备工作：</p></blockquote><p>新建一个文件夹，新建如下结构的目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">├── dist(要发布的文件，已经处理过的)</span><br><span class="line">├── src(源码文件夹)</span><br><span class="line">│   ├── main.js</span><br><span class="line">│   ├── mathUtils.js</span><br><span class="line">└── └── index.html</span><br></pre></td></tr></table></figure><ol><li><p>在根目录下新建一个<code>webpack.config.js</code></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.导入node的path包获取绝对路径，需要使用npm init初始化node包</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.配置webpack的入口和出口</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">&#x27;./src/main.js&#x27;</span>,<span class="comment">//入口文件</span></span><br><span class="line">  output:&#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),<span class="comment">//动态获取打包后的文件路径,path.resolve拼接路径</span></span><br><span class="line">    filename: <span class="string">&#x27;bundle.js&#x27;</span><span class="comment">//打包后的文件名</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在根目录执行<code>npm init</code>初始化node包，因为配置文件中用到了node的path包</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init </span><br></pre></td></tr></table></figure><p> 看着提示的文字来选择(我记得我只输入了项目名称的、其他都是回车)</p><p> 生成了<code>package.json</code>和<code>node_modules</code> </p></li><li><p>在根目录下载执行webpack打包</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack</span><br></pre></td></tr></table></figure><p> 这样入口和出口的配置已经配置完成了，只需要使用webpack命令就行了。</p></li><li><p>使用自定义脚本（script）启动</p><p> <code>一般来是我们使用的是</code>:</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm run dev//开发环境</span><br><span class="line">npm run build//生产环境</span><br></pre></td></tr></table></figure><p> 在<code>package.json</code>中的script中加上</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;build&quot;: &quot;webpack&quot;</span><br></pre></td></tr></table></figure><p> 使用<code>npm run build</code></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure></li></ol><h4 id="全局安装和局部安装"><a href="#全局安装和局部安装" class="headerlink" title="全局安装和局部安装"></a>全局安装和局部安装</h4><blockquote><p>webpack有 全局安装 和 局部安装</p></blockquote><ul><li><p>全局安装</p><p>  <code>@xxx为对应版本</code></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack@xxx -g</span><br></pre></td></tr></table></figure></li><li><p>局部安装</p><p>  使用<code>npm run build</code>执行webpack会先从本地查找是否有webpack，如果没有会使用全局的。</p><p>  此时本地需要安装webapck</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack@xxx --save-dev</span><br></pre></td></tr></table></figure><p>  <code>package.json</code>中自动加上开发时的依赖<code>devDependencies</code></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;webpack&quot;: &quot;^xxx&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>  再次使用<code>npm run build</code>，使用的是本地webpack版本。</p></li></ul><h3 id="webpack的loader"><a href="#webpack的loader" class="headerlink" title="webpack的loader"></a>webpack的loader</h3><blockquote><p>loader是webpack中一个非常核心的概念。</p><p>webpack可以将js、图片、css处理打包，但是对于webpack本身是不能处理css、图片、ES6转ES5等。</p><p>此时就需要webpack的扩展，使用对应的loader就可以。</p></blockquote><h4 id="loader使用"><a href="#loader使用" class="headerlink" title="loader使用"></a>loader使用</h4><ol><li><p>通过<code>npm</code>安装需要使用的<code>loader</code></p></li><li><p>通过<code>webpack.config.js</code>中的<code>modules</code>关键字下进行配置</p></li></ol><p>大部分loader可以在webpack的官网找到对应的配置。</p><h4 id="css文件处理"><a href="#css文件处理" class="headerlink" title="css文件处理"></a>css文件处理</h4><p>目录结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">├── dist(要发布的文件，已经处理过的)</span><br><span class="line">├── src(源码文件夹)</span><br><span class="line">├── ├── js</span><br><span class="line">│   └──── mathUtils.js  </span><br><span class="line">├── ├── css</span><br><span class="line">│   └──── normal.css</span><br><span class="line">│   ├── main.js</span><br><span class="line">└── index.html</span><br></pre></td></tr></table></figure><ol><li><p>将除了入口文件<code>（main.js）</code>所有js文件放在js文件夹，新建一个<code>css</code>文件夹，新建一个<code>normal.css</code>文件</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>main.js</code>导入依赖</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./css/normal.css&#x27;</span>)</span><br></pre></td></tr></table></figure><p> 此时如果直接进行打包<code>npm run build</code>。</p><p> <code>提示信息很清楚，打包到css文件时报错，提示我们可能需要一个loader来处理css文件。</code></p></li><li><p>安装<code>css-loader</code></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev css-loader</span><br></pre></td></tr></table></figure></li><li><p>使用css-loader</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,<span class="comment">//正则表达式匹配css文件</span></span><br><span class="line">        <span class="comment">//css-loader只负责css文件加载，不负责解析，要解析需要使用style-loader</span></span><br><span class="line">        use: [&#123;</span><br><span class="line">          loader: <span class="string">&#x27;css-loader&#x27;</span></span><br><span class="line">        &#125;]<span class="comment">//使用loader</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 执行<code>npm run build</code>，提示打包成功，但是背景色并没有变红色，是因为css-loader只负责加载css文件，不负责解析，如果要将样式解析到dom元素中需要使用style-loader。</p></li><li><p>安装使用style-loader</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev style-loader</span><br></pre></td></tr></table></figure> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,<span class="comment">//正则表达式匹配css文件</span></span><br><span class="line">        <span class="comment">//css-loader只负责css文件加载，不负责解析，要解析需要使用style-loader</span></span><br><span class="line">        use: [&#123;</span><br><span class="line">          loader: <span class="string">&#x27;style-loader&#x27;</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          loader: <span class="string">&#x27;css-loader&#x27;</span></span><br><span class="line">        &#125;]<span class="comment">//使用loader</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p> webpack使用多个loader是从<code>右往左</code>解析的，所以<code>需要将css-loader放在style-loader右边</code>，<code>先加载后解析</code>。</p><p> 此时样式成加载解析到DOM元素上。</p></li></ol><h4 id="less文件处理"><a href="#less文件处理" class="headerlink" title="less文件处理"></a>less文件处理</h4><ol><li><p>在css文件夹中新增一个less文件(<code>special.less</code>)</p> <figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@fontSize:</span><span class="number">50px</span>;<span class="comment">//定义变量字体大小</span></span><br><span class="line"><span class="variable">@fontColor:</span>orange;<span class="comment">//定义变量字体颜色</span></span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">@fontSize</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">@fontColor</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>main.js</code>中导入less文件模块</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//依赖less文件</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./css/special.less&#x27;</span>)</span><br><span class="line"><span class="comment">//向页面写入一些内容</span></span><br><span class="line"><span class="built_in">document</span>.writeln(<span class="string">&quot;hello,zykj!&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>安装使用<code>less-loader</code></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev less-loader less</span><br></pre></td></tr></table></figure><p> 在<code>webpack.config.js</code>中使用less-loader</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,<span class="comment">//正则表达式匹配css文件</span></span><br><span class="line">        <span class="comment">//css-loader只负责css文件加载，不负责解析，要解析需要使用style-loader</span></span><br><span class="line">        use: [&#123;</span><br><span class="line">          loader: <span class="string">&#x27;style-loader&#x27;</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          loader: <span class="string">&#x27;css-loader&#x27;</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          loader: <span class="string">&#x27;less-loader&#x27;</span><span class="comment">//less文件loader</span></span><br><span class="line">        &#125;]<span class="comment">//使用loader</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>执行<code>npm run build</code></p><p> less文件生效了，字体是orange，大小为50px。</p></li></ol><h4 id="图片文件的处理"><a href="#图片文件的处理" class="headerlink" title="图片文件的处理"></a>图片文件的处理</h4><p>需要准备: 两张图片，图片大小为一张8KB以下（实际大小为5KB，名称为small.jpg），一张大于8KB（实际大小为10KB，名称为big.jpg），新建一个img文件夹将两张图片放入。</p><ol><li><p>修改<code>normal.css</code>样式，先使用小图片作为背景</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="comment">/* background-color: red; */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;../img/small.jpg&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 此时如果直接使用<code>npm run build</code> 直接打包会报错，因为css文件中引用了图片url，此时需要使用<code>url-loader</code>。</p></li><li><p>安装使用<code>url-loader</code>处理图片</p><p> <code>url-loader</code>像 <code>file loader</code> 一样工作，但如果文件小于限制，可以返回 <a href="https://tools.ietf.org/html/rfc2397">data URL</a> 。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev url-loader</span><br></pre></td></tr></table></figure><p> 配置:</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.(png|jpg|gif|jpeg)$/</span>,<span class="comment">//匹配png/jpg/gif格式图片</span></span><br><span class="line">    use: [</span><br><span class="line">    &#123;</span><br><span class="line">        loader: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">            limit: <span class="number">8192</span><span class="comment">//图片小于8KB时候将图片转成base64字符串，大于8KB需要使用file-loader</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>打包</p><p> 使用<code>npm run build</code>打包后，打开<code>index.html</code>。</p><p> 小于<code>limit</code>大小的图片地址被编译成base64格式的字符串。</p><p> 此时修改css文件，使用big.jpg做背景。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">body&#123;</span><br><span class="line">  <span class="comment">/* background-color: red; */</span></span><br><span class="line">  <span class="comment">/* background: url(&quot;../img/small.jpg&quot;); */</span></span><br><span class="line">  background: url(<span class="string">&quot;../img/big.jpg&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 再次打包，报错，提示未找到file-loader模块。</p><p> 因为大于<code>limit</code>的图片需要<code>file-loader</code>来打包。</p></li><li><p>安装使用<code>file-loader</code>处理图片</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev file-loader</span><br></pre></td></tr></table></figure><p> 不需要配置，因为<code>url-loader</code>超过limit的图片会直接使用<code>file-loader</code>。</p><p> 再次打包，没有报错，打包成功，但是图片未显示。</p><ul><li>当加载的图片大小<code>小于limit</code>，使用base64将图片编译成字符</li><li>当加载的图片大小<code>大于limit</code>，使用file-loader模块直接将big.jpg直接打包到dist文件家，文件名会使用hash值防止重复。</li><li>此时由于文件路径不对所以导致没有加载到图片</li></ul></li><li><p>如何使用<code>file-loader</code>，指定路径</p><p> 修改output属性</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">output:&#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),<span class="comment">//动态获取打包后的文件路径,path.resolve拼接路径</span></span><br><span class="line">    filename: <span class="string">&#x27;bundle.js&#x27;</span>,<span class="comment">//打包后的文件名</span></span><br><span class="line">    publicPath: <span class="string">&#x27;dist/&#x27;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p> 此时打包，图片正常显示</p><p> 注意：一般来说，index.html最终也会打包到dist文件夹下，所以，并不需要配置publicPath，如何打包index.html请看webpack处理.vue文件。</p><p> <code>file-loader</code>打包后，使用hash值做文件名太长，此时可以使用<code>options</code>的一些配置。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">options: &#123;</span><br><span class="line">    limit: <span class="number">8192</span>,<span class="comment">//图片小于8KB时候将图片转成base64字符串，大于8KB需要使用file-loader</span></span><br><span class="line">    name: <span class="string">&#x27;img/[name]-[hash:8].[ext]&#x27;</span><span class="comment">//img表示文件父目录，[name]表示文件名,[hash:8]表示将hash截取8位,[ext]表示后缀</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 修改options，加上name属性，其中img表示文件父目录，[name]表示文件名,[hash:8]表示将hash截取8位[ext]表示后缀</p><p> 再次打包</p></li></ol><h4 id="ES6语法处理"><a href="#ES6语法处理" class="headerlink" title="ES6语法处理"></a>ES6语法处理</h4><p>webpack打包时候ES6语法没有打包成ES5语法，如果需要将ES6打包成ES5语法，那么就需要使用babel。直接使用babel对应的loader就可以了。</p><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev babel-loader@7 babel-core babel-preset-es2015</span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">    <span class="comment">//排除node模块的js和bower的js</span></span><br><span class="line">    exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">            loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">            <span class="comment">//如果要使用@babel/preset-env这里需要在根目录新建一个babel的文件</span></span><br><span class="line">            <span class="comment">// presets: [&#x27;@babel/preset-env&#x27;]</span></span><br><span class="line">            <span class="comment">//这里直接使用指定</span></span><br><span class="line">            presets: [<span class="string">&#x27;es2015&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>如果要使用<code>@babel/preset-env</code>这里需要在根目录新建一个<code>babel</code>的文件</p></li><li><p><code>exclude</code>排除不需要打包的文件</p></li></ol><h3 id="webpack的vue"><a href="#webpack的vue" class="headerlink" title="webpack的vue"></a>webpack的vue</h3><h4 id="简单安装使用vue"><a href="#简单安装使用vue" class="headerlink" title="简单安装使用vue"></a>简单安装使用vue</h4><p>如果需要使用vue，必须使用npm先安装vue。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue --save</span><br></pre></td></tr></table></figure><p>使用vue简单开发。</p><p>准备工作：在项目根目录执行<code>npm install vue --save </code>，下载安装vue。</p><ol><li><p>在入口文件main.js导入已安装的vue，并在index.html声明要挂载的div。在main.js加入以下代码。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用vue开发</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">&quot;hello webpack and vue&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p> 修改<code>index.html</code>代码，添加</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>再次打包<code>npm run build</code>后打开index.html</p><p> 发现message并没有正确显示，打开console发现vue报错。错误提示我们，正在使用<code>runtime-only</code>构建，不能将template模板编译。</p><ul><li><p><code>runtime-only</code>模式，代码中不可以有任何template，因为无法解析。</p></li><li><p><code>runtime-complier</code>模式，代码中可以有template，因为complier可以用于编译template。</p><p>在webpack中配置，设置指定使用<code>runtime-complier</code>模式。</p><p>在<code>webpack.config.js</code>配置下修改</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">    <span class="comment">// alias:别名</span></span><br><span class="line">    alias: &#123;</span><br><span class="line">       <span class="comment">//指定vue使用vue.esm.js</span></span><br><span class="line">      <span class="string">&#x27;vue$&#x27;</span>:<span class="string">&#x27;vue/dist/vue.esm.js&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>重新打包，显示正确</p></li></ol><h4 id="如何分步抽取实现vue模块"><a href="#如何分步抽取实现vue模块" class="headerlink" title="如何分步抽取实现vue模块"></a>如何分步抽取实现vue模块</h4><ul><li>创建vue的template和el关系</li><li>el表示挂载DOM的挂载点</li><li>template里面的html将替换挂载点</li></ul><p>一般我们使用vue会开发单页面富应用(single page application)，只有一个index.html，而且index.html都是简单结构。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>webpack<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./dist/bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p>第一次抽取，使用template替换<code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code>。</p><p> 修改<code>main.js</code>的vue相关代码</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用vue开发</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  template:<span class="string">`</span></span><br><span class="line"><span class="string">  &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;button @click=&#x27;btnClick&#x27;&gt;这是一个按钮&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;h2&gt;&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">&quot;hello webpack and vue&quot;</span>,</span><br><span class="line">    name: <span class="string">&#x27;zykj&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    btnClick()&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;按钮被点击了&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p> 使用template模板替换挂载的id为app的div元素，此时不需要修改html代码了，只需要写template。</p><p> 再次打包，显示成功。</p></li><li><p>第二次抽取，使用组件化思想替换template</p><p> 在vue目录下创建<code>App.vue</code></p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        &#123;&#123;message&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                message: <span class="string">&quot;Hello world!&quot;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 修改main.js，vue实例中注册组件，并使用组件</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用vue开发</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//导入封装vue的.vue文件</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./vue/App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="comment">//使用组件</span></span><br><span class="line">  template: <span class="string">&#x27;&lt;App/&gt;&#x27;</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="comment">//注册局部组件</span></span><br><span class="line">    App</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p> 再次使用<code>npm run build</code>打包，打包成功，显示和使用template替换div一样。</p></li><li><p>第三次抽取组件对象，封装到新的js文件，并使用模块化导入main.js</p><p> 需要安装 vue-loader</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev vue-loader vue-template-compiler</span><br></pre></td></tr></table></figure><p> 此处我的vue-loader是15.9.2、会报错，此时需要降低版本</p><p> 在<code>package.json</code> 中<code>webpack3.x将其修改为13.0.0、webpack4.x将其修改为14.2.4(这就是在使用webpack4遇到的坑)</code></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;vue-loader&quot;: &quot;^14.2.4&quot;</span><br></pre></td></tr></table></figure><p> 重新安装版本</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p> 配置<code>vue-loader</code>、在<code>webpack.config.js</code> module-&gt;rules中</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test:<span class="regexp">/\.vue$/</span>,</span><br><span class="line">    use: [<span class="string">&#x27;vue-loader&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 再次打包，打包成功，样式生效了。</p></li><li><p>组件化开发</p><p> 我们使用app.vue分离了模板、行为、样式，但是不可能所有的模板和样式都在一个vue文件内，所以要用组件化。</p><p> 在vue文件夹下新建一个<code>Cpn.vue</code>文件</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&#x27;title&#x27;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/ecmascript-6&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&quot;Cpn&quot;</span>,</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;组件名字是Cpn&quot;</span></span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.title</span> &#123;</span></span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 将Cpn.vue组件导入到App.vue</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&#x27;title&#x27;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用Cpn组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Cpn</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/ecmascript-6&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">//导入Cpn组件</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Cpn <span class="keyword">from</span> <span class="string">&#x27;./Cpn.vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        message: <span class="string">&quot;hello webpack&quot;</span>,</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;zzz&quot;</span></span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      btnclick() &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line"><span class="javascript">      Cpn <span class="comment">//注册Cpn组件</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.title</span> &#123;</span></span><br><span class="line">  color: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 再次打包，打开index.html，cpn组件的内容显示基于此，一个vue文件可以依赖导入很多vue文件，组成一个单页面富应用。</p><ul><li><p>如果你在使用ES6语法导入模块时候想要简写的时候，例如这样省略<code>.vue</code>后缀</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Cpn <span class="keyword">from</span> <span class="string">&#x27;./Cpn&#x27;</span></span><br></pre></td></tr></table></figure><p>  可以在<code>webpack.config.js</code>中配置：</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">    <span class="comment">//导入模块简写省略指定后缀如 import App from &#x27;./vue/App&#x27;</span></span><br><span class="line">    extensions: [<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.css&#x27;</span>, <span class="string">&#x27;.vue&#x27;</span>],</span><br><span class="line">    <span class="comment">// alias:别名</span></span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="comment">//指定vue使用vue.esm.js</span></span><br><span class="line">      <span class="string">&#x27;vue$&#x27;</span>:<span class="string">&#x27;vue/dist/vue.esm.js&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="webpack的plugin"><a href="#webpack的plugin" class="headerlink" title="webpack的plugin"></a>webpack的plugin</h3><blockquote><p>plugin插件用于扩展webpack的功能的扩展，例如打包时候优化，文件压缩。</p></blockquote><p>loader和plugin的区别</p><ul><li><p>loader主要用于转化某些类型的模块，是一个转化器。</p></li><li><p>plugin主要是对webpack的本身的扩展，是一个扩展器。</p></li></ul><p>plugin的使用过程</p><ul><li><p>步骤一：通过npm安装需要使用的plugins(某些webpack已经内置的插件不需要在安装)</p></li><li><p>步骤二：在<code>webpack.config.js</code>中的plugins中配置插件。</p></li></ul><h4 id="添加版权的Plugin"><a href="#添加版权的Plugin" class="headerlink" title="添加版权的Plugin"></a>添加版权的Plugin</h4><p><code>BannerPlugin</code>插件是属于webpack自带的插件可以添加版权信息。</p><p>自带的插件无需安装，直接配置。</p><p>先获取webpack的对象，在配置BannerPlugin插件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取webpack</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"><span class="comment">//2.配置plugins</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    plugins:[</span><br><span class="line">        <span class="keyword">new</span> webpack.BannerPlugin(<span class="string">&#x27;最终解释权归zykj所有&#x27;</span>)</span><br><span class="line">      ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打包后，查看bundle.js第一行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*! 最终解释权归zykj所有 */</span></span><br></pre></td></tr></table></figure><p>多了一行我们自定义的版权声明注释。</p><h4 id="打包html的plugin"><a href="#打包html的plugin" class="headerlink" title="打包html的plugin"></a>打包html的plugin</h4><p>之前我们的index.html文件都是存放在根目录下的。</p><p>在正式发布项目的时候发布的是dist文件夹的内容，但是dist文件夹是没有index.html文件的，那么打包就没有意义了。</p><p>所以我们需要将index.html也打包到dist文件夹中，这就需要使用<code>HtmlWebpackPlugin</code>插件了。</p><blockquote><p><code>HtmlWebpackPlugin</code>：</p><p>自动生成一个index.html文件（指定模板）</p><p>将打包的js文件，自动同script标签插入到body中</p></blockquote><p>首先需要安装<code>HtmlWebpackPlugin</code>插件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install html-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure><p>使用插件，修改webpack.config.js文件中的plugins部分</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取htmlWebpackPlugin对象</span></span><br><span class="line"><span class="keyword">const</span> htmlWbepackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="comment">//配置plugins</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        filename: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">        <span class="comment">//定义图片路径</span></span><br><span class="line">        <span class="comment">// publicPath: &quot;dist/&quot; // 不需要dist目录、需要注释</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">    plugins:[</span><br><span class="line">        <span class="keyword">new</span> webpack.BannerPlugin(<span class="string">&#x27;最终解释权归zykj所有&#x27;</span>),</span><br><span class="line">        <span class="keyword">new</span> htmlWbepackPlugin(&#123;</span><br><span class="line">          <span class="comment">// 选择根目录中的index.html作为模板  </span></span><br><span class="line">          template: <span class="string">&#x27;index.html&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">      ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>template表示根据哪个模板来生成index.html</li><li>需要删除<code>output</code>中添加的<code>publicPath</code>属性，否则插入的script标签的src可能有误</li></ol><p>再次打包，打开dist文件夹，多了一个index.html</p><p>自动加入了script引入了bundle.js。</p><h4 id="压缩打包代码插件"><a href="#压缩打包代码插件" class="headerlink" title="压缩打包代码插件"></a>压缩打包代码插件</h4><p><code>webpack3.x</code>:</p><p>uglifyjs-webpack-plugin是第三方插件，如果是vuecli2需要指定版本1.1.1。</p><p>安装：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install uglifyjs-webpack-plugin@<span class="number">1.1</span><span class="number">.1</span> --save-dev</span><br></pre></td></tr></table></figure><p>配置plugin</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取uglifyjs-webpack-plugin对象</span></span><br><span class="line"><span class="keyword">const</span> uglifyjsWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;uglifyjs-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="comment">//配置plugins</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    plugins:[</span><br><span class="line">        <span class="keyword">new</span> webpack.BannerPlugin(<span class="string">&#x27;最终解释权归zykj所有&#x27;</span>),</span><br><span class="line">        <span class="keyword">new</span> htmlWbepackPlugin(&#123;</span><br><span class="line">          template: <span class="string">&#x27;index.html&#x27;</span></span><br><span class="line">        &#125;),</span><br><span class="line">    <span class="keyword">new</span> uglifyjsWebpackPlugin()</span><br><span class="line">      ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打包过后，打开bundle.js，发现已经压缩了，此时版权声明被删除了。</p><p><code>webpack高版本</code>:自带了压缩插件。</p><p>参考: <a href="https://blog.csdn.net/weixin_30945319/article/details/96171406">webpack4 未设置mode会自动压缩</a></p><p>以webpack4.x为例、配置<code>package.json</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    ...,</span><br><span class="line">    &quot;dev&quot;: &quot;webpack --mode development&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;webpack --mode production&quot;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><ul><li><code>mode development</code>: 不会自动压缩</li><li><code>mode production</code>: 同样会调用<code>UglifyjsPlugin</code>插件、会自动压缩</li></ul><p>运行 <code>npm run dev</code>不会自动压缩</p><h3 id="webpack搭建本地服务器"><a href="#webpack搭建本地服务器" class="headerlink" title="webpack搭建本地服务器"></a>webpack搭建本地服务器</h3><p>webpack提供了一个可选的本地开发服务器，这个本地服务器基于node.js搭建，内部使用了express框架，可以实现热启动。</p><p>不过这是一个单独的模块，在webpack中使用之前需要先安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack-dev-server@2.9.1</span><br></pre></td></tr></table></figure><p>devServer也是webpack中一个选项，选项本省可以设置一些属性：</p><ul><li><code>contentBase</code>：为哪个文件夹提供本地服务，默认是根文件夹，这里我们需要改成 <code>./dist</code></li><li><code>port</code>：端口号</li><li><code>inline</code>：页面实时刷新</li><li><code>historyApiFallback</code>：在SPA（单页面富应用）页面中，依赖HTML5的history模式</li></ul><p>修改webpack.config.js的文件配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置webpack的入口和出口</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"> ...</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">&#x27;./dist&#x27;</span>,<span class="comment">//服务的文件夹</span></span><br><span class="line">    port: <span class="number">4000</span>,</span><br><span class="line">    inline: <span class="literal">true</span><span class="comment">//是否实时刷新</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置<code>package.json</code>的script：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;dev&quot;: &quot;webpack-dev-server --open&quot;</span><br></pre></td></tr></table></figure><ul><li><code>--open</code>: 表示直接打开浏览器</li></ul><p>启动服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>启动成功，自动打开浏览器，发现在本地指定端口启动了，此时你修改src文件内容，会热修改。</p><ol><li><p>服务器启动在内存中。</p></li><li><p>开发调试时候最好不要使用压缩js文件的插件，不易调试。</p></li></ol><h3 id="webpack的配置文件分离"><a href="#webpack的配置文件分离" class="headerlink" title="webpack的配置文件分离"></a>webpack的配置文件分离</h3><p><code>webpack.config.js</code>文件中有些是开发时候需要配置，有些事生产环境发布编译需要的配置，比如搭建本地服务器的devServer配置就是开发时配置，接下来我们分析如何分离配置文件。</p><p>目录结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">├── dist(要发布的文件，已经处理过的)</span><br><span class="line">├── build</span><br><span class="line">|├─── base.config.js</span><br><span class="line">|├─── dev.config.js</span><br><span class="line">|└─── prod.config.js</span><br><span class="line">├── src(源码文件夹)</span><br><span class="line">|    ├── js</span><br><span class="line">|    └──── mathUtils.js  </span><br><span class="line">├────├── css</span><br><span class="line">|    └──── normal.css</span><br><span class="line">|    ├── main.js</span><br><span class="line">└── index.html</span><br></pre></td></tr></table></figure><p>在根目录下新建一个<code>build</code>的文件夹，新建配置文件。</p><div class="tabs" id="tab-id"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab-id-1">base.config.js（公共的配置）</button></li><li class="tab"><button type="button" data-href="#tab-id-2">dev.config.js（开发时候需要的配置）</button></li><li class="tab"><button type="button" data-href="#tab-id-3">prod.config.js（构建发布时候需要的配置）</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab-id-1"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.导入node的path包获取绝对路径，需要使用npm init初始化node包</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="comment">//获取webpack</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"><span class="comment">//获取htmlWebpackPlugin对象</span></span><br><span class="line"><span class="keyword">const</span> htmlWbepackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.配置webpack的入口和出口</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">&#x27;./src/main.js&#x27;</span>,<span class="comment">//入口文件</span></span><br><span class="line">  output:&#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),<span class="comment">//动态获取打包后的文件路径,path.resolve拼接路径</span></span><br><span class="line">    filename: <span class="string">&#x27;bundle.js&#x27;</span>,<span class="comment">//打包后的文件名</span></span><br><span class="line">    <span class="comment">// publicPath: &#x27;dist/&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,<span class="comment">//正则表达式匹配css文件</span></span><br><span class="line">        <span class="comment">//css-loader只负责css文件加载，不负责解析，要解析需要使用style-loader</span></span><br><span class="line">        use: [&#123;</span><br><span class="line">          loader: <span class="string">&#x27;style-loader&#x27;</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          loader: <span class="string">&#x27;css-loader&#x27;</span></span><br><span class="line">        &#125;]<span class="comment">//使用loader</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,<span class="comment">//正则表达式匹配css文件</span></span><br><span class="line">        <span class="comment">//css-loader只负责css文件加载，不负责解析，要解析需要使用style-loader</span></span><br><span class="line">        use: [&#123;</span><br><span class="line">          loader: <span class="string">&#x27;style-loader&#x27;</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          loader: <span class="string">&#x27;css-loader&#x27;</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          loader: <span class="string">&#x27;less-loader&#x27;</span><span class="comment">//less文件loader</span></span><br><span class="line">        &#125;]<span class="comment">//使用loader</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|gif)$/</span>,<span class="comment">//匹配png/jpg/gif格式图片</span></span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              limit: <span class="number">8192</span>,<span class="comment">//图片小于8KB时候将图片转成base64字符串，大于8KB需要使用file-loader</span></span><br><span class="line">              name: <span class="string">&#x27;img/[name].[hash:8].[ext]&#x27;</span><span class="comment">//img表示文件父目录，[name]表示文件名,[hash:8]表示将hash截取8位[ext]表示后缀</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="comment">//排除node模块的js和bower的js</span></span><br><span class="line">        exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            <span class="comment">//如果要使用@babel/preset-env这里需要在根目录新建一个babel的文件</span></span><br><span class="line">            <span class="comment">// presets: [&#x27;@babel/preset-env&#x27;]</span></span><br><span class="line">            <span class="comment">//这里直接使用指定</span></span><br><span class="line">            presets: [<span class="string">&#x27;es2015&#x27;</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.vue$/</span>,<span class="comment">//正则匹配.vue文件</span></span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">&#x27;vue-loader&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    <span class="comment">// alias:别名</span></span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="comment">//指定vue使用vue.esm.js</span></span><br><span class="line">      <span class="string">&#x27;vue$&#x27;</span>:<span class="string">&#x27;vue/dist/vue.esm.js&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins:[</span><br><span class="line">    <span class="keyword">new</span> webpack.BannerPlugin(<span class="string">&#x27;最终解释权归zz所有&#x27;</span>),</span><br><span class="line">    <span class="keyword">new</span> htmlWbepackPlugin(&#123;</span><br><span class="line">      template: <span class="string">&#x27;index.html&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab-id-2"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">&#x27;./dist&#x27;</span>,<span class="comment">//服务的文件夹</span></span><br><span class="line">    port: <span class="number">4000</span>,</span><br><span class="line">    inline: <span class="literal">true</span><span class="comment">//是否实时刷新</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab-id-3"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> uglifyjsWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;uglifyjs-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins:[</span><br><span class="line">    <span class="keyword">new</span> uglifyjsWebpackPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>此时我们将<code>webpack.config.js</code>文件分成了三个部分，公共部分、开发部分、构建发布的部分。</p><ol><li><p>如果此时是dev环境，我们只需要使用<code>base.config.js</code>+<code>dev.config.js</code>的内容</p></li><li><p>如果此时是生产发布构建的环境，我们只需要使用<code>base.config.js</code>+<code>prod.config.js</code>的内容</p></li></ol><p>要将两个文件内容合并需要使用<code>webpack-merge</code>插件，安装<code>webpack-merge</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack-merge --save-dev</span><br></pre></td></tr></table></figure><p>合并内容都是将<code>base.config.js</code>的内容合并到dev或者prod的文件中，修改<code>dev.config.js</code>和<code>prod.config.js</code>文件。</p><div class="tabs" id="tab-id"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab-id-1">修改dev.config.js</button></li><li class="tab"><button type="button" data-href="#tab-id-2">修改prod.config.js</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab-id-1"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入webpack-merge对象</span></span><br><span class="line"><span class="keyword">const</span> webpackMerge = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>)</span><br><span class="line"><span class="comment">//导入base.config.js</span></span><br><span class="line"><span class="keyword">const</span> baseConfig = <span class="built_in">require</span>(<span class="string">&#x27;./base.config&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用webpackMerge将baseConfig和dev.config的内容合并</span></span><br><span class="line"><span class="built_in">module</span>.exports = webpackMerge(baseConfig, &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">&#x27;./dist&#x27;</span>,<span class="comment">//服务的文件夹</span></span><br><span class="line">    port: <span class="number">4000</span>,</span><br><span class="line">    inline: <span class="literal">true</span><span class="comment">//是否实时刷新</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab-id-2"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> uglifyjsWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;uglifyjs-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="comment">//导入webpack-merge对象</span></span><br><span class="line"><span class="keyword">const</span> webpackMerge = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>)</span><br><span class="line"><span class="comment">//导入base.config.js</span></span><br><span class="line"><span class="keyword">const</span> baseConfig = <span class="built_in">require</span>(<span class="string">&#x27;./base.config&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用webpackMerge将baseConfig和prod.config的内容合并</span></span><br><span class="line"><span class="built_in">module</span>.exports = webpackMerge(baseConfig, &#123;</span><br><span class="line">  plugins:[</span><br><span class="line">    <span class="keyword">new</span> uglifyjsWebpackPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>此时我们使用三个文件构成了配置文件，此时在不同环境使用不同的配置文件，但是webpack不知道我们新配置文件，此时我们需要在package.json中的script指定要使用的配置文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;webpack --config .&#x2F;build&#x2F;prod.config.js&quot;,</span><br><span class="line">    &quot;dev&quot;: &quot;webpack-dev-server --open --config .&#x2F;build&#x2F;dev.config.js&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>此时使用<code>npm run build</code>打包文件，dist文件并不在根目录下，因为我们在<code>base.config.js</code>中配置的出口文件使用的是当前文件的路径，即打包的根路径是配置文件的当前路径，也就是build文件夹。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">entry: <span class="string">&#x27;./src/main.js&#x27;</span>,<span class="comment">//入口文件</span></span><br><span class="line">    output:&#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),<span class="comment">//动态获取打包后的文件路径,path.resolve拼接路径</span></span><br><span class="line">    filename: <span class="string">&#x27;bundle.js&#x27;</span>,<span class="comment">//打包后的文件名</span></span><br><span class="line">    <span class="comment">// publicPath: &#x27;dist/&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：__dirname是当前文件路径，path.resolve拼接路径，所以在当前路径下创建了一个dist文件夹。</p></blockquote><p>此时修改output属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">output:&#123;</span><br><span class="line">    path: path.resolve(__dirname, &#39;..&#x2F;dist&#39;),&#x2F;&#x2F;动态获取打包后的文件路径,path.resolve拼接路径</span><br><span class="line">    filename: &#39;bundle.js&#39;,&#x2F;&#x2F;打包后的文件名</span><br><span class="line">    &#x2F;&#x2F; publicPath: &#39;dist&#x2F;&#39;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用<code>../dist</code>，在当前目录的上级目录创建dist文件夹</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Web教程 </category>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue.js进阶</title>
      <link href="/posts/f9d8baf9/"/>
      <url>/posts/f9d8baf9/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue-js进阶"><a href="#Vue-js进阶" class="headerlink" title="Vue.js进阶"></a>Vue.js进阶</h2><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><div class="note info"><p>参考资料 : <a href="https://www.jianshu.com/p/62f25ed4fb08">Vue之自定义指令</a></p></div><blockquote><p>除了默认设置的核心指令( v-model 和 v-show ), Vue 也允许注册自定义指令。</p></blockquote><p>关于指令,我们可以总结下面几点:</p><ul><li>指令是写在 HTML 属性地方的.<code>&lt;input v-model=&#39;name&#39; type=&#39;text&#39; /&gt;</code></li><li>指令都是以 <code>v-</code> 开头的.</li><li>指令表达式的右边一般也可以跟值 <code>v-if = false</code></li></ul><p>问题：我们需要一个指令,写在某个HTML表单元素上,然后让它在被加载到DOM中时,<code>自动获取焦点</code>.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>页面载入时，input 元素自动获取焦点：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-focus</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>注册一个全局自定义指令</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册一个全局自定义指令 v-focus</span></span><br><span class="line"><span class="comment">// 第一个参数focus是指令名,指令名在声明的时候,不需要加 v-</span></span><br><span class="line">Vue.directive(<span class="string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 当绑定元素插入到 DOM 中。</span></span><br><span class="line">  inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 聚焦元素</span></span><br><span class="line">    el.focus()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 创建根实例</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>注册一个局部指令</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建根实例</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  directives: &#123;</span><br><span class="line">    <span class="comment">// 注册一个局部的自定义指令 v-focus</span></span><br><span class="line">    focus: &#123;</span><br><span class="line">      <span class="comment">// 指令的定义</span></span><br><span class="line">      inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 聚焦元素</span></span><br><span class="line">        el.focus()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="directive"><a href="#directive" class="headerlink" title="directive"></a>directive</h4><p>全局：<code>Vue.directive(&#39;自定义指令名、不加v-&#39;,&#123; 参数 &#125;)</code></p><p>局部：<code>directives:&#123; 自定义指令名、不加v-:&#123; 参数&#125; &#125;</code></p><p>参数： 钩子函数</p><h5 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h5><p>指令定义函数提供了几个钩子函数（可选）：</p><ul><li><code>bind</code>: 只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个在绑定时执行一次的初始化动作。</li><li><code>inserted</code>: 被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中）。</li><li><code>update</code>: 被绑定元素所在的模板更新时调用，而不论绑定值是否变化。通过比较更新前后的绑定值，可以忽略不必要的模板更新。</li><li><code>componentUpdated</code>: 被绑定元素所在模板完成一次更新周期时调用。</li><li><code>unbind</code>: 只调用一次， 指令与元素解绑时调用。</li></ul><h5 id="钩子函数的参数"><a href="#钩子函数的参数" class="headerlink" title="钩子函数的参数"></a>钩子函数的参数</h5><p>钩子函数的参数有：</p><ul><li><code>el</code>: 指令所绑定的元素，可以用来直接操作 DOM 。</li><li><code>binding</code>: 一个对象，包含以下属性：<ul><li><code>name</code>: 指令名，不包括 <code>v-</code> 前缀。</li><li><code>value</code>: 指令的绑定值， 例如： <code>v-my-directive=&quot;1 + 1&quot;</code>, value 的值是 <code>2</code>。</li><li><code>oldValue</code>: 指令绑定的前一个值，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。无论值是否改变都可用。</li><li><code>expression</code>: 绑定值的表达式或变量名。 例如 <code>v-my-directive=&quot;1 + 1&quot;</code> ， expression 的值是 <code>&quot;1 + 1&quot;</code>。</li><li><code>arg</code>: 传给指令的参数。例如 <code>v-my-directive:foo</code>， arg 的值是 <code>&quot;foo&quot;</code>。</li><li><code>modifiers</code>: 一个包含修饰符的对象。 例如： <code>v-my-directive.foo.bar</code>, 修饰符对象 modifiers 的值是 <code>&#123; foo: true, bar: true &#125;</code>。</li></ul></li><li><code>vnode</code>: Vue 编译生成的虚拟节点。</li><li><code>oldVnode</code>: 上一个虚拟节点，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。</li></ul><h3 id="Vue组件化"><a href="#Vue组件化" class="headerlink" title="Vue组件化"></a>Vue组件化</h3><blockquote><p>WEB中的组件其实就是页面组成的一部分，好比是电脑中的每一个原件（如硬盘、键盘、鼠标），它是一个具有独立的逻辑和功能或页面，同时又能根据规定的接口规则进行相互融合，变成一个完整的应用。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cn.vuejs.org/images/components.png" alt="组件"></p><h4 id="全局组件和局部组件"><a href="#全局组件和局部组件" class="headerlink" title="全局组件和局部组件"></a>全局组件和局部组件</h4><ul><li><p>全局组件</p><ol><li>基本语法：  <code>const xxx =  Vue.extend(&#123;  template:&#39;&#39; &#125;) Vue.component(&#39;xxx&#39;,xxx)</code></li><li>语法糖： <code>Vue.component(&#39;xxx&#39;,&#123; template: &#39;&#39; &#125;)</code>  </li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">zykj</span>&gt;</span><span class="tag">&lt;/<span class="name">zykj</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">//一种方法</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> myCon = Vue.extend(&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">template: &#x27;<span class="tag">&lt;<span class="name">h1</span>&gt;</span>自定义组件!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>&#x27;</span></span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="javascript"><span class="comment">// 注册</span></span></span><br><span class="line"><span class="javascript">Vue.component(<span class="string">&#x27;zykj&#x27;</span>,myCon);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">//第二种方法</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 注册</span></span></span><br><span class="line"><span class="javascript">Vue.component(<span class="string">&#x27;zykj&#x27;</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">  template: &#x27;<span class="tag">&lt;<span class="name">h1</span>&gt;</span>自定义组件!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>&#x27;</span></span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="javascript"><span class="comment">// 创建根实例</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">&#x27;#app&#x27;</span></span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>局部组件</p><ol><li><p>基本语法： <code>const xxx =  Vue.extend(&#123;  template:&#39;&#39; &#125;)  components:&#123; &#39;xxx&#39; : xxx &#125;</code></p></li><li><p>语法糖：<code>components: &#123;  &#39;xxx&#39;: &#123; template: &#39;&#39; &#125;  &#125;</code>  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">zykj</span>&gt;</span><span class="tag">&lt;/<span class="name">zykj</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">//一种方法</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> zykj = Vue.extend(&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">template: &#x27;<span class="tag">&lt;<span class="name">h1</span>&gt;</span>自定义组件!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>&#x27;</span></span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">// 创建根实例</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">  components: &#123;</span><br><span class="line"><span class="javascript">    <span class="comment">// &lt;zykj&gt; 将只在父模板可用</span></span></span><br><span class="line"><span class="javascript">   <span class="string">&#x27;zykj&#x27;</span>: zykj,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 第二种方法直接创建</span></span></span><br><span class="line"><span class="javascript">    <span class="string">&#x27;myCon&#x27;</span> : &#123;</span></span><br><span class="line">        template : `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hello myCon<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h5 id="模板抽离"><a href="#模板抽离" class="headerlink" title="模板抽离"></a>模板抽离</h5><p>由于<code>template</code>模板书写太麻烦,这里提供几种方法</p><ol><li><p>script <code>text/x-template</code> 方法</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">zykj</span>&gt;</span><span class="tag">&lt;/<span class="name">zykj</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 通过设置id 来与 template 绑定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/x-template&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myCon&quot;</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是模板里的<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;zykj&quot;</span>,&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//用于绑定 template模板 中的id属性</span></span></span><br><span class="line"><span class="javascript">        template: <span class="string">&quot;#myCon&quot;</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        components:&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>&lt;template&gt;&lt;/template&gt;</code></p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">zykj</span>&gt;</span><span class="tag">&lt;/<span class="name">zykj</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 通过设置id 来与 template 绑定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;myCon&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是模板里的<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;zykj&quot;</span>,&#123;</span></span><br><span class="line"><span class="javascript">        template: <span class="string">&quot;#myCon&quot;</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        components:&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>​    </p><h4 id="父组件和子组件"><a href="#父组件和子组件" class="headerlink" title="父组件和子组件"></a>父组件和子组件</h4><p>子组件就是在父组件的<code>components</code>上定义</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-con2</span>&gt;</span><span class="tag">&lt;/<span class="name">my-con</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//构造一个组件 (子组件)</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> myCon1 = Vue.extend(&#123;</span></span><br><span class="line">        template:`</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">             <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello myCon1!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  </span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//父组件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> myCon2 = Vue.extend(&#123;</span></span><br><span class="line">        template:`</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello myCon2!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  </span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">my-con1</span>&gt;</span><span class="tag">&lt;/<span class="name">my-con1</span>&gt;</span> </span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `,</span><br><span class="line">        components:&#123;</span><br><span class="line"><span class="javascript">            <span class="string">&#x27;myCon1&#x27;</span>:myCon1  </span></span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        components:&#123;</span><br><span class="line"><span class="javascript">            <span class="string">&#x27;myCon2&#x27;</span> : myCon2</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="ref和-refs"><a href="#ref和-refs" class="headerlink" title="ref和$refs"></a>ref和$refs</h4><p><code>访问子组件实例或子元素</code></p><p>尽管存在 prop 和事件，有的时候你仍可能需要在 JavaScript 里直接访问一个子组件。为了达到这个目的，你可以通过 <code>ref</code> 这个 attribute 为子组件赋予一个 ID 引用。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base-input</span> <span class="attr">ref</span>=<span class="string">&quot;usernameInput&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">base-input</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在在你已经定义了这个 <code>ref</code> 的组件里，你可以使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$refs.usernameInput</span><br></pre></td></tr></table></figure><p>来访问这个 <code>&lt;base-input&gt;</code> 实例，以便不时之需。比如程序化地从一个父级组件聚焦这个输入框。在刚才那个例子中，该 <code>&lt;base-input&gt;</code> 组件也可以使用一个类似的 <code>ref</code> 提供对内部这个指定元素的访问，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;input&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>甚至可以通过其父级组件定义方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  <span class="comment">// 用来从父级组件聚焦输入框</span></span><br><span class="line">  focus: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.$refs.input.focus()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就允许父级组件通过下面的代码聚焦 <code>&lt;base-input&gt;</code> 里的输入框：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$refs.usernameInput.focus()</span><br></pre></td></tr></table></figure><p>当 <code>ref</code> 和 <code>v-for</code> 一起使用的时候，你得到的 ref 将会是一个包含了对应数据源的这些子组件的数组。</p><p><code>$refs</code> 只会在组件渲染完成之后生效，并且它们不是响应式的。这仅作为一个用于直接操作子组件的“逃生舱”——你应该避免在模板或计算属性中访问 <code>$refs</code>。</p><h4 id="组件数据存放问题"><a href="#组件数据存放问题" class="headerlink" title="组件数据存放问题"></a>组件数据存放问题</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">zykj</span>&gt;</span><span class="tag">&lt;/<span class="name">zykj</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;myCon&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是模板里的<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;zykj&quot;</span>,&#123;</span></span><br><span class="line"><span class="javascript">        template: <span class="string">&quot;#myCon&quot;</span>,</span></span><br><span class="line">        data()&#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">                title:<span class="string">&quot;我是title&quot;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        components:&#123;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    </span><br></pre></td></tr></table></figure><p>为什么返回的 data <code>data()&#123; return &#123;&#125; &#125;</code> <a href="https://www.bilibili.com/video/BV15741177Eh?p=57">为什么组件data必须是函数</a> 自己总结一下：组件data是函数避免了数据共用的问题、通过函数中返回对象会重新开辟空间。。。</p><h4 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h4><h5 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h5><blockquote><p>使用<code>props</code>属性。</p><p>props主要用于父组件传递数据给子组件，是你可以在组件上注册一些自定义特性。当一个值传递给一个prop特性的时候，它就变成了那个组件实例的一个属性。这样在子组件就可以使用该该值。请注意：所有的prop都使得期父子prop之间形成了一个单向下行绑定，即父级prop的更新会向下流动到子组件，但是反过来就不行，子组件不能改变父组件的状态。</p><p>每次父组件发生更新时，子组件中所有的prop都会被刷新为最新的值。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 通过v-bind绑定自定义的属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">zykj</span> <span class="attr">v-bind:ctitle</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">zykj</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;myCon&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    // ctitle 的内容就是 v-bind:ctitle绑定的 title</span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> &gt;</span>&#123;&#123; ctitle &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是模板里的<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> zykj = &#123;</span></span><br><span class="line"><span class="javascript">        template:<span class="string">&quot;#myCon&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">//自定义组件中传入的 ctitle 可以给子组件使用</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//数组形式</span></span></span><br><span class="line"><span class="javascript">        props: [<span class="string">&#x27;ctitle&#x27;</span>]</span></span><br><span class="line"><span class="javascript">        <span class="comment">// props:&#123; xxx:&#123;&#125; &#125; 对象形式 </span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="javascript">            title: <span class="string">&quot;Hello World&quot;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        components:&#123;</span><br><span class="line"><span class="javascript">            <span class="string">&#x27;zykj&#x27;</span>:zykj</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">   &#125;);</span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">script</span>/&gt;</span></span></span></span><br></pre></td></tr></table></figure><ul><li><p>prop 验证</p><p>  能判断的所有种类（也就是 type 值）有：<code>String, Number, Boolean, Function, Object, Array, Symbol</code></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;myComponent&#x27;</span>, &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="comment">// 基础类型检测 (null 意思是任何类型都可以)</span></span><br><span class="line">    propA: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="comment">// 多种类型</span></span><br><span class="line">    propB: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br><span class="line">    <span class="comment">// 必传且是字符串</span></span><br><span class="line">    propC: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="comment">//必传</span></span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 数字，有默认值</span></span><br><span class="line">    propD: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="comment">// 当不传入v-bind绑定的数据时、显示的默认数据</span></span><br><span class="line">      <span class="keyword">default</span>: <span class="number">100</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 数组/对象的默认值应当由一个工厂函数返回</span></span><br><span class="line">    propE: &#123;</span><br><span class="line">      type: <span class="built_in">Object</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">&#x27;hello&#x27;</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 自定义验证函数</span></span><br><span class="line">    propF: &#123;</span><br><span class="line">      validator: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//当函数返回 false 时，输出警告</span></span><br><span class="line">        <span class="keyword">return</span> value &gt; <span class="number">10</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><code>props对象里的 xXXX 绑定属性不支持驼峰命名 需要改成 x-xxx</code></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 需要改成x-xxx --&gt;</span><br><span class="line">&lt;zykj v-bind:c-title&#x3D;&quot;title&quot;&gt;&lt;&#x2F;zykj&gt;</span><br><span class="line"></span><br><span class="line">&lt;template id&#x3D;&quot;myCon&quot;&gt; </span><br><span class="line">&lt;!-- 别忘了一定要加一个根元素 --&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">    &lt;!-- 这里可以使用驼峰命名 --&gt;</span><br><span class="line">        &lt;h1&gt;&#123;&#123; cTitle &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;h1&gt;我是模板里的&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">const zykj &#x3D; &#123;</span><br><span class="line">        template:&quot;#myCon&quot;,</span><br><span class="line">        &#x2F;&#x2F;自定义组件中传入的 ctitle 可以给子组件使用</span><br><span class="line">        &#x2F;&#x2F;数组形式</span><br><span class="line">        props: &#123;</span><br><span class="line">        &#x2F;&#x2F; 1.通过驼峰命名的 xXxx</span><br><span class="line">        cTitle:&#123;</span><br><span class="line">        type: String</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h5><p>一般情况下、子组件要向父控件传入数据时、就要使用自定义事件</p><p>流程：</p><ul><li>子组件中通过 <code>$emit</code> 触发事件</li><li>父组件中通过 <code>v-on</code> 来监听子组件事件</li></ul><p><code>$emit( eventName, […args] )</code></p><ul><li>eventName：这是一个事件名，会绑定一个方法。当组件触发事件后，将调用这个方法。</li><li>…args：附加参数，会被抛出，由上述绑定的方法接收使用。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- $emit 传入 btncl 自定义事件 绑定方法btnc --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">zykj</span> @<span class="attr">btncl</span>=<span class="string">&quot;btnc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">zykj</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;myCon&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;btnclick(item)&quot;</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> zykj = &#123;</span></span><br><span class="line"><span class="javascript">    template:<span class="string">&quot;#myCon&quot;</span>,</span></span><br><span class="line">    data()&#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line">            items:[</span><br><span class="line"><span class="javascript">                &#123;<span class="attr">id</span>:<span class="string">&quot;1&quot;</span>,<span class="attr">name</span>:<span class="string">&quot;明日方舟&quot;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">id</span>:<span class="string">&quot;2&quot;</span>,<span class="attr">name</span>:<span class="string">&quot;碧蓝航线&quot;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">id</span>:<span class="string">&quot;3&quot;</span>,<span class="attr">name</span>:<span class="string">&quot;Miku&quot;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">id</span>:<span class="string">&quot;4&quot;</span>,<span class="attr">name</span>:<span class="string">&quot;zykj&quot;</span>&#125;,</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line"><span class="javascript">    <span class="comment">//通过对每个button绑定事件</span></span></span><br><span class="line">        btnclick(item)&#123;</span><br><span class="line"><span class="javascript">        <span class="comment">//通过 $emit 像父组件传入自定义事件(btncl)数据为 item </span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.$emit(<span class="string">&#x27;btncl&#x27;</span>,item)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="javascript">        title: <span class="string">&quot;Hello World&quot;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line"><span class="javascript">        <span class="string">&#x27;zykj&#x27;</span>:zykj</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line"><span class="javascript">    <span class="comment">//这里获取子组件传入 btncl 的 item 数据</span></span></span><br><span class="line">        btnc(item)&#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;btnc&quot;</span>,item);   </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="父子组件通信-案例"><a href="#父子组件通信-案例" class="headerlink" title="父子组件通信(案例)"></a>父子组件通信(案例)</h5><p>需求：父组件通过props向子组件传入数据、并且子组件可以修改父组件的数据，</p><p>问题：要避免子组件直接修改父组件的数据、可以根据父组件传入的数据给子组件创建一个data或者computed</p><p>方法一：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 父组件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- :numberx 像子组件传入numx  @numxchange 接收子组件传入的数据返回一个函数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">:number1</span>=<span class="string">&#x27;num1&#x27;</span> <span class="attr">:number2</span>=<span class="string">&#x27;num2&#x27;</span> @<span class="attr">num1change</span>=<span class="string">&quot;num1Change&quot;</span> @<span class="attr">num2change</span>=<span class="string">&quot;num2Change&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>父组件&#123;&#123;num1&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;num1&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>父组件&#123;&#123;num2&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;num2&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 子组件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;number1&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;dnumber1&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 通过绑定value 监听input事件、通过$emit向父组件传入数据 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;dnumber1&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;num1input&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;number2&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;dnumber2&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;num2input&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 父传子：props</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> cpn = &#123;</span></span><br><span class="line"><span class="javascript">      template: <span class="string">&quot;#cpn&quot;</span>,</span></span><br><span class="line">      data() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 通过data绑定一个新的值、内容为传入的numberx  </span></span></span><br><span class="line"><span class="javascript">          dnumber1:<span class="built_in">this</span>.number1,</span></span><br><span class="line"><span class="javascript">          dnumber2:<span class="built_in">this</span>.number2</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      props:&#123;</span><br><span class="line"><span class="javascript">        number1:[<span class="built_in">Number</span>,<span class="built_in">String</span>],</span></span><br><span class="line"><span class="javascript">        number2:[<span class="built_in">Number</span>,<span class="built_in">String</span>],</span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        num1input(event)&#123;</span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.dnumber1 = event.target.value</span></span><br><span class="line"><span class="javascript">          <span class="comment">//向父组件传入一个自定义事件 numxchange 参数为 dnumberx</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.$emit(<span class="string">&#x27;num1change&#x27;</span>,<span class="built_in">this</span>.dnumber1)</span></span><br><span class="line">        &#125;,</span><br><span class="line">        num2input(event)&#123;</span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.dnumber2 = event.target.value</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.$emit(<span class="string">&#x27;num2change&#x27;</span>,<span class="built_in">this</span>.dnumber2)</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">      data() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line">          num1:1,</span><br><span class="line">          num2:2,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        num1Change(value)&#123;</span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.num1=value</span></span><br><span class="line">        &#125;,</span><br><span class="line">        num2Change(value)&#123;</span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.num1=value</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      components: &#123;</span><br><span class="line">        cpn</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方法二：watch 侦听属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 父组件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">:number1</span>=<span class="string">&#x27;num1&#x27;</span> <span class="attr">:number2</span>=<span class="string">&#x27;num2&#x27;</span> @<span class="attr">num1change</span>=<span class="string">&quot;num1Change&quot;</span> @<span class="attr">num2change</span>=<span class="string">&quot;num2Change&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>父组件&#123;&#123;num1&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;num1&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>父组件&#123;&#123;num2&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;num2&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 子组件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;number1&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- v-model 绑定dnumberx --&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;dnumber1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;number2&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;dnumber2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 父传子：props</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> cpn = &#123;</span></span><br><span class="line"><span class="javascript">      template: <span class="string">&quot;#cpn&quot;</span>,</span></span><br><span class="line">      data() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">          dnumber1:<span class="built_in">this</span>.number1,</span></span><br><span class="line"><span class="javascript">          dnumber2:<span class="built_in">this</span>.number2</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      props:&#123;</span><br><span class="line"><span class="javascript">        number1:[<span class="built_in">Number</span>,<span class="built_in">String</span>],</span></span><br><span class="line"><span class="javascript">        number2:[<span class="built_in">Number</span>,<span class="built_in">String</span>],</span></span><br><span class="line">      &#125;,</span><br><span class="line">      watch: &#123;</span><br><span class="line"><span class="javascript">        <span class="comment">//当dnumberx内容改变后会触发  </span></span></span><br><span class="line">        dnumber1(newValue)&#123;</span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.dnumber1 = newValue * <span class="number">100</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.$emit(<span class="string">&#x27;num1change&#x27;</span>,newValue)</span></span><br><span class="line">        &#125;,</span><br><span class="line">        dnumber2(newValue)&#123;</span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.dnumber1 = newValue * <span class="number">100</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.$emit(<span class="string">&#x27;num2change&#x27;</span>,newValue)</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">      data() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line">          num1:1,</span><br><span class="line">          num2:2,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        num1Change(value)&#123;</span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.num1=value</span></span><br><span class="line">        &#125;,</span><br><span class="line">        num2Change(value)&#123;</span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.num1=value</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      components: &#123;</span><br><span class="line">        cpn</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="组件访问方式"><a href="#组件访问方式" class="headerlink" title="组件访问方式"></a>组件访问方式</h4><h5 id="父组件访问子组件"><a href="#父组件访问子组件" class="headerlink" title="父组件访问子组件"></a>父组件访问子组件</h5><ul><li><code>$children</code>：查找当前组件的直接子组件，可以遍历全部子组件， 需要注意 <code>$children</code> 并不保证顺序，也不是响应式的。</li><li><code>refs</code>: 查找命名子组件、子组件添加<code>ref=&#39;xxx&#39;</code>属性、通过 <code>this.$refs.xxx</code>获取</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过ref给子组件命名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">ref</span>=<span class="string">&quot;aaa&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span> &gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 子组件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      我是子组件</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 父传子：props</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> cpn = &#123;</span></span><br><span class="line"><span class="javascript">      template: <span class="string">&quot;#cpn&quot;</span>,</span></span><br><span class="line">      data() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">          name:<span class="string">&quot;我是子组件的name&quot;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        showMessage()&#123;</span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">&quot;showMessage&quot;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">      data() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">          message:<span class="string">&quot;hello&quot;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        btnClick()&#123;</span><br><span class="line"><span class="javascript">          <span class="comment">// 1. $children 是一个数组 通过索引取值</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// console.log(this.$children[0].showMessage)</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// for (let cpn of this.$children) &#123;</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">//   console.log(cpn.showMessage)</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// 2. $refs 默认返回的是一个对象 组件中添加 ref=&#x27;xxx&#x27;、xxx就为对象中的键名</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.aaa.name);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      components: &#123;</span><br><span class="line">        cpn</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="子组件访问父组件"><a href="#子组件访问父组件" class="headerlink" title="子组件访问父组件"></a>子组件访问父组件</h5><ul><li><code>$parent</code>: parent 访问得到的是它最近一级的父组件</li><li><code>$root</code>: 访问得到的是根父组件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 父组件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">ref</span>=<span class="string">&quot;aaa&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 子组件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      子组件消息：&#123;&#123;message&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span> &gt;</span>子组件按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 父传子：props</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> cpn = &#123;</span></span><br><span class="line"><span class="javascript">      template: <span class="string">&quot;#cpn&quot;</span>,</span></span><br><span class="line">      data() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">          message:<span class="string">&quot;我是子组件的name&quot;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        btnClick()&#123;</span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">&quot;子组件按钮被点击&quot;</span>)</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 1.访问父组件$parent</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.message = <span class="built_in">this</span>.$parent.message</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 2.访问根组件$root</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="built_in">this</span>.$root)</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="built_in">this</span>.$root.message)</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">      data() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">          message:<span class="string">&quot;我是父组件消息&quot;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line">      components: &#123;</span><br><span class="line">        cpn</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h4><h5 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h5><blockquote><p>插槽（Slot）是Vue提出来的一个概念，正如名字一样，插槽用于决定将所携带的内容，插入到指定的某个位置，从而使模板分块，具有模块化的特质和更大的重用性。</p></blockquote><ul><li>使用<code>&lt;slot&gt;&lt;/slot&gt;</code>加了个slot标签，在父组件中，可以在父组件内写标签替换子组件标签中的slot</li><li>插槽可以使用默认值，slot里的<code>&lt;button&gt;button&lt;/button&gt;</code>就是插槽的默认值。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 不写内容会显示 slot 里的默认内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 子组件里面写的内容会替换 slot 里的内容 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color:red;&quot;</span>&gt;</span>这是插槽内容222<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">style</span>=<span class="string">&quot;color:red;&quot;</span>&gt;</span>这是插槽内容333<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 插槽的基本使用&lt;slot&gt;&lt;/slot&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        &#123;&#123;message&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;button&gt;button&lt;/button&gt;为插槽默认值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>button<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> cpn = &#123;</span></span><br><span class="line"><span class="javascript">        template: <span class="string">&quot;#cpn&quot;</span>,</span></span><br><span class="line">            data() &#123;</span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                    message: <span class="string">&quot;我是子组件&quot;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">            data() &#123;</span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                    message: <span class="string">&quot;我是父组件消息&quot;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            cpn</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h5><blockquote><p>具名插槽，就是可以让插槽按指定的顺序填充，而没有具名的插槽是按照你填充的顺序排列的，而具名插槽可以自定义排列。</p></blockquote><p>当有多个slot的时候、在子组件里面写上标签会将说有的slot替换</p><ul><li>通过<code>&lt;slot name=&quot;xxx&quot;&gt;&lt;/slot&gt;</code> 给插槽取名字</li><li>需要添加的标签的添加 <code>slot=&quot;xxx&quot;</code> xxx为name的xxx</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>没具名<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- slot中的left为 子组件中slot中的name --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;left&quot;</span>&gt;</span>这是左边具名插槽<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 新语法 渲染结果就是 这是中间具名插槽 没有标签包裹 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:center</span>&gt;</span>这是中间具名插槽<span class="tag">&lt;/<span class="name">template</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 新语法缩写 https://cn.vuejs.org/v2/guide/components-slots.html#具名插槽的缩写 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> #<span class="attr">right</span>&gt;</span>这是右边具名插槽<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 插槽的基本使用使用&lt;slot&gt;&lt;/slot&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;left&quot;</span>&gt;</span>左边<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;center&quot;</span>&gt;</span>中间<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;right&quot;</span>&gt;</span>右边<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span>&gt;</span>没有具名的插槽<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> cpn = &#123;</span></span><br><span class="line"><span class="javascript">    template: <span class="string">&quot;#cpn&quot;</span>,</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                message: <span class="string">&quot;我是子组件&quot;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            message: <span class="string">&quot;我是父组件消息&quot;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        cpn</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="编译作用域"><a href="#编译作用域" class="headerlink" title="编译作用域"></a>编译作用域</h5><blockquote><p>组件都有自己的作用域，自己组件的作用在自己组件内</p></blockquote><ul><li>在父组件中的子组件标签上使用的父组件的、子组件使用的子组件的</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用的vue实例作用域的isShow --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 插槽的基本使用使用&lt;slot&gt;&lt;/slot&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>哈哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 组件作用域，使用的子组件的作用域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> cpn = &#123;</span></span><br><span class="line"><span class="javascript">        template: <span class="string">&quot;#cpn&quot;</span>,</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                isShwo:<span class="literal">false</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                message: <span class="string">&quot;我是父组件消息&quot;</span>,</span></span><br><span class="line"><span class="javascript">                isShow:<span class="literal">true</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            cpn</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h5><blockquote><p>父组件在用子组件来填充插槽的时候 有时候需要用到子组件里面插槽的数据 .<br>子组件文件插槽上带的数据 在父组件的子组件标签里 让一个标签 带有 <code>slot-scope=&quot;xxx&quot;</code> 去接收</p></blockquote><p>步骤：</p><ul><li>在子组件模板中的插槽<code>slot</code> 绑定子组件中data中的数据命名为<code>xxx1</code></li><li>父组件中的子组件里通过<code>&lt;template&gt;&lt;/template&gt;</code> 的属性 <code>slot-scope=&quot;xxx2&quot;</code> 接收数据、通过 <code>xxx2.xxx1</code> 获取数据</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">zykj</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 2.5以下必须使用template --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;slot&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;span v-for=&quot;item in slot.data&quot;&gt;&#123;&#123;item&#125;&#125; - &lt;/span&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; slot.data.join(&quot; - &quot;) &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">zykj</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">zykj</span>&gt;</span><span class="tag">&lt;/<span class="name">zykj</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;myCon&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:data</span>=<span class="string">&quot;pLanguage&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in pLanguage&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> zykj = &#123;</span></span><br><span class="line"><span class="javascript">        template: <span class="string">&quot;#myCon&quot;</span>,</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                pLanguage: [<span class="string">&#x27;JavaScript&#x27;</span>,<span class="string">&#x27;Python&#x27;</span>,<span class="string">&#x27;Java&#x27;</span>]       </span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            title: <span class="string">&quot;Hello World&quot;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line"><span class="javascript">            <span class="string">&#x27;zykj&#x27;</span>: zykj</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web教程 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue.js基础学习</title>
      <link href="/posts/4a869c3f/"/>
      <url>/posts/4a869c3f/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue基础学习"><a href="#Vue基础学习" class="headerlink" title="Vue基础学习"></a>Vue基础学习</h2><h3 id="什么是Vue"><a href="#什么是Vue" class="headerlink" title="什么是Vue"></a>什么是Vue</h3><blockquote><p>Vue是一套用于构建用户界面的渐进式JavaScript框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库<code>只关注视图层</code>，方便与第三方库或既有项目整合。</p></blockquote><h3 id="最简单的一个Vue"><a href="#最简单的一个Vue" class="headerlink" title="最简单的一个Vue"></a>最简单的一个Vue</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- html代码，view层，模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>第一个Vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 引入相关文件，然创建实例，在实例中写各种方法就ok了 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//vue实例</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vue = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el:<span class="string">&quot;#app&quot;</span>, <span class="comment">//挂载元素</span></span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="javascript">                msg:<span class="string">&quot;Hello world&quot;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        <span class="comment">/* vm就是new出来的实例 */</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(vue.$data);<span class="comment">//也就是数据data，后面还有很多挂载在vm（new出来的）实例上的属性</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World</span><br></pre></td></tr></table></figure><blockquote><p>Vue实例，每一个应用都是通过Vue这个构造函数创建根实例（root instance）启动New Vue（选项对象）。需要传入选项对象，对象包含挂在元素，数据，模板、方法等。</p></blockquote><ul><li><p><em>el</em>：挂载元素选择器   —   String|HtmlElement</p></li><li><p><em>data</em>：代理数据   —   Object|Function</p></li><li><p><em>methods</em>：定义方法   —   Object </p></li><li><p><em>template</em>：模板、它会替换 <code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code>里面的内容</p><p>Vue代理data数据，每个vue实例都会代理其data对象里所有的属性，这些被代理的属性是响应的。新添加的属性不具备响应功能，改变后不会更新视图。<br>Vue实例自身属性和方法，暴露自身的属性和方法,以<code>&quot;$&quot;</code>开头的，例如：<code>$el、$data ... </code></p></li></ul><p>解释：我们通过引入vue.js文件、创建Vue对象绑定<code>id</code>为<code>app</code>的div、在<code>data</code>写入msg对象、值为<code>Hello world</code>,最后在div中通过&#123;&#123;&#125;&#125;(双大括号)绑定了data中msg的值。在控制台中通过 <code>vue.msg = &quot;Hello&quot;</code> 可以动态修改msg的内容。</p><hr/><h3 id="vue-cli的基本使用"><a href="#vue-cli的基本使用" class="headerlink" title="vue-cli的基本使用"></a>vue-cli的基本使用</h3><blockquote><p>暂时不用 后面通过Vue-cli创建时再使用</p></blockquote><ul><li><p>安装Vue-cli</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><p>等待安装完成</p><ul><li><p>卸载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall -g @vue/cli</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>验证vue版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vue -V 或者 vue --version</span><br><span class="line"></span><br><span class="line">ps: </span><br><span class="line">-V: 大写字母V </span><br></pre></td></tr></table></figure></li></ul><ul><li><p>创建Vue项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vue create [项目名]</span><br><span class="line"></span><br><span class="line">ps:</span><br><span class="line">项目名中不要包含大写字母</span><br><span class="line">可加参数：</span><br><span class="line">-p, --preset &lt;presetName&gt;       忽略提示符并使用已保存的或远程的预设选项</span><br><span class="line">-d, --default                   忽略提示符并使用默认预设选项</span><br><span class="line">-i, --inlinePreset &lt;json&gt;       忽略提示符并使用内联的 JSON 字符串预设选项</span><br><span class="line">-m, --packageManager &lt;<span class="built_in">command</span>&gt;  在安装依赖时使用指定的 npm 客户端</span><br><span class="line">-r, --registry &lt;url&gt;            在安装依赖时使用指定的 npm registry</span><br><span class="line">-g, --git [message]             强制 / 跳过 git 初始化，并可选的指定初始化提交信息</span><br><span class="line">-n, --no-git                    跳过 git 初始化</span><br><span class="line">-f, --force                     覆写目标目录可能存在的配置</span><br><span class="line">-c, --<span class="built_in">clone</span>                     使用 git <span class="built_in">clone</span> 获取远程预设选项</span><br><span class="line">-x, --proxy                     使用指定的代理创建项目</span><br><span class="line">-b, --bare                      创建项目时省略默认组件中的新手指导信息</span><br><span class="line">-h, --<span class="built_in">help</span>                      输出使用帮助信息</span><br></pre></td></tr></table></figure></li><li><p>初学者配置：</p><p>Vue CLI v4.3.1<br>? Please pick a preset: <code>Manually select features</code><br>? Check the features needed for your project: <code>Babel, Router, CSS Pre-processors</code><br>? Use history mode for router? (Requires proper server setup for index fallback in production) <code>Yes</code><br>? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): <code>Less</code><br>? Where do you prefer placing config for Babel, ESLint, etc.? <code>In dedicated config files</code><br>? Save this as a preset for future projects? <code>No</code></p></li><li><p>运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure></li><li><p>工程目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">├── README.md</span><br><span class="line">├── index.html</span><br><span class="line">├── src</span><br><span class="line">│   ├── App.vue</span><br><span class="line">│   ├── assets</span><br><span class="line">│   │   ├── img</span><br><span class="line">│   │   └── logo.png</span><br><span class="line">│   ├── components</span><br><span class="line">│   │   └──Helloworld.vue</span><br><span class="line">│   ├── views</span><br><span class="line">│   │   └── Home.vue</span><br><span class="line">│   ├── main.js</span><br><span class="line">│   ├── router &#x2F;&#x2F; 路由配置文件</span><br><span class="line">│   │   └── router.js  </span><br><span class="line">│   └── store</span><br><span class="line">│       └──store.js  </span><br><span class="line">└── babel.config.js</span><br><span class="line">└── package.json</span><br><span class="line">└── package-lock.json</span><br></pre></td></tr></table></figure><ul><li>public存放静态文件</li><li>public/index.html生成项目的入口文件，webpack打包的js,css也会自动注入到该页面中</li><li>src存放各种vue文件的地方</li><li>src/assets用于存放各种静态文件，如图片，css</li><li>src/compnents用于存放我们的公共组件</li><li>src/views用于存放我们写好的各种页面</li><li>src/App.vue主vue组件 引入其他组件，app.vue是项目的主组件，所有页面都是在app.vue下切换的</li><li>src/main.js入口文件，作用是初始化vue实例，也可以在此文件中引用组件库或者全局变量</li><li>src/router.js路由文件，是为各个页面的地址路径</li><li>src/store.js状态文件</li><li>package.json模块基本信息，项目开发所需要模块，版本，项目名称</li></ul></li></ul><div class="note info"><p>视频教程: <a href="https://www.bilibili.com/video/BV1mj411f7TU">https://www.bilibili.com/video/BV1mj411f7TU</a></p></div><h3 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h3><ul><li><p><code>mustache</code>语法 &#123;&#123;&#125;&#125;</p><p>  通过双大括号 &#123;&#123;&#125;&#125; 绑定data里面的值：&#123;&#123;&#125;&#125; 里面的值为data里面的数据、也可以是表达式</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; msg &#125;&#125;</span><br><span class="line">  </span><br><span class="line">&#123;&#123; msg + &quot; : &quot; + type &#125;&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>v-once</code> 这个指令<code>不需要任何表达式</code>，它的作用就是定义它的元素或组件只会渲染一次，包括元素或者组件的所有字节点。首次渲染后，不再随着数据的改变而重新渲染。也就是说使用v-once，那么该块都将被视为静态内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-once</span> &gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>v-html</code> 会把传入的数据解析成html代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-html</span>=<span class="string">&quot;url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> const app = new Vue(&#123;</span><br><span class="line">     el : &#x27;#app&#x27;,</span><br><span class="line">     data : &#123;</span><br><span class="line">     url : &#x27;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span> 百度一下 <span class="tag">&lt;<span class="name">a</span>/&gt;</span>&#x27;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure></li><li><p><code>v-text</code>  用于渲染普通文本 (最好不用这个)、因为会覆盖标签里的内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;msg&#125;&#125; + &quot;!&quot;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-text</span>=<span class="string">&quot;msg&quot;</span>&gt;</span>哈哈哈<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> const app = new Vue(&#123;</span><br><span class="line">     el : &#x27;#app&#x27;,</span><br><span class="line">     data : &#123;</span><br><span class="line">     msg: &quot;Hello world&quot;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line">渲染结果：</span><br><span class="line"></span><br><span class="line">Hello world!</span><br><span class="line">Hello world</span><br></pre></td></tr></table></figure></li><li><p><code>v-pre</code> 可以理解为不渲染标签里的内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">const app = new Vue(&#123;</span><br><span class="line">    el : &#x27;#app&#x27;,</span><br><span class="line">    data : &#123;</span><br><span class="line">    msg: &quot;Hello world&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">渲染结果：</span><br><span class="line"></span><br><span class="line">&#123;&#123; msg &#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>v-cloak</code> 会在 Vue 实例编译结束时，从绑定的 HTML 元素上被移除。指令是解决屏幕闪动的好方法、但在大型、工程化的项目不需要使用 (不常用) </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">html:</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot; v-cloak&gt;</span><br><span class="line">    &#123;&#123;msg&#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">css:</span><br><span class="line">[v-cloak]&#123;</span><br><span class="line">    display: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">javascript:</span><br><span class="line">const app &#x3D; new Vue(&#123;</span><br><span class="line">    el : &#39;#app&#39;,</span><br><span class="line">    data : &#123;</span><br><span class="line">    msg: &quot;Hello world&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="数据绑定-v-bind"><a href="#数据绑定-v-bind" class="headerlink" title="数据绑定 v-bind"></a>数据绑定 v-bind</h3><div class="note info"><p>资料参考：<a href="https://www.jianshu.com/p/98dfa4c6389c">vue.js - v-bind 的一些理解和思考</a></p></div><blockquote><p>v-bind是<code>用于绑定数据和元素属性的</code>: <code>v-bind:[属性名]=&quot;data中的键名&quot;</code>、属性名可以为<code>标签属性</code>或<code>自定义属性</code>，简写为 :xxx<br>html属性不能使用 &#123;&#123;&#125;&#125; (双大括号)<code>形式绑定，只能使用</code>v-bind指令</p></blockquote><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><ul><li><p><code>v-bind</code>语法</p><p>通过 v-bind 绑定数据 <code>v-bind:[属性]=&quot;data中的键名&quot;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;title&quot;</span> <span class="attr">v-bind:type</span>=<span class="string">&quot;type&quot;</span>&gt;</span>我是第一个div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;title1 + &#x27; &#x27; title2&quot;</span> <span class="attr">v-bind:type</span>=<span class="string">&quot;type&quot;</span>&gt;</span>我是第二个div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以简写成 <code>:[属性]</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span> <span class="attr">:type</span>=<span class="string">&quot;type&quot;</span>&gt;</span>我是一个简写的div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以写函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &lt;p v-bind:title=&quot;getTitle()&quot;通过函数获取title&lt;/p&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">    el: &#x27;#app&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        getTitle: function () &#123;</span><br><span class="line">            return &#x27;title1 title2&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>动态绑定</p><p> <code>v-bind:[data中的键名]=&quot;data中的键名&quot;</code></p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:</span>[<span class="attr">attrName</span>]=<span class="string">&quot;title&quot;</span>&gt;</span>我是用于动态绑定<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>示例</p> <details green><summary> <p>vue</p> </summary>              <div class='content'>              <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span> </span><br><span class="line">   <span class="comment">&lt;!--template里面只能有一个子元素、也就是这里的直接div--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span>&gt;</span>数据绑定:v-bind<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- &#123;&#123; &#125;&#125; 里面的值为data里面的数据、也可以是表达式--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; msg + &quot; : &quot; + type &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 通过v-bind 绑定数据 v-bind:[属性]=&quot;data中的键名&quot; --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;title&quot;</span> <span class="attr">v-bind:type</span>=<span class="string">&quot;type&quot;</span>&gt;</span>我是一个div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 可以简写成 :[属性] --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span> <span class="attr">:type</span>=<span class="string">&quot;type&quot;</span>&gt;</span>我是一个简写的div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--动态绑定 v-bind:[data中的键名]=&quot;data中的键名&quot; --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:</span>[<span class="attr">attrName</span>]=<span class="string">&quot;title&quot;</span>&gt;</span>我是用于动态绑定<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">   <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">   name: <span class="string">&quot;Study01&quot;</span>,</span></span><br><span class="line">   data() &#123;</span><br><span class="line"><span class="javascript">   <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">   msg: <span class="string">&quot;这里是msg的内容&quot;</span>,</span></span><br><span class="line"><span class="javascript">   type: <span class="string">&quot;这里是type的内容&quot;</span>,</span></span><br><span class="line"><span class="javascript">   title: <span class="string">&quot;这里是title的内容&quot;</span>,</span></span><br><span class="line"><span class="javascript">   attrName: <span class="string">&quot;title&quot;</span></span></span><br><span class="line">   &#125;</span><br><span class="line">   &#125;,</span><br><span class="line"><span class="javascript">   <span class="comment">//钩子函数：mounted是挂载是触发的函数</span></span></span><br><span class="line">   mounted() &#123;</span><br><span class="line"><span class="javascript">   <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">   <span class="comment">//通过这个动态修改值</span></span></span><br><span class="line"><span class="javascript">   <span class="built_in">this</span>.msg = <span class="string">&quot;通过this.[data中的键名]可以动态修改内容&quot;</span></span></span><br><span class="line">   &#125;,3000)</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>              </div>            </details><p> 渲染结果(3秒后的)：</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>基本语法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>通过this.[data中的键名]可以动态修改内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>通过this.[data中的键名]可以动态修改内容 : 这里是type的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">title</span>=<span class="string">&quot;这里是title的内容&quot;</span> <span class="attr">type</span>=<span class="string">&quot;这里是type的内容&quot;</span>&gt;</span>我是一个div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">title</span>=<span class="string">&quot;这里是title的内容&quot;</span> <span class="attr">type</span>=<span class="string">&quot;这里是type的内容&quot;</span>&gt;</span>我是一个简写的div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">title</span>=<span class="string">&quot;这里是title的内容&quot;</span>&gt;</span>我是用于动态绑定<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="Vue生命周期"><a href="#Vue生命周期" class="headerlink" title="Vue生命周期"></a>Vue生命周期</h4><p><img src= "/img/loading.gif" data-lazy-src="https://cn.vuejs.org/images/lifecycle.png"></p><table><thead><tr><th align="center">生命周期</th><th align="center">是否获取dom节点</th><th align="center">是否可以获取data</th><th align="center">是否获取methods</th></tr></thead><tbody><tr><td align="center">beforeCreate</td><td align="center">否</td><td align="center">否</td><td align="center">否</td></tr><tr><td align="center">created</td><td align="center">否</td><td align="center">是</td><td align="center">是</td></tr><tr><td align="center">beforeMount</td><td align="center">否</td><td align="center">是</td><td align="center">是</td></tr><tr><td align="center">mounted</td><td align="center">是</td><td align="center">是</td><td align="center">是</td></tr></tbody></table><h4 id="Class-与-Style-绑定"><a href="#Class-与-Style-绑定" class="headerlink" title="Class 与 Style 绑定"></a>Class 与 Style 绑定</h4><h5 id="绑定Class"><a href="#绑定Class" class="headerlink" title="绑定Class"></a>绑定Class</h5><ul><li><p>绑定一个class值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :class&#x3D;&quot;ClassA&quot;&gt;我的class绑定了一个&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;title&quot; :class&#x3D;&quot;ClassA&quot;&gt;我的class绑定了两个&lt;&#x2F;div&gt; </span><br><span class="line">结果： class&#x3D;&quot;title ClassA&quot; 会合并</span><br></pre></td></tr></table></figure></li><li><p><code>数组法</code>绑定多个class值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :class&#x3D;&quot;[ClassA,ClassB]&quot;&gt;我的class绑定了多个&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>对象法</code>绑定多个class值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :class&#x3D;&quot;ClassObj&quot;&gt;我的class通过对象绑定了多个&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>对象方式&#123; xxx:boolean &#125;</code>绑定的是键名、值为true时显示、反之不显示、一定要注意显示的是<code>键名</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :class&#x3D;&quot;&#123;CA:true,CB:true&#125;&quot;&gt;我的class通过对象绑定了多个&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;&#123;CA:isA,CB:isB&#125;&quot;&gt;我的class通过对象绑定了多个&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li><li><p>data</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">        &#x2F;&#x2F;绑定Class</span><br><span class="line">        ClassA : &quot;ClassA&quot;,</span><br><span class="line">        ClassB : &quot;ClassB&quot;,</span><br><span class="line">        ClassObj:&#123;</span><br><span class="line">            &#x2F;&#x2F;对象法： 绑定的是键名、值为true时显示、反之不显示、一定要注意显示的是键名</span><br><span class="line">            CA:true,</span><br><span class="line">            CB:false</span><br><span class="line">        &#125;,</span><br><span class="line">        isA:true,</span><br><span class="line">        isB:false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="绑定Style"><a href="#绑定Style" class="headerlink" title="绑定Style"></a>绑定Style</h5><ul><li><p>基本语法 </p><p><code>:style=&quot;&#123; 属性名(可以使用驼峰命名或者-):&#39;属性值&#39;, 属性名(可以使用驼峰命名或者-):&#39;属性值&#39; &#125;&quot;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :style&#x3D;&quot;&#123;fontSize:&#39;26px&#39;,color:&#39;red&#39;&#125;&quot;&gt;我通过Style绑定多个CSS样式&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li><li><p>通过对象法绑定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :style&#x3D;&quot;StyleObj&quot;&gt;我的style通过对象绑定了多个&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;绑定Style</span><br><span class="line">StyleObj:&#123;</span><br><span class="line">    fontSize:&#39;15px&#39;,</span><br><span class="line">    color:&#39;blue&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过数组法绑定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :style&#x3D;&quot;[StyleObj]&quot;&gt;我的style通过对象绑定了多个&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;绑定Style</span><br><span class="line">StyleObj:&#123;</span><br><span class="line">  color:&#39;blue&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><details green><summary> <p>vue</p> </summary>              <div class='content'>              <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;h1&gt;绑定Class&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;!-- 绑定一个class值 --&gt;</span><br><span class="line">    &lt;div :class&#x3D;&quot;ClassA&quot;&gt;我的class绑定了一个&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;!-- 数组法绑定多个class值 --&gt;</span><br><span class="line">    &lt;div :class&#x3D;&quot;[ClassA,ClassB]&quot;&gt;我的class绑定了多个&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;!-- 对象法绑定多个class值 --&gt;</span><br><span class="line">    &lt;div :class&#x3D;&quot;ClassObj&quot;&gt;我的class通过对象绑定了多个&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;!--同样：绑定的是键名、值为true时显示、反之不显示、一定要注意显示的是键名--&gt;</span><br><span class="line">    &lt;div :class&#x3D;&quot;&#123;CA:true,CB:true&#125;&quot;&gt;我的class通过对象绑定了多个&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;&#123;CA:isA,CB:isB&#125;&quot;&gt;我的class通过对象绑定了多个&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h1&gt;绑定Style&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;!--fontSize使用的是驼峰命名--&gt;</span><br><span class="line">    &lt;div :style&#x3D;&quot;&#123;fontSize:&#39;26px&#39;,color:&#39;red&#39;&#125;&quot;&gt;我通过Style绑定多个CSS样式&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div :style&#x3D;&quot;StyleObj&quot;&gt;我的style通过对象绑定了多个&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;Study02&quot;,</span><br><span class="line">        data()&#123;</span><br><span class="line">            return&#123;</span><br><span class="line">                &#x2F;&#x2F;绑定Class</span><br><span class="line">                ClassA : &quot;ClassA&quot;,</span><br><span class="line">                ClassB:&quot;ClassB&quot;,</span><br><span class="line">                ClassObj:&#123;</span><br><span class="line">                    &#x2F;&#x2F;对象法： 绑定的是键名、值为true时显示、反之不显示、一定要注意显示的是键名</span><br><span class="line">                    CA:true,</span><br><span class="line">                    CB:false</span><br><span class="line">                &#125;,</span><br><span class="line">                isA:true,</span><br><span class="line">                isB:false,</span><br><span class="line">                &#x2F;&#x2F;绑定Style</span><br><span class="line">                StyleObj:&#123;</span><br><span class="line">                    fontSize:&#39;15px&#39;,</span><br><span class="line">                    color:&#39;blue&#39;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>              </div>            </details><p>渲染结果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>绑定Class<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ClassA&quot;</span>&gt;</span>我的class绑定了一个<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ClassA ClassB&quot;</span>&gt;</span>我的class绑定了多个<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;CA&quot;</span>&gt;</span>我的class通过对象绑定了多个<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;CA CB&quot;</span>&gt;</span>我的class通过对象绑定了多个<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;&#123;CA:isA,CB:isB&#125;&quot;</span>&gt;</span>我的class通过对象绑定了多个<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>绑定Style<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 26px; color: red;&quot;</span>&gt;</span>我通过Style绑定多个CSS样式<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 15px; color: blue;&quot;</span>&gt;</span>我的style通过对象绑定了多个<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><h4 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h4><ul><li><p>基本语法</p><p><code>v-if=&quot;data中的键名&quot;</code>  v-if中为true将会显示元素、false会删除元素</p><p><code>v-else-if=&quot;data中的键名&quot;</code> v–else-if中为true将会显示元素、false会删除元素</p><p><code>v-else</code> 都不符合将会显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-if&#x3D;&quot;isShow&quot;&gt;isShow为true我将会显示&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div v-else-if&#x3D;&quot;isShow2&quot;&gt;isShow为false,isShow2为true我将会显示&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div v-else&gt;都为false我将会显示&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li><li><p>小问题：实现动态切换标签 input复用问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;span v-if&#x3D;&quot;isUser&quot;&gt;</span><br><span class="line">        &lt;label for&#x3D;&quot;username&quot;&gt;用户账户&lt;&#x2F;label&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;username&quot; placeholder&#x3D;&quot;用户账户&quot;&gt;</span><br><span class="line">    &lt;&#x2F;span&gt;</span><br><span class="line">    &lt;span v-else&#x3D;&quot;isUser&quot;&gt;</span><br><span class="line">        &lt;label for&#x3D;&quot;email&quot;&gt;用户邮箱&lt;&#x2F;label&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;email&quot; placeholder&#x3D;&quot;用户邮箱&quot;&gt;</span><br><span class="line">    &lt;&#x2F;span&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;isUser&#x3D;!isUser&quot;&gt;切换类型&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">const app &#x3D; new Vue(&#123;</span><br><span class="line">    el:&#39;#app&#39;,</span><br><span class="line">    data:&#123;</span><br><span class="line">    isUser:true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们在input中输入了内容后点击按钮切换类型、发现input中的数据并没有清空：Vue在进行DOM复用的时候，处于性能考虑，<code>会尽可能的复用已经存在的元素</code>，而不是<code>重新创建</code>。在<code>未使用key</code>的时候，在虚拟DOM上会在切换类型的时候，将第一个input直接保留放在切换后的input上，由于没有key标识，里面的内容依然保留。<code>所以我们需要给input添加一个key(唯一值)属性可以</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;span v-if&#x3D;&quot;isUser&quot;&gt;</span><br><span class="line">        &lt;label for&#x3D;&quot;username&quot;&gt;用户账户&lt;&#x2F;label&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;username&quot; placeholder&#x3D;&quot;用户账户&quot; key&#x3D;&quot;username&quot;&gt;</span><br><span class="line">    &lt;&#x2F;span&gt;</span><br><span class="line">    &lt;span v-else&#x3D;&quot;isUser&quot;&gt;</span><br><span class="line">        &lt;label for&#x3D;&quot;email&quot;&gt;用户邮箱&lt;&#x2F;label&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;email&quot; placeholder&#x3D;&quot;用户邮箱&quot; key&#x3D;&quot;email&quot;&gt;</span><br><span class="line">    &lt;&#x2F;span&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;isUser&#x3D;!isUser&quot;&gt;切换类型&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h4><ul><li><p>基本语法</p><p><code>v-show=&quot;布尔值&quot; </code></p><p>v-show值为true将会显示标签、false将会添加style=”display: none;” 不会删除元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-show&#x3D;&quot;isShow&quot;&gt;isShow为true我将会显示、为false将会隐藏&lt;&#x2F;div</span><br></pre></td></tr></table></figure><p>问题：通过外层包裹div显示多个div会多渲染一个<code>&lt;div&gt;&lt;/div&gt;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-show&#x3D;&quot;isShow3&quot;&gt;</span><br><span class="line">    &lt;div&gt;我是内容1&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div&gt;我是内容2&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">渲染结果为</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;div&gt;我是内容1&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div&gt;我是内容2&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>解决：通过template包裹的不会显示 </p><p>另一个问题：isShow4为假的时候同样会被显示，原因：<a href="https://blog.csdn.net/HermitSun/article/details/105189022">在Vue单文件组件的template标签上使用v-if不生效的原因</a>,简单解释一下就是单文件Vue只能包含一个template、所以最好用于v-for。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;template v-show&#x3D;&quot;isShow4&quot;&gt;</span><br><span class="line">    &lt;div&gt;我是内容1&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div&gt;我是内容2&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure></li><li><p>示例</p>  <details green><summary> <p>vue</p> </summary>              <div class='content'>              <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;v-if添加判断&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;!-- v-if中添加为true将会显示元素、false会删除元素 --&gt;</span><br><span class="line">        &lt;div v-if&#x3D;&quot;isShow&quot;&gt;isShow为true我将会显示&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div v-else-if&#x3D;&quot;isShow2&quot;&gt;isShow为false,isShow2为true我将会显示&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;!-- 以上添加不符合将显示 --&gt;</span><br><span class="line">        &lt;div v-else&gt;都为false我将会显示&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;h1&gt;v-show&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;!-- v-show值为true将会显示标签、false将会添加style&#x3D;&quot;display: none;&quot; 不会删除元素 --&gt;</span><br><span class="line">        &lt;!-- 问题：通过外层包裹div显示多个div会多渲染一个&lt;div&gt;&lt;&#x2F;div&gt;--&gt;</span><br><span class="line">        &lt;div v-show&#x3D;&quot;isShow3&quot;&gt;</span><br><span class="line">            &lt;div&gt;我是内容1&lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div&gt;我是内容2&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;p&gt;-------------------------------------&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;!-- 解决：通过template包裹的不会显示--&gt;</span><br><span class="line">        &lt;!-- 另一个问题：isShow4为假的时候同样会被显示，原因：https:&#x2F;&#x2F;blog.csdn.net&#x2F;HermitSun&#x2F;article&#x2F;details&#x2F;105189022 --&gt;</span><br><span class="line">        &lt;template v-show&#x3D;&quot;isShow4&quot;&gt;</span><br><span class="line">            &lt;div&gt;我是内容1&lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div&gt;我是内容2&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;template&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;Study02&quot;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                isShow: true,</span><br><span class="line">                isShow2: false,</span><br><span class="line">                isShow3: false,</span><br><span class="line">                isShow4: true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted() &#123;</span><br><span class="line">            setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">                &#x2F;&#x2F;2秒后将isShow设为false</span><br><span class="line">                this.isShow &#x3D; false</span><br><span class="line">                this.isShow2 &#x3D; true</span><br><span class="line">            &#125;, 2000);</span><br><span class="line">            setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">                &#x2F;&#x2F;4秒后将isShow2设为false</span><br><span class="line">                this.isShow2 &#x3D; false</span><br><span class="line">            &#125;, 4000);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>              </div>            </details><p>  渲染结果(4秒后)：</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>v-if添加判断<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>都为false我将会显示<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>v-show<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;display: none;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是内容1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是内容2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>-------------------------------------<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是内容1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是内容2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><ul><li><p>基本语法</p><p>1个参数时：<code>[变量名、随便取] in [data中的可遍历数据键名]</code></p><p>2个参数时：<code>([变量名],[索引名]) in [data中的可遍历数据键名]</code></p><p>3个参数时：<code>([变量名],[键名],[索引名]) in [data中的可遍历数据键名]</code></p><p>注意：Vue建议添加 key , key 代表唯一、更好渲染DOM</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-for&#x3D;&quot;array in arrays&quot;&gt;&#123;&#123;array&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div v-for&#x3D;&quot;(array,index) in arrays&quot; :key&#x3D;&quot;index&quot;&gt;&#123;&#123;index&#125;&#125; - &#123;&#123;array&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div v-for&#x3D;&quot;(array,key,index) in arrays&quot; :key&#x3D;&quot;index&quot;&gt;&#123;&#123;index&#125;&#125; - &#123;&#123;key&#125;&#125; - &#123;&#123;array&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        arrays: [1, 2, 3, 4, 5]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组中那些方法是响应式的</p><p>方法: <code>push() pop() shift() unshift() splice() sort() reverse() ... </code> </p><p>不是响应式的：通过数组索引之间修改数据、通过这个修改页面中的数据不会更新</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">    updateArray()&#123;</span><br><span class="line">        this.array[0] &#x3D; 18;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>遍历对象</p><p>对象也可以被遍历 由于:key值为index会与上面相同、所以绑定key</p><p><code>in 也可以用 of 进行替换</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-for&#x3D;&quot;(obj,key,index) in objs&quot; :key&#x3D;&quot;key&quot;&gt;&#123;&#123;index&#125;&#125; - &#123;&#123;key&#125;&#125; - &#123;&#123;obj&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;ul :style&#x3D;&quot;&#123;textAlign:&#39;left&#39;&#125;&quot;&gt;</span><br><span class="line">    &lt;li v-for&#x3D;&quot;person of people&quot;&gt;&#123;&#123;person.name&#125;&#125; - &#123;&#123;person.sex&#125;&#125; - &#123;&#123;person.age&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br><span class="line"></span><br><span class="line">data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        objs: &#123;</span><br><span class="line">            name: &quot;zykj&quot;,</span><br><span class="line">            sex: &quot;男&quot;,</span><br><span class="line">            age: 18</span><br><span class="line">        &#125;,</span><br><span class="line">        people:[</span><br><span class="line">        &#123;</span><br><span class="line">            name: &quot;zykj&quot;,</span><br><span class="line">            sex: &quot;男&quot;,</span><br><span class="line">            age: 18</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            name: &quot;skx&quot;,</span><br><span class="line">            sex: &quot;男&quot;,</span><br><span class="line">            age: 16</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            name: &quot;y&quot;,</span><br><span class="line">            sex: &quot;女&quot;,</span><br><span class="line">            age: 19</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>为什么要绑定 <code>key</code></p><p> 参考资料： <a href="https://www.jianshu.com/p/4bd5e745ce95">VUE中演示v-for为什么要加key</a></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;name&quot;&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;add&quot;&gt;添加&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li v-for&#x3D;&quot;(item, i) in list&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;checkbox&quot;&gt; &#123;&#123;item.name&#125;&#125;</span><br><span class="line">    &lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data: &#123;</span><br><span class="line">    name: &#39;&#39;,</span><br><span class="line">    newId: 3,</span><br><span class="line">    list: [</span><br><span class="line">        &#123; id: 1, name: &#39;李斯&#39; &#125;,</span><br><span class="line">        &#123; id: 2, name: &#39;吕不韦&#39; &#125;,</span><br><span class="line">        &#123; id: 3, name: &#39;嬴政&#39; &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">    add() &#123;</span><br><span class="line">        &#x2F;&#x2F;注意这里是unshift</span><br><span class="line">        this.list.unshift(&#123; id: ++this.newId, name: this.name &#125;);</span><br><span class="line">        this.name &#x3D; &#39;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当选中吕不为时，添加楠楠后选中的确是李斯，并不是我们想要的结果，我们想要的是当添加楠楠后，选中的是吕不为、此时我们需要绑定key</p></blockquote><p> <img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200607115101.png" alt="添加前"></p><p> <img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200607115401.png" alt="添加后"></p><p>  可以简单的这样理解：加了key(一定要具有唯一性)、id的checkbox跟内容进行了一个关联。是我们想达到的效果</p><p>  <code>原理 </code>:</p><p>  <img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200606161605.png" alt="为什么要在v-for中添加key"></p></li><li><p>示例</p>  <details green><summary> <p>vue</p> </summary>              <div class='content'>              <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;v-for遍历&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;!-- [变量名、随便取] in [data中的可遍历数据键名] --&gt;</span><br><span class="line">        &lt;div v-for&#x3D;&quot;array in arrays&quot;&gt;&#123;&#123;array&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 2个参数时：([变量名],[索引名]) in [data中的可遍历数据键名] --&gt;</span><br><span class="line">        &lt;!--Vue建议添加key,key代表唯一、更好渲染DOM--&gt;</span><br><span class="line">        &lt;div v-for&#x3D;&quot;(array,index) in arrays&quot; :key&#x3D;&quot;index&quot;&gt;&#123;&#123;index&#125;&#125; - &#123;&#123;array&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;!-- 3个参数时：([变量名],[键名],[索引名]) in [data中的可遍历数据键名] --&gt;</span><br><span class="line">        &lt;div v-for&#x3D;&quot;(array,key,index) in arrays&quot; :key&#x3D;&quot;index&quot;&gt;&#123;&#123;index&#125;&#125; - &#123;&#123;key&#125;&#125; - &#123;&#123;array&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--对象也可以被遍历 由于:key值为index会与上面相同、所以绑定key--&gt;</span><br><span class="line">        &lt;div v-for&#x3D;&quot;(obj,key,index) in objs&quot; :key&#x3D;&quot;key&quot;&gt;&#123;&#123;index&#125;&#125; - &#123;&#123;key&#125;&#125; - &#123;&#123;obj&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;ul :style&#x3D;&quot;&#123;textAlign:&#39;left&#39;&#125;&quot;&gt;</span><br><span class="line">            &lt;!-- in 也可以用 of 进行替换 --&gt;</span><br><span class="line">            &lt;li v-for&#x3D;&quot;person of people&quot;&gt;&#123;&#123;person.name&#125;&#125; - &#123;&#123;person.sex&#125;&#125; - &#123;&#123;person.age&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;&#x2F;ul&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;Study04&quot;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                arrays: [1, 2, 3, 4, 5],</span><br><span class="line">                objs: &#123;</span><br><span class="line">                    name: &quot;zykj&quot;,</span><br><span class="line">                    sex: &quot;男&quot;,</span><br><span class="line">                    age: 18</span><br><span class="line">                &#125;,</span><br><span class="line">                people:[</span><br><span class="line">                    &#123;</span><br><span class="line">                        name: &quot;zykj&quot;,</span><br><span class="line">                        sex: &quot;男&quot;,</span><br><span class="line">                        age: 18</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        name: &quot;skx&quot;,</span><br><span class="line">                        sex: &quot;男&quot;,</span><br><span class="line">                        age: 16</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        name: &quot;y&quot;,</span><br><span class="line">                        sex: &quot;女&quot;,</span><br><span class="line">                        age: 19</span><br><span class="line">                    &#125;]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>              </div>            </details><p>  渲染结果：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;h1&gt;v-for遍历&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;div&gt;1&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div&gt;2&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div&gt;3&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div&gt;4&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div&gt;5&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div&gt;0 - 1&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div&gt;1 - 2&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div&gt;2 - 3&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div&gt;3 - 4&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div&gt;4 - 5&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div&gt;0 - name - zykj&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div&gt;1 - sex - 男&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div&gt;2 - age - 18&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;ul style&#x3D;&quot;text-align: left;&quot;&gt;</span><br><span class="line">        &lt;li&gt;zykj - 男 - 18&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;skx - 男 - 16&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;y - 女 - 19&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><h4 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h4><ul><li><p>基本语法</p><p><code>v-on:xxx=&quot;函数名\表达式&quot;</code>或者简写 <code>@xxx=&quot;函数名\表达式&quot;</code>  如：<code>@click=&quot;xxx&quot;、@sumbit=&quot;xxx&quot;、@input=&quot;xxx&quot;(表单输入事件)</code></p><p>在<code>methods</code>中写对象的函数方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;当前number：&#123;&#123;number&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;button v-on:click&#x3D;&quot;add&quot;&gt;点我number加一哟&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;button @click&#x3D;&quot;reduce&quot;&gt;点我number减一哟&lt;&#x2F;button&gt;</span><br><span class="line">&lt;!-- $event为事件对象、当第一个参数为自定义参数时、想获得事件对象可以添加第二参数$event--&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;reduce(2,$event)&quot;&gt;点我number减2哟&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line"> methods: &#123;</span><br><span class="line">     add() &#123;</span><br><span class="line">     this.number++;</span><br><span class="line">     &#125;,</span><br><span class="line">     reduce(val,event) &#123;</span><br><span class="line">     &#x2F;&#x2F;当有两个参数时</span><br><span class="line">        if (typeof val &#x3D;&#x3D; &#39;number&#39;) &#123;</span><br><span class="line">        this.number -&#x3D; val;</span><br><span class="line">        &#x2F;&#x2F;默认有一个事件 MouseEvent</span><br><span class="line">        console.log(event);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; if(typeof val &#x3D;&#x3D; &#39;object&#39;)&#123;</span><br><span class="line">        &#x2F;&#x2F;只有一个参数时</span><br><span class="line">        else &#123;</span><br><span class="line">        this.number--;</span><br><span class="line">            console.log(val);</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>注意点：</p><ol><li><p>当函数没有参数时、可以简写成 <code>@click=&quot;getName&quot;</code> , 当然 <code>@click=&quot;getName()&quot;</code> 也是可以的</p></li><li><p>函数参数：</p><p>无传入参数时：默认有一个 <code>event</code>事件对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;button v-on:click&#x3D;&quot;add&quot;&gt;点我number加一哟&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">add(event) &#123;</span><br><span class="line">    console.log(event);</span><br><span class="line">    this.number++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有参数传入时、又想手动传入事件对象、可以传入 <code>$event</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;button v-on:click&#x3D;&quot;add(2,$event)&quot;&gt;点我number加n哟&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">add(num,event) &#123;</span><br><span class="line">    this.number -&#x3D; num;</span><br><span class="line">    console.log(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><p><code>$set </code>与 <code>$delete</code></p><p>当我们想动态添加属性和删除数据时、使用<code>$set</code>或者 <code>$delete</code></p><ol><li>不能直接通过 this.xxx[0] = { … } 添加</li><li>可以使用 <code>$set(target, key, value)</code>添加  (target可以是对象或数组[那么对应的key就是索引],key 可以是字符串或数字,可以是任何类型)</li><li>js 方法<code>数组名.splice(起始位置,删除个数,添加元素)</code> 删除添加</li><li>可以使用 <code>$delete(target, key)</code>添加,target: 可以是对象[那么对应的key就是属性名]或数组,key : 可以是字符串或数字</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul :style&#x3D;&quot;&#123;textAlign:&#39;left&#39;&#125;&quot;&gt;</span><br><span class="line">   &lt;li v-for&#x3D;&quot;person of people&quot; :key&#x3D;&quot;people.id&quot;&gt;&#123;&#123;person.name&#125;&#125; - &#123;&#123;person.sex&#125;&#125; -&#123;&#123;person.age&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;button @click&#x3D;&quot;AddPerson&quot;&gt;添加一个人&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;RemovePerson&quot;&gt;删除一个人&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;UpdatePerson&quot;&gt;更新一个人&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">  AddPerson() &#123;</span><br><span class="line">      &#x2F;&#x2F;push()向数组的末尾添加一个或更多元素，并返回新的长度。 头部添加unshift</span><br><span class="line">      this.people.push(&#123;</span><br><span class="line">      create: Date.now(),</span><br><span class="line">      name: &quot;zykj&quot;,</span><br><span class="line">      sex: &quot;男&quot;,</span><br><span class="line">      age: 18</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  RemovePerson() &#123;</span><br><span class="line">      &#x2F;&#x2F;pop()删除并返回数组的最后一个元素。头部删除shift</span><br><span class="line">      this.people.pop();</span><br><span class="line"> &#125;,</span><br><span class="line"> UpdatePerson() &#123;</span><br><span class="line">      &#x2F;&#x2F;Vue 不允许在已经创建的实例上动态添加新的根级响应式属性</span><br><span class="line">      &#x2F;&#x2F; this.people[0] &#x3D; &#123;</span><br><span class="line">      &#x2F;&#x2F;     create: Date.now() ,</span><br><span class="line">      &#x2F;&#x2F;     name: &quot;zykj&quot;,</span><br><span class="line">      &#x2F;&#x2F;     sex: &quot;男&quot;,</span><br><span class="line">      &#x2F;&#x2F;     age: 18</span><br><span class="line">      &#x2F;&#x2F; &#125; &#x2F;&#x2F; 这是错误的</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F;如果我们需要在运行过程中实现属性的添加，set 方法</span><br><span class="line">      &#x2F;&#x2F;参数：(target, key, value) (target可以是对象或数组,可以是字符串或数字,可以是任何类型)</span><br><span class="line">      &#x2F;&#x2F;这里的0代表索引</span><br><span class="line">      &#x2F;&#x2F; this.$set(this.people,0,&#123;</span><br><span class="line">      &#x2F;&#x2F;     create: Date.now() ,</span><br><span class="line">      &#x2F;&#x2F;     name: &quot;我修改了数据&quot;,</span><br><span class="line">      &#x2F;&#x2F;     sex: &quot;女&quot;,</span><br><span class="line">      &#x2F;&#x2F;     age: 15</span><br><span class="line">      &#x2F;&#x2F; &#125;)</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F;或者原生的js方法：就是通过splice删除一个元素，并且添加一个元素</span><br><span class="line">      this.people.splice(0, 1, &#123;</span><br><span class="line">        create: Date.now(),</span><br><span class="line">          name: &quot;我修改了数据&quot;,</span><br><span class="line">          sex: &quot;女&quot;,</span><br><span class="line">          age: 15</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><code>set 与 delete</code></p><blockquote><p>Vue 不允许在已经创建的实例上动态添加新的根级响应式属性。</p><p>Vue 不能检测到对象属性的添加或删除，最好的方式就是在初始化实例前声明根级响应式属性，哪怕只是一个空值。</p><p>如果我们需要在运行过程中实现属性的添加或删除，则可以使用全局 Vue，Vue.set 和 Vue.delete 方法。</p></blockquote><ul><li><p><code>Vue.set</code></p><p>Vue.set 方法用于设置对象的属性，它可以解决 Vue 无法检测添加属性的限制，语法格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.set( target, key, value )</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>target: 可以是对象或数组</li><li>key : 可以是字符串或数字</li><li>value: 可以是任何类型</li></ul></li><li><p><code>Vue.delete</code></p><p>Vue.delete 用于删除动态添加的属性 语法格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.delete( target, key )</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>target: 可以是对象或数组</li><li>key : 可以是字符串或数字  </li></ul></li></ul><ul><li><p>示例</p>  <details green><summary> <p>vue</p> </summary>              <div class='content'>              <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;事件监听v-on&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;h2&gt;操作数组&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;div&gt;当前number：&#123;&#123;number&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;!-- 通过v-on绑定一个点击事件add、在methods上写add方法 --&gt;</span><br><span class="line">        &lt;button v-on:click&#x3D;&quot;add&quot;&gt;点我number加一哟&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;!-- v-on也可以简写成@ --&gt;</span><br><span class="line">        &lt;button @click&#x3D;&quot;reduce&quot;&gt;点我number减一哟&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;!-- $event为事件对象、当第一个参数为自定义参数时、想获得事件对象可以添加第二参数$event--&gt;</span><br><span class="line">        &lt;button @click&#x3D;&quot;reduce(2,$event)&quot;&gt;点我number减2哟&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div v-if&#x3D;&quot;isShow&quot;&gt;我是v-if&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div v-else&gt;我是v-else&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;button @click&#x3D;&quot;toggle&quot;&gt;切换isShow的值&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">        &lt;ul :style&#x3D;&quot;&#123;textAlign:&#39;left&#39;&#125;&quot;&gt;</span><br><span class="line">            &lt;li v-for&#x3D;&quot;person of people&quot; :key&#x3D;&quot;people.id&quot;&gt;&#123;&#123;person.name&#125;&#125; - &#123;&#123;person.sex&#125;&#125; - &#123;&#123;person.age&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;&#x2F;ul&gt;</span><br><span class="line">        &lt;button @click&#x3D;&quot;AddPerson&quot;&gt;添加一个人&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;button @click&#x3D;&quot;RemovePerson&quot;&gt;删除一个人&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;button @click&#x3D;&quot;UpdatePerson&quot;&gt;更新一个人&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;p&gt;----------------------------------------------------&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;h2&gt;操作对象&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for&#x3D;&quot;(obj,key,index) in objs&quot;&gt;&#123;&#123; index &#125;&#125; - &#123;&#123;key&#125;&#125; - &#123;&#123;obj&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;&#x2F;ul&gt;</span><br><span class="line">        &lt;button @click&#x3D;&quot;AddAttr&quot;&gt;添加属性&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;button @click&#x3D;&quot;DeleteAttr&quot;&gt;删除属性&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;button @click&#x3D;&quot;UpdateAttr&quot;&gt;修改属性&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;Study05&quot;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                number: 1,</span><br><span class="line">                isShow: true,</span><br><span class="line">                people: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        create: 1,</span><br><span class="line">                        name: &quot;zykj&quot;,</span><br><span class="line">                        sex: &quot;男&quot;,</span><br><span class="line">                        age: 18</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        create: 2,</span><br><span class="line">                        name: &quot;skx&quot;,</span><br><span class="line">                        sex: &quot;男&quot;,</span><br><span class="line">                        age: 16</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        create: 3,</span><br><span class="line">                        name: &quot;y&quot;,</span><br><span class="line">                        sex: &quot;女&quot;,</span><br><span class="line">                        age: 19</span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                objs: &#123;</span><br><span class="line">                    name: &quot;zykj&quot;,</span><br><span class="line">                    sex: &quot;男&quot;,</span><br><span class="line">                    age: 20</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            add() &#123;</span><br><span class="line">                this.number++;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#x2F;&#x2F;默认有一个事件 MouseEvent</span><br><span class="line">            &#x2F;&#x2F;reduce(event) &#123;</span><br><span class="line">            reduce(val, event) &#123;</span><br><span class="line">                &#x2F;&#x2F;当有两个参数时</span><br><span class="line">                if (typeof val &#x3D;&#x3D; &#39;number&#39;) &#123;</span><br><span class="line">                    this.number -&#x3D; val;</span><br><span class="line">                    console.log(event);</span><br><span class="line">                &#125;</span><br><span class="line">                    &#x2F;&#x2F; if(typeof val &#x3D;&#x3D; &#39;object&#39;)&#123;</span><br><span class="line">                &#x2F;&#x2F;只有一个参数时</span><br><span class="line">                else &#123;</span><br><span class="line">                    this.number--;</span><br><span class="line">                    console.log(val);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            toggle() &#123;</span><br><span class="line">                this.isShow &#x3D; this.isShow ? false : true;</span><br><span class="line">            &#125;,</span><br><span class="line">            AddPerson() &#123;</span><br><span class="line">                &#x2F;&#x2F;push()向数组的末尾添加一个或更多元素，并返回新的长度。 头部添加unshift</span><br><span class="line">                this.people.push(&#123;</span><br><span class="line">                    create: Date.now(),</span><br><span class="line">                    name: &quot;zykj&quot;,</span><br><span class="line">                    sex: &quot;男&quot;,</span><br><span class="line">                    age: 18</span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">            RemovePerson() &#123;</span><br><span class="line">                &#x2F;&#x2F;pop()删除并返回数组的最后一个元素。头部删除shift</span><br><span class="line">                this.people.pop();</span><br><span class="line">            &#125;,</span><br><span class="line">            UpdatePerson() &#123;</span><br><span class="line">                &#x2F;&#x2F;Vue 不允许在已经创建的实例上动态添加新的根级响应式属性</span><br><span class="line">                &#x2F;&#x2F; this.people[0] &#x3D; &#123;</span><br><span class="line">                &#x2F;&#x2F;     create:  Date.now() ,</span><br><span class="line">                &#x2F;&#x2F;     name: &quot;zykj&quot;,</span><br><span class="line">                &#x2F;&#x2F;     sex: &quot;男&quot;,</span><br><span class="line">                &#x2F;&#x2F;     age: 18</span><br><span class="line">                &#x2F;&#x2F; &#125;</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F;如果我们需要在运行过程中实现属性的添加，set 方法</span><br><span class="line">                &#x2F;&#x2F;参数：(target, key, value) (target可以是对象或数组,可以是字符串或数字,可以是任何类型)</span><br><span class="line">                &#x2F;&#x2F;这里的0代表索引</span><br><span class="line">                &#x2F;&#x2F; this.$set(this.people,0,&#123;</span><br><span class="line">                &#x2F;&#x2F;     create:  Date.now() ,</span><br><span class="line">                &#x2F;&#x2F;     name: &quot;我修改了数据&quot;,</span><br><span class="line">                &#x2F;&#x2F;     sex: &quot;女&quot;,</span><br><span class="line">                &#x2F;&#x2F;     age: 15</span><br><span class="line">                &#x2F;&#x2F; &#125;)</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F;或者原生的js方法：就是通过splice删除一个元素，并且添加一个元素</span><br><span class="line">                this.people.splice(0, 1, &#123;</span><br><span class="line">                    create: Date.now(),</span><br><span class="line">                    name: &quot;我修改了数据&quot;,</span><br><span class="line">                    sex: &quot;女&quot;,</span><br><span class="line">                    age: 15</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            AddAttr()&#123;</span><br><span class="line">                this.$set(this.objs,&quot;hobby&quot;,&quot;打代码&quot;)</span><br><span class="line">            &#125;,</span><br><span class="line">            DeleteAttr()&#123;</span><br><span class="line">                &#x2F;&#x2F;方法1：</span><br><span class="line">                &#x2F;&#x2F;(target, key)target: 可以是对象或数组,key : 可以是字符串或数字</span><br><span class="line">                &#x2F;&#x2F;this.$delete(this.objs,&quot;sex&quot;)</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F;方法2：</span><br><span class="line">                let _obj &#x3D; &#123;...this.objs&#125;; &#x2F;&#x2F; ... 扩展运算符这里用于复制对象</span><br><span class="line">                delete _obj.age;</span><br><span class="line">                this.objs &#x3D; &#123;..._obj&#125;;</span><br><span class="line">            &#125;,</span><br><span class="line">            UpdateAttr()&#123;</span><br><span class="line">                this.objs.age &#x3D; 18</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>              </div>            </details><p>  渲染结果：</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>事件绑定v-on<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>操作数组<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>当前number：1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点我number加一哟<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点我number减一哟<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点我number减2哟<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是v-if<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>切换isShow的值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">style</span>=<span class="string">&quot;text-align: left;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>zykj - 男 - 18<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>skx - 男 - 16<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>y - 女 - 19<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>添加一个人<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>删除一个人<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>更新一个人<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>----------------------------------------------------<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>操作对象<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>0 - name - zykj<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1 - sex - 男<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2 - age - 18<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>添加属性<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>删除属性<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>修改属性<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  扩展运算符复习: <a href="https://zykjofficial.tk/posts/8cde864d/#%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6-%E2%80%A6%E5%8F%98%E9%87%8F">https://zykjofficial.tk/posts/8cde864d/#扩展运算符-…变量</a></p></li></ul><h4 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h4><h5 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h5><blockquote><p>在事件处理程序中调用 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code> 是非常常见的需求。尽管我们可以在方法中轻松实现这点，但更好的方式是：方法只有纯粹的数据逻辑，而不是去处理 DOM 事件细节。</p><p>为了解决这个问题，Vue.js 为 <code>v-on</code> 提供了<strong>事件修饰符</strong>。修饰符是由点开头的指令后缀来表示的。</p></blockquote><ul><li><p><code>.stop</code> - 调用 <code>event.stopPropagation()</code>。阻止冒泡。 例： <code>v-on:click.stop=&quot;xxx&quot; , v-on:submit.stop=&quot;xxx&quot;</code></p></li><li><p><code>.prevent</code> - 调用 <code>event.preventDefault()</code>。 阻止默认行为。</p></li><li><p><code>.capture</code> - 添加事件侦听器时使用<code>捕获模式</code>。 两种模式 <code>捕获模式</code>和 <code>冒泡模式</code></p></li><li><p><code>.self</code> - 只当事件是从侦听器绑定的元素本身触发时才触发回调。</p></li><li><p><code>.native</code> - 监听组件根元素的原生事件。用于自定义控件。也就是说在自定义组件中添加事件需要加上</p></li><li><p><code>.once</code> - 只触发一次回调。</p></li><li><p><code>.left</code> - (2.2.0) 只当点击鼠标左键时触发。</p></li><li><p><code>.right</code> - (2.2.0) 只当点击鼠标右键时触发。</p></li><li><p><code>.middle</code> - (2.2.0) 只当点击鼠标中键时触发。</p></li><li><p><code>.passive</code> - (2.3.0) 以 { passive: true } 模式添加侦听器、passive这个修饰符会执行默认方法</p><p>原因：浏览器只有等内核线程执行到事件监听器对应的JavaScript代码时，才能知道内部是否会调用preventDefault函数来阻止事件的默认行为，所以浏览器本身是没有办法对这种场景进行优化的。这种场景下，用户的手势事件无法快速产生，会导致页面无法快速执行滑动逻辑，从而让用户感觉到页面卡顿。</p><p>通俗点说就是每次事件产生，浏览器都会去查询一下是否有preventDefault阻止该次事件的默认动作。我们加上passive就是为了告诉浏览器，不用查询了，我们没用preventDefault阻止默认动作。</p><p>​    这里一般用在滚动监听，@scoll，@touchmove 。因为滚动监听过程中，移动每个像素都会产生一次事件，每次都使用内核线程查询prevent会使滑动卡顿。我们通过passive将内核线程查询跳过，可以大大提升滑动的流畅度。<br>注：<code>passive和prevent冲突，不能同时绑定在一个监听器上。</code></p></li></ul><h5 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h5><ul><li><p>基本语法</p><p><code>@key(down/up).[对应的键(可选)]=&quot;函数名&quot;</code> 例： <code>@keydown=&quot;Key&quot;</code> <code>@keyup.ctrl=&quot;KeyCtrl&quot;</code></p><p>常用的按键修饰符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.enter  |  .tab  |  .delete  |  .esc</span><br><span class="line">.space  |  .up   |  .down    |  .left  |  .right</span><br><span class="line">.ctrl   |  .alt  |  .shift   |  .meta</span><br><span class="line">.键值</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Ctrl&lt;input @keydown.ctrl&#x3D;&quot;KeyCtrl&quot; type&#x3D;&quot;text&quot; &#x2F;&gt;</span><br><span class="line">Submit &lt;input @keydown.enter&#x3D;&quot;SubmitEvent&quot; type&#x3D;&quot;text&quot; &#x2F;&gt;</span><br><span class="line">Space &lt;input @keydown.space&#x3D;&quot;SpaceEvent&quot; type&#x3D;&quot;text&quot; &#x2F;&gt;</span><br><span class="line">Delete &lt;input @keydown.delete&#x3D;&quot;DeleteEvent&quot; type&#x3D;&quot;text&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">     KeyCtrl()&#123;</span><br><span class="line">       console.log(&quot;点击了Ctrl&quot;)</span><br><span class="line">     &#125;,</span><br><span class="line">     SubmitEvent()&#123;</span><br><span class="line">     console.log(&quot;进行提交&quot;)</span><br><span class="line">     &#125;,</span><br><span class="line">     SpaceEvent()&#123;</span><br><span class="line">     console.log(&quot;按了空格&quot;)</span><br><span class="line">     &#125;,</span><br><span class="line">     DeleteEvent()&#123;</span><br><span class="line">     console.log(&quot;点了删除&quot;)</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h5><details green><summary> <p>vue</p> </summary>              <div class='content'>              <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;事件修饰符&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;!-- .stop可以阻止冒泡事件 --&gt;</span><br><span class="line">        &lt;div @click&#x3D;&quot;Father&quot;&gt;</span><br><span class="line">            我是父DIV</span><br><span class="line">            &lt;div @click.stop&#x3D;&quot;Son&quot;&gt;我是子DIV&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- .prevent可以阻止默认事件、这里阻止了右键弹出的事件,right代表右键 --&gt;</span><br><span class="line">        &lt;div @click.right.prevent&#x3D;&quot;Right&quot;&gt;右键点击&lt;&#x2F;div&gt;</span><br><span class="line">        输入内容右键不会弹出&lt;input type&#x3D;&quot;text&quot; @click.right.prevent&#x3D;&quot;Right&quot;&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;div @click.middle&#x3D;&quot;Log&quot;&gt;鼠标中键&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div @click.left&#x3D;&quot;Log&quot;&gt;鼠标左键&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- .self修饰符只有在点击事件绑定的元素与当前被点击元素一致时才触发点击事件 --&gt;</span><br><span class="line">        &lt;div @click.self&#x3D;&quot;Father&quot;&gt;</span><br><span class="line">            我是父DIV</span><br><span class="line">            &lt;div @click&#x3D;&quot;Son&quot;&gt;我是子DIV&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;!-- .once 只触发一次回调--&gt;</span><br><span class="line">        &lt;div @click.once&#x3D;&quot;Father&quot;&gt;我只会调用一次&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 键盘事件 keydown --&gt;</span><br><span class="line">        Ctrl&lt;input @keydown.ctrl&#x3D;&quot;KeyCtrl&quot; type&#x3D;&quot;text&quot; &#x2F;&gt;</span><br><span class="line">        Submit &lt;input @keydown.enter&#x3D;&quot;SubmitEvent&quot; type&#x3D;&quot;text&quot; &#x2F;&gt;</span><br><span class="line">        Space &lt;input @keydown.space&#x3D;&quot;SpaceEvent&quot; type&#x3D;&quot;text&quot; &#x2F;&gt;</span><br><span class="line">        Delete &lt;input @keydown.delete&#x3D;&quot;DeleteEvent&quot; type&#x3D;&quot;text&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;Study05&quot;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            Father()&#123;</span><br><span class="line">                console.log(&quot;Father被点击了&quot;);</span><br><span class="line">            &#125;,</span><br><span class="line">            Son()&#123;</span><br><span class="line">                console.log(&quot;Son被点击了&quot;);</span><br><span class="line">            &#125;,</span><br><span class="line">            Right()&#123;</span><br><span class="line">                console.log(&quot;点击了右键&quot;);</span><br><span class="line">            &#125;,</span><br><span class="line">            KeyCtrl()&#123;</span><br><span class="line">                console.log(&quot;点击了Ctrl&quot;)</span><br><span class="line">            &#125;,</span><br><span class="line">            SubmitEvent()&#123;</span><br><span class="line">                console.log(&quot;进行提交&quot;)</span><br><span class="line">            &#125;,</span><br><span class="line">            SpaceEvent()&#123;</span><br><span class="line">                console.log(&quot;按了空格&quot;)</span><br><span class="line">            &#125;,</span><br><span class="line">            DeleteEvent()&#123;</span><br><span class="line">                console.log(&quot;点了删除&quot;)</span><br><span class="line">            &#125;,</span><br><span class="line">            Log:function () &#123;</span><br><span class="line">                console.log(&quot;-----------&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>              </div>            </details><p>渲染结果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>事件修饰符<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span> </span><br><span class="line">        我是父DIV </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是子DIV<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>右键点击<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    输入内容右键不会弹出<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span> </span><br><span class="line">        我是父DIV </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是子DIV<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    Ctrl<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span> </span><br><span class="line">    Submit <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span> </span><br><span class="line">    Space <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span> </span><br><span class="line">    Delete <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="计算属性与侦听属性"><a href="#计算属性与侦听属性" class="headerlink" title="计算属性与侦听属性"></a>计算属性与侦听属性</h3><div class="note info"><p>参考资料：<a href="https://juejin.im/post/5d01a81d51882559ef78e498">详解Vue计算属性和侦听属性</a></p></div><h4 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h4><p>计算属性(computed)是<code>自动监听依赖值</code>的变化，从而动态返回内容，监听是一个过程，在监听的值变化时，可以触发一个回调，并做一些事情。它有以下几个特点：</p><ul><li>数据可以进行逻辑处理，减少模板中计算逻辑。</li><li>对计算属性中的数据进行监视</li><li>依赖固定的数据类型(响应式数据)</li></ul><p>计算属性由两部分组成：<code>get</code>和<code>set</code>，分别用来获取计算属性和设置计算属性。<code>默认只有get</code>，如果需要set，要自己添加。另外set设置属性，并不是直接修改计算属性，而是修改它的依赖。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&#123;&#123; fullName &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;change&quot;&gt;修改&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;changeFirstName(&#39;改了FirstName&#39;)&quot;&gt;修改FirstName&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;changeLastName(&#39;改了LastName&#39;)&quot;&gt;修改LastName&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">var vue &#x3D; new Vue(&#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            firstName: &quot;卓越&quot;,</span><br><span class="line">            lastName: &quot;科技&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        changeFirstName(val) &#123;</span><br><span class="line">            this.fullName &#x3D; val + &quot; &quot; + this.lastName</span><br><span class="line">        &#125;,</span><br><span class="line">        changeLastName(val) &#123;</span><br><span class="line">            this.fullName &#x3D; this.firstName + &quot; &quot; + val</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">        &#x2F;&#x2F;fullName简写形式</span><br><span class="line">        &#x2F;&#x2F;fullName()&#123;</span><br><span class="line">        &#x2F;&#x2F;return this.firstName + &quot; &quot; + this.lastName;</span><br><span class="line">        &#x2F;&#x2F;&#125;,</span><br><span class="line">        fullName: &#123;</span><br><span class="line">            &#x2F;&#x2F;里面还有两个方法：set 当修改数据的时候调用。get 获取值的时候调用</span><br><span class="line">            set(newVal) &#123;</span><br><span class="line">                console.log(&quot;newVal的新值：&quot; + newVal)</span><br><span class="line">                let array &#x3D; newVal.split(&quot; &quot;);</span><br><span class="line">                this.firstName &#x3D; array[0]; &#x2F;&#x2F;对它的依赖进行赋值</span><br><span class="line">                this.lastName &#x3D; array[1];</span><br><span class="line">            &#125;,</span><br><span class="line">            get() &#123;</span><br><span class="line">                return this.firstName + &quot; &quot; + this.lastName;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>同个修改 fullName 时，setter 会被调用，firstName 和  lastName 也会相应地被更新。</p><ul><li><p><code>计算属性</code>与<code>普通属性</code>的区别：可以像绑定普通属性一样在模板中绑定计算属性，在定义上有区别：计算属性的属性值必须是一个函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">data:&#123; </span><br><span class="line">  &#x2F;&#x2F;普通属性</span><br><span class="line">  msg:&#39;哈哈哈&#39;,</span><br><span class="line">&#125;,</span><br><span class="line">computed:&#123; </span><br><span class="line">  &#x2F;&#x2F;计算属性</span><br><span class="line">  msg1:function()&#123; </span><br><span class="line">    &#x2F;&#x2F;该函数必须有返回值，用来获取属性，称为get函数</span><br><span class="line">    return &#39;哈哈哈&#39;;</span><br><span class="line">  &#125;,</span><br><span class="line">  reverseMsg:function()&#123;</span><br><span class="line">    &#x2F;&#x2F;可以包含逻辑处理操作，同时reverseMsg依赖于msg,一旦msg发生变化，reverseMsg也会跟着变化</span><br><span class="line">    return this.msg.split(&#39; &#39;).reverse().join(&#39; &#39;);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>计算属性</code>与<code>方法</code>的区别：两者最主要的区别：computed 是可以缓存的，methods 不能缓存；只要相关依赖没有改变，多次访问计算属性得到的值是之前缓存的计算结果，不会多次执行。</p><p>下面代码看方法和计算属性执行次数：结果： <code>getFullName() 执行2次</code> <code>fullName 执行1次</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&#123;&#123; fullName &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div&gt;&#123;&#123; fullName &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;&#123;&#123; getFullName() &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div&gt;&#123;&#123; getFullName() &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">var vue &#x3D; new Vue(&#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      firstName: &quot;卓越&quot;,</span><br><span class="line">      lastName: &quot;科技&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getFullName()&#123;</span><br><span class="line">      console.log(&quot;------getFullName------&quot;)</span><br><span class="line">      return this.firstName + &quot; &quot; + this.lastName;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    fullName: &#123;</span><br><span class="line">      get() &#123;</span><br><span class="line">        console.log(&quot;------fullName------&quot;)</span><br><span class="line">        return this.firstName + &quot; &quot; + this.lastName;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="侦听属性"><a href="#侦听属性" class="headerlink" title="侦听属性"></a>侦听属性</h4><blockquote><p>有的时候，我们需要的派生数据是通过异步的方式处理的，这个时候，计算属性就不太好用了(不能处理异步)。我们可以使用另外一个选项：watch</p></blockquote><ul><li><p>watch : 侦听属性；监听的是data的属性，当属性发生改变以后，会做的一些事情</p></li><li><p>里面传一个函数，第一个参数是<code>最新的值</code>，第二个参数是<code>修改前的值</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">  data中的属性名:function(newVal,oldVal)&#123;</span><br><span class="line">    console.log(newVal,oldVal)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>深度监听： 如果监听了对象，当这个对象中的属性名对应的键值对发生改变以后，并不会触发监听的这个对象的函数；因为这个引用数据类型的地址没发生改变；</p><p>这个时候需要把watch监听的方法改成对象的写法</p><p><code>handler 相当于函数</code><br><code>deep:true</code>，对这个对象中的每一个属性进行监听<br><code>immediate:true</code>, 可以让函数立即执行一次；当其中一个属性发生改变，也会触发handler这个函数；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">  data中的属性名: &#123;</span><br><span class="line">    handler()&#123;</span><br><span class="line">       </span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F;immediate表示在watch中首次绑定的时候，是否执行handler，值为true则表示在watch中声明的时候，就立即执行handler方法，值为false，则和一般使用watch一样，在数据发生变化的时候才执行handler。</span><br><span class="line">    immediate:true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>监听对象的时候写在handler方法的参数只写一个就可以，这个参数代表改变之后的值</li><li>如果想监听对象里的一个属性值可以写成<code>对象.属性名</code> ，这个时候写在handler方法的参数就得写两个，<br>第一个参数是最新的值，第二个参是修改前的值</li><li>另一种添加监视的方法: <code>vm.$watch(&quot;XX&quot;,function(value)&#123;&#125;)</code></li></ul><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><details green><summary> <p>vue</p> </summary>              <div class='content'>              <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;计算属性&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;!--问题：如果表达式过于复杂会导致难以维护、所以我们将使用计算属性computed --&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123;msg + &quot; : &quot; + type&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 作用： computed会进行缓存、函数会一直调用、性能低--&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123; msg_type &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;!-- 函数调用 --&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123; getFullName() &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div&gt;&#123;&#123; fullName &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;button @click&#x3D;&quot;change&quot;&gt;修改&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">        &lt;h1&gt;监听属性&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;div&gt;content内容： &#123;&#123;ct&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;button @click&#x3D;&quot;changeContent&quot;&gt;改变content内容&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">        computed使用场景:某个数据受多个数据影响，或者需要对其他数据进行</span><br><span class="line">        js处理再显示;</span><br><span class="line">        watch使用场景:一个数据的变化会影响多个数据，或者一个数据变化的</span><br><span class="line">        时候需要执行异步操作</span><br><span class="line">        --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div&gt;默认语言：&#123;&#123; language &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;button @click&#x3D;&quot;swit(&#39;chinese&#39;)&quot;&gt;切换为中文&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;button @click&#x3D;&quot;swit(&#39;english&#39;)&quot;&gt;切换为English&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123; dl &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;Study05&quot;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                msg: &quot;这里是msg的内容&quot;,</span><br><span class="line">                type: &quot;这里是type的内容&quot;,</span><br><span class="line">                firstName: &quot;卓越&quot;,</span><br><span class="line">                lastName: &quot;科技&quot;,</span><br><span class="line">                ct: &quot;我是内容&quot;,</span><br><span class="line">                language: &quot;chinese&quot;,</span><br><span class="line">                dl: &#39;&#39;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            getFullName() &#123;</span><br><span class="line">                &#x2F;&#x2F;每次刷新浏览器都会调用方法</span><br><span class="line">                return this.firstName + &quot; &quot; + this.lastName</span><br><span class="line">            &#125;,</span><br><span class="line">            change() &#123;</span><br><span class="line">                this.fullName &#x3D; &quot;zy kj&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            changeContent() &#123;</span><br><span class="line">                this.ct &#x3D; &quot;改变了Content的内容&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            swit(val)&#123;</span><br><span class="line">                if (val &#x3D;&#x3D;&#x3D; &#39;chinese&#39;)&#123;</span><br><span class="line">                    this.dl &#x3D; &quot;中文&quot;</span><br><span class="line">                &#125;</span><br><span class="line">                else if(val &#x3D;&#x3D;&#x3D; &quot;english&quot;)&#123;</span><br><span class="line">                    this.dl &#x3D; &quot;english&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line">            msg_type() &#123;</span><br><span class="line">                &#x2F;&#x2F;只有当data(这里是 msg、type)的内容改变才会重新调用、缓存在内存中</span><br><span class="line">                return this.msg + &quot; &quot; + this.type</span><br><span class="line">            &#125;,</span><br><span class="line">            &#x2F;&#x2F; FullName()&#123;</span><br><span class="line">            &#x2F;&#x2F;     &#x2F;&#x2F;每次刷新浏览器都会调用方法</span><br><span class="line">            &#x2F;&#x2F;     return this.firstName + &quot; &quot; + this.lastName</span><br><span class="line">            &#x2F;&#x2F; &#125;</span><br><span class="line"></span><br><span class="line">            fullName: &#123;</span><br><span class="line">                &#x2F;&#x2F;里面还有两个方法：set 当修改数据的时候调用。get 获取值的时候调用</span><br><span class="line">                set(newVal) &#123;</span><br><span class="line">                    console.log(&quot;newVal的新值：&quot; + newVal)</span><br><span class="line">                    let array &#x3D; newVal.split(&quot; &quot;)</span><br><span class="line">                    this.firstName &#x3D; array[0]</span><br><span class="line">                    this.lastName &#x3D; array[1];</span><br><span class="line">                &#125;,</span><br><span class="line">                get() &#123;</span><br><span class="line">                    return this.firstName + &quot; &quot; + this.lastName</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        watch: &#123;</span><br><span class="line">            &#x2F;&#x2F;普通的watch监听</span><br><span class="line">            ct (oldValue, newValue) &#123;</span><br><span class="line">                console.log(&quot;改变之前的值：&quot; + oldValue + &quot; &quot; + &quot;改变之前的值：&quot; + newValue);</span><br><span class="line">            &#125;,</span><br><span class="line">            &#x2F;&#x2F;深度监听，可监听到对象、数组的变化</span><br><span class="line">            language : &#123;</span><br><span class="line">                &#x2F;&#x2F;问题：当值第一次绑定的时候，不会执行监听函数，只有值发生改变才会执行。如果我们需要在最初绑定值的时候也执行函数，则就需要用到immediate属性。</span><br><span class="line">                handler(val)&#123;</span><br><span class="line">                    if (val &#x3D;&#x3D;&#x3D; &#39;chinese&#39;)&#123;</span><br><span class="line">                        this.dl &#x3D; &quot;中文&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                    else if(val &#x3D;&#x3D;&#x3D; &quot;english&quot;)&#123;</span><br><span class="line">                        this.dl &#x3D; &quot;english&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#x2F;&#x2F;immediate表示在watch中首次绑定的时候，是否执行handler，值为true则表示在watch中声明的时候，就立即执行handler方法，值为false，则和一般使用watch一样，在数据发生变化的时候才执行handler。</span><br><span class="line">                immediate:true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>              </div>            </details><p>渲染结果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>计算属性<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是msg的内容 : 这里是type的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>这里是msg的内容 这里是type的内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>卓越 科技<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>卓越 科技<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>监听属性<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>content内容： 我是内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>改变content内容<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>默认语言：chinese<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>切换为中文<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>切换为English<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="双向绑定-v-model"><a href="#双向绑定-v-model" class="headerlink" title="双向绑定 v-model"></a>双向绑定 v-model</h3><blockquote><p>本质:  它负责监听用户的输入事件，从而更新数据，并对一些极端场景进行一些特殊处理。同时，v-model会忽略所有表单元素的value、checked、selected特性的初始值，它总是将vue实例中的数据作为数据来源。  然后当输入事件发生时，实时更新vue实例中的数据。</p></blockquote><h4 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h4><p><code>v-model=&quot;data中的键名&quot;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;msg&quot;&gt;</span><br><span class="line">input中的内容：&#123;&#123; msg &#125;&#125;</span><br><span class="line"></span><br><span class="line">data:&#123;</span><br><span class="line">  msg:&quot;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; :value&#x3D;&quot;msg&quot; @input&#x3D;&quot;changeValue&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; :value&#x3D;&quot;msg&quot; @input&#x3D;&quot;msg &#x3D; $event.target.value&quot;&gt;</span><br><span class="line"></span><br><span class="line">data:&#123;</span><br><span class="line">  msg:&quot;&quot;</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">  changValue(event)&#123;</span><br><span class="line">    this.msg &#x3D; event.target.value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="v-model修饰符"><a href="#v-model修饰符" class="headerlink" title="v-model修饰符"></a>v-model修饰符</h4><ul><li><code>.lazy</code> 在输入框失去焦点或者按回车键时才会更新值。</li><li><code>.number</code> 输入框输入的内容，即使是数字，默认也是 string 类型,使用 .number 修饰符让其转换为 number 类型</li><li><code>.trim</code> 自动过滤掉输入框的首尾空格</li></ul><h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h4><details green><summary> <p>vue</p> </summary>              <div class='content'>              <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;v-model双向绑定&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;content&quot;&gt;</span><br><span class="line">        &lt;div&gt;这显示输入框的内容：&#123;&#123; content &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;textarea v-model&#x3D;&quot;content&quot; rows&#x3D;&quot;4&quot; cols&#x3D;&quot;30&quot;&gt;&lt;&#x2F;textarea&gt;</span><br><span class="line">        &lt;div&gt;这显示textarea的内容：&#123;&#123; content &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;select v-model&#x3D;&quot;languageCode&quot;&gt;</span><br><span class="line">            &lt;option value&#x3D;&quot;&quot;&gt;请选择&lt;&#x2F;option&gt;</span><br><span class="line">            &lt;option v-for&#x3D;&quot;program in programs&quot; :value&#x3D;&quot;program.code&quot; :key&#x3D;&quot;program.code&quot;&gt;&#123;&#123;program.name&#125;&#125;&lt;&#x2F;option&gt;</span><br><span class="line">        &lt;&#x2F;select&gt;</span><br><span class="line">        &lt;!--问题：option的中第一个数据(请选择)不在data中、我们想只显示data中的数据、通过计算属性来解决--&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123; language &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;!--radio--&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;sex&quot; v-model&#x3D;&quot;sex&quot; value&#x3D;&quot;male&quot;&gt;男</span><br><span class="line">        &lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;sex&quot; v-model&#x3D;&quot;sex&quot; value&#x3D;female &gt;女</span><br><span class="line">        &lt;div&gt;&#123;&#123;sex&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;!--checkbox--&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;re&quot;&gt;记住我</span><br><span class="line">        &lt;div&gt;&#123;&#123;re&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;!--true-value与false-value为真为假的值--&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;checkbox&quot; true-value&#x3D;&quot;Y&quot; false-value&#x3D;&quot;N&quot; v-model&#x3D;&quot;re2&quot;&gt;记住我</span><br><span class="line">        &lt;div&gt;&#123;&#123;re2&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;pro&quot; value&#x3D;&quot;c&quot; v-model&#x3D;&quot;pro&quot;&gt;c</span><br><span class="line">        &lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;pro&quot; value&#x3D;&quot;java&quot; v-model&#x3D;&quot;pro&quot;&gt;java</span><br><span class="line">        &lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;pro&quot; value&#x3D;&quot;python&quot; v-model&#x3D;&quot;pro&quot;&gt;python</span><br><span class="line">        &lt;h4&gt;第一种写法&lt;&#x2F;h4&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123; &quot;[&quot;+pro.join(&quot;、&quot;)+&quot;]&quot; &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;h4&gt;第二种写法&lt;&#x2F;h4&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123; pro &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--v-model修饰符--&gt;</span><br><span class="line">        &lt;!--.lazy可以理解为失去焦点后数据才会更新、就是鼠标不在输入框内--&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; v-model.lazy&#x3D;&quot;contentlazy&quot;&gt;</span><br><span class="line">        &lt;div&gt;数据显示：&#123;&#123;contentlazy&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;!--.number可以将输入文本转换为数字类型、不能转换时显示原文本--&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; v-model.number&#x3D;&quot;contentnumber&quot;&gt;</span><br><span class="line">        &lt;div&gt;数据显示：&#123;&#123;contentnumber&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;!--.trim可以去除两边空格--&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; v-model.trim&#x3D;&quot;contenttrim&quot;&gt;</span><br><span class="line">        &lt;div&gt;数据显示：&#123;&#123;contenttrim&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;Study05&quot;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                content: &quot;&quot;,</span><br><span class="line">                languageCode: &quot;&quot;,</span><br><span class="line">                programs: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        code: &quot;Java&quot;,</span><br><span class="line">                        name: &quot;JAVA&quot;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        code: &quot;Html&quot;,</span><br><span class="line">                        name: &quot;HTML&quot;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        code: &quot;Python&quot;,</span><br><span class="line">                        name: &quot;PYTHON&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                sex:&quot;&quot;,</span><br><span class="line">                re:&quot;&quot;,</span><br><span class="line">                re2:&quot;&quot;,</span><br><span class="line">                pro: [],</span><br><span class="line">                contentlazy: &quot;&quot;,</span><br><span class="line">                contentnumber: &quot;&quot;,</span><br><span class="line">                contenttrim: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line">            language() &#123;</span><br><span class="line">                &#x2F;&#x2F;find() 方法为数组中的每个元素都调用一次函数执行：</span><br><span class="line">                &#x2F;&#x2F;当数组中的元素在测试条件时返回 true 时, find() 返回符合条件的元素，之后的值不会再调用执行函数。如果没有符合条件的元素返回 undefined</span><br><span class="line">                &#x2F;&#x2F;array.find(function(currentValue, index, arr),thisValue)</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F;通过find查找data中programs数组中(program.code与languageCode相同的)、返回这个对象</span><br><span class="line">                let _programCode &#x3D; this.programs.find(program &#x3D;&gt; program.code &#x3D;&#x3D;&#x3D; this.languageCode)</span><br><span class="line">                &#x2F;&#x2F;由于languageCode默认值不在programs数组，默认为空，我们需要进行判断</span><br><span class="line">                return _programCode ? _programCode.name : &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>              </div>            </details><p>渲染结果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>v-model双向绑定<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>这显示输入框的内容：哈哈<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;4&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>这显示textarea的内容：哈哈<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Java&quot;</span>&gt;</span>JAVA<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Html&quot;</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Python&quot;</span>&gt;</span>PYTHON<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span>男 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span>女</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>male<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span>记住我</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>true<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">true-value</span>=<span class="string">&quot;Y&quot;</span> <span class="attr">false-value</span>=<span class="string">&quot;N&quot;</span>&gt;</span>记住我</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Y<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pro&quot;</span> <span class="attr">value</span>=<span class="string">&quot;c&quot;</span>&gt;</span>c <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pro&quot;</span> <span class="attr">value</span>=<span class="string">&quot;java&quot;</span>&gt;</span>java </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pro&quot;</span> <span class="attr">value</span>=<span class="string">&quot;python&quot;</span>&gt;</span>python</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>[c、java]<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>数据显示：哈哈<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>数据显示：123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>数据显示：00 00<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><blockquote><p>过滤器，过滤就是一个数据经过了这个过滤之后出来另一样东西，可以是从中取得你想要的，或者给那个数据添加点什么装饰，那么过滤器则是过滤的工具。</p></blockquote><p>过滤器分为两种：<code>全局过滤器</code>和<code>局部过滤器</code></p><ul><li><p>全局过滤器:<code>全局过滤器必须写在vue实例创建之前</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;过滤器一：(使用时没有参数，即&#123;&#123; msg | 过滤器名字&#125;&#125;)</span><br><span class="line">Vue.filter(&#39;过滤器名字&#39;, function (value) &#123;</span><br><span class="line">  &#x2F;&#x2F;可以理解为需要过滤的值</span><br><span class="line">  console.log(value);</span><br><span class="line">  return value + &quot;-----&quot;;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>局部过滤器:<code>在组件实例对象里挂载</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;过滤器二：(使用时有参数，即&#123;&#123; msg | filterA(&quot;1&quot;,&quot;2&quot;)&#125;&#125;)</span><br><span class="line">filters: &#123;</span><br><span class="line">  filterA:(val,msg1,msg2)&#x3D;&gt;&#123;</span><br><span class="line">    return value + msg1 + msg2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>参数说明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">一：(使用时没有参数，即&#123;&#123; msg | 过滤器名字&#125;&#125;)</span><br><span class="line"></span><br><span class="line">二：(使用时有参数，即&#123;&#123; msg | filterA(&quot;1&quot;,&quot;2&quot;)&#125;&#125;)</span><br></pre></td></tr></table></figure></li><li><p>使用方法</p><ol><li><p>在双花括号插值 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; msg | filter &#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>在v-bind表达式中使用 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-bind:data&#x3D;&quot;&#39;ok&#39; | globalFilter&quot; &gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li><li><p>通过逗号形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; &#39;a&#39;,&#39;b&#39; | filterB &#125;&#125; )</span><br><span class="line"></span><br><span class="line">filters: &#123;</span><br><span class="line">  filterB:(msg1,msg2)&#x3D;&gt;&#123;</span><br><span class="line">    return msg1 + msg2; &#x2F;&#x2F;ab</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="后续补充更多知识。。。"><a href="#后续补充更多知识。。。" class="headerlink" title="后续补充更多知识。。。"></a>后续补充更多知识。。。</h2><p>参考资料：</p><ul><li><a href="https://cn.vuejs.org/">Vue.js官网</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web教程 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL学习笔记</title>
      <link href="/posts/f12cbde5/"/>
      <url>/posts/f12cbde5/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL学习"><a href="#MySQL学习" class="headerlink" title="MySQL学习"></a>MySQL学习</h2><h3 id="MySQL的连接"><a href="#MySQL的连接" class="headerlink" title="MySQL的连接"></a>MySQL的连接</h3><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><p><code>通过管理员身份运行</code></p><p>格式：<code>net start 服务名（启动服务）</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net start mysql57</span><br><span class="line"></span><br><span class="line">在windows服务中找到MYSQL57将其打开</span><br></pre></td></tr></table></figure><h4 id="停止服务"><a href="#停止服务" class="headerlink" title="停止服务"></a>停止服务</h4><p><code>net stop 服务名（停止服务）</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net stop mysql57</span><br><span class="line"></span><br><span class="line">在windows服务中找到MYSQL57将其关闭</span><br></pre></td></tr></table></figure><h4 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h4><p><code>mysql -u 用户名 -p</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><h4 id="断开连接"><a href="#断开连接" class="headerlink" title="断开连接"></a>断开连接</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit 或 ctrl+C</span><br></pre></td></tr></table></figure><h4 id="查看服务器的版本"><a href="#查看服务器的版本" class="headerlink" title="查看服务器的版本"></a>查看服务器的版本</h4><ul><li><p>方式一：登录到mysql服务端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select version();</span><br></pre></td></tr></table></figure></li><li><p>方式二：没有登录到mysql服务端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql --version 或 mysql --V</span><br></pre></td></tr></table></figure></li></ul><h4 id="显示时间-登录到MySQL服务端之后"><a href="#显示时间-登录到MySQL服务端之后" class="headerlink" title="显示时间-登录到MySQL服务端之后"></a>显示时间-登录到MySQL服务端之后</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select now();</span><br></pre></td></tr></table></figure><h4 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h IP地址 -u 用户名 -p 对方mysql密码</span><br></pre></td></tr></table></figure><h3 id="MySQL数据类型和基本操作"><a href="#MySQL数据类型和基本操作" class="headerlink" title="MySQL数据类型和基本操作"></a>MySQL数据类型和基本操作</h3><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><h5 id="二进制类型"><a href="#二进制类型" class="headerlink" title="二进制类型"></a>二进制类型</h5><p><code>bit</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bit[(M)]</span><br><span class="line">   二进制位（101001），m表示二进制位的长度（1-64），默认m＝1</span><br></pre></td></tr></table></figure><h5 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h5><p><code>tinyint</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tinyint[(m)] [unsigned] [zerofill]</span><br><span class="line"></span><br><span class="line">小整数，数据类型用于保存一些范围的整数数值范围：</span><br><span class="line">有符号：-128 ～ 127.</span><br><span class="line">无符号：255</span><br><span class="line"></span><br><span class="line">特别的： MySQL中无布尔值，使用tinyint(1)构造。</span><br></pre></td></tr></table></figure><p><code>int</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int[(m)][unsigned][zerofill]</span><br><span class="line"></span><br><span class="line">整数，数据类型用于保存一些范围的整数数值范围：</span><br><span class="line">有符号： -2147483648 ～ 2147483647</span><br><span class="line">无符号：4294967295</span><br></pre></td></tr></table></figure><p><code>bigint</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">bigint[(m)][unsigned][zerofill]</span><br><span class="line"></span><br><span class="line">大整数，数据类型用于保存一些范围的整数数值范围：</span><br><span class="line">有符号：-9223372036854775808 ～ 9223372036854775807</span><br><span class="line">无符号：18446744073709551615</span><br><span class="line">        </span><br><span class="line">作用：存储年龄，等级，id，各种号码等</span><br><span class="line"></span><br><span class="line">注意：为该类型指定宽度时，仅仅只是指定查询结果的显示宽度，与存储范围无关，所以我们使用默认的就可以了</span><br><span class="line">    有符号和无符号的最大数字需要的显示宽度均为10，</span><br><span class="line">    而针对有符号的最小值则需要11位才能显示完全，所以int类型默认的显示宽度为11是非常合理的</span><br></pre></td></tr></table></figure><h5 id="小数型"><a href="#小数型" class="headerlink" title="小数型"></a>小数型</h5><p><code>decimal</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">decimal[(m[,d])] [unsigned] [zerofill]</span><br><span class="line"></span><br><span class="line">准确的小数值，m是数字总个数（负号不算），d是小数点后个数。 m最大值为65，d最大值为30。</span><br><span class="line"></span><br><span class="line">特别的：对于精确数值计算时需要用此类型</span><br><span class="line">decaimal能够存储精确值的原因在于其内部按照字符串存储。</span><br></pre></td></tr></table></figure><p><code>FLOAT</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FLOAT[(M,D)] [UNSIGNED] [ZEROFILL]</span><br><span class="line"></span><br><span class="line">单精度浮点数（非准确小数值），m是数字总个数，d是小数点后个数。</span><br><span class="line">有符号：(-3.402823466E+38 to -1.175494351E-38),0,(1.175494351E-38 to 3.402823466E+38)</span><br><span class="line">无符号：0，(1.175 494 351 E-38，3.402 823 466 E+38)</span><br><span class="line"></span><br><span class="line">数值越大，越不准确</span><br></pre></td></tr></table></figure><p><code>DOUBLE</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DOUBLE[(M,D)] [UNSIGNED] [ZEROFILL]</span><br><span class="line">    </span><br><span class="line">双精度浮点数（非准确小数值），m是数字总个数，d是小数点后个数。</span><br><span class="line">有符号：(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，</span><br><span class="line">(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</span><br><span class="line">无符号：0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</span><br><span class="line"></span><br><span class="line">数值越大，越不准确</span><br></pre></td></tr></table></figure><p>作用：存储薪资、身高、体重、体质参数等</p><h5 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h5><p><code>char</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">char (m)</span><br><span class="line"></span><br><span class="line">char数据类型用于表示固定长度的字符串，可以包含最多达255个字符。其中m代表字符串的长度。</span><br><span class="line"></span><br><span class="line">PS: 即使数据小于m长度，也会占用m长度,但是在查询时，查出的结果会自动删除尾部的空格</span><br><span class="line"></span><br><span class="line">特点:定长，简单粗暴，浪费空间，存取速度快</span><br></pre></td></tr></table></figure><p><code>varchar</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">varchar(m)</span><br><span class="line"></span><br><span class="line">varchar 数据类型用于变长的字符串，可以包含最多达65535个字符(理论上可以,但是实际上在超出21845长度后,mysql会自动帮您转换数据类型为文本类型)。</span><br><span class="line">其中m代表该数据类型所允许保存的字符串的最大长度，只要长度小于该最大值的字符串都可以被保存在该数据类型中。</span><br><span class="line"></span><br><span class="line">PS: varchar类型存储数据的真实内容，例如:如果&#39;ab  &#39;,尾部的空格也会被存起来</span><br><span class="line">强调：varchar类型会在真实数据前加1-2Bytes的前缀，该前缀用来表示真实数据的bytes字节数（1-2Bytes最大表示65535个数字，正好符合mysql对row的最大字节限制，即已经足够使用）</span><br><span class="line">如果真实的数据&lt;255bytes则需要1Bytes的前缀（1Bytes&#x3D;8bit 2**8最大表示的数字为255）</span><br><span class="line">如果真实的数据&gt;255bytes则需要2Bytes的前缀（2Bytes&#x3D;16bit 2**16最大表示的数字为65535）</span><br><span class="line">特点:变长，精准，节省空间，存取速度慢</span><br><span class="line"></span><br><span class="line">sql优化：创建表时，定长的类型往前放，变长的往后放:比如性别, 比如地址或描述信息</span><br><span class="line"></span><br><span class="line">PS：虽然varchar使用起来较为灵活，但是从整个系统的性能角度来说，char数据类型的处理速度更快，有时甚至可以超出varchar处理速度的50%。</span><br><span class="line">    因此，用户在设计数据库时应当综合考虑各方面的因素，以求达到最佳的平衡</span><br></pre></td></tr></table></figure><p><code>text</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">text</span><br><span class="line"></span><br><span class="line">text数据类型用于保存变长的大字符串，可以最多到65535 (2**16 − 1)个字符。</span><br></pre></td></tr></table></figure><h5 id="枚举类型-了解"><a href="#枚举类型-了解" class="headerlink" title="枚举类型(了解)"></a>枚举类型(了解)</h5><p><code>enum</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">enum</span><br><span class="line"></span><br><span class="line">An ENUM column can have a maximum of 65,535 distinct elements. (The practical limit is less than 3000.)</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">CREATE TABLE user (</span><br><span class="line">name VARCHAR(40),</span><br><span class="line">sex ENUM(&#39;男&#39;, &#39;女&#39;, &#39;未知&#39;)</span><br><span class="line">);</span><br><span class="line">INSERT INTO user (name, sex) VALUES (&#39;人1&#39;,&#39;男&#39;), (&#39;人2&#39;,&#39;女&#39;),</span><br><span class="line">(&#39;人3&#39;,&#39;未知&#39;),(&#39;人4&#39;,&#39;人妖&#39;);</span><br><span class="line">PS:人4会插入成功吗??</span><br></pre></td></tr></table></figure><h5 id="集合类型-了解"><a href="#集合类型-了解" class="headerlink" title="集合类型(了解)"></a>集合类型(了解)</h5><p><code>set</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">set</span><br><span class="line"></span><br><span class="line">A SET column can have a maximum of 64 distinct members.</span><br><span class="line">示例：</span><br><span class="line">CREATE TABLE myset (col SET(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;));</span><br><span class="line"></span><br><span class="line">INSERT INTO myset (col) VALUES (&#39;a,d&#39;), (&#39;d,a&#39;), (&#39;a,d,a&#39;), (&#39;a,d,d&#39;), (&#39;d,a,d&#39;);</span><br></pre></td></tr></table></figure><h5 id="日期-时间类型"><a href="#日期-时间类型" class="headerlink" title="日期/时间类型"></a>日期/时间类型</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">DATE 日期值</span><br><span class="line">    YYYY-MM-DD（1000-01-01&#x2F;9999-12-31）</span><br><span class="line"></span><br><span class="line">TIME  时间值或持续时间</span><br><span class="line">    HH:MM:SS（&#39;-838:59:59&#39;&#x2F;&#39;838:59:59&#39;）</span><br><span class="line"></span><br><span class="line">YEAR 年份值</span><br><span class="line">    YYYY（1901&#x2F;2155）</span><br><span class="line"></span><br><span class="line">DATETIME 混合日期和时间值(占用8字节)</span><br><span class="line">    YYYY-MM-DD HH:MM:SS（1000-01-01 00:00:00&#x2F;9999-12-31 23:59:59）</span><br><span class="line"></span><br><span class="line">TIMESTAMP 时间戳(占用4字节)</span><br><span class="line">    YYYYMMDD HHMMSS（1970-01-01 00:00:00&#x2F;2037 年某时）</span><br><span class="line">    </span><br><span class="line">作用：存储用户注册时间，文章发布时间，员工入职时间，出生时间，过期时间等数据类型</span><br></pre></td></tr></table></figure><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><h5 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h5><p><code>create database &lt;数据库名称&gt; charset=utf8;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database skx charset&#x3D;utf8;</span><br></pre></td></tr></table></figure><h5 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h5><p><code>drop database &lt;数据库名称&gt;; </code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database skx;</span><br></pre></td></tr></table></figure><h5 id="切换数据库"><a href="#切换数据库" class="headerlink" title="切换数据库"></a>切换数据库</h5><p><code>use &lt;数据库名称&gt;;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use zykj;</span><br></pre></td></tr></table></figure><h5 id="查看当前选择的数据库"><a href="#查看当前选择的数据库" class="headerlink" title="查看当前选择的数据库"></a>查看当前选择的数据库</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select database();</span><br></pre></td></tr></table></figure><h3 id="MySQL之表操作"><a href="#MySQL之表操作" class="headerlink" title="MySQL之表操作"></a>MySQL之表操作</h3><h4 id="什么是表"><a href="#什么是表" class="headerlink" title="什么是表"></a>什么是表</h4><p>表(TABLE) 是一种结构化的文件，可用来存储某种特定类型的数据。表中的一条记录有对应的标题，标题称之为表的字段。</p><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/06/12/5d00a209569a573218.png" alt="表"></p><h4 id="查看当前数据库中所有表"><a href="#查看当前数据库中所有表" class="headerlink" title="查看当前数据库中所有表"></a>查看当前数据库中所有表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式：show tables;</span><br></pre></td></tr></table></figure><h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4><p>格式：<br><code>create table 表名( 字段名1 类型[(宽度) 约束条件], 字段名2 类型[(宽度) 约束条件], 字段名3 类型[(宽度) 约束条件] )engine=innodb default charset utf8;</code></p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">create table student(</span><br><span class="line">   id int auto_increment primary key,</span><br><span class="line">   name varchar(20) not null,</span><br><span class="line">   age int not null,</span><br><span class="line">   gender bit default 1,</span><br><span class="line">   address varchar(20),</span><br><span class="line">   isDelete bit default 0</span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line">create table info1(</span><br><span class="line">   id int not null auto_increment primary key,</span><br><span class="line">   name varchar(50) not null,</span><br><span class="line">   sex char(2) not null</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li><code>not null</code> :表示此列不能为空</li><li><code>auto_increment</code> :表示自增长,默认每次增长+1</li><li>自增长只能添加在主键或者唯一索引字段上</li><li>primary key :表示主键(唯一且不为空)</li><li>engine = innodb :表示指定当前表的存储引擎</li><li>default charset utf8 :设置表的默认编码集</li></ul><h4 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h4><p><code>drop table 表名;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table student; </span><br></pre></td></tr></table></figure><h4 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h4><p><code>desc 表名;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc student;</span><br></pre></td></tr></table></figure><h4 id="查看建表语句"><a href="#查看建表语句" class="headerlink" title="查看建表语句"></a>查看建表语句</h4><p><code>show create table 表名;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create table student;</span><br></pre></td></tr></table></figure><h4 id="重命名表名"><a href="#重命名表名" class="headerlink" title="重命名表名"></a>重命名表名</h4><p><code>rename table &lt;变更前表名&gt; to &lt;变更后表名&gt;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rename table car to newCar;</span><br></pre></td></tr></table></figure><h4 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h4><p><code>alter table 表名 add|change|drop 列名 类型;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> newCar <span class="keyword">add</span> isDelete <span class="built_in">bit</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">alter</span> info1 <span class="keyword">alter</span> sex <span class="keyword">default</span> <span class="string">&#x27;男&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="复制表"><a href="#复制表" class="headerlink" title="复制表"></a>复制表</h4><p><code>create table 新表名 select * from 原表名</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> newinfo <span class="keyword">select</span> * <span class="keyword">from</span> oldinfo;</span><br></pre></td></tr></table></figure><p>ps:主键自增/索引/触发器/外键 不会 被复制</p><ul><li><p>选择性插入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table newinfo select * from oldinfo where id&#x3D;1;</span><br></pre></td></tr></table></figure></li><li><p>复制表结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table newinfo like oldinfo;</span><br></pre></td></tr></table></figure></li><li><p>ps: 数据/触发器/外键 不会被复制</p></li><li><p>create table newinfo select * from oldinfo where 1!=1;</p></li></ul><h3 id="数据操作-增-删-改-查"><a href="#数据操作-增-删-改-查" class="headerlink" title="数据操作(增 删 改 查)"></a>数据操作(增 删 改 查)</h3><h4 id="增-insert"><a href="#增-insert" class="headerlink" title="增 insert"></a>增 insert</h4><h5 id="全列插入"><a href="#全列插入" class="headerlink" title="全列插入"></a>全列插入</h5><p><code>insert into 表名 values(...);</code></p><p>主键列是自动增长，但是全列插入时需要占位，通常使用0,插入成功一行以实际数据为准</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into student values(0,&quot;tom&quot;,19,1,&quot;北京&quot;,0);</span><br></pre></td></tr></table></figure><h5 id="缺省插入"><a href="#缺省插入" class="headerlink" title="缺省插入"></a>缺省插入</h5><p><code>insert into 表名(列1,列2,...) values(值1,值2,...)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into student(name,age,address) values(&quot;lilei&quot;,19,&quot;上海&quot;);</span><br><span class="line">insert into(id,name) values(2,&#39;张三&#39;);</span><br></pre></td></tr></table></figure><h5 id="同时插入多条数据"><a href="#同时插入多条数据" class="headerlink" title="同时插入多条数据"></a>同时插入多条数据</h5><p><code>insert into 表名 values(...),(...),...;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">insert into student values(0,&quot;hanmeimei&quot;,18,0,&quot;北京&quot;,0),(0,&quot;poi&quot;,22,1,&quot;海南&quot;,0),(0,&quot;wenli&quot;,20,0,&quot;石家庄&quot;,0);</span><br><span class="line"></span><br><span class="line">insert into(id,name) values(2,&#39;哈哈&#39;),(3,&#39;呵呵&#39;),(4,&#39;哦哦&#39;);</span><br><span class="line"></span><br><span class="line">insert into(name,sex) select &#39;name&#39;,sex from info;</span><br></pre></td></tr></table></figure><h4 id="删-delete"><a href="#删-delete" class="headerlink" title="删 delete"></a>删 delete</h4><p><code>delete from 表名 where 条件;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from student where id&#x3D;4;</span><br></pre></td></tr></table></figure><p>注意:</p><ul><li>delete from student; – 删除整张表中的所有数据(一条一条数据的删除)</li><li>truncate student; – 清空整张表(整个删,效率高)</li></ul><p>truncate和delete的区别？[面试题]</p><ol><li>TRUNCATE 在各种表上无论是大的还是小的都非常快。而DELETE 操作会被表中数据量的大小影响其执行效率.</li><li>TRUNCATE是一个DDL语言而DELETE是DML语句，向其他所有的DDL语言一样，他将被隐式提交，不能对TRUNCATE使用ROLLBACK命令。</li><li>TRUNCATE不能触发触发器，DELETE会触发触发器。</li><li>当表被清空后表和表的索引和自增主键将重新设置成初始大小，而delete则不能。</li></ol><h4 id="改-update"><a href="#改-update" class="headerlink" title="改 update"></a>改 update</h4><p><code>update 表名 set 列1=值1,列2=值2,......where 条件;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update student set age&#x3D;16 where id &#x3D; 7;</span><br></pre></td></tr></table></figure><p>注意：如果没有条件是全部列都修改</p><h4 id="查-select"><a href="#查-select" class="headerlink" title="查 select"></a>查 select</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">说明：查询表名中的全部数据</span><br><span class="line">格式：select * from 表名;</span><br><span class="line">示例：select * from student;</span><br></pre></td></tr></table></figure><h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><h4 id="MySQL之单表查询"><a href="#MySQL之单表查询" class="headerlink" title="MySQL之单表查询"></a>MySQL之单表查询</h4><h5 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h5><ul><li><p>查询语法</p><p><code>select [distinct]*(所有)|字段名,...字段名 from 表名;</code></p></li><li><p>查询所有字段信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from person;</span><br></pre></td></tr></table></figure></li><li><p>查询指定字段信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id,name,age,sex,salary from person;</span><br></pre></td></tr></table></figure></li><li><p>别名查询，使用的as关键字，as可以省略的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name,age as&#39;年龄&#39;,salary &#39;工资&#39; from person;</span><br></pre></td></tr></table></figure></li><li><p>直接对列进行运算,查询出所有人工资,并每人增加100块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select (5&#x2F;2);</span><br><span class="line">select name, salary+100 from person;</span><br></pre></td></tr></table></figure></li><li><p>剔除重复查询 distinct</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select distinct age from person;</span><br></pre></td></tr></table></figure></li></ul><h5 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h5><blockquote><p>使用 WHERE 关键字 对简单查询的结果集 进行过滤</p></blockquote><ol><li><p>比较运算符: <code>&gt;</code> <code>&lt;</code> <code>&gt;=</code> <code>&lt;=</code> <code>=</code> <code>&lt;&gt;</code> <code>(!=)</code></p></li><li><p>null 关键字: <code>is null</code> ,<code>not null</code></p></li><li><p>逻辑运算符: 与 <code>and</code> 或 <code>or</code> (多个条件时,需要使用逻辑运算符进行连接)</p></li></ol><ul><li><p>查询格式</p><p><code>select [distinct]*(所有)|字段名,...字段名 from 表名 [where 条件过滤]</code></p></li><li><p>比较运算符: <code>&gt;</code> <code>&lt;</code> <code>&gt;=</code> <code>&lt;=</code> <code>=</code> <code>&lt;&gt;</code> <code>(!=)</code>  , <code>is null</code> 是否为null</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select * from person where age &#x3D; 23;</span><br><span class="line">select * from person where age &lt;&gt; 23;</span><br><span class="line">select * from person where age is null;</span><br><span class="line">select * from person where age is not null;</span><br></pre></td></tr></table></figure></li><li><p>逻辑运算符: 与 <code>and</code> 或 <code>or</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from person where age &#x3D; 23 and salary &#x3D; 29000;</span><br><span class="line">select * from person where age &#x3D; 23 or salary &#x3D; 29000;</span><br></pre></td></tr></table></figure></li></ul><h5 id="区间查询"><a href="#区间查询" class="headerlink" title="区间查询"></a>区间查询</h5><p><code>关键字 between 10 and  20 :表示 获得10 到 20 区间的内容</code></p><ul><li><p>使用  between…and  进行区间 查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from person where salary between 4000 and 8000;</span><br></pre></td></tr></table></figure></li><li><p>between…and 前后包含所指定的值<br>等价于 select * from person where salary &gt;= 4000 and salary &lt;= 8000;</p></li></ul><h5 id="集合查询"><a href="#集合查询" class="headerlink" title="集合查询"></a>集合查询</h5><p><code> 关键字: in, not null</code></p><ul><li><p>使用 in 集合(多个字段)查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from person where age in(23,32,18);</span><br><span class="line">等价于: select * from person where  age &#x3D;23 or age &#x3D; 32 or age &#x3D;18;</span><br></pre></td></tr></table></figure></li><li><p>使用 in 集合 排除指定值查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from person where age not in(23,32,18);</span><br></pre></td></tr></table></figure></li></ul><h5 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h5><p>关键字 like , not like</p><ul><li><code>%</code>:  任意多个字符</li><li><code>_</code>  : 只能是单个字符</li></ul><hr/><ul><li><p>模糊查询  like % : 任意多个字符,   _ :单个字符</p></li><li><p>示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#查询姓名以&quot;张&quot;字开头的</span><br><span class="line">select * from person where name like &#39;张%&#39;;</span><br><span class="line"></span><br><span class="line">#查询姓名以&quot;张&quot;字结尾的</span><br><span class="line">select * from person where name like &#39;%张&#39;;</span><br><span class="line"></span><br><span class="line">#查询姓名中含有&quot;张&quot;字的</span><br><span class="line">select * from person where name like &#39;%张%&#39;;</span><br><span class="line"> </span><br><span class="line">#查询 name 名称 是四个字符的人</span><br><span class="line">select * from person where name like &#39;____&#39;;</span><br><span class="line"></span><br><span class="line">#查询 name 名称 的第二个字符是 &#39;l&#39;的人</span><br><span class="line">select * from person where name like &#39;_l%&#39;;</span><br><span class="line"> </span><br><span class="line">#排除名字带 a 的学生</span><br><span class="line">select * from student where name not like &#39;a%&#39;</span><br></pre></td></tr></table></figure></li></ul><h5 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h5><p><code>ORDER BY  字段1 DESC, 字段2 ASC</code></p><ul><li><p>排序查询格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select 字段|* from 表名 [where 条件过滤] [order by 字段[ASC][DESC]]</span><br><span class="line"></span><br><span class="line">升序:ASC 默认为升序</span><br><span class="line">降序:DESC</span><br><span class="line">PS:排序order by 要写在select语句末尾</span><br></pre></td></tr></table></figure></li><li><p>示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#按人员工资正序排列,注意:此处可以省略 ASC关键字</span><br><span class="line">select * from person order by salary ASC;</span><br><span class="line">select * from person order by salary;</span><br><span class="line"> </span><br><span class="line">#工资大于5000的人,按工资倒序排列</span><br><span class="line">select * from person where salary &gt;5000 order by salary DESC;</span><br><span class="line"> </span><br><span class="line">#按中文排序</span><br><span class="line">select * from person order by name;</span><br><span class="line"> </span><br><span class="line">#强制中文排序</span><br><span class="line">select * from person order by CONVERT(name USING gbk);</span><br><span class="line">ps:UTF8 默认校对集是 utf8_general_ci , 它不是按照中文来的。你需要强制让MySQL按中文来排序</span><br></pre></td></tr></table></figure></li></ul><h5 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h5><ul><li>聚合:  将分散的聚集到一起.</li><li>聚合函数: 对列进行操作,返回的结果是一个单一的值,除了 COUNT 以外，都会忽略空值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">COUNT：统计指定列不为NULL的记录行数；</span><br><span class="line">SUM：计算指定列的数值和，如果指定列类型不是数值类型，那么计算结果为0；</span><br><span class="line">MAX：计算指定列的最大值，如果指定列是字符串类型，那么使用字符串排序运算；</span><br><span class="line">MIN：计算指定列的最小值，如果指定列是字符串类型，那么使用字符串排序运算；</span><br><span class="line">AVG：计算指定列的平均值，如果指定列类型不是数值类型，那么计算结果为0；</span><br></pre></td></tr></table></figure><ul><li><p>格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 聚合函数(字段) from 表名;</span><br></pre></td></tr></table></figure></li><li><p>示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#统计人员中最大年龄、最小年龄，平均年龄分别是多少</span><br><span class="line">select max(age),min(age),avg(age) from person;</span><br></pre></td></tr></table></figure></li></ul><h5 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h5><blockquote><p>分组的含义: 将一些具有相同特征的数据 进行归类.比如:性别,部门,岗位等等</p></blockquote><p>怎么区分什么时候需要分组呢?  </p><p>套路: 遇到 “每” 字,一般需要进行分组操作<br>例如: </p><ol><li>公司每个部门有多少人</li><li>公司中有 多少男员工 和 多少女员工.</li></ol><ul><li><p>分组查询格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select 被分组的字段 from 表名 group by 分组字段 [having 条件字段]</span><br><span class="line">ps: 分组查询可以与 聚合函数 组合使用</span><br></pre></td></tr></table></figure></li><li><p>示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#查询每个部门的平均薪资</span><br><span class="line">select avg(salary),dept from person  GROUP BY dept;</span><br><span class="line"></span><br><span class="line">#查询每个部门的平均薪资 并且看看这个部门的员工都有谁?</span><br><span class="line">select avg(salary),dept,GROUP_CONCAT(name) from person GROUP BY dept;</span><br><span class="line">#GROUP_CONCAT(expr):按照分组，将expr字符串按逗号分隔，组合起来</span><br><span class="line"></span><br><span class="line">#查询平均薪资大于10000的部门, 并且看看这个部门的员工都有谁?  </span><br><span class="line">select avg(salary),dept,GROUP_CONCAT(name) from person GROUP BY dept; having avg(salary)&gt;10000;</span><br></pre></td></tr></table></figure></li></ul><p>where 与 having区别:<br>执行优先级从高到低：<code>where &gt; group by &gt; having</code></p><ol><li>Where 发生在分组group by之前，因而Where中可以有任意字段，但是绝对不能使用聚合函数。</li><li>Having发生在分组group by之后，因而Having中可以使用分组的字段，无法直接取到其他字段,可以使用聚合函数</li></ol><h5 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询　"></a>分页查询　</h5><blockquote><p>好处:限制查询数据条数,提高查询效率</p></blockquote><p><code>limit (起始条数),(查询多少条数);</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#查询前5条数据</span><br><span class="line">select * from person limit 5;</span><br><span class="line"> </span><br><span class="line">#查询第5条到第10条数据</span><br><span class="line">select * from person limit 5,5;</span><br><span class="line"> </span><br><span class="line">#查询第10条到第15条数据</span><br><span class="line">select * from person limit 10,5;</span><br></pre></td></tr></table></figure><h5 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h5><blockquote><p>union 联合、合并</p></blockquote><p>语法：</p><pre><code>select 字段|常量|表达式|函数 【from 表】 【where 条件】 union 【all】select 字段|常量|表达式|函数 【from 表】 【where 条件】 union 【all】select 字段|常量|表达式|函数 【from 表】 【where 条件】 union  【all】.....select 字段|常量|表达式|函数 【from 表】 【where 条件】</code></pre><p>特点：</p><pre><code>1、多条查询语句的查询的列数必须是一致的2、多条查询语句的查询的列的类型几乎相同3、union代表去重，union all代表不去重</code></pre><h5 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式　"></a>正则表达式　</h5><p>MySQL中使用 REGEXP 操作符来进行正则表达式匹配。</p><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>^</td><td>匹配输入字符串的开始位置。</td></tr><tr><td>$</td><td>匹配输入字符串的结束位置。</td></tr><tr><td>.</td><td>匹配任何字符（包括回车和新行）</td></tr><tr><td>[…]</td><td>字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。</td></tr><tr><td>[^…]</td><td>负值字符集合。匹配未包含的任意字符。例如， ‘[^abc]’ 可以匹配 “plain” 中的’p’。</td></tr><tr><td>p1|p2|p3</td><td>匹配 p1 或 p2 或 p3。例如，’z|food’ 能匹配 “z” 或 “food”。’(z|f)ood’ 则匹配 “zood” 或 “food”。</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">## ^  匹配 name 名称 以 &quot;e&quot; 开头的数据</span><br><span class="line">select * from person where name REGEXP &#39;^e&#39;;</span><br><span class="line"> </span><br><span class="line">## $  匹配 name 名称 以 &quot;n&quot; 结尾的数据</span><br><span class="line">select * from person where name REGEXP &#39;n$&#39;;</span><br><span class="line"> </span><br><span class="line">## . 匹配 name 名称 第二位后包含&quot;x&quot;的人员 &quot;.&quot;表示任意字符</span><br><span class="line">select * from person where name REGEXP &#39;.x&#39;;</span><br><span class="line"> </span><br><span class="line">## [abci] 匹配 name 名称中含有指定集合内容的人员</span><br><span class="line">select * from person where name REGEXP &#39;[abci]&#39;;</span><br><span class="line"> </span><br><span class="line">## [^alex] 匹配 不符合集合中条件的内容 , ^表示取反</span><br><span class="line">select * from person where name REGEXP &#39;[^alex]&#39;;</span><br><span class="line"></span><br><span class="line">#注意1：^只有在[]内才是取反的意思，在别的地方都是表示开始处匹配</span><br><span class="line">#注意2 : 简单理解 name  REGEXP &#39;[^alex]&#39; 等价于 name !&#x3D; &#39;alex&#39;</span><br><span class="line"> </span><br><span class="line">## &#39;a|x&#39; 匹配 条件中的任意值</span><br><span class="line">select * from person where name REGEXP &#39;a|x&#39;;　　</span><br><span class="line"> </span><br><span class="line">## 查询以w开头以i结尾的数据</span><br><span class="line">select * from person where name regexp &#39;^w.*i$&#39;;</span><br><span class="line"></span><br><span class="line">## 注意:^w 表示w开头, .*表示中间可以有任意多个字符, i$表示以 i结尾</span><br></pre></td></tr></table></figure><h4 id="MySQL之多表查询"><a href="#MySQL之多表查询" class="headerlink" title="MySQL之多表查询"></a>MySQL之多表查询</h4><h5 id="多表联合查询"><a href="#多表联合查询" class="headerlink" title="多表联合查询"></a>多表联合查询</h5><p>数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">#创建部门</span><br><span class="line">CREATE TABLE IF NOT EXISTS dept (</span><br><span class="line">    did int not null auto_increment PRIMARY KEY,</span><br><span class="line">    dname VARCHAR(50) not null COMMENT &#39;部门名称&#39;</span><br><span class="line">)ENGINE&#x3D;INNODB DEFAULT charset utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#添加部门数据</span><br><span class="line">INSERT INTO &#96;dept&#96; VALUES (&#39;1&#39;, &#39;教学部&#39;);</span><br><span class="line">INSERT INTO &#96;dept&#96; VALUES (&#39;2&#39;, &#39;销售部&#39;);</span><br><span class="line">INSERT INTO &#96;dept&#96; VALUES (&#39;3&#39;, &#39;市场部&#39;);</span><br><span class="line">INSERT INTO &#96;dept&#96; VALUES (&#39;4&#39;, &#39;人事部&#39;);</span><br><span class="line">INSERT INTO &#96;dept&#96; VALUES (&#39;5&#39;, &#39;鼓励部&#39;);</span><br><span class="line"></span><br><span class="line">-- 创建人员</span><br><span class="line">DROP TABLE IF EXISTS &#96;person&#96;;</span><br><span class="line">CREATE TABLE &#96;person&#96; (</span><br><span class="line">  &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;name&#96; varchar(50) NOT NULL,</span><br><span class="line">  &#96;age&#96; tinyint(4) DEFAULT &#39;0&#39;,</span><br><span class="line">  &#96;sex&#96; enum(&#39;男&#39;,&#39;女&#39;,&#39;人妖&#39;) NOT NULL DEFAULT &#39;人妖&#39;,</span><br><span class="line">  &#96;salary&#96; decimal(10,2) NOT NULL DEFAULT &#39;250.00&#39;,</span><br><span class="line">  &#96;hire_date&#96; date NOT NULL,</span><br><span class="line">  &#96;dept_id&#96; int(11) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;13 DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">-- 添加人员数据</span><br><span class="line"></span><br><span class="line">-- 教学部</span><br><span class="line">INSERT INTO &#96;person&#96; VALUES (&#39;1&#39;, &#39;alex&#39;, &#39;28&#39;, &#39;人妖&#39;, &#39;53000.00&#39;, &#39;2010-06-21&#39;, &#39;1&#39;);</span><br><span class="line">INSERT INTO &#96;person&#96; VALUES (&#39;2&#39;, &#39;wupeiqi&#39;, &#39;23&#39;, &#39;男&#39;, &#39;8000.00&#39;, &#39;2011-02-21&#39;, &#39;1&#39;);</span><br><span class="line">INSERT INTO &#96;person&#96; VALUES (&#39;3&#39;, &#39;egon&#39;, &#39;30&#39;, &#39;男&#39;, &#39;6500.00&#39;, &#39;2015-06-21&#39;, &#39;1&#39;);</span><br><span class="line">INSERT INTO &#96;person&#96; VALUES (&#39;4&#39;, &#39;jingnvshen&#39;, &#39;18&#39;, &#39;女&#39;, &#39;6680.00&#39;, &#39;2014-06-21&#39;, &#39;1&#39;);</span><br><span class="line"></span><br><span class="line">-- 销售部</span><br><span class="line">INSERT INTO &#96;person&#96; VALUES (&#39;5&#39;, &#39;歪歪&#39;, &#39;20&#39;, &#39;女&#39;, &#39;3000.00&#39;, &#39;2015-02-21&#39;, &#39;2&#39;);</span><br><span class="line">INSERT INTO &#96;person&#96; VALUES (&#39;6&#39;, &#39;星星&#39;, &#39;20&#39;, &#39;女&#39;, &#39;2000.00&#39;, &#39;2018-01-30&#39;, &#39;2&#39;);</span><br><span class="line">INSERT INTO &#96;person&#96; VALUES (&#39;7&#39;, &#39;格格&#39;, &#39;20&#39;, &#39;女&#39;, &#39;2000.00&#39;, &#39;2018-02-27&#39;, &#39;2&#39;);</span><br><span class="line">INSERT INTO &#96;person&#96; VALUES (&#39;8&#39;, &#39;周周&#39;, &#39;20&#39;, &#39;女&#39;, &#39;2000.00&#39;, &#39;2015-06-21&#39;, &#39;2&#39;);</span><br><span class="line"></span><br><span class="line">-- 市场部</span><br><span class="line">INSERT INTO &#96;person&#96; VALUES (&#39;9&#39;, &#39;月月&#39;, &#39;21&#39;, &#39;女&#39;, &#39;4000.00&#39;, &#39;2014-07-21&#39;, &#39;3&#39;);</span><br><span class="line">INSERT INTO &#96;person&#96; VALUES (&#39;10&#39;, &#39;安琪&#39;, &#39;22&#39;, &#39;女&#39;, &#39;4000.00&#39;, &#39;2015-07-15&#39;, &#39;3&#39;);</span><br><span class="line"></span><br><span class="line">-- 人事部</span><br><span class="line">INSERT INTO &#96;person&#96; VALUES (&#39;11&#39;, &#39;周明月&#39;, &#39;17&#39;, &#39;女&#39;, &#39;5000.00&#39;, &#39;2014-06-21&#39;, &#39;4&#39;);</span><br><span class="line"></span><br><span class="line">-- 鼓励部</span><br><span class="line">INSERT INTO &#96;person&#96; VALUES (&#39;12&#39;, &#39;苍老师&#39;, &#39;33&#39;, &#39;女&#39;, &#39;1000000.00&#39;, &#39;2018-02-21&#39;, null);</span><br></pre></td></tr></table></figure><p><code>多表查询语法</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select  字段1,字段2... from 表1,表2... [where 条件]</span><br></pre></td></tr></table></figure><p>注意: 如果不加条件直接进行查询,则会出现以下效果,这种结果我们称之为 笛卡尔乘积</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#查询人员和部门所有信息</span><br><span class="line">select * from person,dept　</span><br></pre></td></tr></table></figure><p>笛卡尔乘积公式 : A表中数据条数   *  B表中数据条数  = 笛卡尔乘积.</p><h3 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h3><p>建表语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create table class(id int auto_increment primary key,name varchar(20) not null,stuNum int not null);</span><br><span class="line"></span><br><span class="line">create table students(id int auto_increment primary key,name varchar(20) not null,gender bit default 1,classid int not null,foreign key(classid) references class(id));</span><br></pre></td></tr></table></figure><p>插入一些数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">insert into class values(0,&quot;python01&quot;,55),(0,&quot;python02&quot;,50),(0,&quot;python03&quot;,60),(0,&quot;python04&quot;,60);</span><br><span class="line">insert into students values(0,&quot;tom&quot;,1,1);</span><br><span class="line">insert into students values(0,&quot;jack&quot;,1,2);</span><br><span class="line">insert into students values(0,&quot;jack1&quot;,1,2);</span><br><span class="line">insert into students values(0,&quot;jack12&quot;,1,3);</span><br><span class="line">insert into students values(0,&quot;jack14&quot;,1,3);</span><br><span class="line">insert into students values(0,&quot;jack145&quot;,1,3);</span><br><span class="line">insert into students values(0,&quot;jack1456&quot;,1,2);</span><br><span class="line">insert into students values(0,&quot;lilei&quot;,1,10); ## 错误,没有键为10的班级</span><br><span class="line"></span><br><span class="line">select * from students;</span><br></pre></td></tr></table></figure><p>关联查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select students.name,class.name from class inner join students on class.id&#x3D;students.classid;</span><br><span class="line"></span><br><span class="line">select students.name,class.name from class left join students on class.id&#x3D;students.classid;</span><br><span class="line"></span><br><span class="line">select students.name,class.name from class right join students on class.id&#x3D;students.classid;</span><br></pre></td></tr></table></figure><p>分类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1、表A inner join 表B:</span><br><span class="line">表A与表B匹配的行会出现在结果集中</span><br><span class="line">2、表A left join 表B:</span><br><span class="line">表A与表B匹配的行会出现在结果集中，外加表A中独有的数据，未对应的数据使用null填充</span><br><span class="line">3、表A right join 表B:</span><br><span class="line">表A与表B匹配的行会出现在结果集中，外加表B中独有的数据，未对应的数据使用null填充</span><br></pre></td></tr></table></figure><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><p>MySQL中的约束,添加约束,删除约束,以及其他的一些修饰：</p><h4 id="NOT-NULL-非空约束"><a href="#NOT-NULL-非空约束" class="headerlink" title="NOT NULL(非空约束)"></a>NOT NULL(非空约束)</h4><h5 id="添加非空约束"><a href="#添加非空约束" class="headerlink" title="添加非空约束"></a>添加非空约束</h5><ul><li><p>建表时直接添加</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t_user(user_id INT(10) NOT NULL);</span><br></pre></td></tr></table></figure></li><li><p>通过ALTER 语句</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE t_user MODIFY user_id INT(10) NOT NULL;</span><br><span class="line"></span><br><span class="line">ALTER TABLE t_user CHANGE user_id user_id INT(10) NOT NULL;</span><br></pre></td></tr></table></figure></li></ul><h5 id="删除非空约束"><a href="#删除非空约束" class="headerlink" title="删除非空约束"></a>删除非空约束</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE t_user MODIFY user_id INT(10);</span><br><span class="line"></span><br><span class="line">ALTER TABLE t_user CHANGE user_id user_id INT(10);</span><br></pre></td></tr></table></figure><h4 id="UNIQUE-唯一约束"><a href="#UNIQUE-唯一约束" class="headerlink" title="UNIQUE(唯一约束)"></a>UNIQUE(唯一约束)</h4><h5 id="添加唯一约束"><a href="#添加唯一约束" class="headerlink" title="添加唯一约束"></a>添加唯一约束</h5><h6 id="建表时直接添加"><a href="#建表时直接添加" class="headerlink" title="建表时直接添加"></a>建表时直接添加</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_user(user_id <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">UNIQUE</span>);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_user(</span><br><span class="line">user_id <span class="built_in">INT</span>(<span class="number">10</span>),</span><br><span class="line">user_name <span class="built_in">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line"><span class="keyword">CONSTRAINT</span> UN_PHONE_EMAIL <span class="keyword">UNIQUE</span>(user_id,user_name)<span class="comment">#复合约束</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_user(</span><br><span class="line">user_id <span class="built_in">INT</span>(<span class="number">10</span>),</span><br><span class="line"><span class="keyword">UNIQUE</span> <span class="keyword">KEY</span>(user_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h6 id="通过ALTER语句"><a href="#通过ALTER语句" class="headerlink" title="通过ALTER语句"></a>通过ALTER语句</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE t_user MODIFY user_id INT(10) UNIQUE;</span><br><span class="line"></span><br><span class="line">ALTER TABLE t_user CHANGE user_id user_id INT(10) UNIQUE;</span><br><span class="line"></span><br><span class="line">ALTER TABLE t_user ADD UNIQUE(user_id);</span><br><span class="line"></span><br><span class="line">ALTER TABLE t_user ADD UNIQUE KEY(user_id);</span><br><span class="line"></span><br><span class="line">ALTER TABLE t_user ADD CONSTRAINT UN_ID UNIQUE(user_id);</span><br><span class="line"></span><br><span class="line">ALTER TABLE t_user ADD CONSTRAINT UN_ID UNIQUE KEY(user_id);</span><br></pre></td></tr></table></figure><h5 id="删除唯一性约束"><a href="#删除唯一性约束" class="headerlink" title="删除唯一性约束"></a>删除唯一性约束</h5><pre><code>ALTER TABLE t_user DROP INDEX user_id;注：唯一但是可以为空(空和空不相等)</code></pre><h4 id="PRIMARY-KEY-主键约束"><a href="#PRIMARY-KEY-主键约束" class="headerlink" title="PRIMARY KEY(主键约束)"></a>PRIMARY KEY(主键约束)</h4><h5 id="添加主键约束"><a href="#添加主键约束" class="headerlink" title="添加主键约束"></a>添加主键约束</h5><h6 id="建表时直接添加-1"><a href="#建表时直接添加-1" class="headerlink" title="建表时直接添加"></a>建表时直接添加</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t_user(user_id INT(10) PRIMARY KEY);</span><br><span class="line">CREATE TABLE t_user(</span><br><span class="line">user_id INT(10),</span><br><span class="line">user_name VARCHAR(30),</span><br><span class="line">CONSTRAINT PK_ID_NAME PRIMARY KEY(user_id,user_name)#复合约束</span><br><span class="line">);</span><br><span class="line">CREATE TABLE t_user(</span><br><span class="line">user_id INT(10),</span><br><span class="line">PRIMARY KEY(user_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h6 id="通过ALTER语句-1"><a href="#通过ALTER语句-1" class="headerlink" title="通过ALTER语句"></a>通过ALTER语句</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE t_user MODIFY user_id INT(10) PRIMARY KEY;</span><br><span class="line"></span><br><span class="line">ALTER TABLE t_user CHANGE user_id user_id INT(10) PRIMARY KEY;</span><br><span class="line"></span><br><span class="line">ALTER TABLE t_user ADD PRIMARY KEY(user_id);</span><br><span class="line"></span><br><span class="line">ALTER TABLE t_user ADD CONSTRAINT PK_ID PRIMARY KEY(user_id);</span><br></pre></td></tr></table></figure><h5 id="删除主键约束"><a href="#删除主键约束" class="headerlink" title="删除主键约束"></a>删除主键约束</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1)ALTER TABLE t_user DROP PRIMARY KEY;</span><br><span class="line"></span><br><span class="line">注：主键约束相当于(唯一约束+非空约束)</span><br><span class="line"></span><br><span class="line">一张表中最多有一个主键约束,如果设置多个主键,就会出现如下提示：</span><br><span class="line"></span><br><span class="line">Multiple primary key defined!!!</span><br><span class="line"></span><br><span class="line">删除主键约束前，如果有自增长需要先删除自增长,如果不删除自增长就无法删除主键约束</span><br></pre></td></tr></table></figure><h4 id="FOREIGN-KEY-外键约束"><a href="#FOREIGN-KEY-外键约束" class="headerlink" title="FOREIGN KEY(外键约束)"></a>FOREIGN KEY(外键约束)</h4><blockquote><p>对应的字段只能是主键或者唯一约束修饰的字段</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">首先创建两张表:class,students</span><br><span class="line"></span><br><span class="line">主表：</span><br><span class="line">CREATE TABLE class(</span><br><span class="line">cla_id INT(6) AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">cla_name VARCHAR(30) NOT NULL UNIQUE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">从表：</span><br><span class="line">CREATE TABLE students(</span><br><span class="line">stu_id INT(10) AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">stu_name VARCHAR(30) NOT NULL,</span><br><span class="line">stu_score FLOAT(5,2) DEFAULT 0.0,</span><br><span class="line">cla_id INT(10),</span><br><span class="line">CONSTRAINT FK_CLA_ID FOREIGN KEY(cla_id) REFERENCES class(cla_id)#添加外键约束</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">也可以这样添加：</span><br><span class="line">ALTER TABLE students ADD CONSTRAINT FK_CLA_ID FROEIGN KEY(cla_id) REFERENCES class(cla_id);</span><br><span class="line"></span><br><span class="line">删除外键约束</span><br><span class="line">ALTER TABLE students DROP FOREIGN KEY FK_CLA_ID;</span><br><span class="line"></span><br><span class="line">#外键中的级联关系有以下几种情况：</span><br><span class="line">#ON DELETE CASCADE 删除主表中的数据时，从表中的数据随之删除</span><br><span class="line">#ON UPDATE CASCADE 更新主表中的数据时，从表中的数据随之更新</span><br><span class="line">#ON DELETE SET NULL 删除主表中的数据时，从表中的数据置为空</span><br><span class="line"></span><br><span class="line">#默认 删除主表中的数据前需先删除从表中的数据，否则主表数据不会被删除</span><br><span class="line"></span><br><span class="line">CREATE TABLE students(</span><br><span class="line">stu_id INT(10) AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">stu_name VARCHAR(30) NOT NULL,</span><br><span class="line">stu_score FLOAT(5,2) DEFAULT 0.0,</span><br><span class="line">cla_id INT(10),</span><br><span class="line">CONSTRAINT FK_CLA_ID FOREIGN KEY(cla_id) REFERENCES class(cla_id) ON DELETE CASCADE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE students(</span><br><span class="line">stu_id INT(10) AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">stu_name VARCHAR(30) NOT NULL,</span><br><span class="line">stu_score FLOAT(5,2) DEFAULT 0.0,</span><br><span class="line">cla_id INT(10),</span><br><span class="line">CONSTRAINT FK_CLA_ID FOREIGN KEY(cla_id) REFERENCES class(cla_id) ON UPDATE CASCADE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE students(</span><br><span class="line">stu_id INT(10) AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">stu_name VARCHAR(30) NOT NULL,</span><br><span class="line">stu_score FLOAT(5,2) DEFAULT 0.0,</span><br><span class="line">cla_id INT(10),</span><br><span class="line">CONSTRAINT FK_CLA_ID FOREIGN KEY(cla_id) REFERENCES class(cla_id) ON DELETE SET NULL</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">注：插入数据时，先插入主表中的数据，再插入从表中的数据。</span><br><span class="line"></span><br><span class="line">删除数据时，先删除从表中的数据，再删除主表中的数据。</span><br></pre></td></tr></table></figure><h4 id="CHECK-检查约束"><a href="#CHECK-检查约束" class="headerlink" title="CHECK(检查约束)"></a>CHECK(检查约束)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE class(</span><br><span class="line">cla_id INT(6) AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">cla_name VARCHAR(30) NOT NULL UNIQUE,</span><br><span class="line">CHECK(cla_id&gt;0)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">注：mysql不支持检查约束，但是写上检查约束不会报错</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="AUTO-INCREMENT-自增长"><a href="#AUTO-INCREMENT-自增长" class="headerlink" title="AUTO_INCREMENT(自增长)"></a>AUTO_INCREMENT(自增长)</h4><h5 id="添加自增长"><a href="#添加自增长" class="headerlink" title="添加自增长"></a>添加自增长</h5><ul><li><p>在创建表的时候添加</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t_user(user_id INT(10) AUTO_INCREMENT PRIMARY KEY);</span><br></pre></td></tr></table></figure></li><li><p>通过ALTER语句</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE t_user MODIFY user_id INT(10) AUTO_INCREMENT;</span><br><span class="line"></span><br><span class="line">ALTER TABLE t_user CHANGE user_id user_id INT(10) AUTO_INCREMENT;</span><br></pre></td></tr></table></figure></li></ul><h5 id="删除自增长"><a href="#删除自增长" class="headerlink" title="删除自增长"></a>删除自增长</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE t_user MODIFY user_id INT(10);</span><br><span class="line"></span><br><span class="line">ALTER TABLE t_user CHANGE user_id user_id INT(10);</span><br><span class="line"></span><br><span class="line">注：There can be only one auto column and it must be defined as a key.</span><br><span class="line"></span><br><span class="line">一张表只能有一个自增长列，并且该列必须定义了约束(可以是主键约束,也可以是唯一约束,也可以是外键约束,但是不可以是非空和检查约束)</span><br><span class="line"></span><br><span class="line">不过自增长一般配合主键使用，并且只能在数字类型中使用</span><br></pre></td></tr></table></figure><h4 id="ZEROFILL-零填充"><a href="#ZEROFILL-零填充" class="headerlink" title="ZEROFILL(零填充)"></a>ZEROFILL(零填充)</h4><h5 id="添加零填充"><a href="#添加零填充" class="headerlink" title="添加零填充"></a>添加零填充</h5><ul><li><p>在创建表的时候添加</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t_user(user_id INT(10) ZEROFILL);</span><br></pre></td></tr></table></figure></li><li><p>通过ALTER语句</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE t_user MODIFY user_id INT(10) ZEROFILL;</span><br><span class="line"></span><br><span class="line">ALTER TABLE t_user CHANGE user_id user_id INT(10) ZEROFILL;</span><br></pre></td></tr></table></figure></li></ul><h5 id="删除零填充"><a href="#删除零填充" class="headerlink" title="删除零填充"></a>删除零填充</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE t_user MODIFY user_id INT(10);</span><br><span class="line"></span><br><span class="line">ALTER TABLE t_user CHANGE user_id user_id INT(10);</span><br><span class="line"></span><br><span class="line">注：零填充会将未将有效位以外的位用零来显示,比如某字段数据类型为INT(5),而插入的值为2,那么零填充会显示00002</span><br><span class="line"></span><br><span class="line">但是，这个效果在Navicat for MySQL中显示不出来,只有在DOS窗口下才能显示</span><br></pre></td></tr></table></figure><h4 id="DEFAULT-默认"><a href="#DEFAULT-默认" class="headerlink" title="DEFAULT(默认)"></a>DEFAULT(默认)</h4><h5 id="添加默认约束"><a href="#添加默认约束" class="headerlink" title="添加默认约束"></a>添加默认约束</h5><ul><li><p>在创建表的时候添加</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t_user(user_id INT(10) DEFAULT  3);</span><br></pre></td></tr></table></figure></li><li><p>通过ALTER语句</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE t_user MODIFY user_id INT(10) DEFAULT  2;</span><br><span class="line"></span><br><span class="line">ALTER TABLE t_user CHANGE user_id user_id INT(10) DEFAULT  2;</span><br></pre></td></tr></table></figure></li></ul><h5 id="删除默认约束"><a href="#删除默认约束" class="headerlink" title="删除默认约束"></a>删除默认约束</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE t_user MODIFY user_id INT(10);</span><br><span class="line"></span><br><span class="line">ALTER TABLE t_user CHANGE user_id user_id INT(10);</span><br></pre></td></tr></table></figure><h4 id="UNSIGNED-无符号位"><a href="#UNSIGNED-无符号位" class="headerlink" title="UNSIGNED(无符号位)"></a>UNSIGNED(无符号位)</h4><h5 id="添加无符号"><a href="#添加无符号" class="headerlink" title="添加无符号"></a>添加无符号</h5><ul><li><p>在创建表的时候添加</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t_user(user_id INT(10) UNSIGNED);</span><br></pre></td></tr></table></figure></li><li><p>通过ALTER语句</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE t_user MODIFY user_id INT(10) UNSIGNED;</span><br><span class="line"></span><br><span class="line">ALTER TABLE t_user CHANGE user_id user_id INT(10) UNSIGNED;</span><br></pre></td></tr></table></figure></li></ul><h5 id="删除无符号"><a href="#删除无符号" class="headerlink" title="删除无符号"></a>删除无符号</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE t_user MODIFY user_id INT(10);</span><br><span class="line">ALTER TABLE t_user CHANGE user_id user_id INT(10);</span><br><span class="line"></span><br><span class="line">注：无符号作用于数值类型</span><br><span class="line"></span><br><span class="line">#从查询information_schema中查询指定表中的约束</span><br><span class="line"></span><br><span class="line">USE INFORMATION_SCHEMA;</span><br><span class="line">SELECT CONSTRAINT_NAME FROM TABLE_CONSTRAINTS WHERE TABLE_NAME&#x3D;&#39;student&#39;;</span><br></pre></td></tr></table></figure><h3 id="数据库事务"><a href="#数据库事务" class="headerlink" title="数据库事务"></a>数据库事务</h3><h4 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h4><blockquote><p>通过一组逻辑操作单元（一组DML——sql语句），将数据从一种状态切换到另外一种状态</p></blockquote><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>（ACID）</p><ul><li>原子性：要么都执行，要么都回滚</li><li>一致性：保证数据的状态操作前和操作后保持一致</li><li>隔离性：多个事务同时操作相同数据库的同一个数据时，一个事务的执行不受另外一个事务的干扰</li><li>持久性：一个事务一旦提交，则数据将持久化到本地，除非其他事务对其进行修改</li></ul><p>相关步骤：</p><ol><li>开启事务</li><li>编写事务的一组逻辑操作单元（多条sql语句）</li><li>提交事务或回滚事务</li></ol><h4 id="事务的分类"><a href="#事务的分类" class="headerlink" title="事务的分类"></a>事务的分类</h4><ul><li><p>隐式事务，没有明显的开启和结束事务的标志</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert、update、delete语句本身就是一个事务</span><br></pre></td></tr></table></figure></li><li><p>显式事务，具有明显的开启和结束事务的标志</p><ol><li><p>开启事务</p><pre><code>取消自动提交事务的功能</code></pre></li><li><p>编写事务的一组逻辑操作单元（多条sql语句）</p><pre><code>insertupdatedelete</code></pre></li><li><p>提交事务或回滚事务</p></li></ol></li></ul><h4 id="使用到的关键字"><a href="#使用到的关键字" class="headerlink" title="使用到的关键字"></a>使用到的关键字</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">set autocommit&#x3D;0;</span><br><span class="line">start transaction;</span><br><span class="line">commit;</span><br><span class="line">rollback;</span><br><span class="line"></span><br><span class="line">savepoint  断点</span><br><span class="line">commit to 断点</span><br><span class="line">rollback to 断点</span><br></pre></td></tr></table></figure><h4 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别:"></a>事务的隔离级别:</h4><p>事务并发问题如何发生？</p><ul><li>当多个事务同时操作同一个数据库的相同数据时</li></ul><p>事务的并发问题有哪些？</p><ul><li>脏读：一个事务读取到了另外一个事务未提交的数据</li><li>不可重复读：同一个事务中，多次读取到的数据不一致</li><li>幻读：一个事务读取数据时，另外一个事务进行更新，导致第一个事务读取到了没有更新的数据</li></ul><p>如何避免事务的并发问题？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">通过设置事务的隔离级别</span><br><span class="line">1、READ UNCOMMITTED</span><br><span class="line">2、READ COMMITTED 可以避免脏读</span><br><span class="line">3、REPEATABLE READ 可以避免脏读、不可重复读和一部分幻读</span><br><span class="line">4、SERIALIZABLE可以避免脏读、不可重复读和幻读</span><br></pre></td></tr></table></figure><p>设置隔离级别：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set session|global  transaction isolation level 隔离级别名;</span><br></pre></td></tr></table></figure><p>查看隔离级别：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @@tx_isolation;</span><br></pre></td></tr></table></figure><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><blockquote><p> 含义：理解成一张虚拟的表</p></blockquote><p>视图和表的区别：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用方式占用物理空间</span><br><span class="line"></span><br><span class="line">视图完全相同不占用，仅仅保存的是sql逻辑</span><br><span class="line"></span><br><span class="line">表完全相同占用</span><br></pre></td></tr></table></figure><p>视图的好处：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、sql语句提高重用性，效率高</span><br><span class="line">2、和表实现了分离，提高了安全性</span><br></pre></td></tr></table></figure><h4 id="视图的创建"><a href="#视图的创建" class="headerlink" title="视图的创建"></a>视图的创建</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">CREATE VIEW  视图名</span><br><span class="line">AS</span><br><span class="line">查询语句;</span><br></pre></td></tr></table></figure><h4 id="视图的增删改查"><a href="#视图的增删改查" class="headerlink" title="视图的增删改查"></a>视图的增删改查</h4><ol><li><p>查看视图的数据 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM my_v4;</span><br><span class="line">SELECT * FROM my_v1 WHERE last_name&#x3D;&#39;Partners&#39;;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>插入视图的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO my_v4(last_name,department_id) VALUES(&#39;虚竹&#39;,90);</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>修改视图的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE my_v4 SET last_name &#x3D;&#39;梦姑&#39; WHERE last_name&#x3D;&#39;虚竹&#39;;</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>删除视图的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM my_v4;</span><br></pre></td></tr></table></figure></li></ol><h4 id="某些视图不能更新"><a href="#某些视图不能更新" class="headerlink" title="某些视图不能更新"></a>某些视图不能更新</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">包含以下关键字的sql语句：分组函数、distinct、group  by、having、union或者union all</span><br><span class="line">常量视图</span><br><span class="line">Select中包含子查询</span><br><span class="line">join</span><br><span class="line">from一个不能更新的视图</span><br><span class="line">where子句的子查询引用了from子句中的表</span><br></pre></td></tr></table></figure><h4 id="视图逻辑的更新"><a href="#视图逻辑的更新" class="headerlink" title="视图逻辑的更新"></a>视图逻辑的更新</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#方式一：</span><br><span class="line">CREATE OR REPLACE VIEW test_v7</span><br><span class="line">AS</span><br><span class="line">SELECT last_name FROM employees</span><br><span class="line">WHERE employee_id&gt;100;</span><br><span class="line"></span><br><span class="line">#方式二:</span><br><span class="line">ALTER VIEW test_v7</span><br><span class="line">AS</span><br><span class="line">SELECT employee_id FROM employees;</span><br><span class="line"></span><br><span class="line">SELECT * FROM test_v7;</span><br></pre></td></tr></table></figure><h4 id="视图的删除"><a href="#视图的删除" class="headerlink" title="视图的删除"></a>视图的删除</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP VIEW test_v1,test_v2,test_v3;</span><br></pre></td></tr></table></figure><h4 id="视图结构的查看"><a href="#视图结构的查看" class="headerlink" title="视图结构的查看"></a>视图结构的查看</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DESC test_v7;</span><br><span class="line">SHOW CREATE VIEW test_v7;</span><br></pre></td></tr></table></figure><h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><p>含义：一组经过预先编译的sql语句的集合<br>好处：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、提高了sql语句的重用性，减少了开发程序员的压力</span><br><span class="line">2、提高了效率</span><br><span class="line">3、减少了传输次数</span><br></pre></td></tr></table></figure><p>分类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1、无返回无参</span><br><span class="line">2、仅仅带in类型，无返回有参</span><br><span class="line">3、仅仅带out类型，有返回无参</span><br><span class="line">4、既带in又带out，有返回有参</span><br><span class="line">5、带inout，有返回有参</span><br><span class="line">注意：in、out、inout都可以在一个存储过程中带多个</span><br></pre></td></tr></table></figure><h4 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h4><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create procedure 存储过程名(in|out|inout 参数名  参数类型,...)</span><br><span class="line">begin</span><br><span class="line">存储过程体</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>类似于方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回类型 方法名(参数类型 参数名,...)&#123;</span><br><span class="line"></span><br><span class="line">方法体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1、需要设置新的结束标记</span><br><span class="line">delimiter 新的结束标记</span><br><span class="line">示例：</span><br><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE 存储过程名(IN|OUT|INOUT 参数名  参数类型,...)</span><br><span class="line">BEGIN</span><br><span class="line">sql语句1;</span><br><span class="line">sql语句2;</span><br><span class="line"></span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">2、存储过程体中可以有多条sql语句，如果仅仅一条sql语句，则可以省略begin end</span><br><span class="line"></span><br><span class="line">3、参数前面的符号的意思</span><br><span class="line">in:该参数只能作为输入 （该参数不能做返回值）</span><br><span class="line">out：该参数只能作为输出（该参数只能做返回值）</span><br><span class="line">inout：既能做输入又能做输出</span><br></pre></td></tr></table></figure><h4 id="调用存储过程"><a href="#调用存储过程" class="headerlink" title="调用存储过程"></a>调用存储过程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call 存储过程名(实参列表)</span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="创建函数"><a href="#创建函数" class="headerlink" title="创建函数"></a>创建函数</h4><p>学过的函数：LENGTH、SUBSTR、CONCAT等<br>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION 函数名(参数名 参数类型,...) RETURNS 返回类型</span><br><span class="line">BEGIN</span><br><span class="line">函数体</span><br><span class="line"></span><br><span class="line">END</span><br></pre></td></tr></table></figure><h4 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 函数名（实参列表）</span><br></pre></td></tr></table></figure><h4 id="函数和存储过程的区别"><a href="#函数和存储过程的区别" class="headerlink" title="函数和存储过程的区别"></a>函数和存储过程的区别</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">关键字调用语法返回值应用场景</span><br><span class="line">函数FUNCTIONSELECT 函数()只能是一个一般用于查询结果为一个值并返回时，当有返回值而且仅仅一个</span><br><span class="line">存储过程PROCEDURECALL 存储过程()可以有0个或多个一般用于更新</span><br></pre></td></tr></table></figure><h3 id="流程控制结构"><a href="#流程控制结构" class="headerlink" title="流程控制结构"></a>流程控制结构</h3><h4 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h4><p>一、全局变量</p><p>作用域：针对于所有会话（连接）有效，但不能跨重启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">查看所有全局变量</span><br><span class="line">SHOW GLOBAL VARIABLES;</span><br><span class="line">查看满足条件的部分系统变量</span><br><span class="line">SHOW GLOBAL VARIABLES LIKE &#39;%char%&#39;;</span><br><span class="line">查看指定的系统变量的值</span><br><span class="line">SELECT @@global.autocommit;</span><br><span class="line">为某个系统变量赋值</span><br><span class="line">SET @@global.autocommit&#x3D;0;</span><br><span class="line">SET GLOBAL autocommit&#x3D;0;</span><br></pre></td></tr></table></figure><p>二、会话变量</p><p>作用域：针对于当前会话（连接）有效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">查看所有会话变量</span><br><span class="line">SHOW SESSION VARIABLES;</span><br><span class="line">查看满足条件的部分会话变量</span><br><span class="line">SHOW SESSION VARIABLES LIKE &#39;%char%&#39;;</span><br><span class="line">查看指定的会话变量的值</span><br><span class="line">SELECT @@autocommit;</span><br><span class="line">SELECT @@session.tx_isolation;</span><br><span class="line">为某个会话变量赋值</span><br><span class="line">SET @@session.tx_isolation&#x3D;&#39;read-uncommitted&#39;;</span><br><span class="line">SET SESSION tx_isolation&#x3D;&#39;read-committed&#39;;</span><br></pre></td></tr></table></figure><h4 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h4><p>一、用户变量</p><p>声明并初始化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SET @变量名&#x3D;值;</span><br><span class="line">SET @变量名:&#x3D;值;</span><br><span class="line">SELECT @变量名:&#x3D;值;</span><br></pre></td></tr></table></figure><p>赋值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">方式一：一般用于赋简单的值</span><br><span class="line">SET 变量名&#x3D;值;</span><br><span class="line">SET 变量名:&#x3D;值;</span><br><span class="line">SELECT 变量名:&#x3D;值;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">方式二：一般用于赋表 中的字段值</span><br><span class="line">SELECT 字段名或表达式 INTO 变量</span><br><span class="line">FROM 表;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @变量名;</span><br></pre></td></tr></table></figure><p>二、局部变量</p><p>声明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">declare 变量名 类型 【default 值】;</span><br></pre></td></tr></table></figure><p>赋值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">方式一：一般用于赋简单的值</span><br><span class="line">SET 变量名&#x3D;值;</span><br><span class="line">SET 变量名:&#x3D;值;</span><br><span class="line">SELECT 变量名:&#x3D;值;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">方式二：一般用于赋表 中的字段值</span><br><span class="line">SELECT 字段名或表达式 INTO 变量</span><br><span class="line">FROM 表;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 变量名</span><br></pre></td></tr></table></figure><p>二者的区别：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">作用域定义位置语法</span><br><span class="line">用户变量当前会话会话的任何地方加@符号，不用指定类型</span><br><span class="line">局部变量定义它的BEGIN END中 BEGIN END的第一句话一般不用加@,需要指定类型</span><br></pre></td></tr></table></figure><h4 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h4><p>一、if函数<br>    语法：if(条件，值1，值2)<br>    特点：可以用在任何位置</p><p>二、case语句</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">情况一：类似于switch</span><br><span class="line">case 表达式</span><br><span class="line">when 值1 then 结果1或语句1(如果是语句，需要加分号) </span><br><span class="line">when 值2 then 结果2或语句2(如果是语句，需要加分号)</span><br><span class="line">...</span><br><span class="line">else 结果n或语句n(如果是语句，需要加分号)</span><br><span class="line">end 【case】（如果是放在begin end中需要加上case，如果放在select后面不需要）</span><br><span class="line"></span><br><span class="line">情况二：类似于多重if</span><br><span class="line">case </span><br><span class="line">when 条件1 then 结果1或语句1(如果是语句，需要加分号) </span><br><span class="line">when 条件2 then 结果2或语句2(如果是语句，需要加分号)</span><br><span class="line">...</span><br><span class="line">else 结果n或语句n(如果是语句，需要加分号)</span><br><span class="line">end 【case】（如果是放在begin end中需要加上case，如果放在select后面不需要）</span><br></pre></td></tr></table></figure><p>特点：<br>    可以用在任何位置</p><p>三、if elseif语句</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if 情况1 then 语句1;</span><br><span class="line">elseif 情况2 then 语句2;</span><br><span class="line">...</span><br><span class="line">else 语句n;</span><br><span class="line">end if;</span><br></pre></td></tr></table></figure><p>特点：<br>    只能用在begin end中！！！！！！！！！！！！！！！</p><p>三者比较：<br>            应用场合<br>    if函数        简单双分支<br>    case结构    等值判断 的多分支<br>    if结构        区间判断 的多分支</p><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">【标签：】WHILE 循环条件  DO</span><br><span class="line">循环体</span><br><span class="line">END WHILE 【标签】;</span><br></pre></td></tr></table></figure><p>特点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">只能放在BEGIN END里面</span><br><span class="line"></span><br><span class="line">如果要搭配leave跳转语句，需要使用标签，否则可以不用标签</span><br><span class="line"></span><br><span class="line">leave类似于java中的break语句，跳出所在循环！！！</span><br></pre></td></tr></table></figure><h3 id="数据库引擎"><a href="#数据库引擎" class="headerlink" title="数据库引擎"></a>数据库引擎</h3><h4 id="查看数据库支持的引擎"><a href="#查看数据库支持的引擎" class="headerlink" title="查看数据库支持的引擎"></a>查看数据库支持的引擎</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show engines;</span><br></pre></td></tr></table></figure><h4 id="查看数据库当前默认引擎"><a href="#查看数据库当前默认引擎" class="headerlink" title="查看数据库当前默认引擎"></a>查看数据库当前默认引擎</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#39;%storage_engine%&#39;;</span><br></pre></td></tr></table></figure><h4 id="查看数据表使用的引擎"><a href="#查看数据表使用的引擎" class="headerlink" title="查看数据表使用的引擎"></a>查看数据表使用的引擎</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create table table_name;</span><br></pre></td></tr></table></figure><h4 id="修改表的存储引擎"><a href="#修改表的存储引擎" class="headerlink" title="修改表的存储引擎"></a>修改表的存储引擎</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table table_name engine&#x3D;engine_name;</span><br></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>Navicat for mysql连接远程数据库(1130错误解决方法)</p><ul><li><p>进入mysql控制台：</p></li><li><p>执行命令1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;您的数据库密码&#39; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure></li><li><p>执行命令2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li></ul><h2 id="后续补充更多知识。。。"><a href="#后续补充更多知识。。。" class="headerlink" title="后续补充更多知识。。。"></a>后续补充更多知识。。。</h2>]]></content>
      
      
      <categories>
          
          <category> 数据库学习 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决前端跨域问题</title>
      <link href="/posts/88130ada/"/>
      <url>/posts/88130ada/</url>
      
        <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>本来想写一个请求B站API用户粉丝数的函数、结果遇到了跨域的问题</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200530210036.png"></p><p>然而通过设置了<code>dataType: &quot;jsonp&quot;</code>又遇到了这个问题</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200530210253.png"></p><p>同源策略，它是由Netscape提出的一个著名的安全策略。现在所有支持JavaScript 的浏览器都会使用这个策略。</p><p>所谓同源是指，域名，协议，端口相同。当一个浏览器的两个tab页中分别打开来 百度和谷歌的页面。当浏览器的百度tab页执行一个脚本的时候会检查这个脚本是属于哪个页面的，即检查是否同源，只有和百度同源的脚本才会被执行。</p><p>如果非同源，那么在请求数据时，浏览器会在控制台中报一个异常，提示拒绝访问。通常这个异常以上面的形式存在着。</p><p>折腾了一天的跨域问题、终于得到了答案。。。</p><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><h3 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h3><div class="note info"><p>跨域，是指浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对JavaScript实施的安全限制。</p><p>同源策略限制了一下行为：</p><ul><li>Cookie、LocalStorage 和 IndexDB 无法读取</li><li>DOM 和 JS 对象无法获取</li><li>Ajax请求发送不出去</li></ul></div><p>当一个请求url的协议、域名、端口三者之间任意一个与当前页面url不同即为跨域</p><table><thead><tr><th>当前页面url</th><th>被请求页面url</th><th>是否跨域</th><th>原因</th></tr></thead><tbody><tr><td><code>http://www.test.com/</code></td><td><code>http://www.test.com/index.html</code></td><td>否</td><td>同源（协议、域名、端口号相同）</td></tr><tr><td><code>http://www.test.com/</code></td><td><code>https://www.test.com/index.html</code></td><td>跨域</td><td>协议不同（http/https）</td></tr><tr><td><code>http://www.test.com/</code></td><td><code>http://www.baidu.com/</code></td><td>跨域</td><td>主域名不同（test/baidu）</td></tr><tr><td><code>http://www.test.com/</code></td><td><code>http://blog.test.com/</code></td><td>跨域</td><td>子域名不同（www/blog）</td></tr><tr><td><code>http://www.test.com:8080/</code></td><td><code>http://www.test.com:7001/</code></td><td>跨域</td><td>端口号不同（8080/7001）</td></tr></tbody></table><h2 id="Ajax接口数据类型"><a href="#Ajax接口数据类型" class="headerlink" title="Ajax接口数据类型"></a>Ajax接口数据类型</h2><h3 id="json格式"><a href="#json格式" class="headerlink" title="json格式"></a>json格式</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;message&quot;</span>:<span class="string">&quot;获取成功&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;state&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;result&quot;</span>:&#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;zykj&quot;</span>,<span class="attr">&quot;id&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;description&quot;</span>:<span class="string">&quot;zykjofficial&quot;</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="jsonp格式"><a href="#jsonp格式" class="headerlink" title="jsonp格式"></a>jsonp格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">callback(&#123;</span><br><span class="line">    &quot;message&quot;:&quot;获取成功&quot;,</span><br><span class="line">    &quot;state&quot;:&quot;1&quot;,</span><br><span class="line">    &quot;result&quot;:&#123;&quot;name&quot;:&quot;zykj&quot;,&quot;id&quot;:1,&quot;description&quot;:&quot;zykjofficial&quot;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>我们可以看到，在url中callback传到后台的参数是什么callback就是什么，jsonp比json外面有多了一层，callback()。这样就知道怎么处理它了。于是修改后台代码。</p><p>jsonp(JSON with Padding) 是 json 的一种”使用模式”，可以让网页从别的域名（网站）那获取资料，即跨域读取数据。<code>注意：jsonp只支持get请求</code>。</p><h3 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">     $.ajax(&#123;</span><br><span class="line">         url: <span class="string">&quot;https://api.bilibili.com/x/space/acc/info?mid=241230332&quot;</span>,</span><br><span class="line">         type: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">         dataType: <span class="string">&quot;jsonp&quot;</span>,</span><br><span class="line">         jsonpCallback:<span class="string">&quot;jsonp&quot;</span>,</span><br><span class="line">         jsonp:<span class="string">&quot;json&quot;</span>,</span><br><span class="line">         success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">             <span class="built_in">console</span>.log(data);</span><br><span class="line">         &#125;,</span><br><span class="line">         error: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">             <span class="built_in">console</span>.log(<span class="string">&quot;请求错误&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h3 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/userinfo/&#123;uid&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUserInfo</span><span class="params">(<span class="meta">@PathVariable</span> String uid)</span></span>&#123;</span><br><span class="line">        RestTemplate template = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">        Object forObject = template.getForObject(<span class="string">&quot;https://api.bilibili.com/x/space/acc/info?mid=&quot;</span>+uid, Object.class);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;jsonp(&quot;</span>+JSON.toJSONString(forObject)+<span class="string">&quot;)&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自己的理解就是后台请求B站API返回的数据转换成JSON数据、套入<code>jsonp()</code>并且返回给请求者、相当于自己把数据封装了一下。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200530211708.png"></p><p>这样就可以请求到了。</p><p>参考文章</p><ul><li><a href="https://www.jiangweishan.com/article/js8908093284092384.html">跨域问题(Cross-Origin Read Blocking (CORB) blocked cross-origin response)的解决方案</a></li><li><a href="https://blog.csdn.net/qq_38128179/article/details/84956552">什么是跨域？跨域解决方法</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web教程 </category>
          
          <category> 跨域 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 后端 </tag>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Butterfly主题魔改的样式查阅</title>
      <link href="/posts/e297feab/"/>
      <url>/posts/e297feab/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/zykjofficial/zykjresource@master/css/font-awesome-animation.min.css"><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><div class="note info"><p>本博客的DIY样式均来自大佬博客、并且在都放在<br>样式: <a href="https://cdn.jsdelivr.net/gh/zykjofficial/zykjresource@master/css/custom.css">https://cdn.jsdelivr.net/gh/zykjofficial/zykjresource@master/css/custom.css</a> </p><p>DIY教程: <a href="/posts/e55bad60/">卓越科技 - 的 Hexo 博客搭建与美化教程</a></p></div><div class="note danger"><p>请注意: 未标明 <code>Butterfly主题自带样式</code> 的是DIY样式</p></div><h2 id="标签外挂"><a href="#标签外挂" class="headerlink" title="标签外挂"></a>标签外挂</h2><h3 id="原本的标签"><a href="#原本的标签" class="headerlink" title="原本的标签"></a>原本的标签</h3><p><code>注意:这是Butterfly主题自带样式</code></p><div class="note default"><p>default 标签外挂</p></div><div class="note primary"><p>primary 标签外挂</p></div><div class="note success"><p>success 标签外挂</p></div><div class="note danger"><p>danger 标签外挂</p></div><div class="note info"><p>info 标签外挂</p></div><div class="note warning"><p>warning 标签外挂</p></div><h3 id="自定义标签"><a href="#自定义标签" class="headerlink" title="自定义标签"></a>自定义标签</h3><div class="note red"><p>red 标签外挂</p></div><div class="note quote"><p>quote 标签外挂</p></div><div class="note radiation"><p>radiation 标签外挂</p></div><div class="note bug"><p>bug 标签外挂</p></div><div class="note idea"><p>idea 标签外挂</p></div><div class="note link"><p>link 标签外挂</p></div><div class="note paperclip"><p>paperclip 标签外挂</p></div><div class="note todo"><p>todo 标签外挂</p></div><div class="note msg"><p>msg 标签外挂</p></div><div class="note guide"><p>guide 标签外挂</p></div><div class="note download"><p>download 标签外挂</p></div><div class="note up"><p>up 标签外挂</p></div><div class="note undo"><p>undo 标签外挂</p></div><h3 id="上标式标签"><a href="#上标式标签" class="headerlink" title="上标式标签"></a>上标式标签</h3><div class="tip">    <p>为简单的一句话提供的简便写法。</p></div><div class="tip success">    <p>为简单的一句话提供的简便写法。</p></div><div class="tip error">    <p>为简单的一句话提供的简便写法。</p></div><div class="tip warning">    <p>为简单的一句话提供的简便写法。</p></div><div class="tip wtgo">    <p>为简单的一句话提供的简便写法。</p></div><div class="tip ban">    <p>为简单的一句话提供的简便写法。</p></div><div class="tip home">    <p>为简单的一句话提供的简便写法。</p></div><div class="tip important">    <p>为简单的一句话提供的简便写法。</p></div><div class="tip ref">    <p>为简单的一句话提供的简便写法。</p></div><div class="tip ffa">    <p>为简单的一句话提供的简便写法。</p></div><div class="tip key">    <p>为简单的一句话提供的简便写法。</p></div><div class="tip socd">    <p>为简单的一句话提供的简便写法。</p></div><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><div class="tabs" id="tabs1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tabs1-1">语法格式</button></li><li class="tab"><button type="button" data-href="#tabs1-2">参数列表</button></li><li class="tab"><button type="button" data-href="#tabs1-3">示例代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tabs1-1"><p>原本、自定义标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note 样式参数 %&#125;</span><br><span class="line">文本内容</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>上标式标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;tip 可加参数&quot;&gt;</span><br><span class="line">    &lt;p&gt;文本内容&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs1-2"><p>原本、自定义标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">info  蓝色叹号</span><br><span class="line">warning   黄色叹号</span><br><span class="line">done      绿色打钩</span><br><span class="line">success   绿色打钩</span><br><span class="line">error     红色禁止</span><br><span class="line">danger    红色打叉</span><br></pre></td></tr></table></figure><p>上标式标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">不填默认为 info</span><br><span class="line">warning   黄色叹号</span><br><span class="line">success   绿色打钩</span><br><span class="line">error     红色禁止</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs1-3"><p>原本、自定义标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note default %&#125;</span><br><span class="line">default 标签外挂</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary %&#125;</span><br><span class="line">primary 标签外挂</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success %&#125;</span><br><span class="line">success 标签外挂</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger %&#125;</span><br><span class="line">danger 标签外挂</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info %&#125;</span><br><span class="line">info 标签外挂</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning %&#125;</span><br><span class="line">warning 标签外挂</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>上标式标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;tip&quot;&gt;</span><br><span class="line">    &lt;p&gt;为简单的一句话提供的简便写法。&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;tip success&quot;&gt;</span><br><span class="line">    &lt;p&gt;为简单的一句话提供的简便写法。&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;tip error&quot;&gt;</span><br><span class="line">    &lt;p&gt;为简单的一句话提供的简便写法。&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;tip warning&quot;&gt;</span><br><span class="line">    &lt;p&gt;为简单的一句话提供的简便写法。&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;tip wtgo&quot;&gt;</span><br><span class="line">    &lt;p&gt;为简单的一句话提供的简便写法。&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;tip ban&quot;&gt;</span><br><span class="line">    &lt;p&gt;为简单的一句话提供的简便写法。&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;tip home&quot;&gt;</span><br><span class="line">    &lt;p&gt;为简单的一句话提供的简便写法。&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;tip important&quot;&gt;</span><br><span class="line">    &lt;p&gt;为简单的一句话提供的简便写法。&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;tip ref&quot;&gt;</span><br><span class="line">    &lt;p&gt;为简单的一句话提供的简便写法。&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;tip ffa&quot;&gt;</span><br><span class="line">    &lt;p&gt;为简单的一句话提供的简便写法。&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;tip key&quot;&gt;</span><br><span class="line">    &lt;p&gt;为简单的一句话提供的简便写法。&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;tip socd&quot;&gt;</span><br><span class="line">    &lt;p&gt;为简单的一句话提供的简便写法。&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="文本段落"><a href="#文本段落" class="headerlink" title="文本段落"></a>文本段落</h2><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</p><p>文档「开始」页面中的标题部分就是超大文字。</p><p class='p center logo large'>Volantis</p><p class='p center small'>A Wonderful Theme for Hexo</p><h3 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h3><div class="tabs" id="tabs2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tabs2-1">语法格式</button></li><li class="tab"><button type="button" data-href="#tabs2-2">参数列表</button></li><li class="tab"><button type="button" data-href="#tabs2-3">示例代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tabs2-1"><p>行内文本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% span 样式参数, 文本内容 %&#125;</span><br></pre></td></tr></table></figure><p>独立段落</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% p 样式参数, 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs2-2"><p>样式参数位置可以写颜色、大小和对齐方向，多个样式参数用空格隔开。</p><p>字体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logo, code</span><br></pre></td></tr></table></figure><p>颜色</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">red, yellow, green, cyan, blue, gray</span><br></pre></td></tr></table></figure><p>大小</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">small, h4, h3, h2, h1, large, huge, ultra</span><br></pre></td></tr></table></figure><p>对齐方向</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">left, center, right</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs2-3"><p>彩色文字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br></pre></td></tr></table></figure><p>超大文字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">文档「开始」页面中的标题部分就是超大文字。</span><br><span class="line"></span><br><span class="line">&#123;% p center logo large, Volantis %&#125;</span><br><span class="line">&#123;% p center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h2><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>黄色 + 默认选中</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>青色 + 默认选中</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>蓝色 + 默认选中</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div><div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div><div class='checkbox'><input type="radio" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="radio" />            <p>支持自定义颜色</p>            </div><div class='checkbox green'><input type="radio" />            <p>绿色</p>            </div><div class='checkbox yellow'><input type="radio" />            <p>黄色</p>            </div><div class='checkbox cyan'><input type="radio" />            <p>青色</p>            </div><div class='checkbox blue'><input type="radio" />            <p>蓝色</p>            </div><h3 id="使用方法-2"><a href="#使用方法-2" class="headerlink" title="使用方法"></a>使用方法</h3><div class="tabs" id="tabs3"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tabs3-1">语法格式</button></li><li class="tab"><button type="button" data-href="#tabs3-2">参数列表</button></li><li class="tab"><button type="button" data-href="#tabs3-3">示例代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tabs3-1"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs3-2"><p>颜色</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">red, yellow, green, cyan, blue</span><br></pre></td></tr></table></figure><p>样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plus, minus, times</span><br></pre></td></tr></table></figure><p>选中状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">checked</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs3-3"><p>Checkbox</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 纯文本测试 %&#125;</span><br><span class="line">&#123;% checkbox checked, 支持简单的 [markdown](https:&#x2F;&#x2F;guides.github.com&#x2F;features&#x2F;mastering-markdown&#x2F;) 语法 %&#125;</span><br><span class="line">&#123;% checkbox red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% checkbox green checked, 绿色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox yellow checked, 黄色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox cyan checked, 青色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox blue checked, 蓝色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox plus green checked, 增加 %&#125;</span><br><span class="line">&#123;% checkbox minus yellow checked, 减少 %&#125;</span><br><span class="line">&#123;% checkbox times red checked, 叉 %&#125;</span><br></pre></td></tr></table></figure><p>Radio</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 纯文本测试 %&#125;</span><br><span class="line">&#123;% radio checked, 支持简单的 [markdown](https:&#x2F;&#x2F;guides.github.com&#x2F;features&#x2F;mastering-markdown&#x2F;) 语法 %&#125;</span><br><span class="line">&#123;% radio red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% radio green, 绿色 %&#125;</span><br><span class="line">&#123;% radio yellow, 黄色 %&#125;</span><br><span class="line">&#123;% radio cyan, 青色 %&#125;</span><br><span class="line">&#123;% radio blue, 蓝色 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="富文本按钮"><a href="#富文本按钮" class="headerlink" title="富文本按钮"></a>富文本按钮</h2><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><div class="btns circle grid5">            <a href='https://xaoxuu.com' title='xaoxuu'><img src= "/img/loading.gif" data-lazy-src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a href='https://xaoxuu.com' title='xaoxuu'><img src= "/img/loading.gif" data-lazy-src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a href='https://xaoxuu.com' title='xaoxuu'><img src= "/img/loading.gif" data-lazy-src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a href='https://xaoxuu.com' title='xaoxuu'><img src= "/img/loading.gif" data-lazy-src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a href='https://xaoxuu.com' title='xaoxuu'><img src= "/img/loading.gif" data-lazy-src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>          </div><div class="btns rounded grid5">            <a href='/' title='下载源码'><i class='fas fa-download'></i>下载源码</a><a href='/' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>          </div><div class="btns circle center grid5">            <a href='https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p red'>专业版</p>  <img src= "/img/loading.gif" data-lazy-src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_pro.png'></a><a href='https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p green'>免费版</p>  <img src= "/img/loading.gif" data-lazy-src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_lite.png'></a>          </div><h3 id="使用方法-3"><a href="#使用方法-3" class="headerlink" title="使用方法"></a>使用方法</h3><div class="tabs" id="tabs4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tabs4-1">语法格式</button></li><li class="tab"><button type="button" data-href="#tabs4-2">参数列表</button></li><li class="tab"><button type="button" data-href="#tabs4-3">示例代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tabs4-1"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns 样式参数 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs4-2"><p>样式参数位置可以写图片样式、布局方式，多个样式参数用空格隔开。</p><p>圆角样式</p><p>默认为方形</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rounded, circle</span><br></pre></td></tr></table></figure><p>布局方式</p><p>默认为自动宽度，适合视野内只有一两个的情况。</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>wide</td><td>宽一点的按钮</td></tr><tr><td>fill</td><td>填充布局，自动铺满至少一行，多了会换行。</td></tr><tr><td>center</td><td>居中，按钮之间是固定间距。</td></tr><tr><td>around</td><td>居中分散</td></tr><tr><td>grid2</td><td>等宽最多2列，屏幕变窄会适当减少列数。</td></tr><tr><td>grid3</td><td>等宽最多3列，屏幕变窄会适当减少列数。</td></tr><tr><td>grid4</td><td>等宽最多4列，屏幕变窄会适当减少列数。</td></tr><tr><td>grid5</td><td>等宽最多5列，屏幕变窄会适当减少列数。</td></tr></tbody></table><p>增加文字样式</p><p>可以在容器内增加 <code>&lt;b&gt;标题&lt;/b&gt;</code> 和 <code>&lt;p&gt;描述文字&lt;/p&gt;</code></p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs4-3"><p>如果需要显示类似「团队成员」之类的一组含有头像的链接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">example.md:</span><br><span class="line">&#123;% btns circle grid5 %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https:&#x2F;&#x2F;xaoxuu.com, https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;xaoxuu&#x2F;cdn-assets&#x2F;avatar&#x2F;avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https:&#x2F;&#x2F;xaoxuu.com, https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;xaoxuu&#x2F;cdn-assets&#x2F;avatar&#x2F;avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https:&#x2F;&#x2F;xaoxuu.com, https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;xaoxuu&#x2F;cdn-assets&#x2F;avatar&#x2F;avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https:&#x2F;&#x2F;xaoxuu.com, https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;xaoxuu&#x2F;cdn-assets&#x2F;avatar&#x2F;avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https:&#x2F;&#x2F;xaoxuu.com, https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;xaoxuu&#x2F;cdn-assets&#x2F;avatar&#x2F;avatar.png %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>或者含有图标的按钮：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">example.md:</span><br><span class="line">&#123;% btns rounded grid5 %&#125;</span><br><span class="line">&#123;% cell 下载源码, &#x2F;, fas fa-download %&#125;</span><br><span class="line">&#123;% cell 查看文档, &#x2F;, fas fa-book-open %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">example.md:</span><br><span class="line">&#123;% btns circle center grid5 %&#125;</span><br><span class="line">&lt;a href&#x3D;&#39;https:&#x2F;&#x2F;apps.apple.com&#x2F;cn&#x2F;app&#x2F;heart-mate-pro-hrm-utility&#x2F;id1463348922?ls&#x3D;1&#39;&gt;</span><br><span class="line">  &lt;i class&#x3D;&#39;fab fa-apple&#39;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">  &lt;b&gt;心率管家&lt;&#x2F;b&gt;</span><br><span class="line">  &#123;% p red, 专业版 %&#125;</span><br><span class="line">  &lt;img src&#x3D;&#39;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;xaoxuu&#x2F;cdn-assets&#x2F;qrcode&#x2F;heartmate_pro.png&#39;&gt;</span><br><span class="line">&lt;&#x2F;a&gt;</span><br><span class="line">&lt;a href&#x3D;&#39;https:&#x2F;&#x2F;apps.apple.com&#x2F;cn&#x2F;app&#x2F;heart-mate-lite-hrm-utility&#x2F;id1475747930?ls&#x3D;1&#39;&gt;</span><br><span class="line">  &lt;i class&#x3D;&#39;fab fa-apple&#39;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">  &lt;b&gt;心率管家&lt;&#x2F;b&gt;</span><br><span class="line">  &#123;% p green, 免费版 %&#125;</span><br><span class="line">  &lt;img src&#x3D;&#39;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;xaoxuu&#x2F;cdn-assets&#x2F;qrcode&#x2F;heartmate_lite.png&#39;&gt;</span><br><span class="line">&lt;&#x2F;a&gt;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>如果需要显示类似「团队成员」之类的一组含有头像的链接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">example.md:</span><br><span class="line">&#123;% btns circle grid5 %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https:&#x2F;&#x2F;xaoxuu.com, https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;xaoxuu&#x2F;cdn-assets&#x2F;avatar&#x2F;avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https:&#x2F;&#x2F;xaoxuu.com, https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;xaoxuu&#x2F;cdn-assets&#x2F;avatar&#x2F;avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https:&#x2F;&#x2F;xaoxuu.com, https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;xaoxuu&#x2F;cdn-assets&#x2F;avatar&#x2F;avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https:&#x2F;&#x2F;xaoxuu.com, https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;xaoxuu&#x2F;cdn-assets&#x2F;avatar&#x2F;avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https:&#x2F;&#x2F;xaoxuu.com, https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;xaoxuu&#x2F;cdn-assets&#x2F;avatar&#x2F;avatar.png %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>或者含有图标的按钮：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">example.md:</span><br><span class="line">&#123;% btns rounded grid5 %&#125;</span><br><span class="line">&#123;% cell 下载源码, &#x2F;, fas fa-download %&#125;</span><br><span class="line">&#123;% cell 查看文档, &#x2F;, fas fa-book-open %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><h3 id="Tab"><a href="#Tab" class="headerlink" title="Tab"></a>Tab</h3><p><code>注意:这是Butterfly主题自带样式</code></p><h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h4><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="tabs" id="test2"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test2-1">test2 1</button></li><li class="tab"><button type="button" data-href="#test2-2">test2 2</button></li><li class="tab active"><button type="button" data-href="#test2-3">test2 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test2-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test3-1">test3 1</button></li><li class="tab"><button type="button" data-href="#test3-2">test3 2</button></li><li class="tab"><button type="button" data-href="#test3-3">test3 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字为第一个Tab</strong></p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字</strong></p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><h4 id="使用方法-4"><a href="#使用方法-4" class="headerlink" title="使用方法"></a>使用方法</h4><div class="tabs" id="tabs5"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tabs5-1">语法格式</button></li><li class="tab"><button type="button" data-href="#tabs5-2">参数列表</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tabs5-1"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% tabs test2, 3 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% tabs test3, -1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line">**tab名字为第一个Tab**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line">**只有图标 没有Tab名字**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line">**名字+icon**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs5-2"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br><span class="line"></span><br><span class="line">Unique name   : Unique name of tabs block tag without comma.</span><br><span class="line">                Will be used in #id&#39;s as prefix for each tab with their index numbers.</span><br><span class="line">                If there are whitespaces in name, for generate #id all whitespaces will replaced by dashes.</span><br><span class="line">                Only for current url of post&#x2F;page must be unique!</span><br><span class="line">[index]       : Index number of active tab.</span><br><span class="line">                If not specified, first tab (1) will be selected.</span><br><span class="line">                If index is -1, no tab will be selected. It&#39;s will be something like spoiler.</span><br><span class="line">                Optional parameter.</span><br><span class="line">[Tab caption] : Caption of current tab.</span><br><span class="line">                If not caption specified, unique name with tab index suffix will be used as caption of tab.</span><br><span class="line">                If not caption specified, but specified icon, caption will empty.</span><br><span class="line">                Optional parameter.</span><br><span class="line">[@icon]       : FontAwesome icon name (full-name, look like &#39;fas fa-font&#39;)</span><br><span class="line">                Can be specified with or without space; e.g. &#39;Tab caption @icon&#39; similar to &#39;Tab caption@icon&#39;.</span><br><span class="line">                Optional parameter.</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="Folding"><a href="#Folding" class="headerlink" title="Folding"></a>Folding</h3><h4 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h4><details ><summary> <p>查看图片测试</p> </summary>              <div class='content'>              <p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg"></p>              </div>            </details><details cyan open><summary> <p>查看默认打开的折叠框</p> </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details green><summary> <p>查看代码测试</p> </summary>              <div class='content'>                            </div>            </details><details yellow><summary> <p>查看列表测试</p> </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details red><summary> <p>查看嵌套测试</p> </summary>              <div class='content'>              <details blue><summary> <p>查看嵌套测试2</p> </summary>              <div class='content'>              <details ><summary> <p>查看嵌套测试3</p> </summary>              <div class='content'>              <p>hahaha <span><img src= "/img/loading.gif" data-lazy-src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>              </div>            </details><h4 id="使用方法-5"><a href="#使用方法-5" class="headerlink" title="使用方法"></a>使用方法</h4><div class="tabs" id="tabs6"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tabs6-1">语法格式</button></li><li class="tab"><button type="button" data-href="#tabs6-2">参数列表</button></li><li class="tab"><button type="button" data-href="#tabs6-3">示例代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tabs6-1"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 参数（可选）, 标题 %&#125;</span><br><span class="line"></span><br><span class="line">![](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;xaoxuu&#x2F;cdn-wallpaper&#x2F;abstract&#x2F;41F215B9-261F-48B4-80B5-4E86E165259E.jpeg)</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs6-2"><p>参数位置可以填写颜色和状态，多个参数用空格隔开。</p><p>颜色</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blue, cyan, green, yellow, red</span><br></pre></td></tr></table></figure><p>状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">状态填写 open 代表默认打开。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs6-3"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 查看图片测试 %&#125;</span><br><span class="line"></span><br><span class="line">![](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;xaoxuu&#x2F;cdn-wallpaper&#x2F;abstract&#x2F;41F215B9-261F-48B4-80B5-4E86E165259E.jpeg)</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;</span><br><span class="line"></span><br><span class="line">这是一个默认打开的折叠框。</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class="line"></span><br><span class="line">- haha</span><br><span class="line">- hehe</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding red, 查看嵌套测试 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding blue, 查看嵌套测试2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding 查看嵌套测试3 %&#125;</span><br><span class="line"></span><br><span class="line">hahaha &lt;span&gt;&lt;img src&#x3D;&#39;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;xaoxuu&#x2F;cdn-assets&#x2F;emoji&#x2F;tieba&#x2F;%E6%BB%91%E7%A8%BD.png&#39; style&#x3D;&#39;height:24px&#39;&gt;&lt;&#x2F;span&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="Gallery"><a href="#Gallery" class="headerlink" title="Gallery"></a>Gallery</h2><h3 id="Gallery相册图库"><a href="#Gallery相册图库" class="headerlink" title="Gallery相册图库"></a>Gallery相册图库</h3><p><code>注意:这是Butterfly主题自带样式</code></p><h4 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h4><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img" src= "/img/loading.gif" data-lazy-src='https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/index.jpg'>  <figcaption>  <div class="gallery-group-name">动漫</div>  <p>我喜欢的动漫</p>  <a href='/Gallery/anime'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img" src= "/img/loading.gif" data-lazy-src='https://api.dongmanxingkong.com/suijitupian/acg/1080p/index.php'>  <figcaption>  <div class="gallery-group-name">风景</div>  <p>欣赏美丽的风景</p>  <a href='/Gallery/landscape'></a>  </figcaption>  </figure>  </div><h4 id="使用方法-6"><a href="#使用方法-6" class="headerlink" title="使用方法"></a>使用方法</h4><div class="tabs" id="tabs7"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tabs7-1">语法格式</button></li><li class="tab"><button type="button" data-href="#tabs7-2">参数列表</button></li><li class="tab"><button type="button" data-href="#tabs7-3">示例代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tabs7-1"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;gallery-group-main&quot;&gt;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs7-2"><p>name：图库名字<br>description：图库描述<br>link：连接到对应相册的地址<br>img-url：图库封面的地址</p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs7-3"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;gallery-group-main&quot;&gt;</span><br><span class="line">&#123;% galleryGroup &#39;动漫&#39; &#39;我喜欢的动漫&#39; &#39;&#x2F;Gallery&#x2F;anime&#39; https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;zykjofficial&#x2F;zykjimg&#x2F;img&#x2F;index.jpg %&#125;</span><br><span class="line">&#123;% galleryGroup &#39;风景&#39; &#39;欣赏美丽的风景&#39; &#39;&#x2F;Gallery&#x2F;landscape&#39; https:&#x2F;&#x2F;i.loli.net&#x2F;2019&#x2F;12&#x2F;25&#x2F;Fze9jchtnyJXMHN.jpg %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="Gallery-相册"><a href="#Gallery-相册" class="headerlink" title="Gallery 相册"></a>Gallery 相册</h3><p><code>注意:这是Butterfly主题自带样式</code></p><h4 id="示例-6"><a href="#示例-6" class="headerlink" title="示例"></a>示例</h4><div class="justified-gallery"><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg"><br><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg"></p>          </div><h4 id="使用方法-7"><a href="#使用方法-7" class="headerlink" title="使用方法"></a>使用方法</h4><div class="tabs" id="tabs7"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tabs7-1">语法格式</button></li><li class="tab"><button type="button" data-href="#tabs7-2">示例代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tabs7-1"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 图片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs7-2"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](https:&#x2F;&#x2F;i.loli.net&#x2F;2019&#x2F;12&#x2F;25&#x2F;Fze9jchtnyJXMHN.jpg)</span><br><span class="line">![](https:&#x2F;&#x2F;i.loli.net&#x2F;2019&#x2F;12&#x2F;25&#x2F;ryLVePaqkYm4TEK.jpg)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h2><p><code>注意:这是Butterfly主题自带样式</code></p><h3 id="示例-7"><a href="#示例-7" class="headerlink" title="示例"></a>示例</h3><p>This is my website, click the button <a class="btn-beautify button--animated " href="https://zykj.js.org"   title="卓越科技-"><span>卓越科技-</span></a><br>This is my website, click the button <a class="btn-beautify button--animated " href="https://zykj.js.org"   title="卓越科技-"><i class="far fa-hand-point-right fa-fw"></i><span>卓越科技-</span></a><br>This is my website, click the button <a class="btn-beautify button--animated outline" href="https://zykj.js.org"   title="卓越科技-"><span>卓越科技-</span></a><br>This is my website, click the button <a class="btn-beautify button--animated outline" href="https://zykj.js.org"   title="卓越科技-"><i class="far fa-hand-point-right fa-fw"></i><span>卓越科技-</span></a><br>This is my website, click the button <a class="btn-beautify button--animated larger" href="https://zykj.js.org"   title="卓越科技-"><i class="far fa-hand-point-right fa-fw"></i><span>卓越科技-</span></a></p><a class="btn-beautify button--animated block" href="https://zykj.js.org"   title="卓越科技-"><i class="far fa-hand-point-right fa-fw"></i><span>卓越科技-</span></a><a class="btn-beautify button--animated block center larger" href="https://zykj.js.org"   title="卓越科技-"><i class="far fa-hand-point-right fa-fw"></i><span>卓越科技-</span></a><a class="btn-beautify button--animated block right outline larger" href="https://zykj.js.org"   title="卓越科技-"><i class="far fa-hand-point-right fa-fw"></i><span>卓越科技-</span></a><a class="btn-beautify button--animated larger" href="https://zykj.js.org"   title="卓越科技-"><i class="far fa-hand-point-right fa-fw"></i><span>卓越科技-</span></a><a class="btn-beautify button--animated blue larger" href="https://zykj.js.org"   title="卓越科技-"><i class="far fa-hand-point-right fa-fw"></i><span>卓越科技-</span></a><a class="btn-beautify button--animated pink larger" href="https://zykj.js.org"   title="卓越科技-"><i class="far fa-hand-point-right fa-fw"></i><span>卓越科技-</span></a><a class="btn-beautify button--animated red larger" href="https://zykj.js.org"   title="卓越科技-"><i class="far fa-hand-point-right fa-fw"></i><span>卓越科技-</span></a><a class="btn-beautify button--animated purple larger" href="https://zykj.js.org"   title="卓越科技-"><i class="far fa-hand-point-right fa-fw"></i><span>卓越科技-</span></a><a class="btn-beautify button--animated orange larger" href="https://zykj.js.org"   title="卓越科技-"><i class="far fa-hand-point-right fa-fw"></i><span>卓越科技-</span></a><a class="btn-beautify button--animated green larger" href="https://zykj.js.org"   title="卓越科技-"><i class="far fa-hand-point-right fa-fw"></i><span>卓越科技-</span></a><div class="btn-center"><a class="btn-beautify button--animated outline larger" href="https://zykj.js.org"   title="卓越科技-"><i class="far fa-hand-point-right fa-fw"></i><span>卓越科技-</span></a><a class="btn-beautify button--animated outline blue larger" href="https://zykj.js.org"   title="卓越科技-"><i class="far fa-hand-point-right fa-fw"></i><span>卓越科技-</span></a><a class="btn-beautify button--animated outline pink larger" href="https://zykj.js.org"   title="卓越科技-"><i class="far fa-hand-point-right fa-fw"></i><span>卓越科技-</span></a><a class="btn-beautify button--animated outline red larger" href="https://zykj.js.org"   title="卓越科技-"><i class="far fa-hand-point-right fa-fw"></i><span>卓越科技-</span></a><a class="btn-beautify button--animated outline purple larger" href="https://zykj.js.org"   title="卓越科技-"><i class="far fa-hand-point-right fa-fw"></i><span>卓越科技-</span></a><a class="btn-beautify button--animated outline orange larger" href="https://zykj.js.org"   title="卓越科技-"><i class="far fa-hand-point-right fa-fw"></i><span>卓越科技-</span></a><a class="btn-beautify button--animated outline green larger" href="https://zykj.js.org"   title="卓越科技-"><i class="far fa-hand-point-right fa-fw"></i><span>卓越科技-</span></a></div><h4 id="使用方法-8"><a href="#使用方法-8" class="headerlink" title="使用方法"></a>使用方法</h4><div class="tabs" id="tabs13"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tabs13-1">使用方法</button></li><li class="tab"><button type="button" data-href="#tabs13-2">示例代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tabs13-1"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn [url],[text],[icon],[color] [style] [layout] [position] [size] %&#125;</span><br><span class="line"></span><br><span class="line">[url]         : 链接</span><br><span class="line">[text]        : 按钮文字</span><br><span class="line">[icon]        : [可选] 图标</span><br><span class="line">[color]       : [可选] 按钮背景顔色(默认style时）</span><br><span class="line">                      按钮字体和边框顔色(outline时)</span><br><span class="line">                      default&#x2F;blue&#x2F;pink&#x2F;red&#x2F;purple&#x2F;orange&#x2F;green</span><br><span class="line">[style]       : [可选] 按钮样式 默认实心</span><br><span class="line">                      outline&#x2F;留空</span><br><span class="line">[layout]      : [可选] 按钮佈局 默认为line</span><br><span class="line">                      block&#x2F;留空</span><br><span class="line">[position]    : [可选] 按钮位置 前提是设置了layout为block 默认为左边</span><br><span class="line">                      center&#x2F;right&#x2F;留空</span><br><span class="line">[size]        : [可选] 按钮大小</span><br><span class="line">                      larger&#x2F;留空</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs13-2"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">This is my website, click the button &#123;% btn &#39;https:&#x2F;&#x2F;zykj.js.org&#39;,卓越科技- %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#39;https:&#x2F;&#x2F;zykj.js.org&#39;,卓越科技-,far fa-hand-point-right %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#39;https:&#x2F;&#x2F;zykj.js.org&#39;,卓越科技-,,outline %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#39;https:&#x2F;&#x2F;zykj.js.org&#39;,卓越科技-,far fa-hand-point-right,outline %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#39;https:&#x2F;&#x2F;zykj.js.org&#39;,卓越科技-,far fa-hand-point-right,larger %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% btn &#39;https:&#x2F;&#x2F;zykj.js.org&#39;,卓越科技-,far fa-hand-point-right,block %&#125;</span><br><span class="line">&#123;% btn &#39;https:&#x2F;&#x2F;zykj.js.org&#39;,卓越科技-,far fa-hand-point-right,block center larger %&#125;</span><br><span class="line">&#123;% btn &#39;https:&#x2F;&#x2F;zykj.js.org&#39;,卓越科技-,far fa-hand-point-right,block right outline larger %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% btn &#39;https:&#x2F;&#x2F;zykj.js.org&#39;,卓越科技-,far fa-hand-point-right,larger %&#125;</span><br><span class="line">&#123;% btn &#39;https:&#x2F;&#x2F;zykj.js.org&#39;,卓越科技-,far fa-hand-point-right,blue larger %&#125;</span><br><span class="line">&#123;% btn &#39;https:&#x2F;&#x2F;zykj.js.org&#39;,卓越科技-,far fa-hand-point-right,pink larger %&#125;</span><br><span class="line">&#123;% btn &#39;https:&#x2F;&#x2F;zykj.js.org&#39;,卓越科技-,far fa-hand-point-right,red larger %&#125;</span><br><span class="line">&#123;% btn &#39;https:&#x2F;&#x2F;zykj.js.org&#39;,卓越科技-,far fa-hand-point-right,purple larger %&#125;</span><br><span class="line">&#123;% btn &#39;https:&#x2F;&#x2F;zykj.js.org&#39;,卓越科技-,far fa-hand-point-right,orange larger %&#125;</span><br><span class="line">&#123;% btn &#39;https:&#x2F;&#x2F;zykj.js.org&#39;,卓越科技-,far fa-hand-point-right,green larger %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;btn-center&quot;&gt;</span><br><span class="line">&#123;% btn &#39;https:&#x2F;&#x2F;zykj.js.org&#39;,卓越科技-,far fa-hand-point-right,outline larger %&#125;</span><br><span class="line">&#123;% btn &#39;https:&#x2F;&#x2F;zykj.js.org&#39;,卓越科技-,far fa-hand-point-right,outline blue larger %&#125;</span><br><span class="line">&#123;% btn &#39;https:&#x2F;&#x2F;zykj.js.org&#39;,卓越科技-,far fa-hand-point-right,outline pink larger %&#125;</span><br><span class="line">&#123;% btn &#39;https:&#x2F;&#x2F;zykj.js.org&#39;,卓越科技-,far fa-hand-point-right,outline red larger %&#125;</span><br><span class="line">&#123;% btn &#39;https:&#x2F;&#x2F;zykj.js.org&#39;,卓越科技-,far fa-hand-point-right,outline purple larger %&#125;</span><br><span class="line">&#123;% btn &#39;https:&#x2F;&#x2F;zykj.js.org&#39;,卓越科技-,far fa-hand-point-right,outline orange larger %&#125;</span><br><span class="line">&#123;% btn &#39;https:&#x2F;&#x2F;zykj.js.org&#39;,卓越科技-,far fa-hand-point-right,outline green larger %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="tag-hide"><a href="#tag-hide" class="headerlink" title="tag-hide"></a>tag-hide</h2><p><code>注意:这是Butterfly主题自带样式</code></p><h3 id="Inline"><a href="#Inline" class="headerlink" title="Inline"></a>Inline</h3><h4 id="示例-8"><a href="#示例-8" class="headerlink" title="示例"></a>示例</h4><p>哪个英文字母最酷？ <span class="hide-inline"><button type="button" class="hide-button button--animated" style="background-color: #FF7242;color: #fff">查看答案  </button><span class="hide-content">因为西装裤(C装酷)</span></span></p><p>门里站着一个人? <span class="hide-inline"><button type="button" class="hide-button button--animated" style="">Click  </button><span class="hide-content">闪</span></span></p><h4 id="使用方法-9"><a href="#使用方法-9" class="headerlink" title="使用方法"></a>使用方法</h4><div class="tabs" id="tabs8"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tabs8-1">语法格式</button></li><li class="tab"><button type="button" data-href="#tabs8-2">参数列表</button></li><li class="tab"><button type="button" data-href="#tabs8-3">示例代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tabs8-1"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideInline content,display,bg,color %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs8-2"><p>content: 文本内容</p><p>display: 按钮显示的文字 (可选)</p><p>bg: 按钮的背景颜色 (可选)</p><p>color: 按钮文字的颜色 (可选)</p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs8-3"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">哪个英文字母最酷？ &#123;% hideInline 因为西装裤(C装酷),查看答案,#FF7242,#fff %&#125;</span><br><span class="line"></span><br><span class="line">门里站着一个人? &#123;% hideInline 闪 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="Block"><a href="#Block" class="headerlink" title="Block"></a>Block</h3><h4 id="示例-9"><a href="#示例-9" class="headerlink" title="示例"></a>示例</h4><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看答案    </button><span class="hide-content"><div class="justified-gallery"><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg"><br><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg"></p>          </div></span></div><h4 id="使用方法-10"><a href="#使用方法-10" class="headerlink" title="使用方法"></a>使用方法</h4><div class="tabs" id="tabs9"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tabs9-1">语法格式</button></li><li class="tab"><button type="button" data-href="#tabs9-2">参数列表</button></li><li class="tab"><button type="button" data-href="#tabs9-3">示例代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tabs9-1"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 图片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs9-2"><p>content: 文本内容</p><p>display: 按钮显示的文字 (可选)</p><p>bg: 按钮的背景颜色 (可选)</p><p>color: 按钮文字的颜色 (可选)</p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs9-3"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock 查看答案 %&#125;</span><br><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](https:&#x2F;&#x2F;i.loli.net&#x2F;2019&#x2F;12&#x2F;25&#x2F;Fze9jchtnyJXMHN.jpg)</span><br><span class="line">![](https:&#x2F;&#x2F;i.loli.net&#x2F;2019&#x2F;12&#x2F;25&#x2F;ryLVePaqkYm4TEK.jpg)</span><br><span class="line">&#123;% endgallery %&#125;</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="Toggle"><a href="#Toggle" class="headerlink" title="Toggle"></a>Toggle</h3><h4 id="示例-10"><a href="#示例-10" class="headerlink" title="示例"></a>示例</h4><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>查看代码</span></div>    <div class="hide-content"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&quot;Hello World&quot;</span>)</span><br></pre></td></tr></table></figure></div></div><h4 id="使用方法-11"><a href="#使用方法-11" class="headerlink" title="使用方法"></a>使用方法</h4><div class="tabs" id="tabs10"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tabs10-1">语法格式</button></li><li class="tab"><button type="button" data-href="#tabs10-2">示例代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tabs10-1"><p>( display 不能包含英文逗号，可用 <code>&amp;sbquo;</code>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideToggle display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideToggle %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs10-2"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideToggle 查看代码 %&#125;</span><br><span class="line"></span><br><span class="line">print(&quot;Hello World&quot;)</span><br><span class="line"></span><br><span class="line">&#123;% endhideToggle %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="BiliBili视频播放器"><a href="#BiliBili视频播放器" class="headerlink" title="BiliBili视频播放器"></a>BiliBili视频播放器</h2><p>安装 hexo-tag-bilibili</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-tag-bilibili</span><br></pre></td></tr></table></figure><h3 id="示例-11"><a href="#示例-11" class="headerlink" title="示例"></a>示例</h3><div class="bili_video"><iframe src="https://player.bilibili.com/player.html?aid=57505556&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" width="100%" height="580" allowfullscreen="true"> </iframe></div><h4 id="使用方法-12"><a href="#使用方法-12" class="headerlink" title="使用方法"></a>使用方法</h4><div class="tabs" id="tabs11"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tabs11-1">语法格式</button></li><li class="tab"><button type="button" data-href="#tabs11-2">示例代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tabs11-1"><p>( display 不能包含英文逗号，可用 <code>&amp;sbquo;</code>)</p><p>只能写AV号 如 av57505556 av_id 写 57505556</p><p>哔哩哔哩 AV/BV 互转 <a href="https://tool.liumingye.cn/avbv/">https://tool.liumingye.cn/avbv/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bilibili [av_id] %&#125;</span><br><span class="line">or</span><br><span class="line">&#123;% bilibili [av_id] [page] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs11-2"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bilibili 57505556 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="APlayer"><a href="#APlayer" class="headerlink" title="APlayer"></a>APlayer</h2><p>安装 hexo-tag-aplayer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-tag-aplayer</span><br></pre></td></tr></table></figure><p>编辑<code>_config.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">asset_inject:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">meting:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="示例-12"><a href="#示例-12" class="headerlink" title="示例"></a>示例</h3>    <div id="aplayer-NfwDVfgW" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="569551651" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="none" data-theme="#ad7a86" data-listfolded="true"    ></div><h4 id="使用方法-13"><a href="#使用方法-13" class="headerlink" title="使用方法"></a>使用方法</h4><div class="tabs" id="tabs12"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tabs12-1">语法格式</button></li><li class="tab"><button type="button" data-href="#tabs12-2">参数列表</button></li><li class="tab"><button type="button" data-href="#tabs12-3">示例代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tabs12-1"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% meting &quot;60198&quot; &quot;netease&quot; &quot;playlist&quot; &quot;autoplay&quot; &quot;mutex:false&quot; &quot;listfolded&quot; &quot;listmaxheight:340px&quot; &quot;preload:none&quot; &quot;theme:#ad7a86&quot;%&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs12-2"><table><thead><tr><th>选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td><strong>必须值</strong></td><td>歌曲 id / 播放列表 id / 相册 id / 搜索关键字</td></tr><tr><td>server</td><td><strong>必须值</strong></td><td>音乐平台: <code>netease</code>, <code>tencent</code>, <code>kugou</code>, <code>xiami</code>, <code>baidu</code></td></tr><tr><td>type</td><td><strong>必须值</strong></td><td><code>song</code>, <code>playlist</code>, <code>album</code>, <code>search</code>, <code>artist</code></td></tr><tr><td>fixed</td><td><code>false</code></td><td>开启固定模式</td></tr><tr><td>mini</td><td><code>false</code></td><td>开启迷你模式</td></tr><tr><td>loop</td><td><code>all</code></td><td>列表循环模式：<code>all</code>, <code>one</code>,<code>none</code></td></tr><tr><td>order</td><td><code>list</code></td><td>列表播放模式： <code>list</code>, <code>random</code></td></tr><tr><td>volume</td><td>0.7</td><td>播放器音量</td></tr><tr><td>lrctype</td><td>0</td><td>歌词格式类型</td></tr><tr><td>listfolded</td><td><code>false</code></td><td>指定音乐播放列表是否折叠</td></tr><tr><td>storagename</td><td><code>metingjs</code></td><td>LocalStorage 中存储播放器设定的键名</td></tr><tr><td>autoplay</td><td><code>true</code></td><td>自动播放，移动端浏览器暂时不支持此功能</td></tr><tr><td>mutex</td><td><code>true</code></td><td>该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</td></tr><tr><td>listmaxheight</td><td><code>340px</code></td><td>播放列表的最大长度</td></tr><tr><td>preload</td><td><code>auto</code></td><td>音乐文件预载入模式，可选项： <code>none</code>, <code>metadata</code>, <code>auto</code></td></tr><tr><td>theme</td><td><code>#ad7a86</code></td><td>播放器风格色彩设置</td></tr></tbody></table><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs12-3"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% meting &quot;569551651&quot; &quot;netease&quot;  &quot;playlist&quot; &quot;mutex:true&quot; &quot;listfolded:true&quot; &quot;listmaxheight:340px&quot; &quot;preload:none&quot; &quot;theme:#ad7a86&quot;%&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="按键"><a href="#按键" class="headerlink" title="按键"></a>按键</h2><h3 id="示例-13"><a href="#示例-13" class="headerlink" title="示例"></a>示例</h3><p><kbd>Ctrl</kbd>+<kbd>C</kbd> <kbd>Ctrl</kbd>+<kbd>V</kbd> </p><h3 id="使用方法-14"><a href="#使用方法-14" class="headerlink" title="使用方法"></a>使用方法</h3><p>F12看代码</p><h2 id="添加动效动画"><a href="#添加动效动画" class="headerlink" title="添加动效动画"></a>添加动效动画</h2><div class="note info"><p>需要导入: <a href="https://cdn.jsdelivr.net/gh/zykjofficial/zykjresource@master/css/font-awesome-animation.min.css">https://cdn.jsdelivr.net/gh/zykjofficial/zykjresource@master/css/font-awesome-animation.min.css</a></p></div><table><thead><tr><th style="text-align:center">On DOM load</th><th style="text-align:center">On hover</th><th style="text-align:center">On parent hover</th></tr></thead><tbody><tr><td style="text-align:center"><a href="javascript:void(0);"><i class="fas fa-wrench faa-wrench animated"></i>&nbsp;faa-wrench animated</a></td><td style="text-align:center"><a href="javascript:void(0);"><i class="fas fa-wrench faa-wrench animated-hover"></i>&nbsp;faa-wrench animated-hover</a></td><td style="text-align:center"><a href="javascript:void(0);" class="faa-parent animated-hover"><i class="fas fa-wrench faa-wrench"></i>&nbsp;faa-wrench</a></td></tr><tr><td style="text-align:center"><a href="javascript:void(0);"><i class="fas fa-bell faa-ring animated"></i>&nbsp;faa-ring animated</a></td><td style="text-align:center"><a href="javascript:void(0);"><i class="fas fa-bell faa-ring animated-hover"></i>&nbsp;faa-ring animated-hover</a></td><td style="text-align:center"><a href="javascript:void(0);" class="faa-parent animated-hover"><i class="fas fa-bell faa-ring"></i>&nbsp;faa-ring</a></td></tr><tr><td style="text-align:center"><a href="javascript:void(0);"><i class="fas fa-envelope faa-horizontal animated"></i>&nbsp;faa-horizontal animated</a></td><td style="text-align:center"><a href="javascript:void(0);"><i class="fas fa-envelope faa-horizontal animated-hover"></i>&nbsp;faa-horizontal animated-hover</a></td><td style="text-align:center"><a href="javascript:void(0);" class="faa-parent animated-hover"><i class="fas fa-envelope faa-horizontal"></i>&nbsp;faa-horizontal</a></td></tr><tr><td style="text-align:center"><a href="javascript:void(0);"><i class="fas fa-thumbs-up faa-vertical animated"></i>&nbsp;faa-vertical animated</a></td><td style="text-align:center"><a href="javascript:void(0);"><i class="fas fa-thumbs-up faa-vertical animated-hover"></i>&nbsp;faa-vertical animated-hover</a></td><td style="text-align:center"><a href="javascript:void(0);" class="faa-parent animated-hover"><i class="fas fa-thumbs-up faa-vertical"></i>&nbsp;faa-vertical</a></td></tr><tr><td style="text-align:center"><a href="javascript:void(0);"><i class="fas fa-exclamation-triangle faa-flash animated"></i>&nbsp;faa-flash animated</a></td><td style="text-align:center"><a href="javascript:void(0);"><i class="fas fa-exclamation-triangle faa-flash animated-hover"></i>&nbsp;faa-flash animated-hover</a></td><td style="text-align:center"><a href="javascript:void(0);" class="faa-parent animated-hover"><i class="fas fa-exclamation-triangle faa-flash"></i>&nbsp;faa-flash</a></td></tr><tr><td style="text-align:center"><a href="javascript:void(0);"><i class="fas fa-thumbs-up faa-bounce animated"></i>&nbsp;faa-bounce animated</a></td><td style="text-align:center"><a href="javascript:void(0);"><i class="fas fa-thumbs-up faa-bounce animated-hover"></i>&nbsp;faa-bounce animated-hover</a></td><td style="text-align:center"><a href="javascript:void(0);" class="faa-parent animated-hover"><i class="fas fa-thumbs-up faa-bounce"></i>&nbsp;faa-bounce</a></td></tr><tr><td style="text-align:center"><a href="javascript:void(0);"><i class="fas fa-spinner faa-spin animated"></i>&nbsp;faa-spin animated</a></td><td style="text-align:center"><a href="javascript:void(0);"><i class="fas fa-spinner faa-spin animated-hover"></i>&nbsp;faa-spin animated-hover</a></td><td style="text-align:center"><a href="javascript:void(0);" class="faa-parent animated-hover"><i class="fas fa-spinner faa-spin"></i>&nbsp;faa-spin</a></td></tr><tr><td style="text-align:center"><a href="javascript:void(0);"><i class="fas fa-plane faa-float animated"></i>&nbsp;faa-float animated</a></td><td style="text-align:center"><a href="javascript:void(0);"><i class="fas fa-plane faa-float animated-hover"></i>&nbsp;faa-float animated-hover</a></td><td style="text-align:center"><a href="javascript:void(0);" class="faa-parent animated-hover"><i class="fas fa-plane faa-float"></i>&nbsp;faa-float</a></td></tr><tr><td style="text-align:center"><a href="javascript:void(0);"><i class="fas fa-heart faa-pulse animated"></i>&nbsp;faa-pulse animated</a></td><td style="text-align:center"><a href="javascript:void(0);"><i class="fas fa-heart faa-pulse animated-hover"></i>&nbsp;faa-pulse animated-hover</a></td><td style="text-align:center"><a href="javascript:void(0);" class="faa-parent animated-hover"><i class="fas fa-heart faa-pulse"></i>&nbsp;faa-pulse</a></td></tr><tr><td style="text-align:center"><a href="javascript:void(0);"><i class="fas fa-envelope faa-shake animated"></i>&nbsp;faa-shake animated</a></td><td style="text-align:center"><a href="javascript:void(0);"><i class="fas fa-envelope faa-shake animated-hover"></i>&nbsp;faa-shake animated-hover</a></td><td style="text-align:center"><a href="javascript:void(0);" class="faa-parent animated-hover"><i class="fas fa-envelope faa-shake"></i>&nbsp;faa-shake</a></td></tr><tr><td style="text-align:center"><a href="javascript:void(0);"><i class="fas fa-trophy faa-tada animated"></i>&nbsp;faa-tada animated</a></td><td style="text-align:center"><a href="javascript:void(0);"><i class="fas fa-trophy faa-tada animated-hover"></i>&nbsp;faa-tada animated-hover</a></td><td style="text-align:center"><a href="javascript:void(0);" class="faa-parent animated-hover"><i class="fas fa-trophy faa-tada"></i>&nbsp;faa-tada</a></td></tr><tr><td style="text-align:center"><a href="javascript:void(0);"><i class="fas fa-space-shuttle faa-passing animated"></i>&nbsp;faa-passing animated</a></td><td style="text-align:center"><a href="javascript:void(0);"><i class="fas fa-space-shuttle faa-passing animated-hover"></i>&nbsp;faa-passing animated-hover</a></td><td style="text-align:center"><a href="javascript:void(0);" class="faa-parent animated-hover"><i class="fas fa-space-shuttle faa-passing"></i>&nbsp;faa-passing</a></td></tr><tr><td style="text-align:center"><a href="javascript:void(0);"><i class="fas fa-space-shuttle faa-passing-reverse animated"></i>&nbsp;faa-passing-reverse animated</a></td><td style="text-align:center"><a href="javascript:void(0);"><i class="fas fa-space-shuttle faa-passing-reverse animated-hover"></i>&nbsp;faa-passing-reverse animated-hover</a></td><td style="text-align:center"><a href="javascript:void(0);" class="faa-parent animated-hover"><i class="fas fa-space-shuttle faa-passing-reverse"></i>&nbsp;faa-passing-reverse</a></td></tr><tr><td style="text-align:center"><a href="javascript:void(0);"><i class="fas fa-circle faa-burst animated"></i>&nbsp;faa-burst animated</a></td><td style="text-align:center"><a href="javascript:void(0);"><i class="fas fa-circle faa-burst animated-hover"></i>&nbsp;faa-burst animated-hover</a></td><td style="text-align:center"><a href="javascript:void(0);" class="faa-parent animated-hover"><i class="fas fa-circle faa-burst"></i>&nbsp;faa-burst</a></td></tr><tr><td style="text-align:center"><a href="javascript:void(0);"><i class="fas fa-star faa-falling animated"></i>&nbsp;faa-falling animated</a></td><td style="text-align:center"><a href="javascript:void(0);"><i class="fas fa-star faa-falling animated-hover"></i>&nbsp;faa-falling animated-hover</a></td><td style="text-align:center"><a href="javascript:void(0);" class="faa-parent animated-hover"><i class="fas fa-star faa-falling"></i>&nbsp;faa-falling</a></td></tr><tr><td style="text-align:center"><a href="javascript:void(0);"><i class="fas fa-rocket faa-rising animated"></i>&nbsp;faa-rising animated</a></td><td style="text-align:center"><a href="javascript:void(0);"><i class="fas fa-rocket faa-rising animated-hover"></i>&nbsp;faa-rising animated-hover</a></td><td style="text-align:center"><a href="javascript:void(0);" class="faa-parent animated-hover"><i class="fas fa-rocket faa-rising"></i>&nbsp;faa-rising</a></td></tr></tbody></table><p>然后在 DOM 元素的类名添加相应的动画即可。</p><p>例如网址导航栏可以写为 <code>- 网址收藏 || /nav/ || fas fa-infinity faa-shake animated</code></p><h2 id="小标签"><a href="#小标签" class="headerlink" title="小标签"></a>小标签</h2><div class="note info"><p><a href="https://www.antmoe.com/posts/a811d614/index.html">大佬博客</a></p></div><h3 id="示例-14"><a href="#示例-14" class="headerlink" title="示例"></a>示例</h3><p class='div-border green'>绿色</p><p class='div-border red'>红色</p><p class='div-border yellow'>黄色</p><p class='div-border grey'>灰色</p><p class='div-border blue'>蓝色</p><p><span class="inline-tag red">红色小标签</span></p><p><span class="inline-tag green">绿色小标签</span></p><p><span class="inline-tag blue">蓝色小标签</span></p><p><span class="inline-tag yellow">黄色小标签</span></p><p><span class="inline-tag grey">灰色小标签</span></p><p class='div-border green left right'>绿色</p><h3 id="使用方法-15"><a href="#使用方法-15" class="headerlink" title="使用方法"></a>使用方法</h3><div class="tabs" id="tabs14"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tabs14-1">使用方法</button></li><li class="tab"><button type="button" data-href="#tabs14-2">示例代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tabs14-1"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p class&#x3D;&#39;div-border [颜色|方向加粗]&#39;&gt;你的文字&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs14-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- note语法示例 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&#x27;div-border green&#x27;</span>&gt;</span>绿色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&#x27;div-border red&#x27;</span>&gt;</span>红色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&#x27;div-border yellow&#x27;</span>&gt;</span>黄色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&#x27;div-border grey&#x27;</span>&gt;</span>灰色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&#x27;div-border blue&#x27;</span>&gt;</span>蓝色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 小tag标签语法示例 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;inline-tag red&quot;</span>&gt;</span>红色小标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;inline-tag green&quot;</span>&gt;</span>绿色小标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;inline-tag blue&quot;</span>&gt;</span>蓝色小标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;inline-tag yellow&quot;</span>&gt;</span>黄色小标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;inline-tag grey&quot;</span>&gt;</span>灰色小标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 加粗案例 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&#x27;div-border green left right&#x27;</span>&gt;</span>绿色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="ElementUI"><a href="#ElementUI" class="headerlink" title="ElementUI"></a>ElementUI</h2><link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/zykjofficial/zykjresource@master/css/elementui.css"><h3 id="按钮样式"><a href="#按钮样式" class="headerlink" title="按钮样式"></a>按钮样式</h3><h4 id="示例-15"><a href="#示例-15" class="headerlink" title="示例"></a>示例</h4><p><button type="button" class="el-button el-button--default"><span>默认按钮</span></button><button type="button" class="el-button el-button--primary"><span>主要按钮</span></button><button type="button" class="el-button el-button--success"><span>成功按钮</span></button><button type="button" class="el-button el-button--info"><span>信息按钮</span></button><button type="button" class="el-button el-button--warning"><span>警告按钮</span></button><button type="button" class="el-button el-button--danger"><span>危险按钮</span></button></p><p><button type="button" class="el-button el-button--default is-plain"><span>朴素按钮</span></button><button type="button" class="el-button el-button--primary is-plain"><span>主要按钮</span></button><button type="button" class="el-button el-button--success is-plain"><span>成功按钮</span></button><button type="button" class="el-button el-button--info is-plain"><span>信息按钮</span></button><button type="button" class="el-button el-button--warning is-plain"><span>警告按钮</span></button><button type="button" class="el-button el-button--danger is-plain"><span>危险按钮</span></button></p><p><button type="button" class="el-button el-button--default is-round"><span>圆角按钮</span></button><button type="button" class="el-button el-button--primary is-round"><span>主要按钮</span></button><button type="button" class="el-button el-button--success is-round"><span>成功按钮</span></button><button type="button" class="el-button el-button--info is-round"><span>信息按钮</span></button><button type="button" class="el-button el-button--warning is-round"><span>警告按钮</span></button><button type="button" class="el-button el-button--danger is-round"><span>危险按钮</span></button></p><p><button type="button" class="el-button el-button--default is-circle"><i class="el-icon-search"></i></button><button type="button" class="el-button el-button--primary is-circle"><i class="el-icon-edit"></i></button><button type="button" class="el-button el-button--success is-circle"><i class="el-icon-check"></i></button><button type="button" class="el-button el-button--info is-circle"><i class="el-icon-message"></i></button><button type="button" class="el-button el-button--warning is-circle"><i class="el-icon-star-off"></i></button><button type="button" class="el-button el-button--danger is-circle"><i class="el-icon-delete"></i></button></p><div class="el-button-group"><button type="button" class="el-button el-button--primary"><!----><i class="el-icon-arrow-left"></i><span>上一页</span></button> <button type="button" class="el-button el-button--primary"><!----><!----><span>下一页<i class="el-icon-arrow-right el-icon--right"></i></span></button></div> <div class="el-button-group"><button type="button" class="el-button el-button--primary"><!----><i class="el-icon-edit"></i><!----></button> <button type="button" class="el-button el-button--primary"><!----><i class="el-icon-share"></i><!----></button> <button type="button" class="el-button el-button--primary"><!----><i class="el-icon-delete"></i><!----></button></div><h4 id="使用方法-16"><a href="#使用方法-16" class="headerlink" title="使用方法"></a>使用方法</h4><p>进入ElementUi官网: <a href="https://element.eleme.cn/#/zh-CN/component/button">https://element.eleme.cn/#/zh-CN/component/button</a> 、F12查看,注意:<code>不支持fontawesome图标,请不要使用</code></p><h2 id="密码样式的文本"><a href="#密码样式的文本" class="headerlink" title="密码样式的文本"></a>密码样式的文本</h2><p><a href="https://volantis.js.org/v3/tag-plugins/#kbd-psw-3">https://volantis.js.org/v3/tag-plugins/#kbd-psw-3</a></p><h3 id="示例-16"><a href="#示例-16" class="headerlink" title="示例"></a>示例</h3><p><psw>你能看见我吗？</psw></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><div class="tabs" id="tabs15"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tabs15-1">使用方法</button></li><li class="tab"><button type="button" data-href="#tabs15-2">示例代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tabs15-1"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;psw&gt;你要隐藏的内容&lt;&#x2F;psw&gt;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs15-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">psw</span>&gt;</span>你能看见我吗？<span class="tag">&lt;/<span class="name">psw</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="时间线"><a href="#时间线" class="headerlink" title="时间线"></a>时间线</h2><p><a href="https://volantis.js.org/v3/tag-plugins/">https://volantis.js.org/v3/tag-plugins/</a></p><h3 id="示例-17"><a href="#示例-17" class="headerlink" title="示例"></a>示例</h3><div class="timeline"><p class='p h2'>升级小助手</p><div class="timenode"><div class="meta"><p><p>2020-07-24 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases">2.6.6 -&gt; 3.0</a></p></p></div><div class="body"><ol><li>如果有 <code>hexo-lazyload-image</code> 插件，需要删除并重新安装最新版本，设置 <code>lazyload.isSPA: true</code>。</li><li>2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <code>use_cdn: true</code> 则需要删除。</li><li>2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</li><li>2.x 版本的置顶 <code>top: true</code> 改为了 <code>pin: true</code>，并且同样适用于 <code>layout: page</code> 的页面。</li><li>如果使用了 <code>hexo-offline</code> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2020-05-15 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">2.6.3 -&gt; 2.6.6</a></p></p></div><div class="body"><p>不需要额外处理。</p></div></div><div class="timenode"><div class="meta"><p><p>2020-04-20 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.6.2 -&gt; 2.6.3</a></p></p></div><div class="body"><ol><li>全局搜索 <code>seotitle</code> 并替换为 <code>seo_title</code>。</li><li>group 组件的索引规则有变，使用 group 组件的文章内，<code>group: group_name</code> 对应的组件名必须是 <code>group_name</code>。</li><li>group 组件的列表名优先显示文章的 <code>short_title</code> 其次是 <code>title</code>。</li></ol></div></div></div><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><div class="tabs" id="tabs16"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tabs16-1">使用方法</button></li><li class="tab"><button type="button" data-href="#tabs16-2">示例代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tabs16-1"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间线标题 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% timenode 时间节点（标题） %&#125;</span><br><span class="line"></span><br><span class="line">正文内容</span><br><span class="line"></span><br><span class="line">&#123;% endtimenode %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% timenode 时间节点（标题） %&#125;</span><br><span class="line"></span><br><span class="line">正文内容</span><br><span class="line"></span><br><span class="line">&#123;% endtimenode %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs16-2"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 升级小助手 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% timenode 2020-07-24 [2.6.6 -&gt; 3.0](https:&#x2F;&#x2F;github.com&#x2F;volantis-x&#x2F;hexo-theme-volantis&#x2F;releases) %&#125;</span><br><span class="line"></span><br><span class="line">1. 如果有 &#96;hexo-lazyload-image&#96; 插件，需要删除并重新安装最新版本，设置 &#96;lazyload.isSPA: true&#96;。</span><br><span class="line">2. 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 &#96;use_cdn: true&#96; 则需要删除。</span><br><span class="line">3. 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</span><br><span class="line">4. 2.x 版本的置顶 &#96;top: true&#96; 改为了 &#96;pin: true&#96;，并且同样适用于 &#96;layout: page&#96; 的页面。</span><br><span class="line">5. 如果使用了 &#96;hexo-offline&#96; 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</span><br><span class="line"></span><br><span class="line">&#123;% endtimenode %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% timenode 2020-05-15 [2.6.3 -&gt; 2.6.6](https:&#x2F;&#x2F;github.com&#x2F;volantis-x&#x2F;hexo-theme-volantis&#x2F;releases&#x2F;tag&#x2F;2.6.6) %&#125;</span><br><span class="line"></span><br><span class="line">不需要额外处理。</span><br><span class="line"></span><br><span class="line">&#123;% endtimenode %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% timenode 2020-04-20 [2.6.2 -&gt; 2.6.3](https:&#x2F;&#x2F;github.com&#x2F;volantis-x&#x2F;hexo-theme-volantis&#x2F;releases&#x2F;tag&#x2F;2.6.3) %&#125;</span><br><span class="line"></span><br><span class="line">1. 全局搜索 &#96;seotitle&#96; 并替换为 &#96;seo_title&#96;。</span><br><span class="line">2. group 组件的索引规则有变，使用 group 组件的文章内，&#96;group: group_name&#96; 对应的组件名必须是 &#96;group_name&#96;。</span><br><span class="line">2. group 组件的列表名优先显示文章的 &#96;short_title&#96; 其次是 &#96;title&#96;。</span><br><span class="line"></span><br><span class="line">&#123;% endtimenode %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://volantis.js.org/v3/tag-plugins/">https://volantis.js.org/v3/tag-plugins/</a></p><h3 id="示例-18"><a href="#示例-18" class="headerlink" title="示例"></a>示例</h3><div><a class='link-card' title='http://localhost:4000/contributors/' href='http://localhost:4000/contributors/'><div class='left'><img src= "/img/loading.gif" data-lazy-src=https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/blog/Logo-NavBar@3x.png></div><div class='right'><p class='text'>如何参与项目</p><p class='url'>http://localhost:4000/contributors/</p></div></a></div><h3 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h3><div class="tabs" id="tabs17"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tabs17-1">使用方法</button></li><li class="tab"><button type="button" data-href="#tabs17-2">示例代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tabs17-1"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 标题, 链接, 图片 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs17-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 如何参与项目, http://localhost:4000/contributors/, https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/blog/Logo-NavBar@3x.png %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> Hexo教程 </category>
          
          <category> Butterfly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免费域名+Github/Coding搭建静态网站</title>
      <link href="/posts/acef0329/"/>
      <url>/posts/acef0329/</url>
      
        <content type="html"><![CDATA[<h2 id="前置说明"><a href="#前置说明" class="headerlink" title="前置说明"></a>前置说明</h2><div class="note info"><p>这篇文章主要是介绍如何白嫖免费域名并且与静态页面绑定，目的是为了之后忘记了还能看教程。。。</p></div><h2 id="获取免费域名"><a href="#获取免费域名" class="headerlink" title="获取免费域名"></a>获取免费域名</h2><div class="note idea"><p>免费域名有很多、这里介绍一个比较满意的网站  <a href="https://www.freenom.com/">Freenom</a> 这个网站提供了 <code>.tk</code> <code>.ml</code> <code>.ga</code>  <code>.cf</code> <code>.gf</code> 为后缀的免费域名。当然也有付费域名。我们这里白嫖免费域名</p></div><div class="note message"><p>注意：网站是外网、访问速度有点慢、建议使用 <code>Chrome浏览器开启谷歌访问助手</code>可以有更快的速度，至于为什么速度会这么快。我也不知道</p></div><ol><li><p>进入 <a href="https://www.freenom.com/">Freenom</a> 官网、搜索一个免费域名、检查可用性</p><p><code>注意: 如果背景图片没有加载出来、就说明网络不好,多刷新几次</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200528232412.png"></p></li><li><p>输入 <code>xxxxx.后缀</code> 可以选中一个域名、如: zykjofficial.tk </p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200528232645.png"></p></li><li><p><code>Period</code> 将日期修改为 <code>12 Months @ FREE </code> 点击继续</p><p>过了12月可以继续续费</p></li><li><p>没有登录会提示登录账号或者注册账号、注册的步骤就跳过了、当初注册过程没有截图。。。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200529152627.png"></p></li><li><p>注册成功后、登录用户、在底部Services处找到 <code>Register a New Domain</code> 重复2、3步骤</p><p>为什么要这样、因为我在主页里找不到注册页面、只能通过这样的方法来注册。。。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200529153207.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200529153527.png"></p><p>如果不成功、请重复上面的步骤、可能的原因：1.没有人机检查、2.注册账户的地址与当前访问IP的地址不一致，因此建议使用 <code>Chrome浏览器开启谷歌访问助手</code>解决</p></li></ol><h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p>我们使用第三方的来解析：我这里使用阿里云,当然也可以使用其他的、都类似。</p><ol><li><p>进入 <a href="https://homenew.console.aliyun.com/">阿里云控制台</a> 找到 云解析 DNS</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200529154724.png"></p></li><li><p>点击 <code>添加域名</code>,将刚才购买的域名添加进去</p></li><li><p>回到 Freenom，在底部Services处找到 <code>My Domains</code> 进入，通过 <code>Manage Domain</code> 配置解析服务器</p></li><li><p>进入之后、点击<code>Management Tools</code>选择 <code>Nameservers</code> </p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200529155609.png"></p></li><li><p>将阿里云的 DNS 服务器 <code>ns1.alidns.com</code> <code>ns2.alidns.com</code> 添加，保存</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200529155807.png"></p><p>等待 阿里云-&gt; 云解析 DNS -&gt; DNS服务器状态 显示正常就可以了、如果不显示正常、请等待它显示正常、可能很快也可能很慢</p></li><li><p>解析正常之后进入解析设置配置</p></li></ol><h2 id="博客配置"><a href="#博客配置" class="headerlink" title="博客配置"></a>博客配置</h2><p>如果还没有搭建博客的话可以看 <a href="https://zykjofficial.tk/posts/e55bad60/">Hexo搭建个人博客</a> 这篇文章</p><p>以Hexo博客为例：</p><ol><li><p>在<code>source</code> 下创建 <code>CNAME</code> 文件、不需要加后缀！！！</p><p>内容写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx.tk</span><br></pre></td></tr></table></figure><p> xxx为你的域名</p></li><li><p><code>hexo g &amp;&amp; d</code> 将本地文件推送到Github、Coding</p></li><li><p>进入你推送在Github中的仓库 <code>xxx.github.io</code> 找到Settings Github Pages</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200529161421.png"></p><p>记住你的 <a href="https://xxx.github.io/">https://xxx.github.io</a> 网址</p></li><li><p>Coding 一样进入仓库 <code>持续部署</code>中找到<code>静态博客</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200529161916.png"></p><p>记住那个网址</p></li></ol><h2 id="配置域名解析"><a href="#配置域名解析" class="headerlink" title="配置域名解析"></a>配置域名解析</h2><ol><li><p>回到阿里云 -&gt; 云解析 DNS 添加记录</p><p>这样添加</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200529162218.png"></p><p>因为Github的国外的、所以要将 xxx.github.解析到境外 Coding <code>默认</code> 可以加快访问速度</p></li><li><p>Coding配置域名 点击设置</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200529162505.png"></p><p>这样添加域名就可以了</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200529162553.png"></p><p>如果有问题可以看看这篇博客 <a href="https://www.cnblogs.com/sunhang32/p/11969964.html">加速自己的hexo，使用GitHub+Coding实现国内外网站加速</a></p></li><li><p>直接访问你的域名就可以了</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web教程 </category>
          
          <category> 网站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站 </tag>
            
            <tag> 域名 </tag>
            
            <tag> Github </tag>
            
            <tag> Coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery学习</title>
      <link href="/posts/e438c445/"/>
      <url>/posts/e438c445/</url>
      
        <content type="html"><![CDATA[<h2 id="jQuery学习"><a href="#jQuery学习" class="headerlink" title="jQuery学习"></a>jQuery学习</h2><div class="note danger"><p>本教程里的资料来源于网友的资料,自己整理以供学习。视频学习: <a href="https://www.bilibili.com/video/BV1Wz411B7N5">黑马程序员</a></p></div><h3 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h3><blockquote><p>即一个快速简洁的js库。j就是javascript,Q为query查询,把js中的DOM操作做了封装,可以快速的查询使用里面的功能。(write less,Do More)</p></blockquote><p><a href="https://www.jquery.com/">jQuery官网</a></p><h4 id="JavaScript库"><a href="#JavaScript库" class="headerlink" title="JavaScript库"></a>JavaScript库</h4><blockquote><p>即library,是一个封装好的特定的集合(方法和函数),即封装了很多预定义好的函数在里面,比如动画animate、hide、show、获取元素等</p></blockquote><h3 id="记得引入jquery文件"><a href="#记得引入jquery文件" class="headerlink" title="记得引入jquery文件!!!"></a>记得引入jquery文件!!!</h3><h3 id="入口函数"><a href="#入口函数" class="headerlink" title="入口函数"></a>入口函数</h3><blockquote><p>相当于原生js中的DOMContentLoaded,不必等外部资源加载完毕才执行</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">    <span class="comment">// ...页面加载完的入口 </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;    </span><br><span class="line">    <span class="comment">// ...页面加载完的入口 </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>注: 一般使用第二种</code></p><h3 id="jQuery的顶级对象"><a href="#jQuery的顶级对象" class="headerlink" title="jQuery的顶级对象$"></a>jQuery的顶级对象$</h3><blockquote><p>即为jQuery的别称,可以互相替代使用,都是jQuery中的顶级对象,都可以把获得的元素转为jQuery对象,从而使该元素能够使用jQuery中的属性方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">     alert(<span class="number">11</span>); </span><br><span class="line">&#125;)  </span><br><span class="line"><span class="comment">// $就是jQuery的别称 可以互相替代 </span></span><br><span class="line">jQuery(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    jQuery(<span class="string">&#x27;div&#x27;</span>).hide(); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>注意: 以上二者是等效的,一般用 $</code></p><h3 id="jQuery对象和DOM对象"><a href="#jQuery对象和DOM对象" class="headerlink" title="jQuery对象和DOM对象"></a>jQuery对象和DOM对象</h3><blockquote><p>DOM对象: 用原生js获取的对象就是DOM对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="jQuery对象"><a href="#jQuery对象" class="headerlink" title="jQuery对象"></a>jQuery对象</h3><blockquote><p>用$或者jQuery方法获取的对象就是jQuery对象,本质即为获取DOM元素再用$对其包装为jQuery对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jqdiv = $(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.dir(jqdiv);</span><br></pre></td></tr></table></figure><h3 id="jQuery对象和DOM对象的区别"><a href="#jQuery对象和DOM对象的区别" class="headerlink" title="jQuery对象和DOM对象的区别"></a>jQuery对象和DOM对象的区别</h3><blockquote><p>DOM对象只能使用原生js中的属性方法,jquery对象只能使用jquery中的方法,二者不能混淆使用</p></blockquote><p>如: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;div&#x27;</span>).style.display = <span class="string">&#x27;none&#x27;</span>;  <span class="comment">//报错 jQuery无法使用原生js中的style属性 </span></span><br><span class="line">div.hide(); <span class="comment">//报错 div无法使用jQuery中的hide方法</span></span><br></pre></td></tr></table></figure><h4 id="jQuery对象家和DOM对象的转换"><a href="#jQuery对象家和DOM对象的转换" class="headerlink" title="jQuery对象家和DOM对象的转换"></a>jQuery对象家和DOM对象的转换</h4><ul><li><p>DOM对象转为jQuery对象</p><ol><li><p>直接用jQuery获取对象,获得的就是jquery对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;video&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>如果已经先获取了DOM对象,那么</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mydiv = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;video&#x27;</span>);</span><br><span class="line">$(mydiv); </span><br></pre></td></tr></table></figure></li></ol><p>注意: 不要加引号,因为mydiv已经是DOM对象了</p></li><li><p>jQuery转为DOM对象</p><p>因为jQuery获取的DOM元素都以伪数组形式保存在jQuery对象中,所以直接用索引号获取即可</p><p><code>$(元素选择器)[index]</code></p><p><code>$(元素选择器).get(index)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;video&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">$(<span class="string">&#x27;video&#x27;</span>).get(<span class="number">0</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="jQuery选择器"><a href="#jQuery选择器" class="headerlink" title="jQuery选择器"></a>jQuery选择器</h3><p><code>$(&#39;选择器’)  //其中选择器直接写CSS选择器即可,但是记得加引号!!!</code></p><h4 id="常用选择器"><a href="#常用选择器" class="headerlink" title="常用选择器"></a>常用选择器</h4><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td><code>ID选择器</code></td><td><code>$(&quot;#id&quot;)</code></td><td>获取指定ID的元素</td></tr><tr><td><code>全选选择器</code></td><td><code>$(&quot;*&quot;)</code></td><td>匹配所有元素</td></tr><tr><td><code>类选择器</code></td><td><code>$(&quot;.class&quot;)</code></td><td>获取同一类class的元素</td></tr><tr><td><code>标签选择器</code></td><td><code>$(&quot;div&quot;)</code></td><td>获取同一类标签的所有元素</td></tr><tr><td><code>并集选择器</code></td><td><code>$(&quot;div,p,li&quot;)</code></td><td>选取多个元素</td></tr><tr><td><code>交集选择器</code></td><td><code>$(&quot;li.current&quot;)</code></td><td>获取同一类标签的所有元素</td></tr></tbody></table><p><code>以及结构伪类选择器都可以使用 如 $(&#39;li:first-child&#39;)</code></p><h4 id="jQuery的层级选择器"><a href="#jQuery的层级选择器" class="headerlink" title="jQuery的层级选择器"></a>jQuery的层级选择器</h4><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td><code>子代选择器</code></td><td><code>$(&quot;ul&gt;li&quot;);</code></td><td>使用&gt;号，获取亲儿子层级的元素;注意，并不会获取孙子层级的元素</td></tr><tr><td><code>后代选择器</code></td><td><code>$(&quot;ul li);</code></td><td>使用空格，代表后代选择器，获取ul下的所有li元素，包括孙子等</td></tr></tbody></table><h4 id="jQuery的隐式迭代"><a href="#jQuery的隐式迭代" class="headerlink" title="jQuery的隐式迭代"></a>jQuery的隐式迭代</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;div&#x27;</span>).css(<span class="string">&quot;background&quot;</span>,<span class="string">&#x27;pink&#x27;</span>); </span><br></pre></td></tr></table></figure><p>以上代码的结果是全部div都变为粉色</p><div class="note info"><p>隐式迭代: 就是jquery获取元素后会暗中自动对获得的匹配元素伪数组进行遍历操作。如上面 给每个div都添加css样式,取代了原生js中的for循环</p></div><p>可以利用伪类结构选择器只对其中一个div进行修改而不进行遍历</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;div:nth-child(3)&#x27;</span>).css(<span class="string">&quot;background&quot;</span>,<span class="string">&#x27;yellow&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="jQuery筛选选择器"><a href="#jQuery筛选选择器" class="headerlink" title="jQuery筛选选择器"></a>jQuery筛选选择器</h4><table><thead><tr><th>语法</th><th>语法</th><th>描述</th></tr></thead><tbody><tr><td><code>:first</code></td><td><code>$(&quot;li:first&quot;)</code></td><td>获取第一个li元素</td></tr><tr><td><code>:last</code></td><td><code>$(&quot;li:last&quot;)</code></td><td>获取最后一个li元素</td></tr><tr><td><code>:eq(index)</code></td><td><code>$(&quot;li:eq(2)&quot;)</code></td><td>获取到的元素中，选择索引号为2的元素，索引号index从开始。</td></tr><tr><td><code>:odd</code></td><td><code>$(&quot;:odd&quot;)</code></td><td>获取到的元素中，选择索引号为奇数的元素</td></tr><tr><td><code>:even</code></td><td><code>$(&quot;li:even&quot;)</code></td><td>获取到的元素中，选择索引号为偶数的元素</td></tr></tbody></table><h4 id="jQuery筛选方法"><a href="#jQuery筛选方法" class="headerlink" title="jQuery筛选方法"></a>jQuery筛选方法</h4><table><thead><tr><th>语法</th><th>用法</th><th>说明</th></tr></thead><tbody><tr><td><code>parent()</code></td><td><code>$(&quot;li&quot;).parent();</code></td><td>查找父级</td></tr><tr><td><code>children(selector)</code></td><td><code>$(&quot;ul&quot;).chilren(&quot;li&quot;)</code></td><td>相当于 $(“ul&gt;li”) ,最近一级(亲儿子)</td></tr><tr><td><code>find(selector) </code></td><td><code>$(&quot;li&quot;).find(li&quot;);</code></td><td>相当于 $(“ul li”) ,后代选择器</td></tr><tr><td><code>siblings(selector)</code></td><td><code>$(&quot; .first&quot;).siblings(&quot;li&quot;);</code></td><td>查找兄弟节点，不包括自己本身</td></tr><tr><td><code>nextAll([expr])</code></td><td><code>$(&quot; .first&quot;).nextAll()</code></td><td>查找当前元素之后所有的同辈元素</td></tr><tr><td><code>prevtAll([expr])</code></td><td><code>$(&quot; .last&quot;).prevAll()</code></td><td>查找当前元素之前所有的同辈元素</td></tr><tr><td><code>hasClass(class)</code></td><td><code>$(&#39;div&#39;).hasClass(&quot;protected&quot;)</code></td><td>检查当前的元素是否含有某个特定的类，如果有，返回true</td></tr><tr><td><code>eq(index)</code></td><td><code>$(&quot;1i&quot;).eq(2);</code></td><td>相当于 $(“li:eq(2)”), index 从0开始</td></tr></tbody></table><ul><li><p><code>$(&#39;选择器&#39;).parent() 获取最近的父级元素</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;.son&quot;</span>).parent()); <span class="comment">//寻找son的父级元素</span></span><br></pre></td></tr></table></figure></li><li><p><code>$(&#39;选择器&#39;).parents(&quot;查找的元素&quot;)  获取指定的祖父级元素</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;.four&quot;</span>).parents(<span class="string">&quot;.one&quot;</span>));</span><br></pre></td></tr></table></figure></li><li><p><code>$(&quot;选择器&quot;).children(&quot;查找的元素&quot;) 获取最近一级的子元素 相当于 选择器&gt;查找的元素</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;.nav&quot;</span>).children(<span class="string">&quot;p&quot;</span>).css(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>); <span class="comment">//寻找nav中的亲儿子p元素</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>$(&quot;选择器&quot;).find(&quot;查找的元素&quot;) 获取所有目标子元素 相当于 选择器 查找的元素</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;.nav&quot;</span>).find(<span class="string">&quot;p&quot;</span>).css(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>); <span class="comment">//寻找nav中所有p元素</span></span><br></pre></td></tr></table></figure></li><li><p><code>$(&quot;选择器&quot;).sibling(&quot;查找的元素&quot;) 获取所有处于同一级的元素(兄弟元素)但不包括自己</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;ol .item&quot;</span>).siblings(<span class="string">&#x27;li&#x27;</span>).css(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>$(&quot;选择器&quot;).eq(index) 获取该对象中的第index个元素 相当于$(&quot;选择器:eq(index)&quot;)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;ul li&quot;</span>).eq(<span class="number">4</span>).css(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;pink&quot;</span>); <span class="comment">//获取获得的所有li中的第3个</span></span><br></pre></td></tr></table></figure><p>注: 一般采用这种写法,因为index可以写入变量</p></li></ul><h4 id="状态选择器"><a href="#状态选择器" class="headerlink" title="状态选择器"></a>状态选择器</h4><blockquote><p><code>$(&quot;xxx:checked&quot;)</code>  返回xxx中被选中的</p></blockquote><h3 id="jQuery的排他思想"><a href="#jQuery的排他思想" class="headerlink" title="jQuery的排他思想"></a>jQuery的排他思想</h3><blockquote><p>可以利用sibling轻松实现排他思想</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    $(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        $(<span class="built_in">this</span>).siblings(<span class="string">&#x27;button&#x27;</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;&quot;</span>); </span><br><span class="line">        $(<span class="built_in">this</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span><br><span class="line">    &#125;) </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="jQuery链式编程"><a href="#jQuery链式编程" class="headerlink" title="jQuery链式编程"></a>jQuery链式编程</h3><p>即可以对一个对象按顺序进行多个操作</p><p><code>每一个对象执行完操作后下一个对象都是以前一个对象为标准,而不是以第一个</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="comment">// 即可以对同个操作对象实现多个操作  </span></span><br><span class="line">    $(<span class="built_in">this</span>).css(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>).siblings(<span class="string">&#x27;button&#x27;</span>).css(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="jQuery修改css样式的方法"><a href="#jQuery修改css样式的方法" class="headerlink" title="jQuery修改css样式的方法"></a>jQuery修改css样式的方法</h3><ol><li><p>利用css属性</p><p>如果只写参数,那么则会返回属性值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;div&quot;</span>).css(<span class="string">&quot;color&quot;</span>));</span><br></pre></td></tr></table></figure><p>如果只想修改一个属性,那么 $(“目标对象”).css(“属性名”,”属性值”)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).css(<span class="string">&quot;width&quot;</span>,<span class="string">&quot;300px&quot;</span>);</span><br></pre></td></tr></table></figure><p>如果想修改多个属性,那么则以对象方式写入修改的属性和属性值。<code>$(&quot;目标对象&quot;).css(&#123;&quot;属性名1&quot;:&quot;属性值1&quot;,&quot;属性名2&quot;:&quot;属性值2&quot;,&quot;属性名2&quot;:&quot;属性值2&quot;...&#125;)</code></p><p>其中属性名双引号可加可不加,如果加则属性名按驼峰命名法写,如果不加则不变</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).css(&#123;<span class="string">&quot;width&quot;</span>:<span class="string">&quot;300px&quot;</span>,<span class="string">&quot;height&quot;</span>:<span class="string">&quot;300px&quot;</span>,<span class="string">&quot;backgroundColor&quot;</span>:<span class="string">&quot;red&quot;</span>&#125;);</span><br></pre></td></tr></table></figure></li><li><p>利用类名修改</p><p><code>$(&quot;目标对象&quot;).addClass(&#39;class_name&#39;) 添加类名</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="built_in">this</span>).addClass(<span class="string">&#x27;current&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>$(&quot;目标对象&quot;).removeClass(&#39;class_name&#39;) 移除类名</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).dblclick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    $(<span class="built_in">this</span>).removeClass(<span class="string">&#x27;current&#x27;</span>); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>$(&quot;目标对象&quot;).toggleClass(&#39;class_name&#39;) 切换类名 无则切换 有则取消</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    $(<span class="built_in">this</span>).toggleClass(<span class="string">&#x27;new&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>注意: jQuery中的类操作不会影响原有类名,addClass相当于追加类名</p><p><code>$(&quot;目标对象&quot;).hasClass(&#39;class_name&#39;) 检查目标对象是否有某个类名,返回布尔值</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>($(<span class="built_in">this</span>).hasClass(<span class="string">&#x27;fa-play&#x27;</span>)) &#123;    </span><br><span class="line">    video.play();     </span><br><span class="line">    $(<span class="built_in">this</span>).addClass(<span class="string">&#x27;fa-pause&#x27;</span>).removeClass(<span class="string">&#x27;fa-play&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;   </span><br><span class="line">    video.pause();  </span><br><span class="line">    $(<span class="built_in">this</span>).addClass(<span class="string">&#x27;fa-play&#x27;</span>).removeClass(<span class="string">&#x27;fa-pause&#x27;</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="jQuery效果"><a href="#jQuery效果" class="headerlink" title="jQuery效果"></a>jQuery效果</h3><h4 id="显示隐藏效果"><a href="#显示隐藏效果" class="headerlink" title="显示隐藏效果"></a>显示隐藏效果</h4><ul><li><p>显示效果</p><p><code>元素.show(&quot;显示速度&quot;,回调函数) 参数可写可不写</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;      </span><br><span class="line">    $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">1</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;      </span><br><span class="line">        $(<span class="string">&quot;div&quot;</span>).show(<span class="number">1000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;     </span><br><span class="line">            alert(<span class="number">1</span>);       </span><br><span class="line">        &#125;);      </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>隐藏效果</p><p><code>元素.hide(&quot;显示速度&quot;,回调函数) 参数可写可不写</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).eq(<span class="number">1</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    $(<span class="string">&quot;div&quot;</span>).hide(<span class="number">1000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;    </span><br><span class="line">        alert(<span class="number">1</span>);  </span><br><span class="line">    &#125;); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>切换显示/隐藏效果(有则消失,无则切换)</p><p><code>元素.toggle(&quot;显示速度&quot;,回调函数)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).eq(<span class="number">2</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;          </span><br><span class="line">    $(<span class="string">&quot;div&quot;</span>).toggle(<span class="number">1000</span>);      </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>注意: 一般情况下不加参数,直接显示隐藏</p></li></ul><h4 id="滑动效果"><a href="#滑动效果" class="headerlink" title="滑动效果"></a>滑动效果</h4><ul><li><p>上拉效果</p><p><code>元素.slideUp(&quot;显示速度&quot;,回调函数)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).eq(<span class="number">0</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&quot;div&quot;</span>).slideUp(<span class="number">1000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;   </span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>下拉效果</p><p><code>元素.slideDown(&quot;显示速度&quot;,回调函数)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).eq(<span class="number">1</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;          </span><br><span class="line">    $(<span class="string">&quot;div&quot;</span>).slideDown(<span class="number">1000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;            </span><br><span class="line">        flag = <span class="literal">true</span>;         </span><br><span class="line">    &#125;);       </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>切换滑动效果 下拉则上拉 上拉则下拉</p><p><code>元素.slideToggle(&quot;显示速度&quot;,回调函数)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).eq(<span class="number">2</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;        </span><br><span class="line">    $(<span class="string">&quot;div&quot;</span>).slideToggle(<span class="number">300</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;         </span><br><span class="line">        flag = <span class="literal">true</span>;         </span><br><span class="line">    &#125;);      </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="事件切换"><a href="#事件切换" class="headerlink" title="事件切换"></a>事件切换</h4><p><code>元素.hover(function() &#123;经过元素时触发的事件&#125;, function() 离开元素时触发的事件&#125;);</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;.fatheropi&gt;li&quot;</span>).hover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    $(<span class="built_in">this</span>).children(<span class="string">&quot;ul&quot;</span>).slideDown(<span class="number">300</span>);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    $(<span class="built_in">this</span>).children(<span class="string">&quot;ul&quot;</span>).slideUp(<span class="number">300</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果参数中的函数只写一个,那么经过或者离开该元素都会触发事件(一般会用toggle类事件与其搭配)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;.fatheropi&gt;li&quot;</span>).hover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    $(<span class="built_in">this</span>).children(<span class="string">&quot;ul&quot;</span>).stop().slideToggle(<span class="number">300</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="停止正在进行中的动画"><a href="#停止正在进行中的动画" class="headerlink" title="停止正在进行中的动画"></a>停止正在进行中的动画</h4><p>动画一旦触发就会执行 如果不断触发就会造成排队执行 ,利用stop()可以停止动画的执行,在动画效果中用stop()相当于停止上一次还在运行中的动画 利用这个函数可以防止动画排队执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;.fatheropi&gt;li&quot;</span>).hover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    $(<span class="built_in">this</span>).children(<span class="string">&quot;ul&quot;</span>).stop().slideToggle(<span class="number">300</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>注意: stop应写在所有有动画的元素之后及其动画之前！！！！！！ </p><h4 id="淡入淡出效果"><a href="#淡入淡出效果" class="headerlink" title="淡入淡出效果"></a>淡入淡出效果</h4><ul><li><p>淡入效果</p><p><code>元素.fadeIn(&quot;显示速度&quot;,回调函数) //参数可写可不写</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).eq(<span class="number">0</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).fadeIn(<span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>淡出效果</p><p><code>元素.fadeOut(&quot;显示速度&quot;,回调函数)  //参数可写可不写</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).eq(<span class="number">1</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;   </span><br><span class="line">    $(<span class="string">&quot;div&quot;</span>).fadeOut();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>淡入淡出切换</p><p><code>元素.fadeToggle(&quot;显示速度&quot;,回调函数) 参数可写可不写</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).eq(<span class="number">2</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="comment">// 淡出淡出切换    </span></span><br><span class="line">    $(<span class="string">&quot;div&quot;</span>).fadeToggle(<span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>改变透明度</p><p><code>元素.fadeTo(&quot;显示速度&quot;,最终透明度,回调函数) 前两个参数必写</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).eq(<span class="number">3</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;   </span><br><span class="line">    $(<span class="string">&quot;div&quot;</span>).fadeTo(<span class="string">&quot;normal&quot;</span>,<span class="number">.1</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><p><code>注意: fadeTo和fadeIn、fadeOut不能搭配使用!!!</code></p><h4 id="自定义动画效果"><a href="#自定义动画效果" class="headerlink" title="自定义动画效果"></a>自定义动画效果</h4><p><code>元素名.animate(&#123;样式名1: 样式值,样式名2: 样式值...&#125;,速度,速度曲线,回调函数)</code></p><p>document不能设置动画！！！！！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).animate(&#123;<span class="attr">left</span>:<span class="number">200</span>,<span class="attr">top</span>:<span class="number">500</span>&#125;,<span class="number">300</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="built_in">this</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;green&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="jQuery属性操作"><a href="#jQuery属性操作" class="headerlink" title="jQuery属性操作"></a>jQuery属性操作</h3><blockquote><p>原有属性的操作(prop)</p></blockquote><h4 id="获取原有属性值"><a href="#获取原有属性值" class="headerlink" title="获取原有属性值"></a>获取原有属性值</h4><p><code>元素.prop(&quot;属性名&quot;)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;a&quot;</span>).prop(<span class="string">&quot;href&quot;</span>));</span><br></pre></td></tr></table></figure><h4 id="修改原有属性值"><a href="#修改原有属性值" class="headerlink" title="修改原有属性值"></a>修改原有属性值</h4><p><code>元素.prop(&quot;属性名,&quot;属性值&quot;)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;a&quot;</span>).prop(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;shabi&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="自定义属性的操作-attr"><a href="#自定义属性的操作-attr" class="headerlink" title="自定义属性的操作(attr)"></a>自定义属性的操作(attr)</h4><ul><li><p>获取自定义属性值</p><p><code>元素.attr(&quot;属性名&quot;)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;div&quot;</span>).attr(<span class="string">&quot;index&quot;</span>));</span><br></pre></td></tr></table></figure></li><li><p>修改自定义属性值</p><p><code>元素.attr(&quot;属性名&quot;,&quot;属性值&quot;)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).attr(<span class="string">&quot;index&quot;</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure></li></ul><h4 id="属性数据的缓存-data"><a href="#属性数据的缓存-data" class="headerlink" title="属性数据的缓存(data)"></a>属性数据的缓存(data)</h4><ul><li><p>缓存数据</p><p><code>元素名.data(&quot;属性名&quot;,属性值)</code>: 不会给元素添加该属性名,只是保存,以便后面调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;span&quot;</span>).data(<span class="string">&quot;uname&quot;</span>,<span class="string">&quot;andy&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>调取数据</p><p><code>元素名.data(&quot;属性名&quot;)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;span&quot;</span>).data(<span class="string">&quot;uname&quot;</span>));</span><br></pre></td></tr></table></figure><p>同时还可以获取元素用data-xx定义的自定义属性 直接写后面名字即可 不用加data</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-index</span>=<span class="string">&quot;2&quot;</span> <span class="attr">data-name</span>=<span class="string">&quot;uuu&quot;</span>&gt;</span> </span><br><span class="line">    11   </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">&quot;div&quot;</span>).data(<span class="string">&quot;name&quot;</span>));</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><code>注意: 以上方法设置属性时,如果属性值是布尔值,不用加双引号</code></p><h3 id="jQuery获取文本内容"><a href="#jQuery获取文本内容" class="headerlink" title="jQuery获取文本内容"></a>jQuery获取文本内容</h3><h4 id="获取设置元素所有内容"><a href="#获取设置元素所有内容" class="headerlink" title="获取设置元素所有内容"></a>获取设置元素所有内容</h4><p><code>$(元素).html()</code>:  相当于innerHTML 返回元素的内容(包括标签)</p><p><code>$(元素).html(&quot;xxx&quot;)</code>:  给元素添加内容XXX</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;div&quot;</span>).html()); </span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).html(<span class="string">&quot;345&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="获取设置元素的文本内容"><a href="#获取设置元素的文本内容" class="headerlink" title="获取设置元素的文本内容"></a>获取设置元素的文本内容</h4><p><code>$(元素).text()</code>: 相当于innerText 获取元素的文本内容(只有文本,没有标签)</p><p><code>$(元素).text(&quot;xxxx&quot;)</code>: 设置元素文文内容为xxx</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;div&quot;</span>).text()); $(<span class="string">&quot;div&quot;</span>).text(<span class="string">&quot;jjj&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="获取设置表单值"><a href="#获取设置表单值" class="headerlink" title="获取设置表单值"></a>获取设置表单值</h4><p><code>$(表单元素).val()</code>:  相当于value 获取表单元素的值</p><p><code>$(表单元素).val(&quot;xxxx&quot;)</code>:  将表单的值设置为xxxx</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;input&quot;</span>).val();</span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;input&quot;</span>).val());</span><br><span class="line">$(<span class="string">&quot;input&quot;</span>).val(<span class="string">&quot;123&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="jQuery元素的操作"><a href="#jQuery元素的操作" class="headerlink" title="jQuery元素的操作"></a>jQuery元素的操作</h3><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><ol><li><p><code>$(&quot;元素&quot;).each(function(index,domEle)&#123;&#125;)</code>:  其中index为索引值 domEle为DOM元素,不是jQuery元素,所以要使用jQuery方法必须加$</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">index,domEle</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index); </span><br><span class="line">    <span class="comment">// domEle.css(&quot;color&quot;,&quot;red&quot;);</span></span><br><span class="line">    <span class="comment">// 错误</span></span><br><span class="line">    $(domEle).css(<span class="string">&quot;color&quot;</span>,arr[index]);</span><br><span class="line">    sum += <span class="built_in">parseInt</span>($(domEle).text());</span><br><span class="line">    <span class="comment">// 注意返回的是字符串 要转为数字型</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>注意: 也可以遍历数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;red&quot;</span>,<span class="string">&quot;yellow&quot;</span>,<span class="string">&quot;blue&quot;</span>];</span><br><span class="line">$(arr).each(<span class="function"><span class="keyword">function</span>(<span class="params">index,domEle</span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(index); </span><br><span class="line">    <span class="built_in">console</span>.log(domEle); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><code>$.each($(&quot;元素&quot;),function(index,domEle)&#123;&#125;)</code>:  function中参数和上面一样</p><p><code>注意: 一般该方法用于遍历数据,可以遍历元素数组对象</code></p><p><code>遍历对象时,第一个参数是属性名,第二个为属性值</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$.each($(<span class="string">&quot;div&quot;</span>),<span class="function"><span class="keyword">function</span>(<span class="params">i,ele</span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">    <span class="built_in">console</span>.log(ele);</span><br><span class="line">&#125;)</span><br><span class="line">$.each(arr,<span class="function"><span class="keyword">function</span>(<span class="params">i,ele</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">    <span class="built_in">console</span>.log(ele);</span><br><span class="line">&#125;) </span><br><span class="line">$.each(&#123;<span class="attr">name</span>:<span class="string">&quot;andy&quot;</span>,<span class="attr">age</span>:<span class="string">&quot;19&quot;</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">i,ele</span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(i); </span><br><span class="line">    <span class="built_in">console</span>.log(ele);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="jQuery添加删除元素"><a href="#jQuery添加删除元素" class="headerlink" title="jQuery添加删除元素"></a>jQuery添加删除元素</h3><ol><li><p>创建元素</p><p><code>var 变量 = $(&quot;添加的元素&quot;)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> li = $(<span class="string">&quot;&lt;li&gt;new&lt;/li&gt;&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>添加元素</p><ul><li><p>内部添加(添加完为父子关系)</p><p><code>$(&quot;父元素&quot;).append(添加的元素)</code>: 添加到父元素最后面 相当于appendChild</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;ul&quot;</span>).append(li);</span><br></pre></td></tr></table></figure><p><code>$(&quot;父元素&quot;).prepend(添加的元素)</code>: 添加到父元素最前面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;ul&quot;</span>).prepend(li);</span><br></pre></td></tr></table></figure></li><li><p>外部添加(添加完为兄弟关系)</p><p><code>$(&quot;元素&quot;).after(添加的元素) 添加到元素后面</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;.test&quot;</span>).after(div);</span><br></pre></td></tr></table></figure><p><code>$(&quot;元素&quot;).before(添加的元素)</code>: 添加到元素前面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;.test&quot;</span>).before(div);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>删除元素</p><p><code>$(&quot;元素&quot;).remove()</code>: 删除元素本身 自杀</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;ul&quot;</span>).remove();</span><br></pre></td></tr></table></figure><p><code>$(&quot;元素&quot;).empty()</code>: 删除元素的所有子节点</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;ul&quot;</span>).empty();</span><br></pre></td></tr></table></figure></li></ol><h3 id="jQuery尺寸方法"><a href="#jQuery尺寸方法" class="headerlink" title="jQuery尺寸方法"></a>jQuery尺寸方法</h3><p><code>$(&quot;元素&quot;).width()/height()</code>: 只能获取内容高宽 不包含 <code>margin padding borer</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;div&quot;</span>).width()); </span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).width(<span class="number">300</span>);</span><br></pre></td></tr></table></figure><p><code>$(&quot;元素&quot;).innerWidth/innerHeight</code>: 获取 <code>width+padding  == clientWidth</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).innerWidth(<span class="number">400</span>);</span><br></pre></td></tr></table></figure><p><code>$(&quot;元素&quot;).outerWidth/outerHeight</code>: 获取 <code>width+padding+border  == offsetWidth</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;div&quot;</span>).outerWidth());</span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;div&quot;</span>).outerWidth(<span class="literal">true</span>));</span><br></pre></td></tr></table></figure><p>如果加参数true,则会加上margin</p><p><code>注意: 如果以上所有的参数为空,则是获取相应值,返回数字型。如果参数是数字,则是修改相应值,参数不用加单位</code></p><h3 id="jQuery位置获取"><a href="#jQuery位置获取" class="headerlink" title="jQuery位置获取"></a>jQuery位置获取</h3><p><code>$(&quot;元素&quot;).offset()</code>:  获取元素距离文档的距离,跟父元素无关。获取的值包含了top和left,为对象形式,添加参数可以修改</p><p><code>$(&quot;元素&quot;).offset().top/left</code>:  获取元素距离文档顶部/左边的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;.son&quot;</span>).offset());</span><br><span class="line">$(<span class="string">&quot;.son&quot;</span>).offset(&#123;  </span><br><span class="line">    top:<span class="number">200</span>,  </span><br><span class="line">    left:<span class="number">200</span>  </span><br><span class="line">&#125;) <span class="comment">//修改</span></span><br></pre></td></tr></table></figure><p><code>$(&quot;元素&quot;).position()</code>:  获取目标元素距离带有定位的父级元素的距离,如果父级都没有定位,则以文档为准,也是返回对象形式,<code>只能获取不能设置</code>  == <code>offsetLeft/offsetTop</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;.son&quot;</span>).position());</span><br></pre></td></tr></table></figure><p><code>$(&quot;元素&quot;).scrollTop/scrollLeft</code>:  获取元素头部/左边被卷去的距离,加参数可以修改卷动距离 也可应用于动画</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log($(<span class="built_in">document</span>).scrollTop()); </span><br><span class="line">$(<span class="built_in">document</span>).scrollTop(<span class="number">0</span>); 实现页面直接滚回顶部</span><br></pre></td></tr></table></figure><h3 id="jQuery事件"><a href="#jQuery事件" class="headerlink" title="jQuery事件"></a>jQuery事件</h3><h4 id="jQuery事件注册"><a href="#jQuery事件注册" class="headerlink" title="jQuery事件注册"></a>jQuery事件注册</h4><ol><li><p>单个事件注册</p><p><code>$(&quot;元素&quot;).xxxx(function() &#123;&#125;)</code>:  与原生js差不多</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    $(<span class="built_in">this</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;red&quot;</span>); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>缺点: 一次只能绑定一个事件,而且无法给动态创建的元素绑定事件(不会动态更改元素指向)</p></li><li><p>多个事件注册</p><p><code>$(&quot;元素&quot;).on()</code>: 与addEventListener相似</p><ul><li><p>绑定一个事件</p><p><code>$(&quot;元素&quot;).on(事件类型,函数)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).on(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    alert(<span class="string">&quot;wocanima1&quot;</span>); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>多个事件触发同个函数</p><p><code>$(&quot;元素&quot;).on(&quot;事件类型1 事件类型2 ...&quot;,函数)</code>:  相当于hover的写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).on(<span class="string">&quot;mouseenter mouseleave&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    $(<span class="built_in">this</span>).toggleClass(<span class="string">&#x27;current&#x27;</span>); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>多个事件分别触发不同函数 (以对象形式书写)</p><p><code>$(&quot;元素&quot;).on(&#123;事件类型1:函数1,事件类型2:函数2,事件类型3:函数3&#125;...)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).on(&#123; <span class="attr">mouseenter</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    $(<span class="built_in">this</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span><br><span class="line">&#125;, <span class="attr">click</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    $(<span class="built_in">this</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;skyblue&quot;</span>);</span><br><span class="line">&#125;, <span class="attr">mouseleave</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    $(<span class="built_in">this</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>利用on实现事件委托(把原来绑定在子元素的事件绑定在父元素上,可以免去重复给同类元素定义事件)</p><p><code>$(&quot;元素&quot;).on(事件类型,触发对象,函数)</code></p><p>其中$(this)指向的是实参中的触发对象)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;ul&quot;</span>).on(<span class="string">&quot;click&quot;</span>,<span class="string">&quot;li&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="comment">// 绑定的是ul,但是触发的是li </span></span><br><span class="line">    alert(<span class="number">11</span>);</span><br><span class="line">    $(<span class="built_in">this</span>).html(<span class="string">&quot;ojbk&quot;</span>); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h4 id="jQuery事件解绑"><a href="#jQuery事件解绑" class="headerlink" title="jQuery事件解绑"></a>jQuery事件解绑</h4><p><code>$(&quot;元素&quot;),off()</code></p><ol><li><p>解绑全部事件</p><p><code>$(&quot;元素&quot;).off()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).off(); </span><br></pre></td></tr></table></figure></li><li><p>解绑指定事件</p><p><code>$(&quot;元素&quot;).off(事件类型)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).off(<span class="string">&quot;click&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>解绑事件委托</p><p><code>$(&quot;元素&quot;).off(事件类型,触发对象)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;ul&quot;</span>).off(<span class="string">&quot;click&quot;</span>,<span class="string">&quot;li&quot;</span>);</span><br></pre></td></tr></table></figure></li></ol><h4 id="one事件-只能触发事件一次"><a href="#one事件-只能触发事件一次" class="headerlink" title="one事件(只能触发事件一次)"></a>one事件(只能触发事件一次)</h4><p><code>$(&quot;元素&quot;).one(事件类型,函数)</code>:  语法与on相同</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).one(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    alert(<span class="number">11</span>); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>该事件注册后点击一次后就失效了</code></p><h3 id="自动触发事件"><a href="#自动触发事件" class="headerlink" title="自动触发事件"></a>自动触发事件</h3><ol><li><p><code>$(&quot;元素&quot;).click()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).click();</span><br></pre></td></tr></table></figure></li><li><p><code>$(&quot;元素&quot;).trigger(&quot;事件类型&quot;)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).trigger(<span class="string">&#x27;click&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>$(&quot;元素&quot;).triggerHandler(&quot;事件类型&quot;)  与上面的区别为这个方法不会触发默认事件</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).triggerHandler(<span class="string">&#x27;click&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ol><h3 id="事件对象-与原生基本一致"><a href="#事件对象-与原生基本一致" class="headerlink" title="事件对象(与原生基本一致)"></a>事件对象(与原生基本一致)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).on(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.stopPropagation(); </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;点击了div&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="jQuery其他方法"><a href="#jQuery其他方法" class="headerlink" title="jQuery其他方法"></a>jQuery其他方法</h3><h4 id="元素拷贝"><a href="#元素拷贝" class="headerlink" title="元素拷贝"></a>元素拷贝</h4><p><code>$.extend([deep],拷贝给谁,拷贝谁1,拷贝谁2,...)</code>: deep属性可以选填 默认为浅拷贝 如果为true 则是深拷贝</p><ul><li><p>浅拷贝</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> targetobj = &#123;&#125;; </span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    id:<span class="number">1</span>,</span><br><span class="line">    name:<span class="string">&quot;andy&quot;</span>,</span><br><span class="line">    msg:&#123; </span><br><span class="line">        age:<span class="number">19</span> </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">$.extend(targetobj,obj);</span><br></pre></td></tr></table></figure></li><li><p>深拷贝</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> targetobj = &#123;&#125;; </span><br><span class="line"><span class="keyword">var</span> obj = &#123; </span><br><span class="line">    id:<span class="number">1</span>, </span><br><span class="line">    name:<span class="string">&quot;andy&quot;</span>,</span><br><span class="line">    msg:&#123;</span><br><span class="line">        age:<span class="number">18</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$.extend(<span class="literal">true</span>,targetobj,obj);</span><br></pre></td></tr></table></figure></li></ul><h3 id="多库共存"><a href="#多库共存" class="headerlink" title="多库共存"></a>多库共存</h3><ol><li><p>如果$符号冲突 则用jquery关键字代替</p></li><li><p>或者用定义一个变量,替换$  </p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xx = $.noConflict();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span>  suibian = $.noConflict();</span><br><span class="line"><span class="built_in">console</span>.log(suibian(<span class="string">&quot;div&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="关于数据储存"><a href="#关于数据储存" class="headerlink" title="关于数据储存"></a>关于数据储存</h3><blockquote><p>本地存储只能存储字符串的数据格式</p></blockquote><p><code>JSON.stringify()</code>:  把数组对象转为字符串格式,以便赋予本地存储</p><p><code>JSON.parse()</code>: 把本地存储的数据转为对象格式,以便修改本地存储的视距</p>]]></content>
      
      
      <categories>
          
          <category> Web教程 </category>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jekyll+WebStack生成静态页面</title>
      <link href="/posts/d0fdeff9/"/>
      <url>/posts/d0fdeff9/</url>
      
        <content type="html"><![CDATA[<h2 id="为何要安装Jekyll"><a href="#为何要安装Jekyll" class="headerlink" title="为何要安装Jekyll"></a>为何要安装Jekyll</h2><div class="note info"><p>需要一个导航页面用于白嫖与日常使用、WebStack用Jekyll搭建比较好、所以安装试试。</p></div><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="下载安装Ruby"><a href="#下载安装Ruby" class="headerlink" title="下载安装Ruby"></a>下载安装Ruby</h3><p>Windows用户，通过 <a href="https://rubyinstaller.org/downloads/">官方网站</a> 下载，使用网站推荐的就好，下图中，网站推荐的就是 Ruby+Devkit 2.6.6-1 (x64)</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200523101023.png"></p><div class="note info"><p>下载速度太慢、记得开VPN</p></div><p>下载完成之后、直接安装、可以修改一下安装位置</p><h3 id="下载和安装-RubyGems"><a href="#下载和安装-RubyGems" class="headerlink" title="下载和安装 RubyGems"></a>下载和安装 RubyGems</h3><blockquote><p>RubyGems 是 Ruby 的包管理器，可以类比为你电脑的下载中心。</p></blockquote><p>去下面 <a href="https://rubygems.org/pages/download">这个链接</a> 下载 zip 文件到本地，然后解压</p><p>进入 cmd 后，cd 到解压目录，输入命令 <code>ruby setup.rb</code></p><h3 id="安装Jekyll"><a href="#安装Jekyll" class="headerlink" title="安装Jekyll"></a>安装Jekyll</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gem <span class="built_in">source</span> --remove https://rubygems.org/</span><br><span class="line"></span><br><span class="line">gem sources -a https://gems.ruby-china.com/</span><br><span class="line"></span><br><span class="line">gem <span class="built_in">source</span> </span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install bundler</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install jekyll</span><br></pre></td></tr></table></figure><p>等待安装完成就可以了(有点慢)</p><h2 id="使用WebStack"><a href="#使用WebStack" class="headerlink" title="使用WebStack"></a>使用WebStack</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:0xl2oot/webstack-jekyll.git</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bundle <span class="built_in">exec</span> jekyll serve</span><br></pre></td></tr></table></figure><ul><li><p><a href="https://www.jianshu.com/p/f43a75ed16d0">参考链接</a></p></li><li><p>遇到的问题解决办法</p><ul><li><a href="https://blog.csdn.net/haoaiqian/article/details/80194668">解决运行jekyll serve时报错</a></li><li><a href="https://blog.csdn.net/u014621915/article/details/62221705">gem 安装与使用</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Jekyll </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
            <tag> Jekyll </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript高级</title>
      <link href="/posts/8cde864d/"/>
      <url>/posts/8cde864d/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript高级"><a href="#JavaScript高级" class="headerlink" title="JavaScript高级"></a>JavaScript高级</h2><div class="note danger"><p>本教程里的资料来源于网友的资料,自己整理以供学习。视频学习: <a href="https://www.bilibili.com/video/BV1X7411n72U">黑马程序员</a></p></div><h3 id="两大编程思想"><a href="#两大编程思想" class="headerlink" title="两大编程思想"></a>两大编程思想</h3><blockquote><p>(面向过程,面向对象)</p></blockquote><h4 id="面向过程pop"><a href="#面向过程pop" class="headerlink" title="面向过程pop"></a>面向过程pop</h4><blockquote><p><code>process-oriented programming</code>:  分析出问题所需的步骤,然后用函数把这些步骤一步一步实现,使用的时候再一个一个调用(蛋炒饭)</p></blockquote><ul><li><p>优点: 性能高,适合跟硬件紧密联系</p></li><li><p>缺点: 没有面向对象易维护、易复用、易扩展</p></li></ul><h4 id="面向对象oop"><a href="#面向对象oop" class="headerlink" title="面向对象oop"></a>面向对象oop</h4><blockquote><p><code>object-oriented programming</code>: 把事务分解成一个一个对象,然后对象之间分工与合作(盖浇饭)适用于复杂的项目</p></blockquote><ul><li><p>优点: 易维护、易复用、易扩展,可以设计出低耦合的系统。使系统更加灵活、更加易于维护</p></li><li><p>缺点: 性能比面向过程低</p></li></ul><h4 id="面向对象的特性"><a href="#面向对象的特性" class="headerlink" title="面向对象的特性"></a>面向对象的特性</h4><ol><li><p>封装性: 即封装后无需知道原理,运行即可</p></li><li><p>继承性: 某个接口的功能继承于其父亲</p></li><li><p>多态性: 多个工作状态</p></li></ol><h4 id="面向对象的思维特点"><a href="#面向对象的思维特点" class="headerlink" title="面向对象的思维特点"></a>面向对象的思维特点</h4><ol><li><p>抽取(抽象)对象公用的属性和行为阻止(封装)成一个类(模板)</p></li><li><p>对类进行实例化,获取类的对象</p></li></ol><h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><blockquote><p>类抽象了对象的公共部分,泛指一大类</p></blockquote><p>类和对象的区别: 对象是具体的,而类是所有同类具体对象的共同属性方法的集合。可以通过类实例化一个具体的对象</p><h3 id="类-ES6"><a href="#类-ES6" class="headerlink" title="类(ES6)"></a>类(ES6)</h3><h4 id="类的创建"><a href="#类的创建" class="headerlink" title="类的创建"></a>类的创建</h4><p><code>class name &#123;  // class body&#125;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Star</span> </span>&#123; </span><br><span class="line">    <span class="keyword">constructor</span>(uname,age) &#123; </span><br><span class="line">        <span class="built_in">this</span>.uname = uname; </span><br><span class="line">        <span class="built_in">this</span>.age = age; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>类constructor构造函数</code>: 用于传递参数,返回实例,通过 new 命令生成对象实例时,自动调用该方法。如果没有显示定义,类内部会自动创建一个 constructor()。即将参数传递给实例对应的属性或方法。</p><h4 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h4><blockquote><p>必须用new创建实例</p></blockquote><p><code>var xx = new name(参数);</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Star(<span class="string">&#x27;刘德华&#x27;</span>,<span class="number">20</span>);</span><br></pre></td></tr></table></figure><p>注意: </p><ol><li><p>通过 class 创建类,类名首字母大写</p></li><li><p>类里面有 constructor 函数,可以传递实参,同时返回实例, constructor 记得加小括号</p></li><li><p>只要 new 生成实例时,就会自动调用这个函数</p></li><li><p>生成实例 new 不能省略</p></li><li><p>创建类时类名后没有小括号,生成实例时类名后一定有小括号用于传递实参,构造函数不需要加 function()</p></li></ol><h4 id="类中添加方法"><a href="#类中添加方法" class="headerlink" title="类中添加方法"></a>类中添加方法</h4><blockquote><p>实质为添加在原型对象中</p></blockquote><p><code>class name &#123;  函数名()&#123;&#125;&#125;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Star</span> </span>&#123; </span><br><span class="line">    <span class="keyword">constructor</span>(uname,age) &#123; </span><br><span class="line">        <span class="built_in">this</span>.uname = uname; </span><br><span class="line">        <span class="built_in">this</span>.age = age; </span><br><span class="line">    &#125; </span><br><span class="line">    sing(song) &#123;    </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;我在唱歌&#x27;</span>); </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.uname + song);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意: </p><ol><li><p>直接添加在 constructor 之后</p></li><li><p>可传递参数</p></li><li><p>可添加多个方法</p></li><li><p>可在方法中调用该对象属性</p></li></ol><ul><li><p>添加类方法</p><p>在函数前面加 static 保留字即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Big</span> </span>&#123; </span><br><span class="line">    <span class="keyword">static</span> big() &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;i&#x27;m private!&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">Big.big();</span><br></pre></td></tr></table></figure></li></ul><h4 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h4><blockquote><p>子类可以继承父类的一些属性和方法</p></blockquote><h5 id="继承语法"><a href="#继承语法" class="headerlink" title="继承语法"></a>继承语法</h5><p><code>class Son extends Father &#123;&#125; </code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123; </span><br><span class="line">    &#125; </span><br><span class="line">    money() &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">100</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123; </span><br><span class="line">    </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> Son(); </span><br><span class="line">son.money();</span><br></pre></td></tr></table></figure><h5 id="super-关键字"><a href="#super-关键字" class="headerlink" title="super 关键字"></a>super 关键字</h5><p>用于访问和调用对象父类上的函数。可以调用父类的构造函数,也可以调用父类的普通函数</p><ol><li><p>利用 super 调用构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123; </span><br><span class="line">    <span class="keyword">constructor</span>(x,y) &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x; </span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">    &#125; sum() &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.x + <span class="built_in">this</span>.y);</span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(z,v) &#123; </span><br><span class="line">        <span class="built_in">super</span>(z,v);</span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> Son(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">son.sum();</span><br></pre></td></tr></table></figure><p>即继承的本质是通过子类到父类中去执行函数,如果没有用 super 调用父类的函数,那么子类的形参无法传给父类,也就得不出结果。只有在子类的构造函数 constructor 中使用 super 调用父类的构造函数,才能将形参传给父类。</p></li><li><p>利用 super 调用普通函数</p><p><code>super.父类中的函数名()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123; </span><br><span class="line">    say() &#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;woshibaba&#x27;</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123; </span><br><span class="line">    say() &#123;  </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">super</span>.say() + <span class="string">&#x27;deerzi&#x27;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> Son(); </span><br><span class="line">son.say(); <span class="comment">// 就近原则调用</span></span><br><span class="line"><span class="comment">// 继承中属性或者方法查找原则: 就近原则</span></span><br></pre></td></tr></table></figure><p>调用原则: 就近原则。如果子类调用了一个函数,则先查看子类中有无此函数,如果没有,就去父类中寻找,super 可视为等于f ather</p></li></ol><h5 id="子类继承父类方法同时扩展自己的方法"><a href="#子类继承父类方法同时扩展自己的方法" class="headerlink" title="子类继承父类方法同时扩展自己的方法"></a>子类继承父类方法同时扩展自己的方法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(x,y) &#123; </span><br><span class="line">        <span class="built_in">this</span>.x = x; </span><br><span class="line">        <span class="built_in">this</span>.y =y; </span><br><span class="line">    &#125; </span><br><span class="line">    sum() &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.x + <span class="built_in">this</span>.y);</span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(x,y) &#123; </span><br><span class="line">        <span class="built_in">super</span>(x,y); </span><br><span class="line">        <span class="built_in">this</span>.x = x; </span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">    &#125; </span><br><span class="line">    substract() &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.x -<span class="built_in">this</span>.y); </span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> Son(<span class="number">5</span>,<span class="number">3</span>); </span><br><span class="line">son.substract(); </span><br><span class="line">son.sum();</span><br></pre></td></tr></table></figure><p>重点: 构造函数里有 this 和 super 的时候,super 一定要写在this之前,父亲为大！</p><h4 id="使用类注意事项"><a href="#使用类注意事项" class="headerlink" title="使用类注意事项"></a>使用类注意事项</h4><ol><li><p>ES6 中没有变量提升,所以必须先定义类,才能通过类实例化对象</p></li><li><p>类里面的共有的属性和方法必须一定要加 this 使用</p></li><li><p>可以通过在构造函数里this.函数名直接调用方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> that;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Star</span> </span>&#123; </span><br><span class="line">    <span class="keyword">constructor</span>(uname,age) &#123; </span><br><span class="line">        that = <span class="built_in">this</span>; </span><br><span class="line">        <span class="comment">//constructor里面的this指向创建的实例对象</span></span><br><span class="line">        <span class="built_in">this</span>.uname = uname; </span><br><span class="line">        <span class="built_in">this</span>.age =age; </span><br><span class="line">        <span class="built_in">this</span>.sing(); </span><br><span class="line">    &#125; </span><br><span class="line">    sing() &#123;  </span><br><span class="line">        <span class="comment">// this 指向实例 </span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>constructor 里面的 this 指向创建的实例对象,方法中的 this 指向调用者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> that;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Star</span> </span>&#123;</span><br><span class="line">    constructor(uname,age) &#123; </span><br><span class="line">        that = <span class="keyword">this</span>; </span><br><span class="line">        <span class="comment">//constructor里面的this指向创建的实例对象 </span></span><br><span class="line">        <span class="keyword">this</span>.uname = uname; </span><br><span class="line">        <span class="keyword">this</span>.age =age; </span><br><span class="line">        <span class="keyword">this</span>.sing();  </span><br><span class="line">        <span class="keyword">this</span>.btn = document.querySelector(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">        <span class="keyword">this</span>.btn.onclick = <span class="keyword">this</span>.dance; </span><br><span class="line">    &#125; </span><br><span class="line">    sing() &#123;     </span><br><span class="line">        <span class="comment">// this 指向实例 </span></span><br><span class="line">        console.log(<span class="keyword">this</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    dance() &#123; </span><br><span class="line">        <span class="comment">//指向btn的uname </span></span><br><span class="line">        console.log(<span class="keyword">this</span>.uname); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="ES6中的类的本质"><a href="#ES6中的类的本质" class="headerlink" title="ES6中的类的本质"></a>ES6中的类的本质</h4><ol><li>class 本质还是 function.</li><li>类的所有方法都定义在类的 prototype 属性上</li><li>类创建的实例里面也有<code>__proto__</code> 指向类的 prototype 原型对象</li><li>所以 ES6 的类它的绝大部分功能,  ES5 都可以做到,新的 class 写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。</li><li>所以 ES6 的类其实就是语法糖</li><li>语法糖语法糖就是一种便捷写法简单理解,有两种方法可以实现同样的功能但是一种写法更加清晰、方便<br> 那么这个方法就是语法糖</li></ol><p>扩展方法: </p><ul><li><p><code>xx.select()</code>:  实现 xx 元素的选中</p></li><li><p><code>xx.blur()</code>:  实现 xx 元素的失焦</p></li></ul><h3 id="构造函数和原型-ES5"><a href="#构造函数和原型-ES5" class="headerlink" title="构造函数和原型(ES5)"></a>构造函数和原型(ES5)</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ul><li><p>在典型的 OOP 的语言中(如 Java ) , 都存在类的概念,类就是对象的模板,对象就是类的实例,但在 ES6 之前,<br>JS中并没用引入类的概念。</p></li><li><p>ES6 前 JS 没有类,通过构造函数来定义</p></li><li><p>ES6 ,全称 ECMAScript6.0 , 2015.06发版。但是目前浏览器的 JavaScript 是 ES5 版本,大多数高版本的浏<br>览器也支持 ES6,不过只实现了 ES6 的部分特性和功能。<br>在 ES6 之前,对象不是基于类创建的,而是用一种称为<code>构造函数</code>的特殊函数来定义对象和它们的特征。</p></li></ul><h4 id="创建对象三种方式"><a href="#创建对象三种方式" class="headerlink" title="创建对象三种方式"></a>创建对象三种方式</h4><ol><li><p>通过new Object创建对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br></pre></td></tr></table></figure></li><li><p>通过字面量创建对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj2 = &#123;&#125;;</span><br></pre></td></tr></table></figure></li><li><p>通过构造函数创建对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">uname,age</span>) </span>&#123; </span><br><span class="line">    <span class="built_in">this</span>.uname = uname; </span><br><span class="line">    <span class="built_in">this</span>.age = age; </span><br><span class="line">    <span class="built_in">this</span>.sing = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;我会唱歌&#x27;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Star(<span class="string">&#x27;刘德华&#x27;</span>,<span class="number">18</span>);</span><br></pre></td></tr></table></figure></li><li><p>对象的增强写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;zykj&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj3 = &#123;</span><br><span class="line">    name,</span><br><span class="line">    age</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="静态成员和实例成员"><a href="#静态成员和实例成员" class="headerlink" title="静态成员和实例成员"></a>静态成员和实例成员</h4><blockquote><p>实例成员: 包括了实例方法和实例属性。<code>通过构造函数内部 this 创建的成员</code>,比如上面的 uname ,age , sing()</p></blockquote><p><code>实例成员只能通过实例访问</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Star(<span class="string">&#x27;刘德华&#x27;</span>,<span class="number">20</span>); </span><br><span class="line"><span class="built_in">console</span>.log(ldh.uname);</span><br></pre></td></tr></table></figure><p><code>不能通过构造函数访问</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Star.uname); <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure><blockquote><p>静态成员: 即类属性和类方法(如Number.MAX_VALUE)。构造函数本身添加的成员,如</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Star.sex = <span class="string">&#x27;man&#x27;</span>;</span><br></pre></td></tr></table></figure><p><code>静态成员只能通过构造函数访问</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Star.sex);</span><br></pre></td></tr></table></figure><p><code>不能通过实例访问</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(ldh.sex); <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><div class="note danger"><p>重要内容、忘记了记得看<a href="https://www.bilibili.com/video/BV1X7411n72U?p=26">原型</a></p></div><blockquote><p>JS规定每一个构造函数都有一个 prototype 属性,指向一个原型对象。当函数被定义的时候,prototype 属性会自动创建和初始化。这个对象拥有的属性和方法都会被构造函数所拥有。即通过 prototype 定义的属性和方法都会自动成为该其构造函数创建实例所共有的属性和方法(prototype只有构造函数有,对象实例没有)</p></blockquote><p>作用: 共享作用,可以把那些<code>不变的方法</code>,直接定义在 Prototype 对象上,这样所有对象的实例就可以<code>共享这些方法</code>。</p><p>优点: </p><ol><li><p>使用原型对象可以显著减少每个对象所需的内存数量,因为对象可以继承原型的很多属性。</p></li><li><p>即便是在对象创建以后才添加到原型中的属性,对象也可以继承它</p></li></ol><p><code>例</code> : </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Star.prototype.sing = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;我会唱歌&#x27;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Star(<span class="string">&#x27;刘德华&#x27;</span>,<span class="number">18</span>); </span><br><span class="line">ldh.sing();</span><br></pre></td></tr></table></figure><p>注意: 继承的属性依旧可以用 for/in 来枚举,in 运算符依旧起效。只能用 Object.hasOwnProperty() 来区分继承的属性和常规的属性</p><h4 id="对象原型-proto"><a href="#对象原型-proto" class="headerlink" title="对象原型 __proto__"></a>对象原型 <code>__proto__</code></h4><p>每个实例对象(包括原型对象)都有一个属性<code>__proto__</code>(是两个杠),指向构造这个对象的构造函数的原型对象,对象通过<code>__proto__</code>就可以调用其中的属性和原型(即<code>__proto__</code>和<code>prototype</code>是等价的)</p><p>开发中不可以使用<code>__proto__</code>这个属性,不可对其赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldh.sing(); <span class="comment">// 等价于 ldh.__proto__.sing()</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200501212254.png"></p><p><code>即构造函数只能通过prototype属性获取原型对象,而实例对象必须通过proto获取原型对象</code></p><h4 id="原型对象中的-constructor-属性"><a href="#原型对象中的-constructor-属性" class="headerlink" title="原型对象中的 constructor 属性"></a>原型对象中的 constructor 属性</h4><p>原型对象初始化后只有一个属性 constructor</p><p><code>构造函数.prototype.constructor</code>  或 <code>对象实例. proto.constructor ( proto 可以省略) </code>可以返回这个对象所引用的构造函数(只会返回其构造函数,没有对象实例)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(ldh.__proto__.constructor) </span><br><span class="line"><span class="built_in">console</span>.log(Star.prototype.constructor)</span><br></pre></td></tr></table></figure><p>如果我们修改了原来的原型对象,给原型对象赋值的是一个对象，则必须手动的利用constructor指回原来的构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">uname,age</span>) </span>&#123; </span><br><span class="line">       <span class="built_in">this</span>.uname = uname; </span><br><span class="line">       <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">Star.prototype = &#123;</span><br><span class="line">    <span class="comment">// 如果我们修改了原来的原型对象,给原型对象赋值的是一个对象，则必须手动的利用constructor指回原来的构造函数</span></span><br><span class="line">    <span class="keyword">constructor</span>: Star,</span><br><span class="line">    sing :function() &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&quot;我爱唱歌&quot;</span>);</span><br><span class="line">   &#125;,</span><br><span class="line">    movie : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&quot;我爱演电影&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Star(<span class="string">&#x27;刘德华&#x27;</span>,<span class="number">18</span>);</span><br></pre></td></tr></table></figure><h4 id="构造函数、实例、原型对象的三者关系"><a href="#构造函数、实例、原型对象的三者关系" class="headerlink" title="构造函数、实例、原型对象的三者关系"></a>构造函数、实例、原型对象的三者关系</h4><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200501212654.png"></p><ul><li><p>构造函数通过<code>new</code>生成对象实例</p></li><li><p>构造函数通过<code>prototype</code>属性获取原型对象</p></li><li><p>对象实例通过<code>__proto__</code>获取原型对象</p></li><li><p>原型对象通过<code>constructor</code>获取构造函数</p></li></ul><h4 id="类和原型"><a href="#类和原型" class="headerlink" title="类和原型"></a>类和原型</h4><p>原型对象是类的唯一标识: 当且仅当两个对象继承自同一个原型对象时,他们才是属于同一个类的实例。即类的识别是通过原型来完成而不是构造函数的名字。构造函数是类的外在表现,通常构造函数的名字用作类名</p><h4 id="定义类的步骤"><a href="#定义类的步骤" class="headerlink" title="定义类的步骤"></a>定义类的步骤</h4><ol><li><p>定义构造函数,设置初始化新对象的实例属性</p></li><li><p>给构造函数的 prototype 对象定义实例的方法</p></li><li><p>给构造函数定义类字段和类属性</p></li></ol><h4 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h4><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200501212754.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 只要是对象就 __proto__ 原型，指向原型对象</span></span><br><span class="line"><span class="built_in">console</span>.log(Star.prototype);</span><br><span class="line"><span class="built_in">console</span>.log(Star.prototype.__proto__ === <span class="built_in">Object</span>.prototype); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 2. 我们 Star 原型对象里面的 __proto__ 原型指向的 Object.prototype</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.__proto__); <span class="comment">// null </span></span><br></pre></td></tr></table></figure><h4 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h4><blockquote><p>是最通用的类。构造函数和实例的原型对象的原型对象指向<code>Object的原型对象(Object.prototype)</code>,Object的原型对象的原型对象为空。(所有通过 new Object 创建的对象都具有同一个原型对象,即<code>Object.prototype.Object.prototype</code>是没有原型的对象)</p></blockquote><p>也就是对象实例可以调用 Object 的 prototype 中的属性方法</p><h4 id="实例对象属性方法的查找规则"><a href="#实例对象属性方法的查找规则" class="headerlink" title="实例对象属性方法的查找规则"></a>实例对象属性方法的查找规则</h4><ul><li>当访问一个对象的属性(包括方法)时,首先查找这个<code>对象自身</code>有没有该属性。</li><li>如果没有就查找它的原型(也就是<code>__proto__</code>指向的<code>prototype原型对象</code>)。</li><li>如果还没有就查找原型对象的原型(<code>Object的原型对象</code>).</li><li>依此类推一直找到Object为止 (<code>null</code>)。</li><li><code>__ proto__</code> 对象原型的意义就在于为对象成员查找机制提供一个方向,或者说一条路线。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">uname,age</span>) </span>&#123; </span><br><span class="line">    <span class="built_in">this</span>.uname = uname; </span><br><span class="line">    <span class="built_in">this</span>.age = age; </span><br><span class="line">&#125; </span><br><span class="line">Star.prototype.sex = <span class="string">&#x27;woman&#x27;</span>; </span><br><span class="line"><span class="comment">// Object.prototype.sex = &#x27;nomannowoman&#x27;; </span></span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Star(<span class="string">&#x27;刘德华&#x27;</span>,<span class="number">18</span>); </span><br><span class="line"><span class="comment">// Star.sex = &#x27;man&#x27;; </span></span><br><span class="line"><span class="comment">// ldh.sex = &#x27;man&#x27;; </span></span><br><span class="line"><span class="built_in">console</span>.log(ldh.sex);</span><br></pre></td></tr></table></figure><p>先查找实例对象中有没有查找的值,没有则到其原型对象中查找,再没有就到 Object 的原型对象中查找,如果再没有则返回 undefined</p><p>当写入一个属性的值时,js不会使用原型对象,因为这样会影响其他同个构造函数创建的对象</p><p>如果 o 对象的原型中有了 p 属性,给 o 对象设置 p 属性时只是直接在 o 对象中创建p属性,而不再继承原型中的 p属性,也就是 o 的 p 遮盖了原型对象中的 p。也就是说,JS 中只有查询属性时才体会到继承的存在,而设置属性和继承无关,属性的设置永远都是设置在目标对象中。</p><h4 id="原型对象中-this-的指向"><a href="#原型对象中-this-的指向" class="headerlink" title="原型对象中 this 的指向"></a>原型对象中 this 的指向</h4><p><code>原型对象中的 this指向调用者</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> that; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">uname,age</span>) </span>&#123; </span><br><span class="line">    <span class="built_in">this</span>.uname = uname; </span><br><span class="line">    <span class="built_in">this</span>.age = age; </span><br><span class="line">&#125; </span><br><span class="line">Star.prototype.sing = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;我会唱歌&#x27;</span>); </span><br><span class="line">    that = <span class="built_in">this</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Star(<span class="string">&#x27;刘德华&#x27;</span>,<span class="number">18</span>); </span><br><span class="line">ldh.sing(); </span><br><span class="line"><span class="built_in">console</span>.log(that === ldh);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="扩展内置对象方法-不建议这么做！"><a href="#扩展内置对象方法-不建议这么做！" class="headerlink" title="扩展内置对象方法(不建议这么做！)"></a>扩展内置对象方法(不建议这么做！)</h4><p>可以通过给原型对象<code>追加</code>方法,实现内置对象方法的扩展。如 Array 数组对象追加求和的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.sum = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">var</span> sum  = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i &lt; <span class="built_in">this</span>.length;i++) &#123; </span><br><span class="line">        sum += <span class="built_in">this</span>[i];</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> sum; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不可以使用下面形式(<code>因为会覆盖内置的方法</code>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype = &#123; </span><br><span class="line">    sum: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">var</span> sum  = <span class="number">0</span>; </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i &lt; <span class="built_in">this</span>.length;i++) &#123; </span><br><span class="line">            sum += <span class="built_in">this</span>[i]; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> sum; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ES5的继承"><a href="#ES5的继承" class="headerlink" title="ES5的继承"></a>ES5的继承</h4><h5 id="call函数"><a href="#call函数" class="headerlink" title="call函数"></a>call函数</h5><pre><code>    fun.call(thisArg, arg1, arg2, ...)</code></pre><ul><li>thisArg : 当前调用函数this的指向对象</li><li>arg1 , arg2 : 传递的其他参数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;哈哈哈&quot;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    name : <span class="string">&quot;zykj&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn.call(o);</span><br></pre></td></tr></table></figure><h5 id="属性的继承利用call函数"><a href="#属性的继承利用call函数" class="headerlink" title="属性的继承利用call函数"></a>属性的继承利用call函数</h5><p>ES6 前的继承就是在子构造函数中利用 call 引用父构造函数,并改变 this 指向为子构造函数的实例</p><p>调用这个函数并且修改函数运行时的this指向</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.父构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">uname,age</span>) </span>&#123; </span><br><span class="line">    <span class="comment">// this 指向父构造函数的对象实例 </span></span><br><span class="line">    <span class="built_in">this</span>.uname = uname; </span><br><span class="line">    <span class="built_in">this</span>.age = age; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2.子构造函数 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">uname,age,score</span>) </span>&#123; </span><br><span class="line">    <span class="comment">// this 指向子构造函数的对象实例 </span></span><br><span class="line">    Father.call(<span class="built_in">this</span>,uname,age); </span><br><span class="line">    <span class="built_in">this</span>.score = score; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> Son(<span class="string">&#x27;刘德华&#x27;</span>,<span class="number">18</span>,<span class="number">100</span>); </span><br><span class="line"><span class="built_in">console</span>.log(son);</span><br></pre></td></tr></table></figure><p>注意: 可以不断嵌套</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Grandson</span>(<span class="params">uname,age,score</span>) </span>&#123; </span><br><span class="line">    Son.call(<span class="built_in">this</span>,uname,age,score); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="方法的继承"><a href="#方法的继承" class="headerlink" title="方法的继承"></a>方法的继承</h5><p><code>子类.prototype = new 父类()</code></p><p>确保子类的原型对象是父类的一个实例即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Son.prototype = <span class="keyword">new</span> Father(); </span><br><span class="line"><span class="comment">//Son 的原型对象的 constructor 指回原来的(构造函数) Son</span></span><br><span class="line">Son.prototype.constructor = Son; <span class="comment">// 即 Son.prototype.__proto__.constructor = Son;</span></span><br></pre></td></tr></table></figure><p><code>切记: Son 的原型对象的 constructor 指向要改回为 Son</code></p><h5 id="类的判别方法"><a href="#类的判别方法" class="headerlink" title="类的判别方法"></a>类的判别方法</h5><ol><li><p>instanceof </p><p>基于原型链检测,而不是构造函数的名字</p><p>缺点: 无法通过对象获得类名,只能检测对象是否属于指定的类名。在多窗口和多框架子页面的Web应用中兼容性不佳,如一个页面中的数组不是另一个页面中数组的实例</p></li><li><p>constructor属性</p><p>缺点与 instanceof 中一样,在多个执行上下文的场景中无法正常工作</p></li><li><p>利用构造函数的名称</p><p>利用<code>Object.toString</code>方法获取然后裁剪出来</p></li><li><p>鸭式辨型</p><p>如果该对象出现与某个同名的方法,那么就认为该对象属于这个类</p></li></ol><h4 id="ES5新增对象方法"><a href="#ES5新增对象方法" class="headerlink" title="ES5新增对象方法"></a>ES5新增对象方法</h4><ol><li><p>Object.keys() 用于获取对象自身所有的属性</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.keys(obj)</span><br></pre></td></tr></table></figure><ul><li>效果类似<code>for...in</code></li><li>返回一个由属性名组成的数组</li></ul></li><li><p>Object.defineProperty() 定义对象中新属性或修改原有的属性。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object.defineProperty(obj, prop, descriptor)</span><br></pre></td></tr></table></figure><ul><li><p><code>obj</code>: 必需。目标对象</p></li><li><p><code>prop</code>: 必需。需定义或修改的属性的名字</p></li><li><p><code>descriptor</code>: 必需。目标属性所拥有的特性</p><p>Object.defineProperty()第三个参数 descriptor 说明: <code>以对象形式&#123;&#125;写</code></p></li><li><p><code>value</code>: 设置属性的值默认为 undefined</p></li><li><p><code>writable</code>: 值是否可以重写。true | false 默认为 false</p></li><li><p><code>enumerable</code>: 目标属性是否可以被枚举(遍历)。true | false 默认为 false</p></li><li><p><code>configurable</code>: 目标属性是否可以被删除或是否可以再次修改特性 true | false 默认为 false</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> obj = &#123;</span><br><span class="line">    id:<span class="number">1</span>,</span><br><span class="line">    name:<span class="string">&#x27;zykj&#x27;</span></span><br><span class="line"> &#125;</span><br><span class="line">   </span><br><span class="line"> <span class="built_in">Object</span>.defineProperty(obj,<span class="string">&#x27;num&#x27;</span>,&#123;</span><br><span class="line">    value: <span class="number">100</span></span><br><span class="line"> &#125;);</span><br><span class="line">   </span><br><span class="line"> <span class="built_in">Object</span>.defineProperty(obj,<span class="string">&#x27;name&#x27;</span>,&#123;</span><br><span class="line">    value: <span class="string">&#x27;skx&#x27;</span></span><br><span class="line"> &#125;);</span><br><span class="line">  </span><br><span class="line"> <span class="built_in">Object</span>.defineProperty(obj,<span class="string">&#x27;id&#x27;</span>,&#123;</span><br><span class="line">    <span class="comment">//设置为false代表不能修改</span></span><br><span class="line">    writable: <span class="literal">false</span></span><br><span class="line"> &#125;);</span><br><span class="line">   </span><br><span class="line"> <span class="built_in">Object</span>.defineProperty(obj,<span class="string">&#x27;price&#x27;</span>,&#123;</span><br><span class="line">     value: <span class="number">15</span>,</span><br><span class="line">     <span class="comment">// 默认为 false 代表不能被遍历</span></span><br><span class="line">     enumerable: <span class="literal">false</span>,</span><br><span class="line">     <span class="comment">// 默认为 false 代表不能删除这个属性和修改这个参数的特性</span></span><br><span class="line">     configurable: <span class="literal">false</span></span><br><span class="line"> &#125;);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//delete obj.price // 错误</span></span><br><span class="line">    </span><br><span class="line"> <span class="built_in">console</span>.log(obj);</span><br></pre></td></tr></table></figure></li></ul></li></ol><h4 id="函数进阶"><a href="#函数进阶" class="headerlink" title="函数进阶"></a>函数进阶</h4><h5 id="函数定义方式"><a href="#函数定义方式" class="headerlink" title="函数定义方式"></a>函数定义方式</h5><ol><li><p><code>function 函数名()&#123;&#125;</code></p></li><li><p><code>var 函数名 = function()&#123;&#125;</code></p></li><li><p><code>var 函数名 = new Function(&#39;参数1&#39;,&#39;参数2&#39;,&#39;函数体&#39;);</code>(了解即可,这种方法创建的函数并不适用词法作用域)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;console.log(a + b)&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>函数的增强写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;原本</span><br><span class="line">const fun2 &#x3D; &#123;</span><br><span class="line">getName: function()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;增强写法</span><br><span class="line">const fun2 &#x3D; &#123;</span><br><span class="line">getName()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>注意: </p><ol><li><p>Function里面必须是<code>字符串格式</code></p></li><li><p>效率较低,较少使用</p></li><li><p>所有函数都是Function的实例对象</p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200501220254.png" alt="img"></p><h5 id="函数调用方式"><a href="#函数调用方式" class="headerlink" title="函数调用方式"></a>函数调用方式</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.普通函数 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">&#125; </span><br><span class="line">fn();   </span><br><span class="line">fn.call();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.对象的方法 </span></span><br><span class="line"><span class="keyword">var</span> o = &#123; </span><br><span class="line">    sayHi: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Hi&#x27;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">o.sayHi(); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.构造函数 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">new</span> Star(); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.绑定事件函数 </span></span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; &#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.定时器函数 </span></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,<span class="number">2000</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.立即执行函数(立即调用) (function() &#123;&#125;)()</span></span><br></pre></td></tr></table></figure><h5 id="函数内-this-指向"><a href="#函数内-this-指向" class="headerlink" title="函数内 this 指向"></a>函数内 this 指向</h5><table><thead><tr><th>调用方式</th><th>this 指向</th></tr></thead><tbody><tr><td>普通函数调用</td><td>window</td></tr><tr><td>构造函数调用</td><td>实例对象 函数原型对象里面的方法也指向实例对象</td></tr><tr><td>对象调用方法</td><td>该方法所属对象</td></tr><tr><td>事件绑定方法</td><td>绑定事件对象</td></tr><tr><td>定时器函数</td><td>window</td></tr><tr><td>立即执行函数</td><td>window</td></tr></tbody></table><h5 id="函数内改变-this-指向方法"><a href="#函数内改变-this-指向方法" class="headerlink" title="函数内改变 this 指向方法"></a>函数内改变 this 指向方法</h5><ol><li><p>call 方法</p><ul><li><p><code>函数.call(this指向的对象,参数1,参数2,。。。)</code></p></li><li><p>作用: 调用该函数并且将其this指向修改</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x,y</span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;123&#x27;</span>); </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>); </span><br><span class="line">    <span class="built_in">console</span>.log(x + y); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> o = &#123; <span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span> &#125; ;</span><br><span class="line">fn.call(o,<span class="number">1</span>,<span class="number">3</span>); <span class="comment">// 将fn函数的this指向改为o</span></span><br></pre></td></tr></table></figure></li><li><p>apply 方法</p><p><code>函数名.apply(this指向的对象,[参数1,参数2,。。。])</code></p><p>同样会调用函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a,b</span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>); </span><br><span class="line">    <span class="built_in">console</span>.log(a + b); </span><br><span class="line">&#125;</span><br><span class="line">fn.apply(o,[<span class="number">1</span>,<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arry = [<span class="number">1</span>,<span class="number">66</span>,<span class="number">3</span>,<span class="number">99</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> max = <span class="built_in">Math</span>.max.apply(<span class="built_in">Math</span>,arry);</span><br><span class="line"><span class="built_in">console</span>.log(max);</span><br></pre></td></tr></table></figure><p>注意: </p><ul><li>参数必须是数组形式,返回值会自动改为需要的形式</li></ul></li><li><p>bind 方法</p><p><code>函数名.bind(this指向的对象,参数1,参数2...)</code></p><p><code>不会调用函数,而是返回一个改造后的原函数的拷贝</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123; </span><br><span class="line">    name: <span class="number">1</span>  </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(a + b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = fn.bind(o); </span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>注意: 因为不会调用原函数,所以要新建变量来接收改造后的函数</p><p>使用例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    btn.disabled = <span class="literal">true</span>; </span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="built_in">this</span>.disabled = <span class="literal">false</span>; </span><br><span class="line">    &#125;.bind(<span class="built_in">this</span>),<span class="number">3000</span>) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p><code>相同点</code>:</p><ol><li>都可以改变函数内部的 this 指向.</li></ol><p><code>区别点</code>:</p><ol><li>call 和 apply 会调用函数并且改变函数内部 this 指向,</li><li>call 和 apply 传递的参数不一样, call 传递参数arg1, arg2…形式 apply 必须数组形式 [arg]</li><li>bind 不会调用函数,可以改变函数内部 this 指向</li></ol><p><code>主要应用场景</code>:</p><ol><li>call 经常做继承</li><li>apply 经常跟数组有关系,比如借助于数学对象实现数组最大值最小值</li><li>bind 不调用函数但是还想改变this指向,比如改变定时器内部的 this 指向.</li></ol><h5 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h5><blockquote><p>对其他函数进操作的函数,接收函数作为参数或将函数作为返回值输出</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">callback</span>)</span>&#123;</span></span><br><span class="line">        callback &amp;&amp; callback();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    fn(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&#x27;hi&#x27;</span>)</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    fn();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>函数作为一种数据类型,也可以作为参数传递给另一个函数使用,最典型的就是作为<code>回调函数</code></p><ul><li><p>filter</p><p><code>数组.filter(function(currentValue,index)&#123;&#125;)</code></p><p>实现数组中满足某条件的数值的筛选,返回一个<code>新数组</code></p><p>个人理解：通过返回值的真假来判断是否添加到一个新的数组中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">12</span>,<span class="number">66</span>,<span class="number">4</span>,<span class="number">88</span>,<span class="number">3</span>,<span class="number">7</span>]; </span><br><span class="line"><span class="keyword">let</span> arr1 = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">value,index</span>) </span>&#123; </span><br><span class="line">    <span class="comment">// return value &gt;= 20; </span></span><br><span class="line">    <span class="keyword">return</span> value % <span class="number">2</span> === <span class="number">0</span>; <span class="comment">// 实现筛选偶数 </span></span><br><span class="line">&#125;); </span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [12, 66, 4, 88]</span></span><br></pre></td></tr></table></figure></li><li><p>reduce </p><p><code>reduce(function(total, currentValue, currentIndex, arr), initialValue)</code></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>total</em></td><td align="left">必需。<em>初始值</em>, 或者<code>计算结束后的返回值</code>。</td></tr><tr><td align="left"><em>currentValue</em></td><td align="left">必需。<code>当前元素</code></td></tr><tr><td align="left"><em>currentIndex</em></td><td align="left">可选。<code>当前元素的索引</code></td></tr><tr><td align="left"><em>arr</em></td><td align="left">可选。<code>当前元素所属的数组对象。</code></td></tr><tr><td align="left"><em>initialValue</em></td><td align="left">可选。<code>传递给函数的初始值</code></td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr4 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>] </span><br><span class="line"><span class="keyword">const</span> sum = arr4.reduce(<span class="function">(<span class="params">prev,item</span>) =&gt;</span> &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(item); </span><br><span class="line">    <span class="comment">// console.log(prev); </span></span><br><span class="line">    <span class="keyword">return</span> item + prev; </span><br><span class="line">&#125;,<span class="number">0</span>) <span class="comment">// 2 3 4 5 6</span></span><br><span class="line"><span class="built_in">console</span>.log(sum); <span class="comment">// 21</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">解释</span></span><br><span class="line"><span class="comment">第一次 prev: 0 item: 1</span></span><br><span class="line"><span class="comment">第二次 prev: 1 item: 2</span></span><br><span class="line"><span class="comment">第三次 prev: 3 item: 3</span></span><br><span class="line"><span class="comment">第四次 prev: 6 item: 4</span></span><br><span class="line"><span class="comment">第五次 prev: 10 item: 5</span></span><br><span class="line"><span class="comment">第五次 prev: 15 item: 6</span></span><br><span class="line"><span class="comment">最后结果为 21</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure></li><li><p>map</p><p><code>数组.map(function(currentValue,index)</code></p><p>改方法按照原始数组元素顺序依次处理元素、返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">12</span>,<span class="number">66</span>,<span class="number">4</span>,<span class="number">88</span>,<span class="number">3</span>,<span class="number">7</span>]; </span><br><span class="line"><span class="keyword">let</span> arr2 = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">value,index</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> value *<span class="number">2</span> ; <span class="comment">// 实现数据*2</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// [24, 132, 8, 176, 6, 14]</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="严格模式-IE10以上版本支持"><a href="#严格模式-IE10以上版本支持" class="headerlink" title="严格模式(IE10以上版本支持)"></a>严格模式(IE10以上版本支持)</h3><h4 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h4><ol><li>消除了 Javascript 语法的一些不合理不严谨之处,减少了一些怪异行为。</li><li>消除代码运行的一些不安全之处,保证代码运行的安全。</li><li>提高编译器效率,增加运行速度。</li><li>禁用了在 ECMAScript 的未来版本中可能会定义的一-些语法,为未来新版本的 Javascript 做好铺垫。比<br>如一些保留字如: <code>class</code>, <code>enum</code>, <code>export</code>, <code>extends</code>, <code>import</code>, <code>super</code>不能做变量名</li></ol><h4 id="两种形式及其开启方式"><a href="#两种形式及其开启方式" class="headerlink" title="两种形式及其开启方式"></a>两种形式及其开启方式</h4><h5 id="为脚本开启严格模式"><a href="#为脚本开启严格模式" class="headerlink" title="为脚本开启严格模式"></a>为脚本开启严格模式</h5><ol><li><p>在脚本开头添加<code>&#39;use strict&#39;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span> </span><br><span class="line"><span class="javascript">    <span class="comment">// 开启脚本严格模式 下面的js代码会按照严格模式执行代码 </span></span></span><br><span class="line"><span class="javascript"><span class="meta">    &#x27;use strict&#x27;</span>; </span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在立即执行函数的函数体开头添加<code>&#39;use strict&#39;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span> </span><br><span class="line"><span class="javascript">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span></span><br><span class="line"><span class="javascript"><span class="meta">        &#x27;use strict&#x27;</span>; </span></span><br><span class="line">    &#125;)(); </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注: 此时所有的代码按照严格模式执行</p></li></ol><h5 id="为函数开启严格模式"><a href="#为函数开启严格模式" class="headerlink" title="为函数开启严格模式"></a>为函数开启严格模式</h5><p>在函数的函数体开头添加<code>&#39;use strict&#39;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span> </span><br><span class="line"><span class="javascript">    <span class="comment">// 只为fn开启严格模式 </span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123; </span></span><br><span class="line"><span class="javascript"><span class="meta">        &#x27;use strict&#x27;</span>; </span></span><br><span class="line"><span class="javascript">        <span class="comment">// 下面代码按照严格模式执行 </span></span></span><br><span class="line">    &#125; </span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123; </span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注: 此时只对 fn 执行严格模式,其中的函数体按照严格模式执行</p><h4 id="严格模式中的变化"><a href="#严格模式中的变化" class="headerlink" title="严格模式中的变化"></a>严格模式中的变化</h4><h5 id="变量规定"><a href="#变量规定" class="headerlink" title="变量规定"></a>变量规定</h5><ul><li><p>变量必须先声明再使用</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line">num = <span class="number">10</span>; <span class="comment">//错误</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br></pre></td></tr></table></figure></li><li><p>严禁删除已经声明的变量</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="keyword">delete</span> num; <span class="comment">//不能删除已经声明好的变量</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="this-指向问题"><a href="#this-指向问题" class="headerlink" title="this 指向问题"></a>this 指向问题</h5><ul><li><p>全局作用域中 this 的指向为 undefined</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定时器的 this 依旧为 window</p></li><li><p>严格模式构造函数不加 new 调用,this 会指向 undefined</p></li></ul><h5 id="函数的变化"><a href="#函数的变化" class="headerlink" title="函数的变化"></a>函数的变化</h5><ul><li>函数的形参不能有重名</li><li>不允许在非函数(如 if , for) 代码块中定义函数</li></ul><h5 id="对象的变化"><a href="#对象的变化" class="headerlink" title="对象的变化"></a>对象的变化</h5><ul><li>对象中不能有同名的属性</li></ul><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><blockquote><p>指一个嵌套函数被导出到他所定义的作用域外访问其外部函数的参数和变量,即某个作用域可以访问另一个函数内部的局部变量。也可理解为一种某个函数可以调用其他函数中变量的现象</p></blockquote><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p>词法作用域: 函数是通过词法来划分作用域的,而不是动态的划分作用域。他们在定义的位置运行而不是调用的位置运行</p><p>一个定义在函数 f 中的函数 g。当f被调用的时候,作用域链包含了对 f 的这一调用的调用对象,后边是全局对象。g 定义在f 中,因为 f 调用时才会定义 g,所以这个作用域链接保存为 g 的定义的一部分。g 被调用时,作用域链包括3个对象: g 自己的调用对象,f 的调用对象和全局对象</p><p>当嵌套函数的引用放到全局作用域中时,这种情况下有一个对嵌套的函数的外部引用,并且嵌套的函数将它的引用保留给外围函数的调用对象,结果就是外围函数的一次特调用的调用对象依然存在,外围函数的参数和局部变量的名字和值在这个调用对象中得以维持,而他又是嵌套函数定义的一部分,所以嵌套函数的调用可以访问这些值</p><p>如: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">20</span>; </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="built_in">console</span>.log(num); </span><br><span class="line">    &#125;</span><br><span class="line">    fun(); </span><br><span class="line">&#125; </span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><p>调用的这个变量所在的函数被称为闭包函数,如上面的 fn 函数</p><p>注意: 闭包是为了调用一个变量,而不是他的值！！！</p><h5 id="闭包的主要作用"><a href="#闭包的主要作用" class="headerlink" title="闭包的主要作用"></a>闭包的主要作用</h5><blockquote><p>作用:延伸了变量的作用范围</p></blockquote><p>最常用的闭包还是函数中的函数调用其父函数的变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> f;</span><br><span class="line">  <span class="comment">// 相当于 </span></span><br><span class="line">  <span class="comment">//return function f() &#123;</span></span><br><span class="line">  <span class="comment">//console.log(num);</span></span><br><span class="line">  <span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = fn();</span><br><span class="line">a();</span><br></pre></td></tr></table></figure><p>经典案例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> lis = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.nav&#x27;</span>).querySelectorAll(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">// 1.传统方式获取li索引</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; lis.length;i++)&#123;</span></span><br><span class="line">  lis[i].index = i;</span><br><span class="line"><span class="javascript">  lis[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">this</span>.index);</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">// 2.闭包方式式获取li索引</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; lis.length;i++)&#123;</span></span><br><span class="line"><span class="javascript">   <span class="comment">// 立即执行函数称为小闭包</span></span></span><br><span class="line"><span class="javascript">  (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    lis[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">       <span class="built_in">console</span>.log(i);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">// 3. 三秒后打印里的内容</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; lis.length;i++)&#123;</span></span><br><span class="line"><span class="javascript">  (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(lis[i].innerHTML)</span></span><br><span class="line">    &#125;,2000)</span><br><span class="line">  &#125;)(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">// 经典案例</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> car =  (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 起步价</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> start = <span class="number">5</span>;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 总价</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> total = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">    price : <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span></span><br><span class="line">      if(n&lt;=3)&#123;</span><br><span class="line">        total = start;</span><br><span class="line"><span class="javascript">      &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line">        total = start + (n - 3) * 5;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    yd : <span class="function"><span class="keyword">function</span>(<span class="params">flag</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> flag ? total + <span class="number">10</span> : total;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">car.price(5);</span><br><span class="line"><span class="javascript">car.yd(<span class="literal">true</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h4><blockquote><p>如果一个函数在内部可以调用其本身,就称为递归函数</p></blockquote><ul><li><p>递归函数的作用和循环效果一样</p></li><li><p>由于递归很容易发生栈溢出错误(即不停地新建栈区域),所以必须要添加退出条件 return</p></li><li><p>当遍历多层次的数据时可以用递归函数来遍历</p></li></ul><h4 id="剩余参数-用来代表剩余形参的参数-…x"><a href="#剩余参数-用来代表剩余形参的参数-…x" class="headerlink" title="剩余参数(用来代表剩余形参的参数 …x)"></a>剩余参数(用来代表剩余形参的参数 …x)</h4><p>当使用箭头函数时,无法使用 arguments 代替数量不定的参数,必须用剩余参数 …args(一定要加3点,可以任意命名)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sum = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123; </span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>; </span><br><span class="line">    args.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123; </span><br><span class="line">        sum += value; </span><br><span class="line">    &#125;) </span><br><span class="line">    <span class="keyword">return</span> sum; </span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>)); <span class="comment">// 60</span></span><br></pre></td></tr></table></figure><p>用法与 arguments 基本相同,都是数组形式</p><br><p>剩余参数与数组解构的搭配使用(即可以用任意命名剩余参数代替参数中的剩余部分)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]; </span><br><span class="line"><span class="keyword">let</span> [s1,s2,...s3] = arr1; </span><br><span class="line"><span class="built_in">console</span>.log(s1); <span class="comment">// 1 </span></span><br><span class="line"><span class="built_in">console</span>.log(s2); <span class="comment">// 2 </span></span><br><span class="line"><span class="built_in">console</span>.log(s3); <span class="comment">// 3456</span></span><br></pre></td></tr></table></figure><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><blockquote><p>正则表达式(regular expression)。用于匹配字符串中字符组合的模式,在 js 中也是对象</p></blockquote><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>用来检索、替换那些符合某个模式(规则)的文本。亦可用于过滤页面内容的一些敏感词,或从字符串中提取我们想要的特定部分</p><h4 id="正则表达式在js中的使用"><a href="#正则表达式在js中的使用" class="headerlink" title="正则表达式在js中的使用"></a>正则表达式在js中的使用</h4><h5 id="创建方式"><a href="#创建方式" class="headerlink" title="创建方式"></a>创建方式</h5><ol><li><p>利用 RegExp 构造函数创建( ES5 中用这个方法创建两个字面量相同的对象不是同个对象)</p><p><code>new RegExp(/xxxx/)</code>  <code>一定要加 // </code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regexp = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/123/</span>);</span><br></pre></td></tr></table></figure></li><li><p>利用字面量创建</p><p><code>var x = /xxx/;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="regexp">/zykj/</span>;</span><br></pre></td></tr></table></figure></li></ol><h5 id="测试正则表达式-test"><a href="#测试正则表达式-test" class="headerlink" title="测试正则表达式 test"></a>测试正则表达式 test</h5><p><code>正则表达式.test(被测字符串)</code>: 正则对象的方法,用于检测字符串是否符合该规则,返回布尔值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rg = <span class="regexp">/123/</span>; </span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="number">123</span>)); <span class="comment">// 返回true</span></span><br></pre></td></tr></table></figure><h5 id="正则表达式构成"><a href="#正则表达式构成" class="headerlink" title="正则表达式构成:"></a>正则表达式构成:</h5><p>正则表达式可以由简单的字符组成,如 /abc/ ,也可以是简单和特殊的字符组成,比如 /ab*c/ ,其中特殊字符被称为<code>元字符</code>,在正则表达式中是具有特殊意义的专用符号</p><p>锚字符(用来提示字符所处位置)</p><table><thead><tr><th>边界符</th><th>说明</th></tr></thead><tbody><tr><td><code>^</code></td><td>表示匹配行首的文本(<code>以谁开始</code>)</td></tr><tr><td><code>$</code></td><td>表示匹配行尾的文本(<code>以谁结束</code>)</td></tr></tbody></table><table><thead><tr><th></th><th>说明</th></tr></thead><tbody><tr><td><code>\b</code></td><td>匹配一个单词的边界</td></tr><tr><td><code>\B</code></td><td>匹配非单词边界的位置</td></tr><tr><td><code>(?=p)</code></td><td>零宽正向先行断言,要求接下来的字符都与 p 匹配,但不能包括匹配 p 的字符</td></tr><tr><td><code>(?!p)</code></td><td>零宽负向先行断言,要求接下来的字符不与 p 匹配</td></tr></tbody></table><p><code>^用法</code>: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^abc/</span>;  </span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;abc&#x27;</span>)); <span class="comment">// true </span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;abcd&#x27;</span>)); <span class="comment">// true </span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;aabcd&#x27;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><code>$用法</code>: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/ab$/</span>; </span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">&#x27;ssab&#x27;</span>));</span><br></pre></td></tr></table></figure><p><code>/^xxxx$/</code>: 表示精确匹配,只能是xxxx出现不能有其他字符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>  reg1 = <span class="regexp">/^abc$/</span>; <span class="comment">// 如果是^xx$ 则为精确匹配,要求必须是abc字符串才符合规范 </span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">&#x27;abc&#x27;</span>)); <span class="comment">// true </span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">&#x27;abcd&#x27;</span>)); <span class="comment">// false  </span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">&#x27;aabcd&#x27;</span>)); <span class="comment">// false </span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">&#x27;abcabc&#x27;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><code>\b</code>:  匹配词语的边界,可以代替 \s 实现匹配字符串前后的空格,而不用是字符串一定得有空格才能匹配</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> txt = <span class="string">&#x27;language java&#x27;</span>; </span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\bjava\b/</span>; </span><br><span class="line"><span class="built_in">console</span>.log(reg.test(txt)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>\B</code>: 匹配非词语边界的位置</p><p>如<code>/\B[Ss]cript/</code>与 <code>&quot;JavaScript&quot;</code> 和 <code>&quot;postscript&quot;</code> 匹配,但不与 <code>&quot;script&quot;</code> 和 <code>&quot;Scripting&quot;</code> 匹配</p><p><code>(?=p)</code>: 正向前声明,要求接下来的字符都与模式 p 匹配,但是不包括匹配中的那些字符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> txt = <span class="string">&#x27;JavaScript:the definitive guide&#x27;</span>; </span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[Jj]ava([Ss]cript)?(?=\:)/</span>; </span><br><span class="line"><span class="built_in">console</span>.log(reg.test(txt));</span><br></pre></td></tr></table></figure><p><code>(?!p)</code>: 反向前声明,要求接下来的字符不与模式p匹配</p><h5 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h5><blockquote><p>将单独的直接量字符放进方括号内就可以组成字符串类</p></blockquote><p>[]用法: </p><p><code>[abc]</code>: 表示只要包含有abc其中一个就返回 true </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">&#x27;andy&#x27;</span>)); <span class="comment">// true </span></span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">&#x27;color&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">&#x27;google&#x27;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><code>/^[abc]$/</code>:  三选一 只包含 a 或 b 或 c 单个字符的才返回 true</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(rg1.test(<span class="string">&#x27;aac&#x27;</span>)); <span class="comment">// false </span></span><br><span class="line"><span class="built_in">console</span>.log(rg1.test(<span class="string">&#x27;a&#x27;</span>)); <span class="comment">// true </span></span><br><span class="line"><span class="built_in">console</span>.log(rg1.test(<span class="string">&#x27;b&#x27;</span>)); <span class="comment">// true </span></span><br><span class="line"><span class="built_in">console</span>.log(rg1.test(<span class="string">&#x27;c&#x27;</span>)); <span class="comment">// true </span></span><br><span class="line"><span class="built_in">console</span>.log(rg1.test(<span class="string">&#x27;abc&#x27;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><code>/^[a-z]$/</code>:  加了 - 号,表示 26 个英文字母返回任何一个 true</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(rg2.test(<span class="string">&#x27;a&#x27;</span>)); <span class="comment">// true </span></span><br><span class="line"><span class="built_in">console</span>.log(rg2.test(<span class="string">&#x27;z&#x27;</span>)); <span class="comment">// true </span></span><br><span class="line"><span class="built_in">console</span>.log(rg2.test(<span class="number">1</span>)); <span class="comment">// false </span></span><br><span class="line"><span class="built_in">console</span>.log(rg2.test(<span class="string">&#x27;A&#x27;</span>)); <span class="comment">// false </span></span><br><span class="line"><span class="built_in">console</span>.log(rg2.test(<span class="string">&#x27;as&#x27;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><code>/^[a-zA-Z0-9_-]$/</code>:  26 个英文字母(大写和小写都可以)任何数字以及两个符号返回任何一个 true</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(rg3.test(<span class="string">&#x27;adada&#x27;</span>));<span class="comment">// false </span></span><br><span class="line"><span class="built_in">console</span>.log(rg3.test(<span class="string">&#x27;_&#x27;</span>)); <span class="comment">// true </span></span><br><span class="line"><span class="built_in">console</span>.log(rg3.test(<span class="string">&#x27;A&#x27;</span>)); <span class="comment">// true </span></span><br><span class="line"><span class="built_in">console</span>.log(rg3.test(<span class="number">1</span>)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><code>/^[^a-zA-Z0-9_-]$/</code>: 中括号里的 ^ 为取反的意思,与边界符不同</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(rg4.test(<span class="string">&#x27;adada&#x27;</span>)); <span class="comment">// false </span></span><br><span class="line"><span class="built_in">console</span>.log(rg4.test(<span class="string">&#x27;_&#x27;</span>)); <span class="comment">// false </span></span><br><span class="line"><span class="built_in">console</span>.log(rg4.test(<span class="string">&#x27;A&#x27;</span>)); <span class="comment">// false </span></span><br><span class="line"><span class="built_in">console</span>.log(rg4.test(<span class="number">1</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h5 id="量词符-设定某个模式出现的次数"><a href="#量词符-设定某个模式出现的次数" class="headerlink" title="量词符(设定某个模式出现的次数)"></a>量词符(设定某个模式出现的次数)</h5><table><thead><tr><th>量词</th><th>量词</th></tr></thead><tbody><tr><td><code>*</code></td><td>重复零次或更多次</td></tr><tr><td><code>+</code></td><td>重复一次或更多次</td></tr><tr><td><code>?</code></td><td>零次或一次</td></tr><tr><td><code>&#123;n&#125;</code></td><td>重复 n 次</td></tr><tr><td><code>&#123;n,&#125;</code></td><td>重复 n 次或更多次</td></tr><tr><td><code>&#123;n,m&#125;</code></td><td>重复 n 到 m 次</td></tr></tbody></table><p>都是加在规定字符后面</p><p><code>*用法</code>: 相当于a&gt;=0 可以出现0次或者很多次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^a*$/</span>; <span class="comment">// 只允许出现a,a的次数可以是0或者多次 </span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;&#x27;</span>)); <span class="comment">// true </span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;a&#x27;</span>)); <span class="comment">// true </span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;aaaaa&#x27;</span>)); <span class="comment">// true </span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;aaaabbbb&#x27;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><code>+用法</code>: 相当于&gt;=1 可以出现1次或者很多次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/^a+$/</span>; <span class="comment">//只允许出现a,a的次数可以是1次或者多次 </span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">&#x27;&#x27;</span>));<span class="comment">// false </span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">&#x27;ab&#x27;</span>));<span class="comment">// false </span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">&#x27;aaaaaaaaaaaa&#x27;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>?用法</code>: 相当于 1 | 0 只能出现1次或0次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/^a?$/</span>; <span class="comment">// a出现1次或0次为true 其他为false </span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">&#x27;&#x27;</span>)); <span class="comment">// true </span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">&#x27;a&#x27;</span>));<span class="comment">// true </span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">&#x27;aaaa&#x27;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>利用 ? 和其他重复字符可以组成非贪婪的重复</p><p>例如<code>/a+/</code>与字符串<code>&quot;aaa&quot;</code>的三个都匹配,而<code>/a+?/</code>只与第一个 a 匹配</p><p><code>&#123;x&#125;用法</code>: 相当于重复 3 次为 true</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg3 = <span class="regexp">/^a&#123;3&#125;$/</span>; <span class="comment">// a重复3次为true </span></span><br><span class="line"><span class="built_in">console</span>.log(reg3.test(<span class="string">&#x27;&#x27;</span>)); <span class="comment">// false </span></span><br><span class="line"><span class="built_in">console</span>.log(reg3.test(<span class="string">&#x27;a&#x27;</span>));<span class="comment">// false </span></span><br><span class="line"><span class="built_in">console</span>.log(reg3.test(<span class="string">&#x27;aaaa&#x27;</span>));<span class="comment">// false </span></span><br><span class="line"><span class="built_in">console</span>.log(reg3.test(<span class="string">&#x27;aaa&#x27;</span>));<span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>&#123;x,&#125;用法</code>: 相当于重复大于等于 x 次为 true</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg3 = <span class="regexp">/^a&#123;3,&#125;$/</span>; <span class="comment">// a出现大于3次为true </span></span><br><span class="line"><span class="built_in">console</span>.log(reg3.test(<span class="string">&#x27;&#x27;</span>));  <span class="comment">// false </span></span><br><span class="line"><span class="built_in">console</span>.log(reg3.test(<span class="string">&#x27;a&#x27;</span>)); <span class="comment">// false </span></span><br><span class="line"><span class="built_in">console</span>.log(reg3.test(<span class="string">&#x27;aaaa&#x27;</span>)); <span class="comment">// true </span></span><br><span class="line"><span class="built_in">console</span>.log(reg3.test(<span class="string">&#x27;aaaaa&#x27;</span>));<span class="comment">// true </span></span><br><span class="line"><span class="built_in">console</span>.log(reg3.test(<span class="string">&#x27;aaa&#x27;</span>));<span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>&#123;x,y&#125;用法</code>: 重复大于等于 3 次小于等于 y 次为 true ,输入时中间不能有空格</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg4 = <span class="regexp">/^a&#123;3,6&#125;$/</span>; </span><br><span class="line"><span class="built_in">console</span>.log(reg4.test(<span class="string">&#x27;&#x27;</span>)); <span class="comment">// false  </span></span><br><span class="line"><span class="built_in">console</span>.log(reg4.test(<span class="string">&#x27;a&#x27;</span>)); <span class="comment">// false </span></span><br><span class="line"><span class="built_in">console</span>.log(reg4.test(<span class="string">&#x27;aaaa&#x27;</span>)); <span class="comment">// true </span></span><br><span class="line"><span class="built_in">console</span>.log(reg4.test(<span class="string">&#x27;aaaaaaa&#x27;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h5 id="选择分组引用"><a href="#选择分组引用" class="headerlink" title="选择分组引用"></a>选择分组引用</h5><table><thead><tr><th></th><th>说明</th></tr></thead><tbody><tr><td>&#124; 符号</td><td>选择,匹配的是该符号左边的子表达式或者右边的子表达式</td></tr><tr><td><code>(...)</code></td><td>组合,将几个项组合成为一个单元,可通过 * + ? \ &#124; 等符号加以修饰,可以被引用</td></tr><tr><td><code>(?:...)</code></td><td>只组合,把项组合到一个单元,但不记忆与该组相匹配的字符,不可被引用</td></tr><tr><td><code>\n</code></td><td>和第 n 个分组第一次匹配的字符串相匹配,组是圆括号里的子表达式,从左向右算起。不包括(?: )的分组</td></tr></tbody></table><p>选择: | 符号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/ab|cd|ef/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&quot;ab&quot;</span>)); <span class="comment">// true </span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&quot;cd&quot;</span>)); <span class="comment">// true </span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&quot;ef&quot;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>注意: 选择项的匹配是从左到右,直到发现了匹配项。如果左边的匹配则忽略右边,即使它产生更好的匹配</p><p>小括号的作用: </p><ol><li><p>把单独的项组合成子表达式,以便可以像处理一个独立的单元那样用 | 、* 、+ 或者 ？等来对单元内的项进行处理。例如 /Java(script)?/ 可以匹配字符串 “java”,其后可以有 “script” 也可以没有。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/Java(script)?/</span>; </span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;Java&#x27;</span>)); </span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;Javascript&#x27;</span>));</span><br></pre></td></tr></table></figure></li><li><p>第二个作用是引用。即允许我们在同一正则表达式后部引用前面的子表达式。通过\后面加数字实现,数字指定了带括号的子表达式在正则表达式中的位置。这个引用不是引用模式,而是引用与那个模式匹配的文本</p><p>例: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> txt = <span class="string">&#x27;232&#x27;</span>; </span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/([12])[3]*\1/</span>; </span><br><span class="line"><span class="built_in">console</span>.log(reg.test(txt));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(abc)&#123;3&#125;$/</span>; </span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;abc&#x27;</span>)); <span class="comment">// false </span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;abcabcabc&#x27;</span>)); <span class="comment">// true </span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;abccc&#x27;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>注: 不能在字符类中使用这种引用。</p></li></ol><p>括号总结</p><ol><li>大括号量词符里面表示重复次数</li><li>中括号字符集合。匹配方括号中的任意字符</li><li>小括号表示优先级</li></ol><p>可以<a href="https//c.runoob.com/">在线测试</a></p><h5 id="预定义类-某些常见模式的预定义类"><a href="#预定义类-某些常见模式的预定义类" class="headerlink" title="预定义类(某些常见模式的预定义类)"></a>预定义类(某些常见模式的预定义类)</h5><table><thead><tr><th>预定类</th><th>说明</th></tr></thead><tbody><tr><td><code>\d</code></td><td>匹配 0-9 之间的任一数字,相当于<code>[0-9]</code></td></tr><tr><td><code>\D</code></td><td>匹配所有 0-9 以外的字符,相当于<code>[^0-9]</code></td></tr><tr><td><code>\w</code></td><td>匹配任意的字母、数字和下划线,相当于<code>[A-Za-z0-9_]</code></td></tr><tr><td><code>\W</code></td><td>除所有字母、数字和下划线以外的字符,相当于<code>[^A-Za-20-9_]</code></td></tr><tr><td><code>\s</code></td><td>匹配空格(包括换行符、制表符、空格符等),相等于<code>[\t\r\n\v\f]</code></td></tr><tr><td><code>\S</code></td><td>匹配非空格的字符,相当于<code>[^ \t\r\n\v\f]</code></td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\d&#123;3&#125;-\d&#123;8&#125; | \d&#123;4&#125;-\d&#123;7&#125;$/</span>; <span class="comment">// 实现座机号码验证</span></span><br></pre></td></tr></table></figure><p>注意: 正则表达式里可以用<code>或符号</code>,但是符号为<code>|</code>而不是<code>||</code></p><h5 id="敏感字的替换"><a href="#敏感字的替换" class="headerlink" title="敏感字的替换"></a>敏感字的替换</h5><p><code>replace(regexp/substr,replacement)</code></p><p>replace 除了可以替换字符串也可以替换正则表达式</p><p><code>目标字符串.replace(/xxx/,&#39;yy&#39;) </code> 将字符串中的 xxx 替换为 yy</p><h6 id="参数1"><a href="#参数1" class="headerlink" title="参数1"></a>参数1</h6><p><code>replace(/表达式/[switch],替换的内容)</code></p><p>正则表达式的参数(写在/后面): </p><ul><li><p><code>g</code>: 全局匹配,可以匹配多个</p></li><li><p><code>i</code>: 忽略大小写</p></li><li><p><code>gi</code>: 全局匹配+忽略大小写</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div.innerHTML = text.value.replace(<span class="regexp">/激情|gay/g</span>,<span class="string">&#x27;**&#x27;</span>); <span class="comment">// 实现将文本中所有关键字替换</span></span><br></pre></td></tr></table></figure><p>注意: 不能用精确匹配模式！！！！！</p><h6 id="参数2"><a href="#参数2" class="headerlink" title="参数2"></a>参数2</h6><p><code>$1, $2, $3, …, $n</code>: 依次匹配子表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sStr=<span class="string">&#x27;讨论一下正则表达式中的replace的用法&#x27;</span>;</span><br><span class="line">sStr.replace(<span class="regexp">/(正则)(.+?)(式)/</span>,<span class="string">&quot;《$1》$2&lt;$3&gt;&quot;</span>);</span><br><span class="line"><span class="comment">// 得到：&quot;讨论一下《正则》表达&lt;式&gt;中的replace的用法&quot;</span></span><br></pre></td></tr></table></figure><p><code>函数</code></p><p>先看<code>arguments</code>的用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var sStr&#x3D;&#39;讨论一下正则表达式中的replace的用法&#39;;</span><br><span class="line">sStr.replace(&#x2F;(正则).+?(式)&#x2F;,function() &#123;</span><br><span class="line">    console.log(arguments);</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F; [&quot;正则表达式&quot;, &quot;正则&quot;, &quot;式&quot;, 4, &quot;讨论一下正则表达式中的replace的用法&quot;]</span><br></pre></td></tr></table></figure><p><code>参数分别为:</code></p><ul><li>匹配到的字符串（此例为”正则表达式”)</li><li>如果正则使用了分组匹配就为多个否则无此参数。（此例的参数就分别为 “正则”, “式”）</li><li>匹配字符串的对应索引位置（也就是”正则表达式”的索引位置，此例为4）</li><li>原始字符串</li></ul><h3 id="for-…-in"><a href="#for-…-in" class="headerlink" title="for … in"></a>for … in</h3><blockquote><p><code>for...in</code>是ES5标准，用来遍历对象和数组, 返回<code>键名key</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 遍历对象</span><br><span class="line">let obj &#x3D; &#123;</span><br><span class="line">  a: 1,</span><br><span class="line">  b: 2,</span><br><span class="line">  c: 3</span><br><span class="line">&#125;</span><br><span class="line">for (let key in obj) &#123;</span><br><span class="line">  console.log(key)</span><br><span class="line">&#125;  &#x2F;&#x2F; a  b  c</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 遍历数组</span><br><span class="line">let arr &#x3D; [1, 2, 3]</span><br><span class="line">for (let key in arr) &#123;</span><br><span class="line">  console.log(key)</span><br><span class="line">&#125;  &#x2F;&#x2F; 0  1  2</span><br></pre></td></tr></table></figure><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><h3 id="let-和-const"><a href="#let-和-const" class="headerlink" title="let 和 const"></a>let 和 const</h3><h4 id="let"><a href="#let" class="headerlink" title="let"></a>let</h4><blockquote><p>let: 用于声明变量</p></blockquote><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ol><li><p>只在块级作用域(即{})中起作用,而 var 不具备这个特点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123; </span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">20</span>; </span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">true</span>) &#123; </span><br><span class="line">        <span class="keyword">let</span> c =<span class="number">30</span>; </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">console</span>.log(c); <span class="comment">// 报错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>没有变量提升,即必须先声明再使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a); </span><br><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>; <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li><li><p>具有暂时性死区特性</p><p>在块级区域用 let 声明的变量会与该区域绑定,与区域外同名变量的使用互不影响</p><p>ES6中,在代码块内,在用 let 和 const 声明变量之前,该变量都是不可用的,不可用的区域就叫做<code>暂时性死区</code>(temporal dead zone,TDZ)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;    </span><br><span class="line">    <span class="comment">//TDZ开始   </span></span><br><span class="line">    k = <span class="number">5</span>;    </span><br><span class="line">    <span class="built_in">console</span>.log(k); <span class="comment">// 皆报错    </span></span><br><span class="line">    <span class="keyword">let</span> k = <span class="number">4</span>; <span class="comment">// TDZ结束 </span></span><br><span class="line">    <span class="built_in">console</span>.log(k); <span class="comment">// 4 </span></span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">console</span>.log(k); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p>暂时性死区的本质: 再进入一个代码块的时候,变量就已经存在,但是无法引用,只有 let 或者 const 声明时,才能使用</p></li><li><p>不允许重复声明</p><p>不允许在同一个作用域中重复声明同一个变量</p></li></ol><h5 id="let经典面试题"><a href="#let经典面试题" class="headerlink" title="let经典面试题"></a>let经典面试题</h5><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200502102154.png" alt="img"></p><p style="text-align:center;">输出 2 2</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200502102254.png" alt="img"></p><p style="text-align:center;">输出 0 1</p><p>区别在于 for 循环中的i如果是 var 声明,则为全局的。如果是 let ,则有了局部作用域,每一次循环都是一个新的 i 值</p><p>注意: for 循环设置变量的部分是一个父作用域,而循环体内部是一个单独的子作用域</p><p>证明: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span> ;i ++) &#123; </span><br><span class="line">    <span class="keyword">let</span> i = <span class="string">&#x27;abc&#x27;</span>; </span><br><span class="line">    <span class="built_in">console</span>.log(i);  </span><br><span class="line">&#125;<span class="comment">// abc abc abc</span></span><br></pre></td></tr></table></figure><p>输出的是 3 次 abc ,说明花括号内部的作用域和循环设置内部的作用域不是同一个,如果是同一个,会因为 let 不能重复声明而报错</p><h4 id="const"><a href="#const" class="headerlink" title="const"></a>const</h4><blockquote><p>const: 用于声明常量</p></blockquote><h5 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h5><ol><li><p>具有块级作用域,即只在其所在中括号内生效</p></li><li><p>const 声明的常量必须赋予初始值</p></li><li><p>不存在变量提升</p></li><li><p>const 赋值后,值/引用不能修改(即地址不能修改),不可重复声明</p></li></ol><p>注意: 对于简单数据类型 num ,string 等,不能修改其中的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="number">3.14</span>;</span><br><span class="line">p = <span class="number">20</span>; <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><p>而对于复杂数据类型,数组等,其中的值可以修改,但不能修改这个常量的整体,因为前者不会改变地址,后者则会改变地址</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">100</span>,<span class="number">200</span>]; </span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">50</span>; <span class="comment">// 正确 </span></span><br><span class="line">arr = [<span class="number">1</span>,<span class="number">2</span>]; </span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><p><code>const 本质</code>: const 不是让变量的值不能改动,而是让变量指向的地址不能改动。对于值类型的数据,其值就保存在变量指向的地址中,所以无法改变,是一个常量。而对于引用数据类型,其变量指向的地址保存的不是值而是一个指针,这个指针指向堆中存放的具体值,所以复杂数据类型的具体值可以改变</p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>let , const , var 的区别</p><ol><li>使用 var 声明的变量,其作用域为该语句所在的明数内,存在变量提升现象。</li><li>使用 let 声明的变量,其作用城为该语句所在的代码块内,不存在变量提升,</li><li>使用 const 声明的是常量,在后面出现的代明中不能再修改该常量的值。</li></ol><table><thead><tr><th>var</th><th>let</th><th>const</th></tr></thead><tbody><tr><td>函数级作用域</td><td>块级作用域</td><td>块级作用域</td></tr><tr><td>变量提升</td><td>不存在变量提升</td><td>不存在变量提升</td></tr><tr><td>值可更改</td><td>值可更改</td><td>值不可更改</td></tr></tbody></table><p>一般常量用 const ,效率比较高</p><p>加上 es6 , js 一共有六种声明变量的方法: <code>var</code> <code>function</code> <code>let</code> <code>const</code> <code>import</code> <code>class</code></p><h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><blockquote><p>ES6 允许从数组中提取值,按照对应位置,对变量赋值,对象也可以实现解构,结构什么用就用对应的括号</p></blockquote><ul><li><p>数组解构(用中括号)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]; </span><br><span class="line"><span class="keyword">let</span> [a,b,c] = ary; </span><br><span class="line"><span class="built_in">console</span>.log(a); </span><br><span class="line"><span class="built_in">console</span>.log(b); </span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br></pre></td></tr></table></figure></li><li><p>只要右边数据类型具有 Iterator 接口,就可以用数组解构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a,b,c] = <span class="string">&#x27;wwe&#x27;</span>; </span><br><span class="line"><span class="built_in">console</span>.log(a,b,c);<span class="comment">// w w e</span></span><br></pre></td></tr></table></figure></li><li><p>允许给左边指定默认值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a,b=<span class="literal">true</span>] = [<span class="number">1</span>]; </span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>默认值生效的条件是右边对应值严格等于(===) undefined,否则不生效</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a,b=<span class="literal">true</span>] = [<span class="number">1</span>,<span class="literal">null</span>]; </span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1 </span></span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">// null 因为null不等于undefined</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>允许把默认值设为函数,但是函数执行的条件是右边对应位置没有赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;aaa&#x27;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> [k=fn()] = [,<span class="number">2</span>]; </span><br><span class="line"><span class="built_in">console</span>.log(k); <span class="comment">// aaa </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;aaa&#x27;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> [k=fn()] = [<span class="number">1</span>]; </span><br><span class="line"><span class="built_in">console</span>.log(k); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>默认值也可以引用解构赋值中的其他变量,但是前提是该变量已经声明</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a=<span class="number">1</span>,b=a] = [<span class="number">1</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a,b); <span class="comment">// 1 1 </span></span><br><span class="line"><span class="keyword">let</span> [x = <span class="number">1</span>,y = x] = []; </span><br><span class="line"><span class="built_in">console</span>.log(x,y);<span class="comment">// 1 1 </span></span><br><span class="line"><span class="keyword">let</span> [a = <span class="number">1</span>,b = a] = [<span class="number">1</span>,<span class="number">2</span>]; </span><br><span class="line"><span class="built_in">console</span>.log(a,b) <span class="comment">// 1 2 </span></span><br><span class="line"><span class="keyword">let</span> [m = n,n = <span class="number">1</span>] = []; </span><br><span class="line"><span class="built_in">console</span>.log(m,n);<span class="comment">// n is not defined</span></span><br></pre></td></tr></table></figure><p>总之,只要记住数组解构的顺序是从左到右,先默认,再赋值</p></li></ul><h4 id="对象解构-用大括号"><a href="#对象解构-用大括号" class="headerlink" title="对象解构(用大括号)"></a>对象解构(用大括号)</h4><p><code>第一种方式</code>: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;<span class="attr">name</span>:<span class="string">&#x27;list&#x27;</span>,<span class="attr">age</span>:<span class="number">30</span>,<span class="attr">sex</span>:<span class="string">&#x27;nan&#x27;</span>&#125;; </span><br><span class="line"><span class="keyword">let</span> &#123;name,age,sex&#125; = person; </span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// list </span></span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">// 30 </span></span><br><span class="line"><span class="built_in">console</span>.log(sex); <span class="comment">//nan</span></span><br></pre></td></tr></table></figure><p>注意: let 的属性名必须和对象中的属性名一样,本质是下面的简写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;<span class="attr">name</span>:name,<span class="attr">age</span>:age&#125; = &#123;<span class="attr">name</span>:<span class="string">&#x27;bruce&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;;</span><br></pre></td></tr></table></figure><p><code>第二种方式</code>: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;<span class="attr">name</span>:myName,<span class="attr">age</span>:myAge,<span class="attr">sex</span>:mySex&#125; = person;</span><br><span class="line"><span class="built_in">console</span>.log(myName); </span><br><span class="line"><span class="built_in">console</span>.log(myAge);</span><br><span class="line"><span class="built_in">console</span>.log(mySex);</span><br></pre></td></tr></table></figure><p>注意: let 中属性名后的值可以任意命名,myName 可以改为其他</p><p>本质: 对象解构本质上只有第二种方式,第一种只是简写了。其内部机制是先找到同名属性,再赋值给属性中的变量。前者只是个名字,用于匹配。后者才是接收值的变量。所以对象解构赋值中属性名顺序不一定要与右边对象属性名顺序一致</p><p><code>也可以嵌解构赋值</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; </span><br><span class="line">    p: [ </span><br><span class="line">        <span class="string">&#x27;hello&#x27;</span>, </span><br><span class="line">        &#123;<span class="attr">y</span>:<span class="string">&#x27;world&#x27;</span>&#125; </span><br><span class="line">    ], </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">p</span>:[x,&#123;y&#125;]&#125; = obj;</span><br><span class="line"><span class="built_in">console</span>.log(x + y);</span><br></pre></td></tr></table></figure><p><code>对象解构也可以赋予默认值,生效条件与数组的一致</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;a = <span class="number">1</span>&#125; = &#123;<span class="attr">a</span>:<span class="literal">undefined</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1 </span></span><br><span class="line"><span class="keyword">let</span> &#123;b = <span class="number">2</span>&#125; = &#123;<span class="attr">b</span>:<span class="literal">null</span>&#125; </span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// null</span></span><br></pre></td></tr></table></figure><p><code>使用对象解构,如果右边是基本数据类型,则将其转为包装类型,可以用同名属性获取其中内置的方法属性</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;k&#125; = <span class="number">1</span>;  </span><br><span class="line"><span class="built_in">console</span>.log(k); <span class="comment">// undefined </span></span><br><span class="line"><span class="keyword">let</span> &#123;length&#125; = <span class="string">&#x27;heihei&#x27;</span>; </span><br><span class="line"><span class="built_in">console</span>.log(length); <span class="comment">// 6 </span></span><br><span class="line"><span class="keyword">let</span> &#123;__proto__&#125; = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]; </span><br><span class="line"><span class="built_in">console</span>.log(__proto__); <span class="comment">// &#123;&#125;</span></span><br></pre></td></tr></table></figure><p><code>结构赋值右侧的数组所包含的元素不必和左侧的变量一一对应。左侧多余的变量的赋值为 undefined ,而右侧多于的值则会忽略。左侧的变量列表可以包含连续的逗号用以跳过右侧对应的值.此外解构赋值也适用于数组嵌套的情况,但是格式应当相同</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> [a,b,c] = [<span class="number">1</span>,<span class="number">2</span>]; <span class="comment">// 左边对于右边</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1 </span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 2 </span></span><br><span class="line"><span class="built_in">console</span>.log(c);<span class="comment">// undefined </span></span><br><span class="line"><span class="keyword">var</span> [a,b,c] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];<span class="comment">//右边多于左边 </span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1 </span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 2 </span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// 3 </span></span><br><span class="line"><span class="keyword">var</span> [a,,b,,c] = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>];<span class="comment">// 逗号跳过</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1 </span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 5 </span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// 9 </span></span><br><span class="line"><span class="keyword">var</span> [a,[b,c],d] = [<span class="number">1</span>,[<span class="number">3</span>,<span class="number">4</span>],<span class="number">5</span>]; <span class="comment">// 数组嵌套 </span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1 </span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 3 </span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// 4 </span></span><br><span class="line"><span class="built_in">console</span>.log(d); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><h4 id="函数参数的解构赋值"><a href="#函数参数的解构赋值" class="headerlink" title="函数参数的解构赋值"></a>函数参数的解构赋值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">[a,b,c,d]</span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(a,b,c,d);</span><br><span class="line">&#125; </span><br><span class="line">get([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Obj</span>(<span class="params">&#123;name,age&#125;</span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(name,age); </span><br><span class="line">&#125;</span><br><span class="line">Obj(&#123;<span class="attr">name</span>:<span class="string">&#x27;bruce&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;);</span><br></pre></td></tr></table></figure><h3 id="扩展运算符-…变量"><a href="#扩展运算符-…变量" class="headerlink" title="扩展运算符(…变量)"></a>扩展运算符(…变量)</h3><blockquote><p> 可以将数组、Map 、Set、元素集合、arguments、字符串等具有 Iterator 接口的可遍历数据结构转换成逗号分隔的形式,可应用于形参或数组合并中</p></blockquote><p>也可以将数组转变为非数组形式</p><ol><li><p>应用于函数中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]; </span><br><span class="line"><span class="built_in">console</span>.log(...ary); </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b,c</span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(a + b + c); </span><br><span class="line">&#125;  </span><br><span class="line">add(...ary);</span><br></pre></td></tr></table></figure></li><li><p>数组合并</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法1:  </span></span><br><span class="line"><span class="keyword">let</span> ary1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]; </span><br><span class="line"><span class="keyword">let</span> ary2 = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]; </span><br><span class="line"><span class="keyword">let</span> ary3 = [...ary1,...ary2];</span><br><span class="line"><span class="built_in">console</span>.log(ary3); </span><br><span class="line"></span><br><span class="line"><span class="comment">//方法2:  </span></span><br><span class="line">ary1.push(...ary2); </span><br><span class="line"><span class="built_in">console</span>.log(ary1);</span><br></pre></td></tr></table></figure></li><li><p>将伪数组转换成真正的数组</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> divs = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(divs <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// false </span></span></span><br><span class="line">    divs = [...divs]; </span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(divs <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// true</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>将数组转为非数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]; </span><br><span class="line"><span class="built_in">console</span>.log(...arr1);<span class="comment">//1 2 3</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="ES6新增方法"><a href="#ES6新增方法" class="headerlink" title="ES6新增方法"></a>ES6新增方法</h3><h4 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h4><h5 id="ES5新增数组方法"><a href="#ES5新增数组方法" class="headerlink" title="ES5新增数组方法"></a>ES5新增数组方法</h5><ul><li><p><code>数组.forEach(function(currentValue,index,arr)&#123;&#125;)</code></p><p><code>value</code>: 为数组的值</p><p><code>index</code>: 为索引值</p><p><code>arr</code>: 为数组本身</p><p>实现数组、伪数组、set 数据的遍历</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>; </span><br><span class="line">arr1.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,arr</span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(value); </span><br><span class="line">    <span class="built_in">console</span>.log(index); </span><br><span class="line">    <span class="built_in">console</span>.log(arr1);</span><br><span class="line">    sum += value; </span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br></pre></td></tr></table></figure></li><li><p><code>数组.filter(function(currentValue,index,arr)&#123;&#125;)</code></p><p>实现数组中满足某条件的数值的筛选,返回一个<code>新数组</code></p><p>参数值同 forEach</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">12</span>,<span class="number">66</span>,<span class="number">4</span>,<span class="number">88</span>,<span class="number">3</span>,<span class="number">7</span>]; </span><br><span class="line"><span class="keyword">var</span> arr2 = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">value,index</span>) </span>&#123; </span><br><span class="line">    <span class="comment">// return value &gt;= 20; </span></span><br><span class="line">    <span class="keyword">return</span> value % <span class="number">2</span> === <span class="number">0</span>; <span class="comment">// 实现筛选偶数 </span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr2);</span><br></pre></td></tr></table></figure></li><li><p><code>数组.some(function(currentValue,index,arr)&#123;&#125;)</code></p><p>用于查找数组是否有满足条件的数值</p><p>返回的是布尔值,如果有满足条件的值就返回 true ,否则为 false</p><p><code>当查找到第一个满足条件的数值时就停止查找,退出函数</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr  = [<span class="number">10</span>,<span class="number">30</span>,<span class="number">4</span>]; </span><br><span class="line"><span class="keyword">var</span> flag = arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123; </span><br><span class="line">    <span class="comment">// return value &gt; 20; </span></span><br><span class="line">    <span class="keyword">return</span> value &lt; <span class="number">3</span>; </span><br><span class="line">&#125;) </span><br><span class="line"><span class="built_in">console</span>.log(flag); <span class="comment">// false </span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;pink&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>]; </span><br><span class="line"><span class="keyword">var</span> flag1 = arr1.some(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> value == <span class="string">&#x27;pink&#x27;</span>; </span><br><span class="line">&#125;) </span><br><span class="line"><span class="built_in">console</span>.log(flag1); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>some 和其他两个区别: 利用 return true 可以使 some 停止迭代,forEach和filter不可以</code></p></li><li><p><code>数组.every(function(currentValue,index,arr), thisValue)</code></p><p>  用于检测数组所有元素是否都符合指定条件（通过函数提供）、在判断是否全选中好用</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检查ages数组中的所有值是否为18或更高：</span></span><br><span class="line"><span class="keyword">var</span> ages = [<span class="number">32</span>, <span class="number">33</span>, <span class="number">16</span>, <span class="number">40</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkAdult</span>(<span class="params">age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> age &gt;= <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&quot;demo&quot;</span>).innerHTML = ages.every(checkAdult); <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="ES6新增数组方法"><a href="#ES6新增数组方法" class="headerlink" title="ES6新增数组方法"></a>ES6新增数组方法</h5><ul><li><p><code>Array.of()</code>: 与Array()构造数组,区别在于对于单个整数参数,前者返回一个第一个值为参数值的数组,后者返回一个长度等于参数值的空数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = <span class="built_in">Array</span>.of(<span class="number">7</span>); </span><br><span class="line"><span class="keyword">const</span> arr2 = <span class="built_in">Array</span>(<span class="number">7</span>); </span><br><span class="line"><span class="built_in">console</span>.log(arr1,arr2); <span class="comment">// [7] [,,,,,,]</span></span><br></pre></td></tr></table></figure></li><li><p>Array.from方法(Array.from 方法从一个类似数组(既具有length属性)或可迭代对象(对象、字符串)中创建一个新的,浅拷贝的数组实例)</p><p><code>Array.from(目标对象,函数)</code></p><p><code>转换对象</code>时,对象里面的属性名应有双引号且必须是整数,<code>一定要有length属性</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arrayLike = &#123; </span><br><span class="line">    <span class="string">&quot;0&quot;</span>:<span class="string">&quot;zs&quot;</span>, </span><br><span class="line">    <span class="string">&quot;1&quot;</span>:<span class="string">&quot;ls&quot;</span>, </span><br><span class="line">    <span class="string">&quot;2&quot;</span>:<span class="string">&quot;ww&quot;</span>, </span><br><span class="line">    <span class="string">&quot;length&quot;</span>:<span class="number">3</span> <span class="comment">// 一定要有length属性 </span></span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> arr = <span class="built_in">Array</span>.from(arrayLike);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [&#x27;zs&#x27;,&#x27;ls&#x27;,&#x27;ww&#x27;]</span></span><br></pre></td></tr></table></figure><p><code>转换伪数组</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> weishuzu = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;div&#x27;</span>); </span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="built_in">Array</span>.from(weishuzu); </span><br><span class="line"><span class="built_in">console</span>.log(arr1 <span class="keyword">instanceof</span> <span class="built_in">Array</span>);</span><br></pre></td></tr></table></figure><p><code>转换字符串</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;123&#x27;</span>; </span><br><span class="line"><span class="keyword">var</span> str1 = <span class="built_in">Array</span>.from(str);</span><br><span class="line"><span class="built_in">console</span>.log(str1);<span class="comment">// [1,2,3]</span></span><br></pre></td></tr></table></figure></li><li><p><code>Array.from</code>: 中的函数用于对每个值进行操作</p><p>方法还可以接受第二个参数， 作用类似于数组的map方法,用来对每个元素进行处理，将处理后的值放入返回的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike2 = &#123; </span><br><span class="line">    <span class="string">&quot;0&quot;</span>:<span class="number">1</span>, </span><br><span class="line">    <span class="string">&quot;1&quot;</span>:<span class="number">2</span>, </span><br><span class="line">    <span class="string">&quot;length&quot;</span>:<span class="number">2</span> </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> newary  = <span class="built_in">Array</span>.from(arrayLike2,<span class="function"><span class="params">item</span> =&gt;</span> item * <span class="number">2</span>); </span><br><span class="line"><span class="built_in">console</span>.log(newary);</span><br></pre></td></tr></table></figure><p>所以将数据转为对象有两种方法: </p><ol><li><p>使用<code>扩展运算符</code> </p></li><li><p>使用 <code>Array.from</code> 区别在于前者无法转换对象,后者可以</p></li></ol></li><li><p>数组.find</p><p><code>array.find(function(item,index) &#123;&#125;)</code>:  返回符合函数中条件的<code>第一个数值</code>, item 是数组的每个值,index为其对应的索引值, 没有返回 undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [&#123; <span class="attr">id</span>:<span class="number">1</span>, <span class="attr">name</span>:<span class="string">&#x27;zhangsan&#x27;</span> &#125;, &#123; <span class="attr">id</span>:<span class="number">2</span>, <span class="attr">name</span>:<span class="string">&#x27;ls&#x27;</span> &#125;]; </span><br><span class="line"><span class="keyword">let</span> target = ary.find(<span class="function">(<span class="params">item,index</span>) =&gt;</span> item.id == <span class="number">2</span>); </span><br><span class="line"><span class="built_in">console</span>.log(target);</span><br></pre></td></tr></table></figure></li><li><p>数组.findIndex</p><p><code>array.findIndex(function(value,index)&#123;&#125; )</code>:  find <code>返回第一个</code>符合条件的数值的索引值, value 为值,index 为其索引值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="number">1</span>,<span class="number">10</span>,<span class="number">2</span>,<span class="number">18</span>]; </span><br><span class="line"><span class="keyword">let</span> ary1 = ary.findIndex(<span class="function">(<span class="params">value,index</span>) =&gt;</span> value &gt; <span class="number">9</span>); </span><br><span class="line"><span class="built_in">console</span>.log(ary1);</span><br></pre></td></tr></table></figure></li><li><p>数组.includes</p><p><code>array.includes(目标值)</code>: 返回的是布尔值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].includes(<span class="number">2</span>)); <span class="comment">// true </span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>,<span class="string">&#x27;a&#x27;</span>,<span class="number">3</span>].includes(<span class="string">&#x27;e&#x27;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p>数组.copyWithin 复制数组制定成员内容到数组内其他位置 </p><p><code>array.copyWithin(替换的目标的起始位置,替换内容的起始位置,替换内容的结束位置(不包括该位置))</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr3 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]; </span><br><span class="line">arr3.copyWithin(<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>); </span><br><span class="line"><span class="built_in">console</span>.log(arr3); <span class="comment">// [1,2,3,4,3,4,5,8]</span></span><br></pre></td></tr></table></figure></li><li><p>数组.fill 用给定内容替换数组内容</p><p> <code>array.fill(替换内容,替换开始位置,替换结束位置(不包括))</code>: 默认全部替换</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]; </span><br><span class="line">arr2.fill(<span class="string">&#x27;a&#x27;</span>); </span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// [a,a,a,a] </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>).fill(<span class="string">&#x27;a&#x27;</span>)); <span class="comment">// [a,a,a] </span></span><br><span class="line"><span class="built_in">console</span>.log(arr3.fill(<span class="string">&#x27;1&#x27;</span>,<span class="number">3</span>,<span class="number">5</span>)); <span class="comment">// [1,2,3,1,1,4,5,8]</span></span><br></pre></td></tr></table></figure></li><li><p>reduce 迭代 直接从第二项开始迭代</p><p><code>参数1:上一次迭代return的值 </code></p><p><code>参数2: 当前值</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr4 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>] </span><br><span class="line"><span class="keyword">const</span> sum = arr4.reduce(<span class="function">(<span class="params">prev,item</span>) =&gt;</span> &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(item); </span><br><span class="line">    <span class="comment">// console.log(prev); </span></span><br><span class="line">    <span class="keyword">return</span> item + prev; </span><br><span class="line">&#125;) <span class="comment">// 2 3 4 5 6</span></span><br><span class="line"><span class="built_in">console</span>.log(sum); <span class="comment">// 21</span></span><br></pre></td></tr></table></figure></li><li><p>reduceRight 跟 reduce一样 但是是从右边开始</p></li><li><p>keys 用于 <code>for...of...</code> 遍历数组每一项的<code>索引值</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr6 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> k <span class="keyword">of</span> arr6.keys()) &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(k); <span class="comment">// 0 1 2 3 4 5 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>values 用于 <code>for...of...</code> 遍历数组每一项的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> k <span class="keyword">of</span> arr.values()) &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(k); <span class="comment">// 1 2 3 4 5 6  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>entries 用于 <code>for...of...</code> 遍历数组每一项键值对 返回数值形式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> k <span class="keyword">of</span> arr6.entries()) &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(k); <span class="comment">// [0,1] [1,2] [2,3] [3,4] [4,5] [5,6] </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意: 所有数组方法的结束位置参数都是不包括在内 即顾前不顾后</p></li></ul><h3 id="字符串扩展"><a href="#字符串扩展" class="headerlink" title="字符串扩展"></a>字符串扩展</h3><h4 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h4><blockquote><p>利用反引号``定义字符串</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">`woshizykj`</span>;</span><br></pre></td></tr></table></figure><p>特点: </p><ol><li><p>可以解析变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">`zykj`</span>; </span><br><span class="line"><span class="built_in">console</span>.log(name <span class="keyword">instanceof</span> <span class="built_in">String</span>); </span><br><span class="line"><span class="keyword">let</span> sayHello = <span class="string">`hello my name is <span class="subst">$&#123;name&#125;</span>`</span>; </span><br><span class="line"><span class="built_in">console</span>.log(sayHello);</span><br></pre></td></tr></table></figure></li><li><p>可以空行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = &#123; <span class="attr">name</span>:<span class="string">&#x27;zd&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span> &#125;; </span><br><span class="line"><span class="keyword">let</span> html = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;div&gt; </span></span><br><span class="line"><span class="string">     &lt;span&gt;<span class="subst">$&#123;result.name&#125;</span>&lt;/span&gt; </span></span><br><span class="line"><span class="string">     &lt;span&gt;<span class="subst">$&#123;result.age&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt; </span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure></li><li><p>可以调用函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = <span class="function">() =&gt;</span> &#123; <span class="keyword">return</span> <span class="string">&#x27;我是fn函数&#x27;</span>; &#125; </span><br><span class="line"><span class="keyword">let</span> html1 = <span class="string">`我是模板字符串 <span class="subst">$&#123;fn()&#125;</span>`</span>; <span class="comment">// 我是模板字符串 我是fn函数 </span></span><br><span class="line"><span class="built_in">console</span>.log(html1);</span><br></pre></td></tr></table></figure></li></ol><p>注意: 调用外部变量和函数必须用 ${} , {} 中可以放入任意 js 表达式</p><p><code>String.raw</code> 用来将模板字符串转义(包括变量)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;world&#x27;</span>; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.raw<span class="string">`hello<span class="subst">$&#123;str&#125;</span>`</span>); <span class="comment">// helloworld</span></span><br></pre></td></tr></table></figure><h4 id="三种确定字符串是否包含另外一个字符串方法"><a href="#三种确定字符串是否包含另外一个字符串方法" class="headerlink" title="三种确定字符串是否包含另外一个字符串方法"></a>三种确定字符串是否包含另外一个字符串方法</h4><blockquote><p> ES6提供了 三种新的用来确定一个字符串是否包含了另外一个字符串的方法(原先只有 indexOf) : startsWith、endsWith、includes</p></blockquote><p>判断字符串开头结尾</p><p><code>字符串.startsWith(&#39;xxx&#39;);</code> : 判断 str 字符串是否以 xxx 开头</p><p><code>字符串.endsWith(&#39;xxx&#39;); </code>: 判断 str 字符串是否以 xxx 结尾</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;hello myworld&#x27;</span>; </span><br><span class="line"><span class="comment">// startsWith 判断字符串是否以某字符串开头 返回布尔值 </span></span><br><span class="line"><span class="built_in">console</span>.log(str.startsWith(<span class="string">&#x27;he&#x27;</span>)); <span class="comment">// true </span></span><br><span class="line"><span class="comment">// endsWith 判断字符串是否以某字符串结尾 返回布尔值</span></span><br><span class="line"><span class="built_in">console</span>.log(str.endsWith(<span class="string">&#x27;rld&#x27;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>string.includes(查找字符,开始查找的位置)</code>: 判断字符串是否有某个字符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str1 = <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str1.includes(<span class="string">&#x27;hello&#x27;</span>,<span class="number">2</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>以上三种方法都接受第二个参数,表示开始搜索的位置</p><h4 id="重复某个字符串"><a href="#重复某个字符串" class="headerlink" title="重复某个字符串"></a>重复某个字符串</h4><blockquote><p>返回新的字符串</p></blockquote><p><code>字符串.repeat(n)</code>: 将字符串 str 重复 n 次,返回新的,不改变旧的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;x&#x27;</span>.repeat(<span class="number">5</span>); </span><br><span class="line"><span class="built_in">console</span>.log(str); </span><br><span class="line">str1 = str.repeat(<span class="number">2</span>); </span><br><span class="line"><span class="built_in">console</span>.log(str1);</span><br></pre></td></tr></table></figure><h4 id="字符串补全"><a href="#字符串补全" class="headerlink" title="字符串补全"></a>字符串补全</h4><p><code>padStart(补全后长度,补全的字符串)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str  = <span class="string">&#x27;xxx&#x27;</span>.padStart(<span class="number">5</span>,<span class="string">&#x27;ab&#x27;</span>); </span><br><span class="line"><span class="built_in">console</span>.log(str);<span class="comment">// abxxx</span></span><br></pre></td></tr></table></figure><p><code>padEnd(补全后长度,补全的字符串)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str1 = <span class="string">&#x27;xxx&#x27;</span>.padEnd(<span class="number">6</span>,<span class="string">&#x27;abb&#x27;</span>); </span><br><span class="line"><span class="built_in">console</span>.log(str1);<span class="comment">// xxxabb</span></span><br></pre></td></tr></table></figure><p>若第一个参数小于原字符串长度,则返回原字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str1 = <span class="string">&#x27;xxx&#x27;</span>.padEnd(<span class="number">1</span>,<span class="string">&#x27;abbaaaaa&#x27;</span>); </span><br><span class="line"><span class="built_in">console</span>.log(str1);<span class="comment">// xxx</span></span><br></pre></td></tr></table></figure><p>若补全的字符串长度加上原字符串长度大于第一个参数,则会截除补全后的字符串多余的部分</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str1 = <span class="string">&#x27;xxx&#x27;</span>.padEnd(<span class="number">6</span>,<span class="string">&#x27;abbaaaaa&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str1)<span class="comment">// xxxabb</span></span><br></pre></td></tr></table></figure><h3 id="数值的扩展"><a href="#数值的扩展" class="headerlink" title="数值的扩展"></a>数值的扩展</h3><blockquote><p> ES6提供了二进制和八进制的新写法</p></blockquote><ul><li><p>二进制: 0b(0B)开头</p></li><li><p>八进制: 0o(0O)开头</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">0o767</span> === <span class="number">503</span>)<span class="comment">// true </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0b011</span> === <span class="number">3</span>)<span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>如果要将改写法的二进制和八进制转为十进制,则要调用Number方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="number">0o767</span>))<span class="comment">// 503</span></span><br></pre></td></tr></table></figure><blockquote><p>Number.isFinite()、Number.isNaN()</p></blockquote><p><code>Number.isFinite</code>: 判断一个数值是否是有限的</p><p><code>Number.isNaN</code>: 判断一个值是否是 NaN</p><p>这两个方法与传统的全局方法在于: 传统方法会先将非数值转为数值在进行判断。而新方法只对数值有效,对于非数值一律返回 false</p><p>ES6 还将<code>parseInt</code>和<code>parseFloat</code>移植到了 Number 对象上面,行为保持不变</p><p><code>Number.isInteger()</code>:  判断一个数值是否是整数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="number">1</span>)); <span class="comment">// true </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="string">&#x27;1&#x27;</span>)); <span class="comment">// false </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="number">1.0</span>)); <span class="comment">// true </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="number">3.1</span>)); <span class="comment">// false </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="string">&#x27;nu&#x27;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>注意: js中 1 和 1.0 都是同样的存储方式,所以被视为同一个值</p><h3 id="函数的扩展"><a href="#函数的扩展" class="headerlink" title="函数的扩展"></a>函数的扩展</h3><h4 id="函数参数设置默认值"><a href="#函数参数设置默认值" class="headerlink" title="函数参数设置默认值"></a>函数参数设置默认值</h4><p><code>function xx(arg1=xx,arg2=yy,...)&#123;&#125; </code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">x=<span class="number">0</span>,y=<span class="number">0</span></span>) </span>&#123; </span><br><span class="line">    <span class="built_in">this</span>.x = x;</span><br><span class="line">    <span class="built_in">this</span>.y = y;            </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> star = <span class="keyword">new</span> Star(); </span><br><span class="line"><span class="built_in">console</span>.log(star.x,star.y);</span><br></pre></td></tr></table></figure><p>注意: 参数默认值是不传值的,每次调用都会重新计算默认值。一旦设置了默认值,函数进行声明初始化时,参数列表会形成一个作用域。</p><br><p>可以解构赋值默认值配合使用</p><p>第一种: <code>只有赋值结构有默认值</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">&#123;x,y=<span class="number">5</span>&#125;</span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(x,y); </span><br><span class="line">&#125;</span><br><span class="line">foo(); <span class="comment">// 报错 </span></span><br><span class="line">foo(&#123;&#125;); <span class="comment">// undefined 5</span></span><br><span class="line">foo(&#123;<span class="attr">x</span>:<span class="number">5</span>&#125;); <span class="comment">// 5 5 </span></span><br><span class="line">foo(&#123;<span class="attr">x</span>:<span class="number">5</span>,<span class="attr">y</span>:<span class="number">6</span>&#125;); <span class="comment">//5 6</span></span><br></pre></td></tr></table></figure><p>第二种: <code>参数和赋值结构都有默认值</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetch</span>(<span class="params">&#123;x,y=<span class="number">5</span>&#125; = &#123;&#125;</span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(x,y); </span><br><span class="line">&#125; </span><br><span class="line">fetch(); <span class="comment">// undefined 5</span></span><br><span class="line">fetch(&#123;&#125;); <span class="comment">// undefined 5</span></span><br><span class="line">fetch(&#123;<span class="attr">x</span>:<span class="number">3</span>&#125;); <span class="comment">// 3 5 </span></span><br><span class="line">fetch(&#123;<span class="attr">x</span>:<span class="number">3</span>,<span class="attr">y</span>:<span class="number">10</span>&#125;); <span class="comment">// 3 10 </span></span><br></pre></td></tr></table></figure><h4 id="函数的length"><a href="#函数的length" class="headerlink" title="函数的length"></a>函数的length</h4><p>函数参数如果指定了默认值,那么函数的参数只会计算第一个指定了默认值的参数前面的参数个数,第一个指定了默认值的参数及其后面的参数(不管有没有指定默认值)都不计入 length 属性中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params">x,y=<span class="number">2</span>,z,k=<span class="number">1</span></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(foo.length);<span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h4 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h4><p>用于获取函数多余的参数,形式为…变量名,变量名代表的是一个数组变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x,...args</span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(...args); </span><br><span class="line">&#125; </span><br><span class="line">foo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>); <span class="comment">// [2,3,4]</span></span><br></pre></td></tr></table></figure><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><blockquote><p>rest参数必须是最后一个参数。函数的length不包括rest参数</p></blockquote><p>name 属性</p><p>函数的 name 属性返回函数的名字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Big</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Big&#x27;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">console</span>.log(Big.name);<span class="comment">// Big</span></span><br></pre></td></tr></table></figure><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><p><code>(参数1,参数2...) =&gt; &#123;函数体&#125;</code></p><h5 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a>特性</h5><ol><li><p>如果函数体只有一句代码,且代码的执行结果就是函数的返回值,函数体大括号可以省略</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function">(<span class="params">a,b</span>) =&gt;</span> a + b; </span><br><span class="line"><span class="built_in">console</span>.log(fn(<span class="number">1</span>,<span class="number">2</span>));</span><br></pre></td></tr></table></figure></li><li><p>箭头函数中,如果形参只有一个,形参外侧的小括号可以省略</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fun  = <span class="function"><span class="params">v</span> =&gt;</span> v; </span><br><span class="line"><span class="built_in">console</span>.log(fun(<span class="number">1</span>));</span><br></pre></td></tr></table></figure></li><li><p><code>箭头函数不绑定 this 关键字,箭头函数中的 this 指向的是函数定义位置所在的对象中的(即箭头函数定义时所在花括号的外层的 this 的指向)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">name</span>: <span class="number">11</span>&#125;; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>); </span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> fun = fn(); <span class="comment">//返回window fun(); </span></span><br><span class="line"><span class="comment">// 返回window</span></span><br></pre></td></tr></table></figure><p>解析: 因为fun() 的函数体是在 fn() 中定义,所以其中的 this 即为 fn 中的 this,也就是通过 call 设定的 obj,所以输出值不是 fun 而是 obj</p></li><li><p>箭头函数里没有 arguments 对象 用 rest 参数代替</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fn = <span class="function">(<span class="params">x,y</span>) =&gt;</span> &#123;   </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>箭头函数不能做构造函数 不能 new 调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fn = <span class="function">(<span class="params">x,y</span>) =&gt;</span> &#123; </span><br><span class="line">    <span class="built_in">this</span>.name = x; </span><br><span class="line">    <span class="built_in">this</span>.age = y; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> fn(<span class="string">&#x27;bruce&#x27;</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>箭头函数主要用于具名函数的声明和简化回调函数</p></li></ol><h5 id="箭头函数面试题"><a href="#箭头函数面试题" class="headerlink" title="箭头函数面试题"></a>箭头函数面试题</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">100</span>; </span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    age: <span class="number">20</span>, </span><br><span class="line">    say: <span class="function">() =&gt;</span> &#123; </span><br><span class="line">        alert(<span class="built_in">this</span>.age); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">obj.say(); <span class="comment">// 100</span></span><br></pre></td></tr></table></figure><p>解析: 因为 say 函数定义在 obj 中,而 obj 是个对象,不形成作用域,所以 say 的指向为 window</p><h3 id="对象扩展"><a href="#对象扩展" class="headerlink" title="对象扩展"></a>对象扩展</h3><h4 id="对象的简写赋值"><a href="#对象的简写赋值" class="headerlink" title="对象的简写赋值"></a>对象的简写赋值</h4><p>可以直接将函数声明、变量写进对象中,属性名即为变量名,属性值即为该变量的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;bruce&#x27;</span>; </span><br><span class="line"><span class="keyword">let</span> age = <span class="number">20</span>; <span class="comment">// 简写赋值 </span></span><br><span class="line"><span class="keyword">let</span> school = &#123;name,age&#125;; </span><br><span class="line"><span class="keyword">let</span> obj = &#123; </span><br><span class="line">    fn()&#123;&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(school.name,school.age) <span class="comment">// &#x27;bruce&#x27; 20</span></span><br></pre></td></tr></table></figure><h4 id="对象里用变量表示属性名"><a href="#对象里用变量表示属性名" class="headerlink" title="对象里用变量表示属性名"></a>对象里用变量表示属性名</h4><p>属性名使用 [] 里面就可以使用变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;name&#x27;</span>; </span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; [str]:name &#125;; </span><br><span class="line"><span class="built_in">console</span>.log(obj2.name) <span class="comment">// bruce</span></span><br></pre></td></tr></table></figure><h4 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign"></a>Object.assign</h4><blockquote><p>将源对象所有可枚举属性复制到目标对象(浅拷贝)</p></blockquote><p><code>Object.assign(target,sources...)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj3 = &#123; </span><br><span class="line">    age:<span class="number">20</span>,</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> obj4 = <span class="built_in">Object</span>.assign(obj2,obj3); </span><br><span class="line"><span class="built_in">console</span>.log(obj4);</span><br></pre></td></tr></table></figure><p><code>可以利用该方法实现浅拷贝</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj5 = &#123;&#125; </span><br><span class="line"><span class="keyword">let</span> obj6 = <span class="built_in">Object</span>.assign(obj5,obj4); </span><br><span class="line"><span class="built_in">console</span>.log(obj6)</span><br></pre></td></tr></table></figure><p><code>深拷贝</code>: 拷贝多层,每一级别的数据都会重新开辟地址拷贝</p><p>拷贝方法: 利用递归函数</p><p>利用 for in 和 递归函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepcopy</span>(<span class="params">newobj,oldobj</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> oldobj) &#123; </span><br><span class="line">        <span class="keyword">var</span> item = oldobj[k]; <span class="comment">//判断是否是数组 </span></span><br><span class="line">        <span class="keyword">if</span>(item <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123; </span><br><span class="line">            newobj[k] = []; </span><br><span class="line">            deepcopy(newobj[k],item); </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123; </span><br><span class="line">            newobj[k] = &#123;&#125;; </span><br><span class="line">            deepcopy(newobj[k],item); </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            newobj[k] = item; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意: 因为数组也是对象,所以要放在对象之前</p><h4 id="对象也可以使用扩展运算符"><a href="#对象也可以使用扩展运算符" class="headerlink" title="对象也可以使用扩展运算符"></a>对象也可以使用扩展运算符</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj11 = &#123;<span class="attr">name</span>:<span class="string">&#x27;clark&#x27;</span>&#125;; </span><br><span class="line"><span class="keyword">let</span> obj22 = &#123;<span class="attr">age</span>:<span class="number">20</span>&#125; </span><br><span class="line"><span class="keyword">let</span> obj33 = &#123;...obj11,...obj22&#125;; </span><br><span class="line"><span class="built_in">console</span>.log(obj33); <span class="comment">// &#123;name:&#x27;clark&#x27;,age:20&#125;</span></span><br></pre></td></tr></table></figure><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul><li><p><code>Object.defineProperty(目标对象,&#39;修改的属性&#39;,descriptor)</code></p><p>其中 descriptor 以对象形式 {} 说明,包括了</p><p><code>value</code>: 设置属性的值</p><p><code>writable</code>: 值是否可以重写 true | false 默认为 false</p><p><code>enumerable</code>: 目标属性是否可以被遍历   true | false 默认为 false</p><p><code>configurable</code>: 目标属性是否可以被删除或是否可以再次修改特性  true | false 默认为 false</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; </span><br><span class="line">    id : <span class="number">1</span>, </span><br><span class="line">    pname : <span class="string">&#x27;xiaomi&#x27;</span>, </span><br><span class="line">    price : <span class="number">1999</span> </span><br><span class="line">&#125; <span class="comment">// 修改添加对象的属性 </span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">&#x27;num&#x27;</span>,&#123; </span><br><span class="line">    value: <span class="number">1000</span> </span><br><span class="line">&#125;) </span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">&#x27;price&#x27;</span>,&#123; </span><br><span class="line">    value: <span class="number">9.9</span> </span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">&#x27;id&#x27;</span>,&#123; </span><br><span class="line">    writable:<span class="literal">false</span> </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>注意: 一开始就设置的好的属性如果没有利用该方法就不会被影响。只能修改已有属性或者新建自有属性,但不能修改继承属性</p></li><li><p><code>Object.getOwnPropertyDescriptor(对象名,对象属性名)</code>: 返回某个对象特定属性的属性描述符)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = &#123; </span><br><span class="line">    num : &#123; </span><br><span class="line">        num1 : <span class="number">2</span> </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptor(&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;,<span class="string">&quot;x&quot;</span>));<span class="comment">//&#123;value: 1, writable: true, enumerable: true, configurable: true&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><code>Object.keys(对象名)</code></p><p>获取对象的所有可枚举的自有属性属性名**,**以数组形式返回</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="built_in">Object</span>.keys(obj);</span><br><span class="line"><span class="comment">// console.log(arr); </span></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(value); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>与 for(var k in obj){} 的区别在于后者返回字符串 前者返回数组</p></li><li><p><code>Object.values 返回对象的属性值 数组形式</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>:<span class="string">&#x27;bruce&#x27;</span>, &#125; ;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(obj)); <span class="comment">// [&#x27;bruce&#x27;]</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>Object.entries 返回对象的属性和值  二维数组形式</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>:<span class="string">&#x27;bruce&#x27;</span>, &#125; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(obj)); <span class="comment">// [[&#x27;name&#x27;,&#x27;bruce&#x27;]]</span></span><br></pre></td></tr></table></figure></li></ul><p>对象的解构赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;x,y,...z&#125; = &#123;<span class="attr">x</span>:<span class="number">1</span>,<span class="attr">y</span>:<span class="number">2</span>,<span class="attr">a</span>:<span class="number">3</span>,<span class="attr">b</span>:<span class="number">4</span>&#125;; </span><br><span class="line"><span class="built_in">console</span>.log(z); <span class="comment">// &#123;a:3,b:4&#125;</span></span><br></pre></td></tr></table></figure><p>对象的扩展运算符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">x</span>:<span class="number">1</span>,<span class="attr">y</span>:<span class="number">2</span>&#125;; </span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;...obj&#125;; </span><br><span class="line"><span class="built_in">console</span>.log(obj1); <span class="comment">// &#123;x:1,y:2&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Set数据结构"><a href="#Set数据结构" class="headerlink" title="Set数据结构"></a>Set数据结构</h3><blockquote><p>类似于数组,但是会自动消除重复的数据,适用于搜索引擎。即成员的值都是唯一的,没有key 没有索引 无法通过索引获取</p></blockquote><h4 id="Set数据结构的创建"><a href="#Set数据结构的创建" class="headerlink" title="Set数据结构的创建"></a>Set数据结构的创建</h4><p><code>new Set()</code>;</p><p>参数必须是数组或者是类数组或者是有 iterable 接口</p><p>有 iterable 接口: 数组 arguments DOM 元素集合 set Map 字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a  = <span class="keyword">new</span> <span class="built_in">Set</span>(); </span><br><span class="line"><span class="built_in">console</span>.log(a.size); <span class="comment">// 0 </span></span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>]); </span><br><span class="line"><span class="built_in">console</span>.log(b); </span><br><span class="line"><span class="built_in">console</span>.log(b.size); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>可以利用 Set 数据结构对数组去重</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s3 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]); </span><br><span class="line"><span class="built_in">console</span>.log(...s3);</span><br></pre></td></tr></table></figure><h4 id="Set数据结构方法"><a href="#Set数据结构方法" class="headerlink" title="Set数据结构方法"></a>Set数据结构方法</h4><ul><li><p><code>set.size</code>: 返回实例的值个数</p></li><li><p><code>set.add(value)</code>: 添加某个值 返回Set解构本身</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s1 = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">s1.add(<span class="string">&#x27;pink&#x27;</span>).add(<span class="string">&#x27;red&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s1);</span><br></pre></td></tr></table></figure></li><li><p><code>set.delete(value)</code>: 删除某个值 返回布尔值显示删除是否成功</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> r1 = s1.delete(<span class="string">&#x27;red&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s1); </span><br><span class="line"><span class="built_in">console</span>.log(r1); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p><code>set.has()</code>: 判断是否存在某个值 返回布尔值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> r2 = s1.has(<span class="string">&#x27;pink&#x27;</span>); </span><br><span class="line"><span class="built_in">console</span>.log(r2);<span class="comment">//true</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>set.clear()</code>: 删除全部数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s1.clear();</span><br><span class="line"><span class="built_in">console</span>.log(s1);</span><br></pre></td></tr></table></figure></li></ul><h4 id="遍历Set数据结构"><a href="#遍历Set数据结构" class="headerlink" title="遍历Set数据结构"></a>遍历Set数据结构</h4><blockquote><p>利用forEach函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s2 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]); </span><br><span class="line">s2.forEach(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(value));</span><br></pre></td></tr></table></figure><p>Set 实例也有 keys、values、entries 方法,由于 Set 数据类型没有索引,所以 keys 和 values 返回的是同样的值</p><h4 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a>WeakSet</h4><p>与 Set 数据类型相同,也是不重复的值的集合。但是与 Set 有两个区别: </p><ol><li><p>WeakSet 的成员必须是对象类型的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="built_in">WeakSet</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);<span class="comment">//报错</span></span><br></pre></td></tr></table></figure></li><li><p>WeakSet 的对象都是弱引用,即垃圾回收机制不考虑 WeakSet 对该对象的引用,而是会继续回收该对象</p><p>垃圾回收机制依赖引用计数,当一个数值的引用次数不为 0,就无法被回收。结束该值的使用后,有时会忘记取消引用,导致该对象之前所占内存无法释放,进而可能引发内存泄漏。而 WeakSet 的引用都不计入垃圾回收机制,所以就不存在这个问题。由于这些特点,WeakSet 无法遍历也没有 size 属性,因为其成员随时可能消失。</p></li></ol><h3 id="Symbol数据类型"><a href="#Symbol数据类型" class="headerlink" title="Symbol数据类型"></a>Symbol数据类型</h3><blockquote><p>是一个基本数据类型 表示独一无二的值 </p></blockquote><p>通过<code>Symbol()</code>方法直接创造 Symbol 类型值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym1 = <span class="built_in">Symbol</span>(); </span><br><span class="line"><span class="keyword">let</span> sym2 = <span class="built_in">Symbol</span>();</span><br></pre></td></tr></table></figure><p>注意: 不能用 new 调用,因为 Symbol 是一个基本数据类型而不是函数</p><br><p>Symbol 函数可接受一个参数 用以描述当前 Symbol 值(相当于一个键值)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym3 = <span class="built_in">Symbol</span>(<span class="string">&#x27;one&#x27;</span>); </span><br><span class="line"><span class="keyword">let</span> sym4 = <span class="built_in">Symbol</span>(<span class="string">&#x27;one&#x27;</span>); </span><br><span class="line"><span class="built_in">console</span>.log(sym3 === sym4); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><br><p>Symbol 不可以进行数值运算,但是可以转为字符串和布尔值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// console.log(Symbol(3) +1); 错误</span></span><br><span class="line"><span class="comment">// console.log(Symbol(&#x27;1&#x27;) + &#x27;bruce&#x27;) 错误</span></span><br></pre></td></tr></table></figure><br><p><code>Symbol.for(参数)</code>: 根据描述寻找对应值 如果之前有相同参数的 Symbol 值,则返回这个值,否则则创建一个新的 Symbol </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> zf1 = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;zhufeng&#x27;</span>); </span><br><span class="line"><span class="keyword">let</span> zf2 = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;zhufeng&#x27;</span>); </span><br><span class="line"><span class="built_in">console</span>.log(zf1 === zf2); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>Symbol.keyFor(Symbol值)</code>: 返回 Symbol.for 找到或创造的 Symbol 值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>.keyFor(zf2));</span><br></pre></td></tr></table></figure><p>用途: Symbol 数据类型主要用于属性名,防止对象内属性名的冲突</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; [sym1]:<span class="string">&#x27;bruce&#x27;</span>, [sym2]:<span class="string">&#x27;clark&#x27;</span> &#125; ;</span><br><span class="line"><span class="built_in">console</span>.log(obj[sym1]); </span><br><span class="line"><span class="built_in">console</span>.log(obj.sym2); </span><br><span class="line">obj[sym3] = <span class="string">&#x27;diana&#x27;</span>; </span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br></pre></td></tr></table></figure><p>注意: Symbol 做为属性名时,不会出现在<code>for in</code> <code>for of</code> <code>Object.keys</code> <code>Object.getOwnPropertyNames</code></p><h3 id="Map数据类型"><a href="#Map数据类型" class="headerlink" title="Map数据类型"></a>Map数据类型</h3><blockquote><p>一个构造函数,代表了键值对的集合,键的范围包括各种类型的值而不局限于字符串</p></blockquote><h4 id="创建实例-1"><a href="#创建实例-1" class="headerlink" title="创建实例"></a>创建实例</h4><p><code>new Map([[key1,value1],[key2,value2],...])</code>: 参数是一个二维数组,每一项内嵌数组里有key和对应的映射值value</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map1 =  <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="number">1</span>,<span class="string">&#x27;zhufeng&#x27;</span>],[<span class="literal">false</span>,&#123;<span class="attr">name</span>:<span class="string">&#x27;bruce&#x27;</span>&#125;]]);</span><br></pre></td></tr></table></figure><p>注意: </p><ol><li>属性名不能重复,因为是映射关系,一个值只能映射一个值</li></ol><h4 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h4><p><code>属性.size</code>: 映射对的个数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(map2.size); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p><code>map.get(key)</code>: 获取key键的映射值,key值不用转为字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> age = map2.get(<span class="number">1</span>); </span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">// sz </span></span><br><span class="line"><span class="keyword">const</span> bol = map2.get(<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">console</span>.log(bol);</span><br></pre></td></tr></table></figure><p><code>map.set(key,value)</code>: 给键 key 设置值 value</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map2.set(<span class="number">1</span>,<span class="string">&#x27;hz&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(map2.get(<span class="number">1</span>)); <span class="comment">// hz</span></span><br></pre></td></tr></table></figure><p><code>map.has(key)</code>: 判断 key 键有没有对应的 value 值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(map2.has(<span class="literal">false</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>map.delete(key)</code>: 删除 key 键 返回布尔值 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map2.delete(<span class="literal">false</span>); </span><br><span class="line"><span class="built_in">console</span>.log(map2.has(<span class="literal">false</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><code>map2.forEach((value,index,input) =&gt; &#123;&#125;)</code>:  遍历 map 数据 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">map2.forEach(<span class="function">(<span class="params">value,index</span>) =&gt;</span> &#123; </span><br><span class="line">    <span class="built_in">console</span>.log([index,value]); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>map.clear()</code>:  清空所有映射</p><p><code>map.keys()</code>:  获取键值 用于遍历</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> k <span class="keyword">of</span> map2.keys()) &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(k); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>map.values()</code>: 获取映射值 用于遍历</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> k <span class="keyword">of</span> map2.values()) &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(k); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>map.entries()</code>: 获取映射对</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> k <span class="keyword">of</span> map2.entries()) &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(k); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="WeakMap"><a href="#WeakMap" class="headerlink" title="WeakMap"></a>WeakMap</h4><p>与 Map 基本相同,但有两个区别: </p><ol><li><p>键名只能用对象</p></li><li><p>键名所指向的对象不计入垃圾回收机制</p></li></ol><p>由于这些特性,WeakMap 数据同样没有 size 属性也无法遍历</p><p>注意: WeakMap 弱引用的只是键名而不是键值。</p><h3 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h3><blockquote><p>用于代理对象,拦截/改写对对象的操作</p></blockquote><h4 id="创建实例-2"><a href="#创建实例-2" class="headerlink" title="创建实例"></a>创建实例</h4><p><code>new Proxy(target,handler)</code>:</p><p>第一个参数: 代理的对象也可以是函数</p><p>第二个参数: 配置对象,对于每一个拦截的操作,都需要提供一个对应的处理函数,该函数将拦截对应的操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> proxy1 = <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj,&#123; </span><br><span class="line">    get(target,key,proxy) &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;get&#x27;</span>) </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;haha&#x27;</span>; </span><br><span class="line">    &#125;, </span><br><span class="line">    set() &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;set&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>注意: 必须是对 Proxy 实例操作其代理的对象才能执行拦截的函数</p><h4 id="Proxy拦截对象操作"><a href="#Proxy拦截对象操作" class="headerlink" title="Proxy拦截对象操作"></a>Proxy拦截对象操作</h4><p>get: 用于拦截对对象属性值的读取,三个参数</p><p>参数:</p><p><code>target</code>: 原对象  </p><p><code>propKey</code> : 读取的属性名 </p><p><code>receiver</code> : 调用的 proxy 对象</p><p>利用 get 拦截操作实现数组读取负数索引</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]; </span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(arr,&#123; </span><br><span class="line">    get:<span class="function"><span class="keyword">function</span>(<span class="params">target,prop,receiver</span>) </span>&#123; </span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Number</span>(prop) &lt; <span class="number">0</span>) &#123; </span><br><span class="line">            <span class="keyword">return</span> target[target.length+<span class="built_in">Number</span>(prop)];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="keyword">return</span> target[prop]; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;) </span><br><span class="line"><span class="built_in">console</span>.log(proxy[<span class="number">-4</span>]);</span><br></pre></td></tr></table></figure><hr/><p>set: 用于拦截对对象属性值的值的设置,四个参数</p><p>参数:</p><p><code>target</code>: 原对象  </p><p><code>propKey</code>: 读取的属性名 </p><p><code>value</code>: 设置的值  </p><p><code>receiver</code>: 调用的 proxy 对象</p><p>set 实现属性设置的限制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; </span><br><span class="line">    name:<span class="string">&#x27;bruce&#x27;</span>, </span><br><span class="line">    age:<span class="number">20</span> </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj,&#123; </span><br><span class="line">    set:<span class="function"><span class="keyword">function</span>(<span class="params">target,propKey,value,receiver</span>) </span>&#123; </span><br><span class="line">        <span class="keyword">if</span>(propKey === <span class="string">&#x27;age&#x27;</span>) &#123; </span><br><span class="line">            <span class="keyword">if</span>(value &gt;= <span class="number">100</span>) &#123; </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;exceed the limit!&#x27;</span>) </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">                target[propKey] = value; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;) </span><br><span class="line">proxy.age = <span class="number">90</span>; </span><br><span class="line"><span class="built_in">console</span>.log(obj.age); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><hr/><p>has: 拦截in运算符</p><p>参数:</p><p><code>target</code>: 原对象  </p><p><code>propKey</code> : 读取的属性名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>:<span class="string">&#x27;zhufeng&#x27;</span>&#125;; </span><br><span class="line"><span class="keyword">let</span> proxy1 = <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj,&#123; </span><br><span class="line">    get(target,propKey,receiver) &#123; </span><br><span class="line">        <span class="comment">// target:原对象 </span></span><br><span class="line">        <span class="comment">// Propkey:获取的属性名 </span></span><br><span class="line">        <span class="comment">// receiver 当前Proxy实例 </span></span><br><span class="line">        <span class="keyword">return</span> target[propKey] </span><br><span class="line">    &#125;, set(target,propKey,value,receiver) &#123; </span><br><span class="line">        <span class="comment">// target:原对象 </span></span><br><span class="line">        <span class="comment">// Propkey:获取的属性名 </span></span><br><span class="line">        <span class="comment">// value:设置的值 </span></span><br><span class="line">        <span class="comment">// receiver 当前Proxy实例 </span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;set&#x27;</span>); </span><br><span class="line">        target[propKey] = value; </span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="comment">// has 拦截in运算符</span></span><br><span class="line">    has(target,propKey) &#123; </span><br><span class="line">        <span class="comment">// console.log(&#x27;yes&#x27;); </span></span><br><span class="line">        <span class="keyword">return</span> propKey <span class="keyword">in</span> target; </span><br><span class="line">    &#125;, </span><br><span class="line">&#125;) </span><br><span class="line"><span class="built_in">console</span>.log(proxy1.name); <span class="comment">// zhufeng </span></span><br><span class="line">proxy1.name = <span class="string">&#x27;haha&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj[<span class="string">&#x27;name&#x27;</span>]); <span class="comment">// haha </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> proxy1); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="Proxy拦截函数操作"><a href="#Proxy拦截函数操作" class="headerlink" title="Proxy拦截函数操作"></a>Proxy拦截函数操作</h4><p>apply: 用于拦截函数的执行,三个参数</p><p>参数:</p><p><code>target</code> : 原函数  </p><p><code>object</code> : 函数中 this 指向 </p><p><code>args</code> : 参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> proxy2 = <span class="keyword">new</span> <span class="built_in">Proxy</span>(getObj,&#123;</span><br><span class="line">    <span class="comment">// 拦截函数执行 </span></span><br><span class="line">    apply(target,object,args) &#123; </span><br><span class="line">        <span class="comment">// target:原函数 </span></span><br><span class="line">        <span class="comment">// args:传入的参数 数组形式 </span></span><br><span class="line">        <span class="comment">// obejct: 修改函数this指向 </span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;function&#x27;</span>); </span><br><span class="line">        <span class="built_in">console</span>.log(args); </span><br><span class="line">        <span class="built_in">console</span>.log(object); </span><br><span class="line">        <span class="keyword">if</span>(object) &#123; </span><br><span class="line">            object.fn = target; </span><br><span class="line">            object.fn(...args); </span><br><span class="line">            <span class="keyword">delete</span> object.fn; </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            target(...args); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;,</span><br><span class="line">&#125;) </span><br><span class="line">proxy2();<span class="comment">// function [] undefined NaN </span></span><br><span class="line">proxy2(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">// function [1,2] undefiend 3 </span></span><br><span class="line">proxy2.call(&#123;<span class="attr">name</span>:<span class="string">&#x27;bruce&#x27;</span>&#125;,<span class="number">1</span>,<span class="number">2</span>);<span class="comment">// function [1,2]  &#123;name:&#x27;bruce&#x27;&#125; 3</span></span><br></pre></td></tr></table></figure><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><div class="note info"><p>视频教程:<a href="https://www.bilibili.com/video/BV15741177Eh?p=125">Promise的介绍和使用</a> 、 文章教程:<a href="https://blog.csdn.net/qq_37860963/article/details/81539118">怎么理解JS Promise</a></p></div><blockquote><p>用于处理异步函数的执行顺序、主要用于<code>网络请求</code></p></blockquote><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><p>Promise 是一个容器,一个对象,里面存放着异步事件,里面的异步事件有三种状态: </p><ul><li><code>pending (进行中)</code></li><li><code>fulfilled (已成功)</code></li><li><code>rejected (已失败)</code></li></ul><p>Promise 容器可以获取根据异步事件的结果将其转为完成状态或失败状态,并将事件结果传送出去</p><p>Promise 对象的特点: </p><ul><li><p>对象的状态不受外界影响,只要异步操作的结果可以决定是哪一种状态</p></li><li><p>一旦状态改变就不会再变,会一直保持这个状态,成为 Resolved</p></li></ul><p>步骤: </p><ol><li><p>创建 promise 容器 : 即创建一个承诺变量 里面封装了异步任务 会自动调用 </p><p>promise 本身不是异步</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123; </span><br><span class="line">    fs.readFile(<span class="string">&#x27;./data/a.txt&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,<span class="function">(<span class="params">err,data</span>) =&gt;</span> &#123; </span><br><span class="line">        <span class="keyword">if</span>(err) &#123; </span><br><span class="line">            <span class="comment">// 如果失败 </span></span><br><span class="line">            <span class="comment">// console.log(err); </span></span><br><span class="line">            <span class="comment">// 调用reject 将容器的状态由pending改为Rejected、然后执行catch</span></span><br><span class="line">            reject(err); </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="comment">// 如果成功 </span></span><br><span class="line">            <span class="comment">// console.log(data); </span></span><br><span class="line">            <span class="comment">// 调用resolve 将容器的状态由pending改为Resolved、然后执行then </span></span><br><span class="line">            resolve(data); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;) </span><br><span class="line">&#125;).then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// resolve(data); 会执行到这里</span></span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">error</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// reject(err); 会执行到这里</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;error&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>设置承诺了之后调用 <code>then</code> 方法 </p><p>设置承诺里面回调函数的 <code>resolve/reject</code> 事件:</p><ul><li>参数 1 就是上面的函数 <code>resolved</code> </li><li>参数 2 就是函数 <code>rejected</code> 这里是在设置 <code>resolve</code> 和 <code>reject</code> 的具体函数</li></ul><p>在 <code>resolve</code> 里面最后要 return 接下去要执行的异步事件所在的 Promise 对象实例,形成链式编程,实现顺序执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">p1.then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123; </span><br><span class="line">       <span class="built_in">console</span>.log(data); </span><br><span class="line">    <span class="comment">// return 一个Promise对象进行设置 链式编程</span></span><br><span class="line">       <span class="keyword">return</span> p2;</span><br><span class="line">   &#125;,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&#x27;failed&#x27;</span>);</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123; </span><br><span class="line">       <span class="comment">// 这是定义p2的resolved </span></span><br><span class="line">    <span class="built_in">console</span>.log(data + <span class="string">&#x27;haha&#x27;</span>); </span><br><span class="line">       <span class="keyword">return</span> p3; </span><br><span class="line">   &#125;,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123; </span><br><span class="line">       <span class="comment">// 这是定义p2的reject </span></span><br><span class="line">       <span class="built_in">console</span>.log(err); </span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure></li></ol><p>注意:</p><ol><li><p>即先创造保证,再设置异步事件完成后具体做什么</p></li><li><p>实现同步输出的原理就是: new Promise 是同步的,里面的函数依旧是异步的,所以继续往下进行 resolved 和 reject 函数的定义,第一个定义的 promise 的异步函数执行完后,会调用 resolved 或者 reject 函数,所以会找到定义之处进行执行,由于另外一个 promise 的 resolved 和 reject 是在第一个定义之后 return 出来再定义的,所以这个 promise 只能在第一个 promise 执行之后再定义,所以其 reject 和 resolve 函数也只能在其之后调用,依次递归形成同步</p></li><li><p>then 方法只有在当前脚本所有同步任务执行完毕后才会执行</p></li><li><p>resolve 函数只能有一个参数</p></li></ol><hr/><ul><li><p><code>catch方法</code>: 捕获 promise 实例和 then 中 resolve 的错误 一般会在最后使用 catch</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pro1.then(<span class="function">(<span class="params">mes</span>) =&gt;</span> &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(mes); </span><br><span class="line">    <span class="keyword">let</span> a1 = <span class="number">2</span>; </span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(e); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>Promise.all()</code>: 用于将多个 promise 实例整合成一个 promise 实例 参数为数组形式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pro2 = <span class="built_in">Promise</span>.all([p1,p2,p3])</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>整合的实例的状态有两种情况: </p><ol><li>p1 , p2 , p3 的状态都为 fulfilled,p 才为 fulfilled。此时 p1 , p2 , p3 的结果组成一个数组,传递给 p 的回调函数</li><li>只要 p1 , p2 , p3 中有一个进入 rejected 状态,p 就会进入 rejected 状态。此时第一个进入 rejected 的子实例的结果就会传给 p 的回调函数</li></ol></li></ul><ul><li><p>执行错误则停止执行并通过 catch 方法输出</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pro2.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(res); </span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;) <span class="comment">// [&#x27;OK1&#x27;,&#x27;OK2&#x27;,&#x27;OK3&#x27;]</span></span><br></pre></td></tr></table></figure></li><li><p><code>Promsie.race()</code>: 与 all 方法类似,但只会输出第一个执行成功的回调函数的 resolve 的结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.race([p1,p2,p3]).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(res); </span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(e); </span><br><span class="line">&#125;) <span class="comment">// &#x27;OK1&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="mongoose-中使用-promise"><a href="#mongoose-中使用-promise" class="headerlink" title="mongoose 中使用 promise"></a>mongoose 中使用 promise</h4><p>mongoose 中已经包装了 promise ,数据库操作事件后面可以直接调用 then 方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">User.findOne(&#123;<span class="attr">author</span>:<span class="string">&#x27;clark&#x27;</span>&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(data) &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;用户已存在&#x27;</span>); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(&#123; </span><br><span class="line">            author:<span class="string">&#x27;clark&#x27;</span>, </span><br><span class="line">            title:<span class="string">&#x27;wonder woman&#x27;</span>, </span><br><span class="line">            body:<span class="string">&#x27;prinecss&#x27;</span> </span><br><span class="line">        &#125;).save(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="async函数和await"><a href="#async函数和await" class="headerlink" title="async函数和await"></a>async函数和await</h3><blockquote><p>Generator 函数的语法糖,加在函数声明前方,async 函数返回一个 Promise 对象</p></blockquote><p>async 函数可以看做由多个 promise 包装成的 Promise 对象, await 则是内部 promise 的 then 命令的语法糖</p><p>async 即把其后面的函数包装成一个 promise 对象,可以使用 then 方法添加回调函数。async 函数内 return 的值会作为 then 方法回调函数的参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;i am a async function!&#x27;</span>;</span><br><span class="line">&#125; </span><br><span class="line">getName().then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(res); <span class="comment">// &#x27;i am a async function!&#x27; </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当 async 遇到 await 时,会等待其函数执行完毕后再继续执行后面的函数体.</p><p>await 后面一般是跟 Promise 对象</p><p>await promise 实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">whatName</span>(<span class="params">ms</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123; </span><br><span class="line">        <span class="built_in">setTimeout</span>(res,ms);</span><br><span class="line">    &#125;) </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;bruce&#x27;</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">whatName(<span class="number">5000</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(res); <span class="comment">// 5秒后输出&#x27;bruce&#x27; </span></span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(e); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>async 函数返回的 Promise 状态由函数内 await 后面的 promise 实例的状态决定。如果 async 内部发生错误或者某一个 await 发生错误,那么该错误就会被 async 函数的 Pomise 实例的 catch 方法捕获。并且发生错误的await后面的函数体不再执行。只有 async 函数内部所有异步操作执行完,才会执行 then 方法指定的回调函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Error Happend!&#x27;</span>); </span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123; </span><br><span class="line">        res(); </span><br><span class="line">    &#125;) </span><br><span class="line">&#125; </span><br><span class="line">fn().then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(res); </span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(e); <span class="comment">// &#x27;Error Happend!&#x27;</span></span><br><span class="line">&#125;) </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123; </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Error Happend!&#x27;</span>);</span><br><span class="line">    &#125;) </span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123; </span><br><span class="line">        res();</span><br><span class="line">    &#125;) </span><br><span class="line">&#125; </span><br><span class="line">fn().then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(e);<span class="comment">// &#x27;Error Happend!&#x27; </span></span><br><span class="line">&#125;) </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123; </span><br><span class="line">        res(); </span><br><span class="line">    &#125;) </span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123; </span><br><span class="line">        res(); </span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;successed!&#x27;</span>;</span><br><span class="line">&#125; </span><br><span class="line">fn().then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(res); <span class="comment">// &#x27;successed!&#x27; </span></span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(e); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h3><blockquote><p>Iterator(遍历器): 是一种接口,为各种不同的数据结构提供统一的访问机制。任何数据结构,只要部署了Iterator 接口,就可以完成遍历操作</p></blockquote><p>Iterator作用: </p><p>为各种数据结构提供统一的访问接口</p><ol><li>使得数据结构的成员能够按照某种次序排列</li><li>供 for…of 消费</li></ol><p>Iterator的遍历过程:</p><ol><li>创建一个指针对象,指向当前数据结构的起始位置</li><li>第一次调用指针对象的 next 方法,将指针指向数据结构第一个成员</li><li>第二次调用指针对象的 next 方法,将指针指向数据结构第二个成员</li><li>不断调用 next 方法,直到遍历结束</li></ol><p>next方法会返回数据结构的当前成员的信息。即一个包含 value 和 done 属性的对象。value 是当前成员的值, done 属性是一个布尔值,表示遍历是否结束</p><p>默认 Iterator 接口</p><p>数据结构只要部署了 Iterator 接口,就是可遍历的</p><p>许多数据结构都默认部署了 iterator 接口,包括: </p><ol><li><p>Array</p></li><li><p>Map</p></li><li><p>Set</p></li><li><p>NodeList对象</p></li><li><p>String</p></li><li><p>arguments</p></li><li><p>TyperArray</p></li></ol><p>默认的 Iterator 接口都部署在数据结构的 Symbol.iterator 属性中。</p><p><code>Symbol.iterator</code> 是一个表达式,返回 Symbol 对象的 iterator 属性。该属性是个函数,会返回一个指针对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; </span><br><span class="line">    [<span class="built_in">Symbol</span>.iterator] : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> &#123; </span><br><span class="line">            next: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">                <span class="keyword">return</span> &#123; </span><br><span class="line">                    value:<span class="number">1</span>, </span><br><span class="line">                    done:<span class="literal">true</span>, </span><br><span class="line">                &#125; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for…of"><a href="#for…of" class="headerlink" title="for…of"></a>for…of</h3><blockquote><p><code>for...of</code>是ES6标准，用来遍历value值，遍历数组，<code>不能遍历普通对象</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 遍历数组</span><br><span class="line">let arr &#x3D; [1, 2, 3]</span><br><span class="line">for (let value of arr) &#123;</span><br><span class="line">  console.log(value)</span><br><span class="line">&#125;  &#x2F;&#x2F; 1  2  3</span><br></pre></td></tr></table></figure><ul><li><p><code>for...of</code> 不能遍历普通对象的原因</p><p>原因是：普通对象没有Symbol.iterator属性，如果一个对象拥有Symbol.iterator属性，那么就可以使用for…of遍历</p></li></ul><h3 id="ES6的module"><a href="#ES6的module" class="headerlink" title="ES6的module"></a>ES6的module</h3><p>ES6的模块化的基本规则或特点：</p><ol><li><p>每一个模块只加载一次， 每一个JS只执行一次， 如果下次再去加载同目录下同文件，直接从内存中读取。 一个模块就是一个单例，或者说就是一个对象；</p></li><li><p>每一个模块内声明的变量都是局部变量， 不会污染全局作用域；</p></li><li><p>模块内部的变量或者函数可以通过export导出；</p></li><li><p>一个模块可以导入别的模块</p></li></ol><p><code>export</code> 导出 <code>import</code> 导入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> c = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;zykj&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">18</span>;</span><br><span class="line"><span class="comment">//export中可以使用as关键字重命名对外输出名称</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">name <span class="keyword">as</span> a,</span><br><span class="line">    age <span class="keyword">as</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// import * as 变量名 用以获取目标文件中所有export的变量,对象形式</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> obj <span class="keyword">from</span> <span class="string">&#x27;./config.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解构赋值形式用以获取目标文件中同名变量</span></span><br><span class="line"><span class="keyword">import</span> &#123;c,d&#125; <span class="keyword">from</span> <span class="string">&#x27;./config.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;name,age&#125; <span class="keyword">from</span> <span class="string">&#x27;./config.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// import 变量 用以获取目标文件中export default后的值</span></span><br><span class="line"><span class="keyword">import</span> fn <span class="keyword">from</span> <span class="string">&#x27;./config.js&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="ES6的模块化实现"><a href="#ES6的模块化实现" class="headerlink" title="ES6的模块化实现"></a>ES6的模块化实现</h3><p> 如何实现模块化，在html中需要使用<code>type=&#39;module&#39;</code>属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;aaa.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;bbb.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;mmm.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时表示aaa.js是一个单独的模块，此模块是有作用域的。如果要使用aaa.js内的变量，需要在aaa.js中先导出变量，再在需要使用的地方导出变量。</p><h4 id="直接导出"><a href="#直接导出" class="headerlink" title="直接导出"></a>直接导出</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> name = <span class="string">&#x27;小明&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>使用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;name&#125; <span class="keyword">from</span> <span class="string">&#x27;./aaa.js&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(name)</span><br></pre></td></tr></table></figure><p><code>./aaa.js</code>表示aaa.js和mmm.js在同级目录。</p><h4 id="统一导出"><a href="#统一导出" class="headerlink" title="统一导出"></a>统一导出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var age &#x3D; 22</span><br><span class="line">function sum(num1, num2) &#123;</span><br><span class="line">  return num1 + num2</span><br><span class="line">&#125;</span><br><span class="line">var flag &#x3D; true</span><br><span class="line">if (flag) &#123;</span><br><span class="line">  console.log(sum(10, 20))</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;2.最后统一导出</span><br><span class="line">export &#123;</span><br><span class="line">  flag,sum,age</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用<code>import &#123;name,flag,sum&#125; from &#39;./aaa.js&#39;</code>导入多个变量</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;name,flag,sum&#125; <span class="keyword">from</span> <span class="string">&#x27;./aaa.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;小明是天才&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">20</span>,<span class="number">30</span>));</span><br></pre></td></tr></table></figure><blockquote><p>使用{}将需要的变量放置进去</p></blockquote><h4 id="导出函数-类"><a href="#导出函数-类" class="headerlink" title="导出函数/类"></a>导出函数/类</h4><blockquote><p>在aaa.js中添加</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.导出函数/类</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  run()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;奔跑&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在mmm.js中添加</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;name,flag,sum,say,Person&#125; <span class="keyword">from</span> <span class="string">&#x27;./aaa.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;小明是天才&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">20</span>,<span class="number">30</span>));</span><br><span class="line"></span><br><span class="line">say(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Person();</span><br><span class="line">p.run();</span><br></pre></td></tr></table></figure><blockquote><p>导入 export default</p></blockquote><blockquote><p>导出</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  flag,sum,age</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>导入</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4.默认导入 export default</span></span><br><span class="line"><span class="keyword">import</span> aaa <span class="keyword">from</span> <span class="string">&#x27;./aaa.js&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(aaa.sum(<span class="number">10</span>,<span class="number">110</span>));</span><br></pre></td></tr></table></figure><blockquote><p>注意：使用默认导出会将所有需要导出的变量打包成一个对象，此时导出一个对象，此时我在<code>mmm.js</code>中导入变量时候命名为aaa，如果要调用变量需要使用aaa.变量。</p></blockquote><h4 id="统一全部导入"><a href="#统一全部导入" class="headerlink" title="统一全部导入"></a>统一全部导入</h4><blockquote><p> 使用<code>import * as aaa from &#39;./aaa.js&#39;</code>统一全部导入</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 5.统一全部导入</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> aaa <span class="keyword">from</span> <span class="string">&#x27;./aaa.js&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(aaa.flag);</span><br><span class="line"><span class="built_in">console</span>.log(aaa.name);</span><br></pre></td></tr></table></figure><h2 id="前端模块化"><a href="#前端模块化" class="headerlink" title="前端模块化"></a>前端模块化</h2><p>随着前端项目越来越大，团队人数越来越多，多人协调开发一个项目成为常态。</p><p>例如现在小明和小张共同开发一个项目，小明定义一个aaa.js，小张定义了一个bbb.js。</p><div class="tabs" id="tab-id"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab-id-1">aaa.js</button></li><li class="tab"><button type="button" data-href="#tab-id-2">bbb.js</button></li><li class="tab"><button type="button" data-href="#tab-id-3">但是此时小明又创建了一个mmm.js</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab-id-1"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//小明开发</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;小明&#x27;</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">22</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> flag = <span class="literal">true</span></span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(sum(<span class="number">10</span>, <span class="number">20</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时小明的<code>sum</code>是没有问题的。</p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab-id-2"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//小红</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;小红&quot;</span></span><br><span class="line"><span class="keyword">var</span> flag = <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>此时小明和小红各自用各自的<code>flag</code>你变量没问题。</p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab-id-3"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//小明</span></span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;flag是true&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>在index.html页面导入这些js文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;aaa.js&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;bbb.js&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;ccc.js&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时小明知道自己在aaa.js中定义的<code>flag</code>是<code>true</code>，认为打印没有问题，但是不知道小红的bbb.js中也定义了<code>flag</code>为<code>true</code>，所以mmm.js文件并没有打印出“flag是true”。</p><blockquote><p>这就是全局变量同名问题。</p></blockquote><h3 id="使用导出全局变量模块解决全局变量同名问题"><a href="#使用导出全局变量模块解决全局变量同名问题" class="headerlink" title="使用导出全局变量模块解决全局变量同名问题"></a>使用导出全局变量模块解决全局变量同名问题</h3><blockquote><p>aaa.js</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模块对象</span></span><br><span class="line"><span class="keyword">var</span> moduleA = (<span class="function"><span class="keyword">function</span> (<span class="params">param</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//导出对象</span></span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&#x27;小明&#x27;</span></span><br><span class="line">  <span class="keyword">var</span> age = <span class="number">22</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> flag = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(sum(<span class="number">10</span>, <span class="number">20</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  obj.flag=<span class="literal">false</span></span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><blockquote><p>mmm.js</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//小明</span></span><br><span class="line"><span class="comment">//使用全局变量moduleA</span></span><br><span class="line"><span class="keyword">if</span>(moduleA.flag)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;flag是true&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样直接使用aaa.js导出的moduleA变量获取小明自己定义的<code>flag</code>。</p><h3 id="CommonJS的模块化实现"><a href="#CommonJS的模块化实现" class="headerlink" title="CommonJS的模块化实现"></a>CommonJS的模块化实现</h3><p> CommonJS需要nodeJS的依支持。</p><blockquote><p>aaa.js</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CommonJS需要nodeJS支持</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;小明&#x27;</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">22</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> flag = <span class="literal">true</span></span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(sum(<span class="number">10</span>, <span class="number">20</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// module.exports = &#123;</span></span><br><span class="line"><span class="comment">//   flag : flag,</span></span><br><span class="line"><span class="comment">//   sum : sum</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//导出对象</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  flag,</span><br><span class="line">  sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>module.exports = &#123;&#125;</code>导出需要的对象。</p><blockquote><p>mmm.js</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入对象,nodejs语法,需要node支持,从aaa.js取出对象</span></span><br><span class="line"><span class="keyword">var</span> &#123;flag,sum&#125; = <span class="built_in">require</span>(<span class="string">&quot;./aaa&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">10</span>,<span class="number">20</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;flag is true&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>var &#123;flag,sum&#125; = require(&quot;./aaa&quot;)</code>获取已经导出的对象中自己所需要的对象。</p>]]></content>
      
      
      <categories>
          
          <category> Web教程 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript学习</title>
      <link href="/posts/d3a7443d/"/>
      <url>/posts/d3a7443d/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript基础"><a href="#JavaScript基础" class="headerlink" title="JavaScript基础"></a>JavaScript基础</h1><div class="note danger"><p>本教程里的资料来源于网友的资料,自己整理以供学习。视频学习: <a href="https://www.bilibili.com/video/BV1ux411d75J">黑马程序员</a></p></div><h2 id="JS概论"><a href="#JS概论" class="headerlink" title="JS概论"></a>JS概论</h2><ul><li><p>HTML/CSS - <code>标记语言</code></p></li><li><p>JS脚本语言 - <code>编程类语言</code></p></li></ul><div class="note info"><p>浏览器分成两部分,<code>渲染引擎</code>和<code>JS引擎</code></p></div><ul><li>渲染引擎:用来解析 HTML 与 CSS,俗称内核,比如 Chrome 的 blink</li></ul><div class="note info"><p>JS引擎: JS解释器,用来读取网页中的 JavaScript 代码,对其处理后运行,比如 chrome 浏览器的 V8</p></div><ul><li><p>浏览器本身并不会执行 JS 代码,而是通过内置 JavaScript 引擎来执行 JS 代码, JS 引擎执行代码时逐行解释每一句源码(转换为机器语言二进制),然后由计算机去执行</p></li><li><p><code>解释性语言: 进行时立即解释执行的语言 如 Js</code></p></li><li><p><code>编译性语言: 必须通过编译生成中间代码后才执行的语言 如 Java、C</code></p></li></ul><div class="note info"><p>JS组成: ECMAscript(js语法)、DOM(页面文档对象模型)、BOM(浏览器对象模型)后两者即合称 API</p></div><ul><li>ECMAscript: 规定了JS的编程语法和基础核心知识,是所有浏览器厂商共同遵守的一套 JS 语法工业标准</li></ul><div class="note info"><p>JavaScript程序的执行</p></div><ul><li>出现在<code>&lt;script&gt;</code>和<code>&lt;/script&gt;</code>标记对之间的 javascript 语句按照它们在脚本中出现的顺序来执行。当一个文件有多个脚本的时候,脚本按照它们出现的顺序来执行(除非脚本带有 defer 属性)。<code>&lt;script&gt;</code>标记中的 JS 代码作为文档载入和解析过程的一部分来执行</li></ul><h2 id="JS词法结构"><a href="#JS词法结构" class="headerlink" title="JS词法结构"></a>JS词法结构</h2><h3 id="JS注释"><a href="#JS注释" class="headerlink" title="JS注释"></a>JS注释</h3><ul><li><p>单行注释</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这一行都是注释内容</span></span><br></pre></td></tr></table></figure></li><li><p>多行注释</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 这里面的内容为注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>快捷键</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">单行注释 ctrl+&#x2F; </span><br><span class="line"></span><br><span class="line">多行注释 ctrl+shift+&#x2F;</span><br></pre></td></tr></table></figure></li></ul><h3 id="JS相关"><a href="#JS相关" class="headerlink" title="JS相关"></a>JS相关</h3><p>标识符、关键字、保留字、直接量</p><ul><li><p><code>标识符</code>: 开发人员为<code>变量</code>、<code>属性</code>、<code>函数</code>、<code>参数</code>取的名字(标识符不能是关键字或保留字)</p></li><li><p><code>关键字</code>: js 本身已经使用了的字</p></li><li><p><code>保留字</code>: 为后面预留的关键字 如 <code>boolean</code> <code>byte</code> <code>char</code> <code>int</code> 等</p></li><li><p><code>字面量(直接量)</code>:程序中直接显示出来的数据值</p></li><li><p><code>数字字面量</code>: 8、9、10</p></li><li><p><code>字符串字面量</code>:  “大前端”</p></li><li><p><code>布尔字面量</code>: true false</p></li></ul><h3 id="JS命名规则"><a href="#JS命名规则" class="headerlink" title="JS命名规则"></a>JS命名规则</h3><div class="note info"><p>标识符命名规则</p></div><ul><li><p>必须要有意义</p></li><li><p>变量一般用名词</p></li><li><p>函数一般用动词</p></li><li><p>不能与其他关键字同名</p></li></ul><div class="note info"><p>操作符规范</p></div><ul><li><p>操作符左右两侧各保留个空格</p></li><li><p>单行注释//后加一个空格再写注释</p></li><li><p>末尾大括号要对齐其父元素</p></li></ul><h2 id="JS嵌入HTML"><a href="#JS嵌入HTML" class="headerlink" title="JS嵌入HTML"></a>JS嵌入HTML</h2><h3 id="行内式"><a href="#行内式" class="headerlink" title="行内式"></a>行内式</h3><div class="note info"><p>放置在 HTML 事件处理程序中</p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点我&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;Hello World!&#x27;)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看演示    </button><span class="hide-content"><input type="button" value="点我" onclick="alert('Hello World!')"></span></div><p>注意: </p><ul><li><p>可以将单行或少量JS代码写在HTML标签的事件属性中(以 on 开头的属性),如: onclick</p></li><li><p>注意单双引号的使用: 在 HTML 中我们推荐使用双引号,JS 中使用单引号</p></li><li><p>可读性差</p></li><li><p>引号易错,易混淆</p></li><li><p>特殊情况下使用</p></li></ul><h3 id="内联式"><a href="#内联式" class="headerlink" title="内联式"></a>内联式</h3><div class="note info"><p>直接写在 html 文件中,一般写在 body 标签中所有元素后面</p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>     </span><br><span class="line"><span class="javascript">    alert(<span class="string">&#x27;Hello World!&#x27;</span>); </span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="外联式"><a href="#外联式" class="headerlink" title="外联式"></a>外联式</h3><div class="note info"><p>放置在由标签的 src 属性指定的外部 js 文件中</p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;my.js&quot;</span>&gt;</span>此处不可写代码<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意: </p><ul><li>引用外部 js 文件的 script 标签中间不可以写代码</li><li>执行顺序就是他们在文档中出现的顺序</li></ul><h3 id="指定脚本语言"><a href="#指定脚本语言" class="headerlink" title="指定脚本语言"></a>指定脚本语言</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Script-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一般浏览器会假设 js 为默认脚本化语言,如果没有指定默认语言,或者想覆盖默认语言,可以使用<code>type属性</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="script标记的属性"><a href="#script标记的属性" class="headerlink" title="script标记的属性"></a>script标记的属性</h3><blockquote><p>defer、async<br>脚本的执行在默认情况下是同步和阻塞的。但是如果有了属性 defer 或者 async,情况会发生变化。</p></blockquote><ul><li><p><code>defer作用</code>: 浏览器解析遇到带有 defer 属性的 script 标记时,延迟该脚本的执行。文档的载入和解析完成再继续执行</p></li><li><p><code>async作用</code>: 浏览器可以尽快执行脚本,不用在下载脚本时阻塞文档解析。即一边下载 js 一边解析文档,js</p></li><li><p>如果两者同时都有,那么会遵从 async 而忽略 defer </p></li></ul><h2 id="JS输入输出语句"><a href="#JS输入输出语句" class="headerlink" title="JS输入输出语句"></a>JS输入输出语句</h2><ul><li><p><code>alert(msg)</code>: 浏览器弹出警示框 </p></li><li><p><code>console.log(msg)</code>: 浏览器控制台打印输出信息  </p></li><li><p><code>prompt(info)</code>: 浏览器弹出输入框,用户可以输入,输入的是字符串</p></li><li><p><code>confirm(msg)</code>: 浏览器弹出确认框,点击确认返回 true,否则返回 false</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是一个输入框 </span></span><br><span class="line">prompt(<span class="string">&#x27;请输入您的年龄&#x27;</span>); </span><br><span class="line"><span class="comment">// 弹出警示框 输出展示给用户的 </span></span><br><span class="line">alert(<span class="string">&#x27;输入结果是: &#x27;</span>); </span><br><span class="line"><span class="comment">// console 控制台输出 便于测试 </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;我是程序猿&#x27;</span>);           </span><br><span class="line"><span class="comment">//弹出确认框           </span></span><br><span class="line"><span class="keyword">var</span> right = confirm(<span class="string">&quot;你确定吗?&quot;</span>); <span class="comment">// right 结果为真说明点击了确定</span></span><br></pre></td></tr></table></figure><p>注意: confirm、prompt、alert <code>都会产生阻塞</code>,但他们弹出时,代码会停止运行。</p><h2 id="JS变量"><a href="#JS变量" class="headerlink" title="JS变量"></a>JS变量</h2><h3 id="声明和初始化"><a href="#声明和初始化" class="headerlink" title="声明和初始化"></a>声明和初始化</h3><h4 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明变量(var=variable)</span></span><br><span class="line"><span class="keyword">var</span> age; <span class="comment">//声明一个名为age的变量</span></span><br></pre></td></tr></table></figure><h4 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// = 表示把右边的值赋予左边的值</span></span><br><span class="line">age = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h4 id="变量的初始化"><a href="#变量的初始化" class="headerlink" title="变量的初始化"></a>变量的初始化</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age=<span class="number">10</span>;</span><br></pre></td></tr></table></figure><h4 id="变量语法扩展"><a href="#变量语法扩展" class="headerlink" title="变量语法扩展"></a>变量语法扩展</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myname=<span class="string">&#x27;卓越科技-&#x27;</span>; </span><br><span class="line"><span class="built_in">console</span>.log(myname); <span class="comment">//卓越科技-</span></span><br><span class="line">myname=<span class="string">&#x27;zykj&#x27;</span>; </span><br><span class="line"><span class="built_in">console</span>.log(myname); <span class="comment">// zykj</span></span><br></pre></td></tr></table></figure><p><code>变量值只取就近一个</code></p><h4 id="声明多个变量"><a href="#声明多个变量" class="headerlink" title="声明多个变量"></a>声明多个变量</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age=<span class="number">18</span>, address=<span class="string">&#x27;火影村&#x27;</span>, gz=<span class="number">2000</span>;</span><br></pre></td></tr></table></figure><h4 id="声明变量的特殊情况"><a href="#声明变量的特殊情况" class="headerlink" title="声明变量的特殊情况"></a>声明变量的特殊情况</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.只声明不赋值 结果为undefined </span></span><br><span class="line"><span class="keyword">var</span> sex; </span><br><span class="line"><span class="built_in">console</span>.log(sex); <span class="comment">//undefined </span></span><br><span class="line"><span class="comment">// 2.不声明不赋值 直接使用某个变量 结果报错 </span></span><br><span class="line"><span class="comment">// console.log(tel); </span></span><br><span class="line"><span class="comment">// 不声明直接赋值 结果正确 不推荐 </span></span><br><span class="line">qq = <span class="number">110</span>; </span><br><span class="line"><span class="built_in">console</span>.log(qq); </span><br></pre></td></tr></table></figure><h3 id="变量命名规范"><a href="#变量命名规范" class="headerlink" title="变量命名规范"></a>变量命名规范</h3><ul><li><p>由字母数字下划线美元符号构成,不能有横杠！！！</p></li><li><p>区分大小写</p></li><li><p>不能数字开头</p></li><li><p>不能是关键字、保留字</p></li><li><p>变量名必须有意义</p></li><li><p>遵守驼峰命名法</p></li><li><p>对于内部使用的函数变量可以用下划线开头结尾的格式命名  </p></li></ul><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><blockquote><p>变量起作用的范围,可以提高程序的可靠性,减少命名冲突</p></blockquote><h4 id="作用域类型"><a href="#作用域类型" class="headerlink" title="作用域类型"></a>作用域类型</h4><ul><li><p>全局作用域: 整个 script 标签内 或是一个单独的 js 文件</p></li><li><p>局部作用域: 在函数内部,代码名字只在函数内部起效果和作用</p></li></ul><h4 id="全局变量和局部变量"><a href="#全局变量和局部变量" class="headerlink" title="全局变量和局部变量"></a>全局变量和局部变量</h4><blockquote><p>根据作用域的不同,变量可分为: 1.全局变量 2.局部变量</p></blockquote><ul><li><p>全局变量: 在全局起作用的变量</p></li><li><p>局部变量: 在局部作用域下的变量(函数内部的变量)函数形参亦可以看做局部变量</p></li></ul><p>从执行效率看</p><ul><li><p>全局变量只有浏览器关闭时才会销毁,比较占内存资源</p></li><li><p>局部变量在程序执行完毕时即销毁</p></li></ul><p>现阶段 js 没有块级作用域(即花括号包含之内): 函数中声明的所有变量,无论是在那里声明在整个函数中都是有定义的,因为变量提升的原因</p><h4 id="全局对象和调用对象"><a href="#全局对象和调用对象" class="headerlink" title="全局对象和调用对象"></a>全局对象和调用对象</h4><ul><li><p><code>全局对象</code>: 当 js 解释器开始运行时,它首先要做的是在执行任何 js 代码前创建一个全局对象,而全局变量就是这个全局对象的属性。在客户端 JS(嵌入网页的JS)中,这个全局对象就是 Window 对象</p></li><li><p><code>调用对象</code>: 每调用一次函数时,会在该函数作用域链前加一个调用对象。函数的参数和局部变量是作为调用对象的属性而存储的。用一个完全独立的对象来存储局部变量使 JS 可以防止局部变量覆盖同名的全局变量的值</p></li></ul><h4 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h4><blockquote><p>为一个对象列表或对象链。在一个<code>非嵌套函数中,作用域链由这个函数的调用对象和全局对象组成</code></p></blockquote><ul><li><p>内部函数访问外部函数的变量,采取的是链式查找的方式根据就近原则来决定取那个值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">20</span>; </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        <span class="built_in">console</span>.log(num); </span><br><span class="line">    &#125; </span><br><span class="line">    fun(); </span><br><span class="line">&#125; </span><br><span class="line">fn(); <span class="comment">// 结果是20</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h3><ul><li><p>JavaScript 每次创建字符串数组或对象时,解释器都必须f分配内存储存实体</p></li><li><p>与C、C++不同,js 有垃圾收集的机制,解释器可以检测何时程序不再使用一个对象,当确定了对象是无用的时候,会自动释放其占用的内存</p></li></ul><h2 id="数据类型-占用内存大小不同"><a href="#数据类型-占用内存大小不同" class="headerlink" title="数据类型(占用内存大小不同)"></a>数据类型(占用内存大小不同)</h2><div class="note info"><p>js是一种弱类型或者说动态语言,不用提前声明变量的类型,在程序运行过程中,类型会自动被确定,js 的变量数据类型只有被赋值后才被确定<br>相同的变量可用于不同的数据类型</p></div><h3 id="简单数据类型"><a href="#简单数据类型" class="headerlink" title="简单数据类型"></a>简单数据类型</h3><p>三种基本数据类型: <code>数字型</code>、<code>字符串型</code>和<code>布尔型</code></p><p>两种小数据类型: <code>null</code>、<code>undefined</code></p><p>还有ES6新增: <code>symbol</code></p><table><thead><tr><th>简单数据类型</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>number</td><td>数字型,包含整型值和浮点型值,如 21,0.21</td><td>0</td></tr><tr><td>boolean</td><td>布尔型,如true、false</td><td>false</td></tr><tr><td>string</td><td>字符串类型,如”张三”</td><td>“”</td></tr><tr><td>undefined</td><td>var a; 声明但没赋值 此时a = undefined</td><td>undefined</td></tr><tr><td>null</td><td>var a = null;  声明了变量a为空值</td><td>null</td></tr></tbody></table><h3 id="复杂数据类型"><a href="#复杂数据类型" class="headerlink" title="复杂数据类型"></a>复杂数据类型</h3><blockquote><p>对象(object)、数组(array)、函数(function)、日期(Date)、正则表达式(RegExp).本质上都是对象</p></blockquote><h3 id="数字型Number"><a href="#数字型Number" class="headerlink" title="数字型Number"></a>数字型Number</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">var</span> PI = <span class="number">3.14</span>; </span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">010</span>;    </span><br><span class="line"><span class="comment">// 数字前面加0,代表八进制 </span></span><br><span class="line"><span class="built_in">console</span>.log(num1);  </span><br><span class="line"><span class="comment">// 数字前面加0x,代表16进制 </span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">0x9</span>; </span><br><span class="line"><span class="keyword">var</span> num4 = <span class="number">0xa</span>; </span><br><span class="line"><span class="comment">// 最大值 </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_VALUE); </span><br><span class="line"><span class="comment">// 最小值 </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MIN_VALUE);  </span><br><span class="line"><span class="comment">// 无穷大 </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_VALUE * <span class="number">2</span>);  <span class="comment">/*输出 Infinity 无穷大*/</span> </span><br><span class="line"><span class="comment">// 无穷小 </span></span><br><span class="line"><span class="built_in">console</span>.log(-<span class="built_in">Number</span>.MAX_VALUE * <span class="number">2</span>); <span class="comment">/*输出 -Infinity 无穷小*/</span> </span><br><span class="line"><span class="comment">// 非数值 NaN </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;ab&#x27;</span> - <span class="number">2</span>); <span class="comment">/*输出NaN*/</span></span><br></pre></td></tr></table></figure><ul><li><p><code>isNaN();</code>: 用来判断非数字 数字返回 false 非数字返回 true</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="number">12</span>));  <span class="comment">//结果为false </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="string">&#x27;dada&#x27;</span>));  <span class="comment">//结果为true</span></span><br></pre></td></tr></table></figure></li><li><p><code>变量.toFixed(n);</code>: 将变量保留 n 位小数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num =<span class="number">2.312313</span>; </span><br><span class="line"><span class="built_in">console</span>.log(num.toFixed(<span class="number">3</span>)); <span class="comment">// 2.312</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="字符串型-不是对象"><a href="#字符串型-不是对象" class="headerlink" title="字符串型(不是对象)"></a>字符串型(不是对象)</h3><ul><li><p>语法:双引号或单引号(推荐)</p></li><li><p>嵌套: 外双内单或者外单内双</p></li></ul><p>转义符(以\开头)</p><table><thead><tr><th>转义符</th><th>解释说明</th></tr></thead><tbody><tr><td><code>\n</code></td><td>换行符,n 是 newline 的意思</td></tr><tr><td><code>\\</code></td><td>斜杠 \</td></tr><tr><td><code>\&#39;</code></td><td>‘ 单引号</td></tr><tr><td><code>\*</code></td><td>“ 双引号</td></tr><tr><td><code>\t</code></td><td>tab 缩进</td></tr><tr><td><code>\b</code></td><td>空格,b 是 blank 的意思</td></tr></tbody></table><h4 id="字符串的length属性"><a href="#字符串的length属性" class="headerlink" title="字符串的length属性"></a>字符串的length属性</h4><p>用于检测字符串长度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检测获取字符串的长度 </span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;my name is zykj&#x27;</span>; </span><br><span class="line"><span class="built_in">console</span>.log(str.length); <span class="comment">// 15</span></span><br></pre></td></tr></table></figure><h4 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h4><p>多个字符串之间可以用+拼接,拼接方式为字符串+任何类型=拼接之后的新字符串</p><p>数值型和字符型之间也可以相加</p><p>口诀: <code>数值相加,字符相连</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span> + <span class="string">&#x27;world&#x27;</span>); <span class="comment">//结果是helloworld</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;wo&#x27;</span> + <span class="number">12</span>);    <span class="comment">//结果是wo12 </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;so&#x27;</span> + <span class="literal">true</span>);  <span class="comment">//结果是sotrue </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">12</span> + <span class="number">12</span>);    <span class="comment">//结果是24 </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;12&#x27;</span> + <span class="number">12</span>);<span class="comment">//结果是1212    </span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;    </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;zykj&#x27;</span> + age + <span class="string">&#x27;岁&#x27;</span>); <span class="comment">//结果是zykj18岁     </span></span><br><span class="line">age = age + <span class="number">1</span>;     </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;zykj&#x27;</span> + age+ <span class="string">&#x27;岁&#x27;</span>); <span class="comment">//结果是zykj19岁 </span></span><br></pre></td></tr></table></figure><h3 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h3><ul><li><p>布尔型有两个值: true 和 false,其中 true 表示真,false 表示假</p></li><li><p>布尔型和数字型相加时, true 为1, false 为0</p></li></ul><h3 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h3><blockquote><p>如果使用了一个<code>并未声明的变量</code>时,或者使用了<code>已经声明但还没有赋值的变量</code>时,又或者<code>使用了一个并不存在的对象属性</code>时,返回的就是 undefined</p></blockquote><p>定义方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str; </span><br><span class="line"><span class="keyword">var</span> str = <span class="literal">undefined</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str + <span class="string">&#x27;aa&#x27;</span>); <span class="comment">//结果为undefinedaa </span></span><br><span class="line"><span class="built_in">console</span>.log(str + <span class="number">1</span>); <span class="comment">//undefined和数字相加,最后结果是NaN</span></span><br></pre></td></tr></table></figure><p>布尔环境中,它会转为 false 。数字环境中,会被转为 NaN 。字符串环境中,转为 “undefined”</p><h3 id="null"><a href="#null" class="headerlink" title="null"></a>null</h3><blockquote><p>即不是有效的对象、数组、数字、字符串和布尔值</p></blockquote><p>定义方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">//结果为null </span></span><br><span class="line"><span class="built_in">console</span>.log(b +<span class="string">&#x27;dadad&#x27;</span>); <span class="comment">//结果为nulldadad </span></span><br><span class="line"><span class="built_in">console</span>.log(b + <span class="number">1</span>); <span class="comment">//结果为1</span></span><br></pre></td></tr></table></figure><p>布尔环境中,它会转为 false 。数字环境中,会被转为0。字符串环境中,转为 “null”</p><h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><h4 id="转为字符型"><a href="#转为字符型" class="headerlink" title="转为字符型"></a>转为字符型</h4><table><thead><tr><th>方式</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td><code>toString()</code></td><td>转换为字符串</td><td>var num = 1; alert(num,toString());</td></tr><tr><td><code>String()强制转换</code></td><td>转换成字符串</td><td>var num = 1; alert(String(num));</td></tr><tr><td><code>加号拼接字符串</code></td><td>和字符串拼接的结果都是字符串</td><td>var num = 1; alert(num + “我是字符串”);</td></tr></tbody></table><p>用法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//变量.toString()</span></span><br><span class="line"><span class="keyword">var</span> num=<span class="number">10</span>; </span><br><span class="line"><span class="keyword">var</span> str=num.toString(); </span><br><span class="line"><span class="built_in">console</span>.log(str); </span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> str); </span><br><span class="line"><span class="comment">// console.log(typeof num); </span></span><br><span class="line"><span class="comment">// 利用 String()</span></span><br><span class="line"><span class="comment">// console.log(typeof String(num)); </span></span><br><span class="line"><span class="comment">// 利用拼接字符串的方法 </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> (num + <span class="string">&#x27;&#x27;</span>));</span><br></pre></td></tr></table></figure><ul><li><p>toString()可加参数,用来指定转换的基数,如为2,则转为二进制,如为8,则转为八进制,默认为10</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">190</span>; </span><br><span class="line">num = num.toString(<span class="number">2</span>); </span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">//1011110</span></span><br></pre></td></tr></table></figure></li></ul><p>前两种了解即可。推荐使用第三种,亦称为<code>隐式转换</code></p><h4 id="转为数字型-重点"><a href="#转为数字型-重点" class="headerlink" title="转为数字型(重点)"></a>转为数字型(重点)</h4><table><thead><tr><th>方式</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td><code>parseInt(string)函数</code></td><td>将string类型转换成整数数值型</td><td>parselnt(‘78’);</td></tr><tr><td><code>parseFloat(string)函数</code></td><td>将string类型转换成浮点数数值</td><td>parseFloat(‘78.21’);</td></tr><tr><td><code>Number()强制转换函数</code></td><td>将string类型转换成数值型</td><td>Number(‘12’);</td></tr><tr><td><code>js 隐式转换( - * / )</code></td><td>利用算数运算隐式转换为数值型</td><td>‘12’ - 0</td></tr></tbody></table><h4 id="重点掌握"><a href="#重点掌握" class="headerlink" title="重点掌握"></a>重点掌握</h4><ul><li><p><code>parseInt()</code>、<code>parseFloat()</code>会从字符串开始处转换和返回任何的数字,自动忽略舍去非数字部分(前提是数字开头)</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&quot;88 woshi&quot;</span>));<span class="comment">// 88 </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&quot;aa 88 woshi&quot;</span>));<span class="comment">//NaN</span></span><br></pre></td></tr></table></figure></li><li><p><code>parseInt</code>可以解析”0x”或”0X”开头的数字,也可以接受另一个参数指定要解析的数字的基数(不能解析0开头的数字,除非显性地指定所使用的基数)</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&quot;ff&quot;</span>,<span class="number">16</span>));<span class="comment">// 255</span></span><br></pre></td></tr></table></figure>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//parseInt(变量) 只能转为整数型 </span></span><br><span class="line"><span class="keyword">var</span> age = prompt(<span class="string">&#x27;请输入年龄&#x27;</span>); </span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(age)); </span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&#x27;3.14&#x27;</span>));  <span class="comment">//3 取整 </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&#x27;120px&#x27;</span>));  <span class="comment">//会取消px单位 </span></span><br><span class="line"><span class="comment">// parseFloat 可以把字符型的转化为数字型 得到是小数 浮点数 </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">&#x27;3.14&#x27;</span>)); </span><br><span class="line"><span class="comment">// Number()</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;123&#x27;</span>; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(str)); </span><br><span class="line"><span class="comment">// 隐式转换  可以利用- * / 三种符号 </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;12&#x27;</span> - <span class="number">0</span>);</span><br></pre></td></tr></table></figure></li><li><p>注: Number() 只对10十进制数字有效</p></li></ul><h4 id="转化为布尔型"><a href="#转化为布尔型" class="headerlink" title="转化为布尔型"></a>转化为布尔型</h4><table><thead><tr><th>方式</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td><code>Boolean()函数</code></td><td>其他类型转成布尔值</td><td>Boolean(“true”);</td></tr></tbody></table><p>代表空、否定的值都转化为 false,如 ‘’, 0 , null , NaN , undefined 。其他都转化为 true</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">&#x27;&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">0</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">null</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">NaN</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">undefined</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">123</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><blockquote><p> 浮点数运算精确度远不如整数,不能直接拿浮点数比较是否相等</p></blockquote><ul><li><p>表达式: 由<code>数字</code>、<code>运算符</code>、<code>变量</code>组成的式子</p></li><li><p>返回值: 表达式返回的值</p></li></ul><h3 id="递增递减运算符"><a href="#递增递减运算符" class="headerlink" title="递增递减运算符"></a>递增递减运算符</h3><ul><li><p>递增运算符(++)递减运算符(–)</p></li><li><p>放在变量前面为<code>前置递增</code> 后面为<code>后置递增</code></p><p>前置递增: 先运算再取值</p><p>后置递增: 先取值再运算</p></li><li><p>单独使用时两者结果相同</p></li></ul><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><blockquote><p>概念: 比较运算符(关系运算符)是<code>两个数据进行比较时所使用的运算符</code>,比较运算后,会<code>返回一个布尔值true/false作为比较运算的结果</code>。</p></blockquote><table><thead><tr><th>运算符名称</th><th>说明</th><th>案例</th><th>结果</th></tr></thead><tbody><tr><td><code>&lt;</code></td><td>小于号</td><td>1 &lt; 2</td><td>true</td></tr><tr><td><code>&gt;</code></td><td>大于号</td><td>1 &gt; 2</td><td>false</td></tr><tr><td><code>&gt;=</code></td><td>大于等于号(大于或者等于)</td><td>2 &gt;= 2</td><td>true</td></tr><tr><td><code>&lt;=</code></td><td>小于等于号(小于或者等于)</td><td>3 &lt;= 2</td><td>false</td></tr><tr><td><code>==</code></td><td>判等号(会转型)</td><td>37 == 37</td><td>true</td></tr><tr><td><code>!=</code></td><td>不等号</td><td>37 != 37</td><td>false</td></tr><tr><td><code>===</code>  <code>!===</code></td><td>全等 要求值和 数据类型都要一直</td><td>37 === ‘37’</td><td>false</td></tr></tbody></table><p>= 赋值<br>== 判断(会转型)<br>===全等(<code>不转型,即判断数据类型和值是否全部相等,对于对象数组函数来说则是判断是否引用同一个地址的对象数组函数</code>)</p><h3 id="instanceof运算符"><a href="#instanceof运算符" class="headerlink" title="instanceof运算符"></a>instanceof运算符</h3><p>instanceof 运算符(判断对象类型)</p><p><code>instance</code>: 实例</p><p>用于判断是否是某种特殊对象(数组、对象、日期)的实例</p><p>要求左边是对象,右边是一个类的名字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>(); </span><br><span class="line">d <span class="keyword">instanceof</span> <span class="built_in">Object</span>; <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>注: <code>instanceof</code>是通过原型对象来判断一个实例属不属于某个构造函数创建的,而不是通过构造函数的名字</p><h3 id="利用typeof获取变量数据类型"><a href="#利用typeof获取变量数据类型" class="headerlink" title="利用typeof获取变量数据类型"></a>利用typeof获取变量数据类型</h3><p>typeof 获取变量数据类型(判断基本类型)</p><ul><li>语法: typeof 变量</li></ul><blockquote><p>返回的是字符类型的小写的数据类型名称 <code>undefined</code> <code>string</code> <code>number</code> <code>function</code> <code>boolean</code>,对于包装对象和 DOM 获得的元素返回的都是 <code>object</code> 对象, null 和 数组返回的是 object</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num);</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;pink&#x27;</span>; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> str); </span><br><span class="line"><span class="keyword">var</span> flag = <span class="literal">true</span>; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> flag); </span><br><span class="line"><span class="keyword">var</span> vari = <span class="literal">undefined</span>; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> vari); </span><br><span class="line"><span class="keyword">var</span> timer =<span class="literal">null</span>; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> timer); </span><br><span class="line"><span class="keyword">var</span> age = prompt(<span class="string">&#x27;请输入年龄&#x27;</span>); </span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> age);</span><br></pre></td></tr></table></figure><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><table><thead><tr><th>运算符</th><th>含义</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>与</td></tr><tr><td>||</td><td>或</td></tr><tr><td>！</td><td>非</td></tr></tbody></table><ul><li><p>如果是布尔值参与逻辑运算,则结果为布尔值</p></li><li><p>如果是<code>具体数值或表达式参与运算,则发生逻辑中断</code>,其中<code>具体数值代表真,0 &#39;&#39; null undefined NaN代表假</code></p></li><li><p><code>短路运算原理: 当有多个表达式时,左边的表达式可以确定结果时,就不再运算右边的表达式的值</code></p></li></ul><br/><p><code>表达式1 &amp;&amp; 表达式2</code></p><ul><li><p>如果第一个为真,不足以确定结果,那么就返回表达式2</p></li><li><p>如果第一个为假,足以确定结果,那么就返回表达式1</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> &amp;&amp; <span class="number">456</span>);   <span class="comment">//结果为0 </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">123</span> &amp;&amp; <span class="number">456</span>); <span class="comment">//结果为456</span></span><br></pre></td></tr></table></figure></li></ul><p><code>表达式1 || 表达式2</code></p><ul><li><p>如果第一个为真,足以确定结果,那么就返回表达式1</p></li><li><p>如果第一个为假,不足以确定结果,那么就返回表达式2</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="number">123</span> || <span class="literal">null</span> ); <span class="comment">//结果为123 </span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="literal">undefined</span> || <span class="number">456</span>);  <span class="comment">//结果为456 </span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>; </span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">123</span> || <span class="number">456</span>); <span class="comment">//结果123</span></span><br><span class="line"><span class="built_in">console</span>.log(num);   <span class="comment">//结果为0</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><ul><li><p>=  赋值  后面赋值给前面</p></li><li><p>+= x   每次加x  num += 5;  num = num + 5</p></li><li><p>-= x   每年减x  num -= 5 ; num = num - 5</p></li><li><p>*= x 每次乘x</p></li><li><p>/= x 每次除x</p></li><li><p>%= x 每次除x取余</p></li></ul><div class="note info"><p>运算符优先级</p></div><ul><li><p>小括号</p></li><li><p>一元运算符 <code>++</code> <code>--</code> <code>!</code></p></li><li><p>算术运算符 先 * / % 再 + -</p></li><li><p>关系运算符</p></li><li><p>相等运算符</p></li><li><p>逻辑运算符 先 &amp;&amp; 后 ||</p></li><li><p>赋值运算符 =</p></li><li><p>逗号运算符 ,</p></li></ul><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><h3 id="三种结构"><a href="#三种结构" class="headerlink" title="三种结构"></a>三种结构</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200427153204.png"></p><h4 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h4><div class="note info"><p>按照代码先后顺序,依次执行</p></div><h4 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h4><div class="note info"><p>根据不同的条件,执行不同的路径代码( if 、 while )</p></div><blockquote><p>if分支语句</p></blockquote><ul><li><p>语法:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)&#123; </span><br><span class="line">   执行语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>()&#123;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>()&#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">//先判断第一个 不符合则判断下一个</span></span><br></pre></td></tr></table></figure></li><li><p>如果条件表达式结果为真,则执行大括号里面的执行语句</p></li><li><p>如果条件表达式为假,则跳过if执行后面的代码</p></li></ul><blockquote><p>三元表达式(由三元运算符 <code>? :</code> 组成的表达式)</p></blockquote><ul><li><p>语法结构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">条件表达式 ? 表达式<span class="number">1</span>:表达式<span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>如果条件表达式结果为真,则返回表达式1的值,如果为假则返回表达式2</p></li></ul><blockquote><p>switch语句</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> value1:  执行语句<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> value2:  执行语句<span class="number">2</span>;<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>: 执行最后的语句;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>匹配 case 的值,如果匹配,则运行该 case 里的值,如果都不匹配,则执行 default 里的值</p></li><li><p>表达式里的值和 case 里的值相等是用全等 === 判定的,即必须是值和数据类型完全一致才可以</p></li><li><p>必须要有 break,否则会执行下一个 case</p></li></ul><p><code>if else if 和switch的区别</code></p><ol><li><p>前者一般用判断范围 后者一般用于确定值</p></li><li><p>前者需要判断多次,后者进行判断后直接执行到程序的条件语句,效率较高</p></li><li><p>分支较少时前者效率高</p></li><li><p>分支多时后者效率高且结构更清晰</p></li></ol><h4 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h4><div class="note info"><p>可重复执行一些代码</p></div><blockquote><p>for循环结构</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化变量;条件表达式;操作表达式)&#123; 循环体;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>()</span><br><span class="line"> <span class="keyword">for</span>()&#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//外层循环一次,里面的循环执行全部</span></span><br></pre></td></tr></table></figure><blockquote><p>while循环结构</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>()&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>记得加入计数器,防止死循环</li></ul><blockquote><p>do{} while()循环</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;&#125; <span class="keyword">while</span>()</span><br></pre></td></tr></table></figure><ul><li><p>先执行一次语句,再判断,若正确,则继续执行,否则退出</p></li><li><p>即循环体至少执行一次</p></li><li><p>总结: 一般若与数字相关,常用 for、while 和 dowhile 可以执行更加复杂的循环。while 先判断再执行,dowhile 先执行再判断</p></li></ul><blockquote><p>跳转语句 continue</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">continue</span>;</span><br></pre></td></tr></table></figure><ul><li><p>遇到continue就停止本次循环,直接跳到i++,不再执行循环体内continue后面语句</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i =<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123; </span><br><span class="line">   <span class="keyword">if</span> (i==<span class="number">3</span>)&#123; </span><br><span class="line">       <span class="keyword">continue</span>; </span><br><span class="line">  &#125; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;我正在吃第&#x27;</span>+i+<span class="string">&#x27;个包子&#x27;</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">结果:</span></span><br><span class="line"><span class="comment">我正在吃第1个包子</span></span><br><span class="line"><span class="comment">我正在吃第2个包子</span></span><br><span class="line"><span class="comment">我正在吃第4个包子</span></span><br><span class="line"><span class="comment">我正在吃第5个包子</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>结束语句 break</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><ul><li><p>遇到 break 直接跳出此循环所属的 for 语句的所有循环</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123; </span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">3</span>)&#123; </span><br><span class="line">        <span class="keyword">break</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;我正在吃第&#x27;</span>+i+<span class="string">&#x27;个包子&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">结果:</span></span><br><span class="line"><span class="comment">我正在吃第1个包子</span></span><br><span class="line"><span class="comment">我正在吃第2个包子</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>throw</p></blockquote><ul><li><p>用于抛出异常,用信号通知发生了错误或者异常状况</p></li><li><p>异常: 发生了某种异常情况或错误时产生的一个信号。</p></li><li><p>语法格式: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> expression;</span><br></pre></td></tr></table></figure><p>expression 可以使任意类型,一般为 Error 对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">twoArg</span>(<span class="params">o,t</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length !== <span class="number">2</span>) </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;必须是两个参数&#x27;</span>); </span><br><span class="line">&#125; </span><br><span class="line">twoArg(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>注意:当抛出异常时,JS 解释器会停止当前正在执行的逻辑,跳转到最近的异常处理程序(即后面 try/catch/finally 中 catch 语句编写的程序)</p></li><li><p>常见的几个错误异常</p><ol><li>SyntaxError：语法错误</li><li>Uncaught ReferenceError：引用错误 <code>引用一个不存在的变量时发生的错误。将一个值分配给无法分配的对象，比如对函数的运行结果或者函数赋值。</code></li><li>RangeError：范围错误 <code>RangeError是当一个只超出有效范围时发生的错误。主要的有几种情况，第一是数组长度为负数，第二是Number对象的方法参数超出范围，以及函数堆栈超过最大值。</code></li><li>TypeError类型错误 <code>变量或参数不是预期类型时发生的错误。比如使用new字符串、布尔值等原始类型和调用对象不存在的方法就会抛出这种错误，因为new命令的参数应该是一个构造函数。</code></li><li>URIError，URL错误 <code>URI相关参数不正确时抛出的错误，主要涉及encodeURI、decodeURI()、encodeURIComponent()、decodeURIComponent()、escape()和unescape(）六个函数</code><blockquote><p>try/catch/finally</p></blockquote></li></ol></li><li><p><code>try</code>用于检查抛出异常</p></li><li><p><code>catch</code>用于抓住异常,其参数便是 try 抛出的值</p></li><li><p><code>finally</code>内的代码无论如何总会执行</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123; </span><br><span class="line">    <span class="keyword">var</span> n = prompt(<span class="string">&#x27;enter a number&#x27;</span>); </span><br><span class="line">    <span class="comment">// var t = prompt(&#x27;enter a number&#x27;); </span></span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>)&#123; </span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&#x27;wocao&#x27;</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">catch</span>(e)&#123; </span><br><span class="line">    alert(e);<span class="comment">//wocao </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>注意: </p><ul><li><p>try 后面至少要跟随一个 catch 或者 finally</p></li><li><p>catch 的参数有局部作用域,只在 catch 语句中有效</p></li><li><p>如果没有 catch 从句,执行 finally 后会向上传播异常,直到找到能处理这个异常的 catch 从句</p></li></ul><h3 id="小知识-断点调试"><a href="#小知识-断点调试" class="headerlink" title="小知识: 断点调试"></a>小知识: 断点调试</h3><ul><li><code>浏览器中按F12 --&gt; sources --&gt; 找到需要要调试的文件 --&gt; 在程序的某一行设置断点</code></li><li><code>Wath</code>: 监视,通过watch可以监视变量的值的变化 ,非常的常用。</li><li><code>F11</code>: 程序单步执行,让程序行一行的执行,这个时候,观赛watch中变量的值的变化。</li><li>代码调试的能力非常重要,只有学会了代码调试,才能学会自己解决bug的能力。初学者不要觉得调试代码麻烦就不去调试,知识点花点功夫肯定学的会,但是代码调试这个东西,自己不去练,永远都学不会。</li><li>代码调试非常的简单,只要记住代码调试的这几个按钮的作用即可,后面还会学到很多的代的调试技巧。</li></ul><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><blockquote><p>一组数据的集合</p></blockquote><h3 id="创建方式"><a href="#创建方式" class="headerlink" title="创建方式"></a>创建方式</h3><ol><li><p>利用 new 关键字创建数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br></pre></td></tr></table></figure></li><li><p>利用数组字面量创建数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>]; </span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;dada&#x27;</span>,<span class="literal">true</span>]; </span><br><span class="line"><span class="keyword">var</span> arr=[];</span><br></pre></td></tr></table></figure><p>注意</p><ul><li><p>数组里面可以放任何数据类型</p></li><li><p>数组里面的数据称为数组元素</p></li></ul></li></ol><h3 id="数组的索引"><a href="#数组的索引" class="headerlink" title="数组的索引"></a>数组的索引</h3><ul><li><p>索引: 用来访问数组元素的序号(<code>从0开始,最大为2^32 - 1</code>)</p></li><li><p>数组的长度是元素个数,不要跟索引号混淆</p></li></ul><h3 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h3><ul><li><p>遍历: 就是把数组中的所有元素从头到尾访问一次;</p></li><li><p><code>数组名.length</code>: 动态监测数组元素的个数,一般循环遍历时长度都用这个来表示</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; date.length;i++)&#123; </span><br><span class="line">    alert(date[i]); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="数组元素增加"><a href="#数组元素增加" class="headerlink" title="数组元素增加"></a>数组元素增加</h3><ol><li><p>通过修改 length 新增数组元素</p><p>先修改数组长度,再对新增元素赋值</p><p>若修改后的长度 &lt; 原先的长度,则原数组会被截取。若修改后的长度 &gt; 原先的长度,则原数组会添加多余个数的 undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.length = <span class="number">5</span>; </span><br><span class="line">arr[<span class="number">3</span>] = <span class="number">4</span>; </span><br><span class="line">arr[<span class="number">4</span>] = <span class="number">5</span>;</span><br></pre></td></tr></table></figure></li><li><p>通过修改数组索引的方式增加数组元素</p><p>直接对未赋值的数组元素赋值,若赋值的索引号已被占用,则会被替换为新的元素值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; </span><br><span class="line">arr[<span class="number">3</span>] = <span class="number">4</span>;</span><br></pre></td></tr></table></figure><p>注意: 不要对数组名直接赋值,否则会清除所有数组元素</p></li></ol><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><blockquote><p>封装了一段可被重复调用执行的代码块,通过函数可以实现大量代码的重复使用</p></blockquote><h3 id="函数使用步骤"><a href="#函数使用步骤" class="headerlink" title="函数使用步骤"></a>函数使用步骤</h3><ul><li><p>声明函数</p><p>声明方式1: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">参数<span class="number">1</span>,参数<span class="number">2</span>,...</span>)</span>&#123; </span><br><span class="line">    函数体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>注意 :</em></p><ol><li><p>function 为声明函数的关键字,全部小写</p></li><li><p>函数名一般为动词,代表此函数要做什么</p></li><li><p>函数声明后被调用才能执行,不调用不执行</p></li><li><p>函数声明一般出现在 js 代码的顶层,也可以嵌套在其他函数中,但是只能嵌套在那些函数顶层中,不能出现在 if , while 或其他语句中</p></li><li><p>使用可选参数设计函数时,应该确保把可选的参数放参数列表的末尾</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    alert(<span class="string">&#x27;hi&#x27;</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明方式 2 :</p><p><code>var 变量名 = function(参数1,参数2,...)&#123;&#125;; (匿名函数)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Hello World!&#x27;</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>函数调用</p><p><code>函数名();</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sayHi();</span><br></pre></td></tr></table></figure><p>或者</p><p><code>变量名(); 针对第二种声明方式</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun();</span><br></pre></td></tr></table></figure><p>注意: </p><ul><li>调用函数时一定记得写<code>小括号</code></li></ul></li></ul><h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>形参</code></td><td>形式上的参数 函数定义的适合 传递的参数 当前并不知道是什么</td></tr><tr><td><code>实参</code></td><td>实际上的参数 函数调用的时候传递的参数 实参是传递给形参的</td></tr></tbody></table><ul><li><p>多个参数之间逗号隔开</p></li><li><p>如果实参个数多于形参个数,会取到形参的个数</p></li><li><p>如果实参个数小于形参的个数,没有赋值的形参则为 undefined ,结果为 NaN</p></li><li><p>调用数组时直接写数组名字或者整个数组元素即可</p></li></ul><h3 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3><ul><li><p>函数只是实现某种功能,最终结果需要 return 返回数值, return 只能返回一个值</p></li><li><p>函数如果没有 return,返回的是 undefined</p></li><li><p>return 也有终止函数的功能</p></li><li><p>可以利用数组实现返回多个值</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getResult</span>(<span class="params">num1,num2</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> [num1 + num2, num1 - num2,num1 * num2, num1 / num2]; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> re = getResult(<span class="number">1</span>,<span class="number">2</span>); </span><br><span class="line"><span class="built_in">console</span>.log(re);</span><br></pre></td></tr></table></figure></li></ul><h3 id="arguments的使用"><a href="#arguments的使用" class="headerlink" title="arguments的使用"></a>arguments的使用</h3><p>存储函数传递的所有实参</p><blockquote><p>arguments 是 Arguments对象的实例,是当前函数的一个内置对象,所有函数都内置了一个 arguments 对象, arguments 只能在函数中调用,可以按照数目获取函数的实参的参数值(调用函数时写的参数而不是定义函数时写的形参),当不确定有多少个参数传递的时候,可以用 arguments 来获取。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>); </span><br><span class="line">&#125; </span><br><span class="line">fn(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>arguments 是一个伪数组,可以进行遍历,特点如下: </p><ol><li><p>具有 length 属性</p></li><li><p>按索引方式储存数据</p></li><li><p>不具有数组的 <code>push</code> 、<code>pop</code> 等方法</p></li></ol><p>arguments的属性</p><p><code>arguments.callee</code>: 返回 arguments 所在的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">whoIsCalling</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee); </span><br><span class="line">&#125; </span><br><span class="line">whoIsCalling();<span class="comment">//返回whoIsCalling函数的代码</span></span><br></pre></td></tr></table></figure><p>该属性可用来实现回调</p><h3 id="小知识"><a href="#小知识" class="headerlink" title="小知识"></a>小知识</h3><blockquote><p>在 JS 中,代码可以对函数进行操作。JS 中的函数是真正的数据,可以被存储在变量中、数组和对象中,可以作为参数传递给其他函数</p></blockquote><h3 id="函数的属性方法"><a href="#函数的属性方法" class="headerlink" title="函数的属性方法"></a>函数的属性方法</h3><p><code>函数.length</code>: 返回函数定义时形参的个数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x,y</span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(f.length);<span class="comment">//2 </span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length);<span class="comment">//3 </span></span><br><span class="line">&#125; </span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h2 id="JS的预解析-小难点-看案例"><a href="#JS的预解析-小难点-看案例" class="headerlink" title="JS的预解析(小难点,看案例)"></a>JS的预解析(小难点,看案例)</h2><h3 id="js引擎运行分两步"><a href="#js引擎运行分两步" class="headerlink" title="js引擎运行分两步"></a>js引擎运行分两步</h3><ol><li><p>预解析: <code>js 引擎会把 js 里面所有的 var 和 function 提升到当前作用域最前面</code></p></li><li><p>代码执行: 按书写顺序依次执行代码</p></li></ol><h3 id="预解析分为"><a href="#预解析分为" class="headerlink" title="预解析分为"></a>预解析分为</h3><ol><li><p>变量预解析(变量提升): 把 var 提升到当前作用域的最前面,但不赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(num); </span><br><span class="line">&#125; </span><br><span class="line">fun();</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>; </span><br><span class="line">等价于 </span><br><span class="line"><span class="keyword">var</span> num; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">&#125;</span><br><span class="line">fun(); </span><br><span class="line">num = <span class="number">10</span>; </span><br><span class="line"></span><br><span class="line">fn(); </span><br><span class="line"><span class="keyword">var</span> fn=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">11</span>); </span><br><span class="line">&#125; </span><br><span class="line">等价于 </span><br><span class="line"><span class="keyword">var</span> fn; </span><br><span class="line">fn(); </span><br><span class="line">fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">11</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>函数预解析(函数提升): 把所有函数声明提升到当前作用域最前面,但不调用函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">con(); </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">con</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">11</span>); </span><br><span class="line">&#125; </span><br><span class="line">等价于 </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">con</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">11</span>); </span><br><span class="line">&#125;</span><br><span class="line">con();</span><br></pre></td></tr></table></figure><p>注意: <code>var a = b = c = 9;</code> 预解析后等于<code>var a;a = 9;b = 9;c = 9;</code> <code>b和c变成全局变量</code></p></li></ol><h2 id="JS的对象"><a href="#JS的对象" class="headerlink" title="JS的对象"></a>JS的对象</h2><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><blockquote><p> 一组无序的相关属性和方法的集合,所有的事物 都是对象,除了字符串、数字、true、false、null 和 undefined 其他都是对象(事实上字符串数字布尔值可以被包装为包装对象)</p></blockquote><h3 id="对象由属性和方法构成"><a href="#对象由属性和方法构成" class="headerlink" title="对象由属性和方法构成"></a>对象由属性和方法构成</h3><blockquote><p>属性: 事物的特征,在对象中用属性来表示(常用名词),属性值可以是任意的js表达式,等同于变量。</p></blockquote><p>属性两种类型: </p><ul><li><p>自有属性: 直接在对象中定义的属性</p></li><li><p>继承属性: 通过原型对象继承的属性</p></li></ul><p>属性的三个特性: </p><ul><li><p><code>值(value)</code>: 属性的值</p></li><li><p><code>可写(writable)</code>: 表明是否可以设置该属性的值</p></li><li><p><code>可枚举(enumerable)</code>: 表示是否可以通过 for/in 循环返回该属性</p></li><li><p><code>可配置(configurable)</code>: 表明是否可以删除或者修改该属性</p></li><li><p><code>方法</code>: 事物的行为,在对象中用方法来表示(常用动词),即存储在对象中的函数</p></li></ul><h3 id="对象有三种"><a href="#对象有三种" class="headerlink" title="对象有三种"></a>对象有三种</h3><ol><li><p>自定义对象 </p></li><li><p>内置对象 </p></li><li><p>宿主对象 (前两者属于 ECMAscript ,后者属于客户端 JavaScript)</p></li></ol><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><ul><li><p>用字面量创建对象</p><p><code>var 对象名 = &#123; 属性名: &#39;属性值&#39;, 属性名: &#39;属性值&#39;, 。。。&#125;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; </span><br><span class="line">    uname: <span class="string">&#x27;zykj&#x27;</span>, </span><br><span class="line">    age: <span class="number">18</span>, </span><br><span class="line">    sex: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    sayHi: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Hi&#x27;</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用对象</p><ol><li><p><code>对象名.属性名</code> </p></li><li><p><code>对象名[&#39;属性名&#39;]</code> (即作为关联数组的对象,允许动态地将任意数值和任意字符串关联在一起)</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj.uname); </span><br><span class="line"><span class="comment">//第二种方法 对象名[&#x27;属性名&#x27;] </span></span><br><span class="line"><span class="built_in">console</span>.log(obj[<span class="string">&#x27;age&#x27;</span>]);</span><br></pre></td></tr></table></figure></li></ol><p>变量、属性、函数、方法的区别</p><ol><li><p>变量和属性都是用来存储数据,但变量需要声明属性不需要,变量可以直接写变量名调用,属性必须<code>对象名.属性名</code>调用,变量和属性基本等同</p></li><li><p>函数和方法都是实现某种功能。函数是单独声明且调用时是写<code>函数名()</code>。方法在对象里声明且调用为<code>对象.方法()</code>,对象中的函数即为方法</p></li></ol></li><li><p>用 new Object 创建对象</p><p>利用等号对属性进行赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>(); </span><br><span class="line">obj.uname = <span class="string">&#x27;zykj&#x27;</span>; </span><br><span class="line">obj.age  = <span class="number">18</span>; </span><br><span class="line">obj.sex = <span class="string">&#x27;男&#x27;</span>; </span><br><span class="line">obj.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Hi&#x27;</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj.uname); </span><br><span class="line"><span class="built_in">console</span>.log(obj.sex);</span><br><span class="line">obj.sayHi();</span><br></pre></td></tr></table></figure></li><li><p>利用构造函数构造多个对象</p><p><code>构造函数</code>: 就是把对象里面一些相同的属性和方法抽出封装起来的函数,即构造对象的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 构造函数名(<span class="params">形参</span>)</span>&#123; </span><br><span class="line">    <span class="built_in">this</span>.属性 = 值; </span><br><span class="line">    <span class="built_in">this</span>.方法 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>var 对象名 = new 构造函数名(实参);</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">uname,age,sex</span>)</span>&#123; </span><br><span class="line">    <span class="built_in">this</span>.name = uname; </span><br><span class="line">    <span class="built_in">this</span>.age = age; </span><br><span class="line">    <span class="built_in">this</span>.sex = sex; </span><br><span class="line">&#125;    </span><br><span class="line"><span class="keyword">var</span> zykj = <span class="keyword">new</span> Star(<span class="string">&#x27;zykj&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>); </span><br></pre></td></tr></table></figure><p>注意点以及构造函数执行过程: </p><ol><li><p>构造函数名字首字母一般大写</p></li><li><p>构造函数不需要 return</p></li><li><p>调用构造函数 必须使用 new 构造函数在内存中创建了一个空的对象</p></li><li><p>必须使用 this , this 指向 new 创建的空对象</p></li><li><p>执行构造函数的代码后,就会给这个空对象添加属性和方法</p></li><li><p>new 会返回创建后的对象</p></li></ol></li></ul><h3 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h3><blockquote><p>语法:  for(变量 in 对象){} 该方法会<code>枚举所有可枚举的属性,包括自有属性和继承属性</code>(除非利用 Object.defineProperty() 人为设定</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> obj)&#123;    </span><br><span class="line">    <span class="built_in">console</span>.log(k); <span class="comment">// 遍历输出属性名    </span></span><br><span class="line">    <span class="built_in">console</span>.log(obj[k]); <span class="comment">//遍历输出属性值 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意:</p><ul><li><p>k 可以改为任意变量名,一般用 k</p></li><li><p>k 为数组</p></li><li><p>也可以用于数组！！！</p></li><li><p>该方法会枚举所有可枚举的属性,包括自有属性和继承属性(除非利用 Object.defineProperty() 人为设定为不可枚举)</p></li><li><p>许多预定义内部属性和方法,包括所有的内部方法都是不可枚举的</p></li></ul><h3 id="删除属性"><a href="#删除属性" class="headerlink" title="删除属性"></a>删除属性</h3><p>语法: delete 属性</p><p>删除运算数指定的<code>对象的属性、数组元素或变量</code>(严格模式不可删除)。返回布尔值</p><p>内部核心属性、客户端属性、用 var 语句声明的用户定义变量都不能删除</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; </span><br><span class="line">    num: <span class="number">10</span>, </span><br><span class="line">    age: <span class="number">20</span> </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">delete</span> obj.num; </span><br><span class="line"><span class="built_in">console</span>.log(obj);<span class="comment">// num消失</span></span><br></pre></td></tr></table></figure><p>注意: </p><p>delete: <code>只是断开属性和宿主对象的联系,而不会去操作属性中的属性</code></p><h3 id="检查属性的存在性"><a href="#检查属性的存在性" class="headerlink" title="检查属性的存在性"></a>检查属性的存在性</h3><ol><li><p>检测对象或数组中是否有某个属性,返回布尔值</p><p>语法: 属性名 in 对象或数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; </span><br><span class="line">    num: <span class="number">10</span>, </span><br><span class="line">    age: <span class="number">20</span> </span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;num&quot;</span> <span class="keyword">in</span> obj); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>注意: 该方法可以检测所有的属性方法,包括自定义类内置的和原型链上的以及原始类的属性方法</p></li><li><p>只能检测对象的自有属性</p><p>语法: <code>对象.hasOwnProperty(属性名)</code> 返回布尔值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="built_in">this</span>.name = <span class="number">1</span> </span><br><span class="line">&#125; </span><br><span class="line">Star.prototype.age = <span class="number">12</span>;</span><br><span class="line"><span class="built_in">Object</span>.prototype.male = <span class="string">&#x27;man&#x27;</span>; </span><br><span class="line"><span class="keyword">var</span> zykj = <span class="keyword">new</span> Star();     </span><br><span class="line"><span class="built_in">console</span>.log(zykj.hasOwnProperty(<span class="string">&#x27;name&#x27;</span>));<span class="comment">//true </span></span><br><span class="line"><span class="built_in">console</span>.log(zykj.hasOwnProperty(<span class="string">&#x27;male&#x27;</span>));<span class="comment">//false</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="确定对象类型"><a href="#确定对象类型" class="headerlink" title="确定对象类型"></a>确定对象类型</h3><ol><li><p><code>typeof</code>: 用于区分 number、string、boolean、undefined、function、symbol 这些基本类型</p></li><li><p><code>instanceof</code>: 一旦确定了一个值不是基本类型或函数,就可以用 instanceof 来确定是哪种内建对象的实例,对于基本类型包装对象无效</p></li><li><p><code>Object.toString()</code>: 返回的是<code>[object class]</code>, class 是对象的内部类型,通常与该对象的构造函数名字对应。只能返回 Array、Function、Date、String、Number、Boolean、Symbol,其他一律返回 Object</p></li><li><p><code>constructor</code>:返回原型对象所属的类,返回的是整个构造函数</p></li></ol><h3 id="序列化对象"><a href="#序列化对象" class="headerlink" title="序列化对象"></a>序列化对象</h3><blockquote><p>将对象的状态转为字符串或将字符串还原为对象</p></blockquote><p>利用<code>JSON.stringify()</code>和<code>JSON.parse()</code>来序列化和还原对象</p><p>JSON(JavaScript Object Notation): JavaScript 对象表示法</p><h3 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h3><p>常用 Math Date Array String 等</p><h4 id="数学对象"><a href="#数学对象" class="headerlink" title="数学对象"></a>数学对象</h4><blockquote><p>不是构造函数,无需用 new 调用。而是可以直接调用其类属性及类方法</p></blockquote><ul><li><p>调用属性 如 输出pi值: <code>Math.PI</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.PI); <span class="comment">// 3.14....</span></span><br></pre></td></tr></table></figure></li><li><p>调用方法 如 取最大值: <code>Math.max</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>如果有一个或一个以上的值为非整数型,则返回 NaN</p><p>如果没有赋值,则返回 Infinity</p></li><li><p>求开根号<code>Math.sqrt(x)</code>返回 x 的开根号值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="built_in">Math</span>.sqrt(<span class="number">81</span>); </span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br></pre></td></tr></table></figure></li><li><p>求绝对值<code>Math.abs</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.abs(<span class="number">1</span>)); <span class="comment">//1 </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.abs(<span class="number">-1</span>)); <span class="comment">// 1 </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.abs(<span class="string">&#x27;-1&#x27;</span>));  <span class="comment">// 1 有隐式转换 可以直接字符串转为数字型</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.abs(<span class="string">&#x27;哈哈&#x27;</span>)); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure></li><li><p>三个取整方法</p><ol><li><p><code>Math.floor()</code>: 向下取整,往最小了取值,不会四舍五入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(<span class="number">1.1</span>)); <span class="comment">// 1 </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(<span class="number">1.9</span>)); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li><li><p><code>Math.ceil()</code>: 往上取整,往最大了取,不会四舍五入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.ceil(<span class="number">1.9</span>)); <span class="comment">// 2 console.log(Math.ceil(1.1)); // 2</span></span><br></pre></td></tr></table></figure></li><li><p><code>Math.round()</code>: 四舍五入取整(其他都是四舍五入,只有5是往大了取)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="number">1.1</span>)); <span class="comment">// 1 </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="number">1.9</span>)); <span class="comment">// 2 </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="number">-1.5</span>)); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>随机数</p><p><code>Math.random()</code>: 返回一个随机的0到1之间的小数(不包含0和1)且不跟参数</p><p>得到两个整数之间的随机整数: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandom</span>(<span class="params">min,max</span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*(max-min+<span class="number">1</span>)+min));  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="日期对象"><a href="#日期对象" class="headerlink" title="日期对象"></a>日期对象</h4><blockquote><p>Date() 日期对象 是一个构造函数 必须使用 new 来调用创建自己的日期对象</p></blockquote><ul><li><p>使用方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(date);</span><br></pre></td></tr></table></figure></li><li><p>参数写法</p><p>无参数则返回当前系统时间</p><p>数字型: 2019,10,01<br>字符型: ‘2019-10-1 08:08:08’</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2019</span>,<span class="number">10</span>,<span class="number">1</span>); </span><br><span class="line">or </span><br><span class="line"><span class="keyword">var</span> date2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;2019-10-1 08:08:08&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>具体方法</p><p><code>返回当前年份</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象名.getFullYear()</span><br></pre></td></tr></table></figure><p><code>返回当前月份</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象名.getMonth()+<span class="number">1</span></span><br></pre></td></tr></table></figure><p>注意: <code>是从0开始到11 所以应该+1 否则得到的月份少一个月</code></p><p><code>返回当前号数</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象名.getDate()</span><br></pre></td></tr></table></figure><p><code>返回周几</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象名.getDay()</span><br></pre></td></tr></table></figure><p>注意: <code>是从0(即星期日)开始到6(星期六)</code></p><p><code>返回小时</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象名.getHours();</span><br></pre></td></tr></table></figure><p><code>返回分钟</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象名.getMinutes()</span><br></pre></td></tr></table></figure><p><code>返回秒钟</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象名.getSeconds()</span><br></pre></td></tr></table></figure><p><code>返回自1970年来的总毫秒数</code></p><ol><li><p><code>对象名.getvalueOf()</code> 或者 <code>对象名.getTime()</code></p></li><li><p>var 对象名 = new Date();</p></li><li><p>console.log(Date.now());//低版本浏览器不支持</p></li></ol><p><code>获取时间</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countDown</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> nowTime = +<span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">// 返回的是当前时间总的毫秒数</span></span><br><span class="line">  <span class="keyword">var</span> inputTime = +<span class="keyword">new</span> <span class="built_in">Date</span>(time); <span class="comment">//返回的是用户输入时间的总毫秒数</span></span><br><span class="line">  <span class="keyword">var</span> times = (inputTime - nowTime) / <span class="number">1000</span>; <span class="comment">// times是剩余时间总的毫秒数</span></span><br><span class="line">  <span class="keyword">var</span> d = <span class="built_in">parseInt</span>(times / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>); <span class="comment">// 天</span></span><br><span class="line">  d = d &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + d : d;</span><br><span class="line">  <span class="keyword">var</span> h = <span class="built_in">parseInt</span>(times / <span class="number">60</span> / <span class="number">60</span> % <span class="number">24</span>); <span class="comment">// 时</span></span><br><span class="line">  h = h &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + h : h;</span><br><span class="line">  <span class="keyword">var</span> m = <span class="built_in">parseInt</span>(times / <span class="number">60</span> % <span class="number">60</span>); <span class="comment">// 分</span></span><br><span class="line">  m = m &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + m : m;</span><br><span class="line">  <span class="keyword">var</span> s = <span class="built_in">parseInt</span>(times  % <span class="number">60</span>); <span class="comment">// 当前的秒</span></span><br><span class="line">  s = s &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + s : s;</span><br><span class="line">  <span class="keyword">return</span> d + <span class="string">&#x27;天&#x27;</span> + h + <span class="string">&#x27;时&#x27;</span> + m + <span class="string">&#x27;分&#x27;</span> + s + <span class="string">&#x27;秒&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(countDown(<span class="string">&#x27;2020-5-13 17:29:00&#x27;</span>))</span><br></pre></td></tr></table></figure></li></ul><h4 id="数组对象"><a href="#数组对象" class="headerlink" title="数组对象"></a>数组对象</h4><ul><li><p>创建方式</p><ol><li><p>利用字面量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var arr &#x3D; [1,2,3]; </span><br><span class="line">console.log(arr[0]);</span><br></pre></td></tr></table></figure></li><li><p>利用<code>new Array()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>(); <span class="comment">// 空数组 </span></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">2</span>); <span class="comment">// 长度为2的空数组 </span></span><br><span class="line"><span class="keyword">var</span> arr3 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">2</span>,<span class="number">3</span>);<span class="comment">// 内容为2和3的数组</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>检测变量是否为数组的方法</p><ol><li><p>利用<code>instanceof</code></p><p>变量名 instanceof Array </p><p>返回的是布尔值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = []; </span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;; </span><br><span class="line"><span class="built_in">console</span>.log(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// 返回true</span></span><br><span class="line"><span class="built_in">console</span>.log(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// 返回false</span></span><br></pre></td></tr></table></figure><p>注: 亦可用来判断是否为对象类型 : 变量名 instanceof Object</p></li><li><p>利用Array内置对象的行为</p><p><code>Array.isArray(变量)</code></p><p>返回的也是布尔值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.isArray([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]); <span class="comment">// TRUE </span></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>); <span class="comment">// FALSE</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><ul><li><p>给数组添加元素的方法</p><ol><li><p>末尾添加</p><p><code>数组名.push(元素1,元素2,...);</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]; </span><br><span class="line">arr.push(<span class="number">1</span>,<span class="string">&#x27;dada&#x27;</span>); <span class="comment">// 返回结果是数组长度</span></span><br></pre></td></tr></table></figure></li><li><p>头部添加</p><p><code>数组名.unshift(元素1,元素2,...);</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]; </span><br><span class="line">arr.unshift(<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;purple&#x27;</span>);  <span class="comment">// 返回结果是数组长度</span></span><br></pre></td></tr></table></figure></li><li><p>尾部删除</p><p><code>数组名.pop()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.pop(); <span class="comment">//pop没有参数 返回删除的元素 一次只能删除一个元素</span></span><br></pre></td></tr></table></figure></li><li><p>头部删除</p><p><code>数组名.shift()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.shift()<span class="comment">//没有参数 返回删除的元素 一次只能删除一个</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>总结</p><table><thead><tr><th>方法名</th><th>说明</th><th>返回值</th></tr></thead><tbody><tr><td><code>push(参数1...)</code></td><td><code>末尾添加一个或多个元素</code>,注意修改原数组</td><td>返回新的长度</td></tr><tr><td><code>pop() </code></td><td><code>删除数组最后一个元素</code>,把数组长度减1 无参数、修改原数组</td><td>返回它删除元素的值</td></tr><tr><td><code>unshift(参数1...)</code></td><td><code>向数组的开头添加一个或更多元素</code>,注意修改原数组</td><td>返回新的长度</td></tr><tr><td><code>shift()</code></td><td><code>删除数组的第一个元素</code>,数组长度减1 无参数。修改数组</td><td>返回第一个元素</td></tr></tbody></table></li><li><p>数组排序的方法</p><ol><li><p>数组翻转</p><p><code>数组名.reverse();</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]; </span><br><span class="line">arr.reverse();</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure></li><li><p>数组排序</p><p><code>数组名.sort();</code>: 只对一位数起效,多位数会出错</p><p><code>数组名.sort(function(a,b)&#123; a - b&#125;)</code>: 升序排序</p><p><code>数组名.sort(function(a,b)&#123; b - a&#125;)</code>: 降序排序</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">12</span>]; </span><br><span class="line">arr1.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123; </span><br><span class="line">    <span class="comment">// return a - b;  升序排列 </span></span><br><span class="line">    <span class="keyword">return</span> b - a; </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol></li><li><p>获取数组元素索引方式</p><ol><li><p><code>变量名.indexOf(元素值)</code>;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;pink&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>]; </span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="string">&#x27;blue&#x27;</span>));</span><br></pre></td></tr></table></figure><p>注: 返回第一个满足条件的索引号 </p><p>如果该数组里找不到元素,则返回-1</p></li><li><p><code>变量名.lastIndexOf(元素值);</code></p><p>注: 从末尾开始找 返回正序的索引号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(arr.lastIndexOf(<span class="string">&#x27;blue&#x27;</span>))</span><br></pre></td></tr></table></figure><p>注: 只能用于数组,不能用于节点</p></li></ol></li></ul><ul><li><p>数组转为字符串</p><ol><li><p><code>变量名.toString();</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]; </span><br><span class="line"><span class="built_in">console</span>.log(arr.toString());</span><br></pre></td></tr></table></figure></li><li><p><code>变量名.join();</code></p><p>把数组所有元素转换成字符串,再把它们连接起来。可以指定一个可选的字符串来分隔结果字符串中的元素。默认为逗号分隔</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>,<span class="string">&#x27;pink&#x27;</span>]; </span><br><span class="line"><span class="built_in">console</span>.log(arr1.join()); <span class="comment">//green,blue,pink</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1.join(<span class="string">&#x27;&#x27;</span>)); <span class="comment">//greenbluepink</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>数组的截取删除连接</p><p>数组链接</p><p><code>数组名1.concat(数组名2);</code></p><p><code>数组名1.concat(元素值,元素值,...);</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]; </span><br><span class="line"><span class="keyword">var</span> num2 = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]; </span><br><span class="line"><span class="built_in">console</span>.log(num1.concat(num2)); </span><br><span class="line"><span class="built_in">console</span>.log(num1.concat(num2,<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>]));</span><br></pre></td></tr></table></figure></li><li><p>数组删除插入(改变原数组,返回被删除的值)</p><p><code>数组名.splice(起始位置,删除个数,添加元素)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num3 = [<span class="string">&#x27;ha&#x27;</span>,<span class="string">&#x27;xi&#x27;</span>,<span class="string">&#x27;hei&#x27;</span>,<span class="string">&#x27;he&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> num4 = num3.splice(<span class="number">1</span>,<span class="number">0</span>,<span class="string">&#x27;en&#x27;</span>); <span class="comment">// 在第1位后插入&#x27;en&#x27; </span></span><br><span class="line"><span class="keyword">var</span> num5 = num3.splice(<span class="number">1</span>,<span class="number">1</span>); <span class="comment">//第1位开始删除一位  </span></span><br><span class="line"><span class="built_in">console</span>.log(num5); <span class="comment">// &#x27;xi&#x27;</span></span><br><span class="line"><span class="keyword">var</span> num6 = num3.splice(<span class="number">2</span>,<span class="number">1</span>,<span class="string">&#x27;en&#x27;</span>,<span class="string">&#x27;o&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(num3); <span class="comment">// &#x27;ha&#x27; &#x27;xi&#x27; &#x27;en&#x27; &#x27;o&#x27; &#x27;he&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>数组截取(不会改变原数组,只是截取出来作为新数组)</p><p><code>数组名.slice(开始位置(包含),结束位置(不包含));</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num7 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]; </span><br><span class="line"><span class="built_in">console</span>.log(num7.slice(<span class="number">2</span>)); <span class="comment">// 3,4,5,6 </span></span><br><span class="line"><span class="built_in">console</span>.log(num7.slice(<span class="number">1</span>,<span class="number">3</span>));<span class="comment">// 2,3 </span></span><br><span class="line"><span class="comment">// num7依旧为1,2,3,4,5,6</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="字符串对象"><a href="#字符串对象" class="headerlink" title="字符串对象"></a>字符串对象</h4><blockquote><p>基本包装类型: js 不仅支持数字字符串和布尔值这些数据类型,还支持 Number、String、Boolean 类,这些类是其对应基本数据类型的包装。不仅具有和基本类型一样的值,还定义了用来运算数据的属性和方法</p></blockquote><p>过程: </p><ol><li><p>字符串值内部创建一个String包装对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> temp = <span class="keyword">new</span> <span class="built_in">String</span>(字符串值)</span><br></pre></td></tr></table></figure></li><li><p>代替原始的字符串值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量名 = temp;</span><br></pre></td></tr></table></figure></li><li><p>销毁temp</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">temp= <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>字符串不可变性: 字符串赋值后重新赋值需要重新创建内存空间,原先的内存及其值不变。所以不要大量拼接字符串,即字符串的值无法修改</p></blockquote><blockquote><p> 字符串所有方法,都不会修改字符串本身内容,而是创建新的字符串</p></blockquote><p>实例方法</p><ul><li><p>根据字符串返回索引值</p><p><code>字符串名.indexOf(具体某个字符串,开始位置(默认无));</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str =<span class="string">&#x27;改革春风吹满地,春天来了&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">&#x27;春&#x27;</span>)); <span class="comment">// 返回2 </span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">&#x27;春&#x27;</span>,<span class="number">3</span>)); <span class="comment">// 返回8</span></span><br></pre></td></tr></table></figure></li><li><p>根据索引值返回字符串</p><ol><li><p><code>字符串变量名.charAt(索引值)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&#x27;1234&#x27;</span>; </span><br><span class="line"><span class="keyword">var</span> a = str.charAt(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></li><li><p><code>字符串变量名.charCodeAt(索引值)</code>: 返回对应位置字符的ASCII码 用于判断用户按键</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(str.charCodeAt(<span class="number">0</span>));</span><br></pre></td></tr></table></figure></li><li><p><code>变量名[索引值]</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(str[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure></li></ol></li><li><p>字符串连接</p><p><code>字符串1.concat(字符串2);</code></p><p><code>字符串1.concat(字符,字符,...);</code></p><p>一般用加号</p></li><li><p>字符串截取</p><p><code>字符串.substr(截取起始位置,截取的字符数)</code>: 不改变原字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;改革春风吹满地&#x27;</span>; </span><br><span class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">2</span>,<span class="number">2</span>));</span><br></pre></td></tr></table></figure></li><li><p>字符串替换</p><p><code>字符串.replace(&#39;被替换的字符&#39;,&#39;替换为的字符&#39;)</code></p><p>返回的是新修改后的字符串,原字符不变</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;andy&#x27;</span>; </span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;d&#x27;</span>)); <span class="comment">// 有一个字符串&#x27;abcoefoxyozzopp&#x27; 要求把所有o替换为* </span></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">&#x27;abcoefoxyozzopp&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; str1.length;i++)&#123; </span><br><span class="line">    str1 = str1.replace(<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;*&#x27;</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>字符串转为数组</p><p><code>字符串.split(&#39;分隔符&#39;)</code></p><p>原字符串用什么分割,就用什么做分隔符 不改变原字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">&#x27;red,pink,blue&#x27;</span>; </span><br><span class="line"><span class="built_in">console</span>.log(str1.split(<span class="string">&#x27;,&#x27;</span>)); </span><br><span class="line"><span class="keyword">var</span> str3 = <span class="string">&#x27;red&amp;pink&amp;blue&#x27;</span>; </span><br><span class="line"><span class="built_in">console</span>.log(str3.split(<span class="string">&#x27;&amp;&#x27;</span>));</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>字符串大小写转换</p><p><code>字符串.toUpperCase()</code>: 将字符串转为大写</p><p><code>字符串.toLowerCase()</code>: 将字符串转为大写</p><p>注: 字符串大小比较是按对应字母一个一个比</p></li><li><p>去除字符串左右的空格</p><p><code>字符串.trim()</code></p><p>可用来去除表单只填入空格时造成的 bug</p></li><li><p>类方法</p><p>根据 ASCII码 返回字符串</p><p><code>String.fromCharCode(num1, ..., numN)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCharCode(<span class="number">78</span>)); <span class="comment">//N</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="简单和复杂数据类型"><a href="#简单和复杂数据类型" class="headerlink" title="简单和复杂数据类型"></a>简单和复杂数据类型</h2><h3 id="简单数据类型-1"><a href="#简单数据类型-1" class="headerlink" title="简单数据类型"></a>简单数据类型</h3><p>简单数据类型(基本数据类型或值类型),存储时变量中存放的是值本身,因此叫值类型,如 number、boolean、undefined、null。都具有固定的内存大小</p><p>其中 null 的返回类型是 Object ,因此一般可先用来定义对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timer = <span class="literal">null</span>; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">null</span>); <span class="comment">//结果为object</span></span><br></pre></td></tr></table></figure><p>如果有个变量打算存储为对象但没想好放什么属性和行为,那么就可以先设置为 null 类型</p><h3 id="复杂数据类型-1"><a href="#复杂数据类型-1" class="headerlink" title="复杂数据类型"></a>复杂数据类型</h3><blockquote><p>复杂数据类型(引用类型): 变量中存储的仅仅是地址,如对象及其特殊类型数组和函数</p></blockquote><p>其中字符串不能很好地适合基本类型和引用类型的二分法。因为字符串不是对象,被当做基本类型,而字符串又有任意的长度,所以也可以被认为是引用类型。字符串是通过传值来比较</p><h3 id="堆和栈"><a href="#堆和栈" class="headerlink" title="堆和栈"></a>堆和栈</h3><ul><li><p>栈: 存放简单数据类型,由操作系统自动分配释放存放函数的参数值、局部变量的值等。简单数据类型直接查找存放在栈中的变量的值(简单数据 &gt; 栈 &gt; 变量 &gt; 值)</p></li><li><p>堆: 存放复杂数据类型,一般由程序员分配释放。复杂数据类型通过存放在栈中的变量中的地址找到存放在堆中的值(复杂数据&gt;栈&gt;变量&gt;地址&gt;堆&gt;值)</p></li></ul><h3 id="简单数据类型的传参-传值"><a href="#简单数据类型的传参-传值" class="headerlink" title="简单数据类型的传参(传值)"></a>简单数据类型的传参(传值)</h3><p>函数的形参可以看做一个变量,当把一个变量传给函数形参就等于把变量的值复制一份给形参。所以对函数内变量的修改不会影响外部变量</p><h3 id="复杂数据类型的传参-传址"><a href="#复杂数据类型的传参-传址" class="headerlink" title="复杂数据类型的传参(传址)"></a>复杂数据类型的传参(传址)</h3><p>函数的形参可以看做一个变量,当把一个变量传给函数形参就等于把变量存放的堆地址复制一份给形参,即形参和实参保存的是同个堆地址,所以操作的是同一个对象。</p><h1 id="Web-APIs"><a href="#Web-APIs" class="headerlink" title="Web APIs"></a>Web APIs</h1><div class="note danger"><p>本教程里的资料来源于网友的资料,自己整理以供学习。视频学习: <a href="https://www.bilibili.com/video/BV1k4411w7sV">黑马程序员</a></p></div><ul><li><p>DOM:文档对象模型(document object model)</p></li><li><p>BOM: 浏览器对象模型</p></li><li><p><code>API(application programming interafce,应用程序编程接口)</code>: 是一些预先定义的函数,目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力,而又无需访问源码,或理解内部工作机制的细节</p></li><li><p><code>Web API</code>: 浏览器提供的一套<code>操作浏览器功能</code>和<code>页面元素</code>的 API</p></li></ul><p>可以将 Web 浏览器当做简单操作系统,就可以 web 应用定义为 JavaScript 访问更多浏览器提供的高级服务的Web页面</p><p>文档中的 JavaScript 的角色定位: 增强用户浏览体验,使信息的获取和传递更容易。而不是降低网页的可访问性。</p><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><blockquote><p>文档对象模型(document object model),处理 HTML 或者 XML 的标准编程接口,通过DOM可以改变网页的内容、结构和样式</p></blockquote><ul><li><p>文档: 一个<code>页面就是一个文档</code>,DOM中用<code>document</code>表示</p></li><li><p>元素: <code>页面中所有标签都是元素</code>,DOM用<code>element</code>表示</p></li><li><p>节点: 网页中所有内容都是节点(标签属性文本注释等),DOM中用<code>node</code>表示</p></li></ul><p><code>DOM把以上内容都看作是对象</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200428211339.png"></p><h3 id="获取页面元素"><a href="#获取页面元素" class="headerlink" title="获取页面元素"></a>获取页面元素</h3><ol><li><p>根据ID获取</p></li><li><p>根据标签名获取</p></li><li><p>根据h5新增属性获取</p></li><li><p>特殊元素获取</p></li><li><p>根据 window 属性获取(不推荐)</p></li><li><p>利用 HTMLCollection (HTML集合)快捷获取</p></li></ol><ul><li><p>根据ID获取</p><p><code>document.getElementById(ID名)</code></p><details green><summary> <p>示例</p> </summary>              <div class='content'>              <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;time&quot;</span>&gt;</span>2019-9-9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span> </span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> timer = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;time&#x27;</span>); </span></span><br><span class="line"><span class="handlebars"><span class="xml">        console.log(timer); // <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;time&quot;</span>&gt;</span>2019-9-9<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> timer); <span class="comment">// object</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.dir(timer); </span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>              </div>            </details><p>注意点</p><ol><li><p>因为文档页面从上往下加载,所以先得有标签, script 写到标签下面</p></li><li><p>参数 id 是大小写敏感的字符串 一定要加引号</p></li><li><p>返回的是一个文档对象 object (即有众多属性和方法)</p></li><li><p><code>console.dir</code> 打印对象所有的属性和方法</p></li></ol></li><li><p>根据标签名获取</p><p><code>document.getElementsByTagName(标签名)</code></p><p><code>父元素.getElementsByTagName(标签名)</code></p><details green><summary> <p>示例</p> </summary>              <div class='content'>              <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">ol</span> <span class="attr">id</span>=<span class="string">&quot;ol&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>7<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>8<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>9<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> lis = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(lis); <span class="comment">// HTMLCollection &#123;0: HTMLLIElement, 1: HTMLLIElement, 2: HTMLLIElement, 3: HTMLLIElement, 4: HTMLLIElement…&#125;</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(lis[<span class="number">2</span>]); <span class="comment">// &lt;li&gt;3&lt;/li&gt;</span></span></span><br><span class="line">    </span><br><span class="line">    for(i = 0;i&lt;lis.length;i++)&#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(lis[i]);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ol = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;ol&quot;</span>); </span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(ol); <span class="comment">// HTMLCollection &#123;0: HTMLOListElement, 1: HTMLOListElement, constructor:</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(ol[<span class="number">0</span>].getElementsByTagName(<span class="string">&quot;li&quot;</span>)); <span class="comment">// HTMLCollection &#123;0: HTMLLIElement, 1: HTMLLIElement, 2: HTMLLIElement, constructor: Object&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ol = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;ol&#x27;</span>); </span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(ol.getElementsByTagName(<span class="string">&#x27;li&#x27;</span>)); <span class="comment">// HTMLCollection &#123;0: HTMLLIElement, 1: HTMLLIElement, 2: HTMLLIElement, constructor: Object&#125;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>              </div>            </details><p>注意: </p><ol><li><p>返回的值是伪数组,即所有相应标签的集合,即以伪数组的形式存储(无论有多少个,即使是0个),单个元素仍为对象,得到的元素是动态的</p></li><li><p>可用遍历方式打印里面具体的元素对象</p></li><li><p>通过父元素获取标签时,父元素必须是具体的单个对象,如果父元素是通过标签名获取,则获取其子元素时应加上索引号。也可以直接通过 ID 获取不加索引号</p></li></ol></li><li><p>H5新增,返回的是 NodeList 对象</p><p><code>document.getElementsByClassName(标签名)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;box&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(box); <span class="comment">// HTMLCollection &#123;0: HTMLDivElement, constructor: Object&#125;</span></span><br></pre></td></tr></table></figure><p>注意</p><ol><li>返回的依旧是伪数组形式</li></ol><br> <p><code>document.querySelector(选择器)如(#id,.类名,标签名)</code></p><p>返回指定选择器的<code>第一个元素</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> firstbox = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.box&#x27;</span>); </span><br><span class="line"><span class="built_in">console</span>.log(firstbox); </span><br><span class="line"><span class="keyword">var</span> nav = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#nav&#x27;</span>); </span><br><span class="line"><span class="built_in">console</span>.log(nav); </span><br><span class="line"><span class="keyword">var</span> one = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;li&#x27;</span>); </span><br><span class="line"><span class="built_in">console</span>.log(one);</span><br></pre></td></tr></table></figure><p>注意: <code>永远只会返回一个元素对象</code></p><br> <p><code>document.querySelectorAll(选择器)</code></p><p>返回选定选择器的所有元素集合</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> allbox = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.box&#x27;</span>); </span><br><span class="line"><span class="built_in">console</span>.log(allbox); </span><br><span class="line"><span class="keyword">var</span> lis = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;li&#x27;</span>); </span><br><span class="line"><span class="built_in">console</span>.log(lis[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><p>注意: 返回的是伪数组形式(无论对象元素数量多少)</p></li><li><p>获取特殊元素</p><ol><li><p>获取 body 元素</p><p><code>document.body</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bodyEle = <span class="built_in">document</span>.body; </span><br><span class="line"><span class="built_in">console</span>.log(bodyEle);</span><br></pre></td></tr></table></figure></li><li><p>获取 html 元素</p><p><code>document.documenElement</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> htmlEle = <span class="built_in">document</span>.documentElement; </span><br><span class="line"><span class="built_in">console</span>.log(htmlEle);</span><br></pre></td></tr></table></figure></li><li><p>获取 head 元素</p><p><code>document.head</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.head);</span><br></pre></td></tr></table></figure></li></ol></li></ul><ul><li><p>根据 window 属性获取赋予 id 、name 属性的 html 标签(不推荐)</p><blockquote><p>如果HTML文档中用 id 属性为元素命名,并且 Window 对象没有该名字的属性,那么 Window 对象会创建一个同名属性,该属性指向以该名字命名 id 属性的 html 元素</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;one&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span> </span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">window</span>.one); <span class="comment">// &lt;div id=&quot;one&quot;&gt;&lt;/div&gt; </span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于 a、iframe、img、form 等标签来说,如果有 name 属性,那么也会有与上面同样的表现。如果有多个相同 name 属性,则具有该名称的隐式全局变量会引用一个伪数组对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">name</span>=<span class="string">&quot;ii&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">name</span>=<span class="string">&quot;ii&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span> </span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.ii);<span class="comment">// HTMLCollection(2) [img, img, ii: img] </span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>利用 HTMLCollection (HTML集合)快捷获取,返回的是 HTMLCollection 对象</p><blockquote><p>HTMLDocument中定义了一些属性,如images、forms、links可以快速获取img、form、a等标签</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.images);<span class="comment">//HTMLCollection(2) [img, img] </span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="事件概述"><a href="#事件概述" class="headerlink" title="事件概述"></a>事件概述</h3><blockquote><p>可以被 javascript 侦测到的行为</p></blockquote><p>事件三要素</p><ol><li><p>事件源(可以通过获取对象方式获取)</p></li><li><p>事件类型(设置事件的触发方式)</p></li><li><p>事件处理程序(通过函数赋值方式完成)</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>); </span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123; </span><br><span class="line">    alert(<span class="string">&#x27;点秋香&#x27;</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意: 第一句为获取事件源<code>.onclick</code>为事件类型 function 及后面为事件处理程序</p><p>事件执行三步骤: </p><ol><li><p>获取事件源</p></li><li><p>绑定事件</p></li><li><p>添加事件处理程序</p></li></ol><h3 id="常见鼠标事件"><a href="#常见鼠标事件" class="headerlink" title="常见鼠标事件"></a>常见鼠标事件</h3><table><thead><tr><th>鼠标事件</th><th>触发事件</th></tr></thead><tbody><tr><td><code>onclick</code></td><td>鼠标点击左键触发</td></tr><tr><td><code>ondblclick</code></td><td>鼠标双击事件</td></tr><tr><td><code>onmouseover</code></td><td>鼠标经过触发</td></tr><tr><td><code>onmouseout</code></td><td>鼠标离开触发</td></tr><tr><td><code>onfocus</code></td><td>获取鼠标焦点触发</td></tr><tr><td><code>onblur</code></td><td>失去鼠标焦点触发</td></tr><tr><td><code>onmousemove</code></td><td>鼠标移动触发</td></tr><tr><td><code>onmouseup</code></td><td>鼠标弹起触发</td></tr><tr><td><code>onmousedown</code></td><td>鼠标按下触发</td></tr></tbody></table><h3 id="改变元素内容-不适用于表单"><a href="#改变元素内容-不适用于表单" class="headerlink" title="改变元素内容(不适用于表单)"></a>改变元素内容(不适用于表单)</h3><ol><li><p><code>innerText</code>: 不识别 html 标签,非标准,会去除空格和换行</p></li><li><p><code>innerHTML</code>: 识别 html 标签,W3C 标准,不会去除空格和换行</p></li><li><p><code>insertAdjacentHTML(位置,目标元素)</code>: 可以实现在目标元素中特定位置插入<code>字符串</code><br> 位置</p><ul><li><code>beforebegin</code>：元素自身的前面。</li><li><code>afterbegin</code>：插入元素内部的第一个子节点之前。</li><li><code>beforeend</code>：插入元素内部的最后一个子节点之后。</li><li><code>afterend</code>：元素自身的后面。</li></ul></li></ol><p>注: 两个属性可读写,可以获取元素内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;p&#x27;</span>); </span><br><span class="line"><span class="built_in">console</span>.log(p.innerText); </span><br><span class="line"><span class="built_in">console</span>.log(p.innerHTML);</span><br></pre></td></tr></table></figure><p>常用元素属性修改: <code>src</code>、<code>href</code>、<code>title</code>、<code>alt</code>、<code>id</code></p><h3 id="改变表单元素内容"><a href="#改变表单元素内容" class="headerlink" title="改变表单元素内容"></a>改变表单元素内容</h3><p><code>input.value</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> input = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;input&#x27;</span>); </span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    input.value = <span class="string">&#x27;haha&#x27;</span>; </span><br><span class="line">    <span class="built_in">this</span>.disabled = <span class="literal">true</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意: </p><ol><li><p>表单元素更改只能用 value</p></li><li><p>disabled 实现表单禁用</p></li><li><p>函数中的 this 指向函数的调用者</p></li><li><p>这些都是属性不是样式,不用写 <code>style</code> <code>img</code> <code>src</code> 等等</p></li></ol><p>可以通过修改表单type类型实现密码明文密文的转换</p><h3 id="改变元素对象样式"><a href="#改变元素对象样式" class="headerlink" title="改变元素对象样式"></a>改变元素对象样式</h3><ol><li><p><code>element.style.样式 = &#39;属性值&#39;;</code>:  一般用于样式较少或功能简单的情况下使用</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>); </span><br><span class="line">div.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="comment">// div.style 里面的样式用驼峰命名法</span></span><br><span class="line">    <span class="built_in">this</span>.style.backgroundColor = <span class="string">&#x27;purple&#x27;</span>; </span><br><span class="line">    <span class="built_in">this</span>.style.width = <span class="string">&#x27;400px&#x27;</span>; <span class="comment">// 修改后的样式为行内样式 权重比较高</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p> 注意: </p><ol><li><p>利用 js style 修改的样式都得用驼峰命名法 如 <code>backgoroundColor</code>、<code>fontSize</code></p></li><li><p>js <code>修改后的样式都以行内样式生成,权重高</code></p></li><li><p>样式的属性都是在 style 中,所以需要些 <code>xx.style.属性</code></p></li></ol></li><li><p>通过<code>element.className</code>增加类名从而修改样式(适用于样式较多,功能复杂的情况使用)</p><p> 即在 css 先定义好新的样式在新的类名中,再在 js 中对目标元素设置事件利用 <code>className</code> 更换新的类</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.change</span> &#123; </span></span><br><span class="line">    background-color: purple; </span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>; </span></span><br><span class="line">    font-size: 25px; </span><br><span class="line">    margin-top: 100px; </span><br><span class="line">    &#125; </span><br><span class="line"> <span class="tag">&lt;/<span class="name">style</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span>文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span>    </span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> test = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>); </span></span><br><span class="line"><span class="javascript">    test.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span></span><br><span class="line"><span class="javascript">    <span class="comment">//将当前类名改为change 从而改变样式 </span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.className = <span class="string">&#x27;change&#x27;</span>; </span></span><br><span class="line">    &#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 注意: <code>className 会完全覆盖先前的类名</code></p><p> <code>若想同时保留新旧类名 则可以在添加时新旧一起写</code></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.className = <span class="string">&#x27;first change&#x27;</span>;   </span><br></pre></td></tr></table></figure></li></ol><h3 id="获得失去焦点"><a href="#获得失去焦点" class="headerlink" title="获得失去焦点"></a>获得失去焦点</h3><ul><li><p>示例    </p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span> </span><br></pre></td></tr></table></figure>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> input = <span class="built_in">document</span>.querySelector(<span class="string">&quot;input&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>获得焦点(即点击输入框时)</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">input.onfocus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;获得焦点&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>失去焦点(取消点击输入框时)</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">input.onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;失去焦点&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="排他思想-算法"><a href="#排他思想-算法" class="headerlink" title="排他思想 (算法)"></a>排他思想 (算法)</h3><blockquote><p>如果有同一组元素,<code>想要某一个元素实现某种样式</code>,那么就需要排他思想</p></blockquote><p><em>步骤 :</em></p><ol><li><p>先排除其他人的样式</p></li><li><p>再设置自己的样式</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>;i &lt; btns.length;i++)&#123; </span><br><span class="line">    btns[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        <span class="comment">// 想把所有按钮颜色去掉 </span></span><br><span class="line">        <span class="comment">// 再修改当前颜色 </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; btns.length;i ++)&#123; </span><br><span class="line">            btns[i].style.backgroundColor = <span class="string">&#x27;&#x27;</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="built_in">this</span>.style.backgroundColor = <span class="string">&#x27;pink&#x27;</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取自定义属性"><a href="#获取自定义属性" class="headerlink" title="获取自定义属性"></a>获取自定义属性</h3><ul><li><p>获取属性一般有两种</p><ol><li><p><code>element.属性</code></p></li><li><p><code>element.getAttribute(&#39;属性&#39;)</code></p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>); </span><br><span class="line"><span class="built_in">console</span>.log(div.getAttribute(<span class="string">&#x27;index&#x27;</span>));</span><br></pre></td></tr></table></figure><p>区别</p><ol><li><p>第一种用于获取<code>元素本身自带的属性</code></p></li><li><p>第二种一般用于获取通过 <code>setAttribute</code> 自定义的属性(即程序员自己定义的属性),通过 <code>setAttribute</code> 设置的属性只能用第二种获取</p></li></ol></li><li><p>设置属性值的方法</p><ol><li><p><code>element.属性 = &#39;属性值&#39;;</code></p></li><li><p><code>element.setAttribute(&#39;属性&#39;,&#39;值&#39;)</code>;</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>); </span><br><span class="line">div.setAttribute(<span class="string">&#x27;index&#x27;</span>,<span class="string">&#x27;2&#x27;</span>);</span><br></pre></td></tr></table></figure><p>自定义属性也可以通过第一种设置,但只能用<code>xxx.属性名</code>获取</p></li><li><p>移除属性的方法</p><p><code>element.removeAttribute(&#39;属性&#39;);</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div.removeAttribute(<span class="string">&#x27;index&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>h5新增自定义属性方法</p><p> <code>data-属性名</code></p><p><code>data-开头的属性必定是自定义属性</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-time</span>=<span class="string">&quot;2&quot;</span> <span class="attr">data-list-name</span>=<span class="string">&#x27;andy&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>获取data自定义属性方法有两种: </p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-time</span>=<span class="string">&quot;2&quot;</span> <span class="attr">data-list-name</span>=<span class="string">&#x27;andy&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p>element.getAttribute(<code>&#39;data-属性名&#39;</code>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(div.getAttribute(<span class="string">&#x27;data-list-name&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(div.getAttribute(<span class="string">&#x27;data-time&#x27;</span>));</span><br><span class="line">div.setAttribute(<span class="string">&#x27;data-index&#x27;</span>,<span class="number">2</span>); <span class="comment">//设置属性值</span></span><br></pre></td></tr></table></figure></li><li><p><code>element.dataset.data后面的属性名</code> 或 <code>element.dataset[&#39;data后面的属性名&#39;]</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(div.dataset);</span><br><span class="line"><span class="built_in">console</span>.log(div.dataset.index);</span><br><span class="line"><span class="built_in">console</span>.log(div.dataset[<span class="string">&#x27;index&#x27;</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(div.dataset[<span class="string">&#x27;listName&#x27;</span>]);</span><br></pre></td></tr></table></figure></li></ol><p>特别注意: 对于 <code>data-</code> 后面还有横杠的命名的属性值在利用 dataset 获取时应该用<code>驼峰命名法</code>, getAttribute 则不用</p></li></ul><h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h3><blockquote><p>页面中所有内容都是节点,用 node 表示</p></blockquote><h4 id="节点的三个属性"><a href="#节点的三个属性" class="headerlink" title="节点的三个属性"></a>节点的三个属性</h4><ol><li><p>节点类型(<code>nodeType</code>)</p></li><li><p>节点名称(<code>nodeName</code>)</p></li><li><p>节点值(<code>nodeValue</code>)</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">元素节点nodeType &#x3D; 1</span><br><span class="line"></span><br><span class="line">属性节点nodeType &#x3D; 2</span><br><span class="line"></span><br><span class="line">文本节点nodeType &#x3D; 3 (文本节点包含文字、空格、换行等)</span><br></pre></td></tr></table></figure><p>操作的主要是元素节点</p><blockquote><p>节点可以划分为不同的层级关系,常见的是父子兄层级节点</p></blockquote><h4 id="父子节点操作"><a href="#父子节点操作" class="headerlink" title="父子节点操作"></a>父子节点操作</h4><ul><li><p>获取父节点</p><p><code>node.parentNode(获得最近的父节点,如果找不到则返回 NULL )</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> erweima = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.erweima&#x27;</span>); </span><br><span class="line"><span class="built_in">console</span>.log(erweima.parentNode);</span><br></pre></td></tr></table></figure></li><li><p>获取子节点</p><p><code>node.childNodes</code>: 返回的是元素节点以及文本节点</p><p><code>node.children</code>:只返回元素节点 获得的是伪数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(ul.children);</span><br></pre></td></tr></table></figure></li><li><p>获取第一个和最后一个子节点</p><p><code>node.firstChild</code></p><p><code>node.lastChild</code></p><p>以上都返回包括文本节点在内的所有节点 <code>不常用</code></p><p><code>node.firstElementChild</code></p><p><code>node.lastElementChild</code></p><p>只返回元素节点,但是有兼容性问题</p><p>实际写法</p><p><code>node.children[0] 返回第一个</code></p><p><code>node.children[node.children.length-1] 返回最后一个</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(ol.children[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(ol.children[ol.children.length<span class="number">-1</span>]);</span><br></pre></td></tr></table></figure></li><li><p>获取兄弟节点</p><p><code>node.nextSibling</code>: 下一个兄弟节点    </p><p><code>node.previousSibling</code>: 上一个兄弟节点</p><p>以上获取的都是包含<code>文本节点元素节点(#text)</code>的兄弟节点 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>); </span><br><span class="line"><span class="built_in">console</span>.log(div.nextSibling); </span><br><span class="line"><span class="built_in">console</span>.log(div.previousSibling);</span><br></pre></td></tr></table></figure><p><code>node.nextElementSibling</code>: 下一个兄弟元素节点</p><p><code>node.previousElementSibling</code>: 上一个兄弟元素节点</p><p>以上都只获取为元素节点的兄弟节点 有兼容性问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(div.nextElementSibling); </span><br><span class="line"><span class="built_in">console</span>.log(div.previousElementSibling);</span><br></pre></td></tr></table></figure><p>解决方案: 自己利用节点类型 nodeType 封装一个函数</p></li><li><p>创建节点</p><p><code>document.createElement(元素名称)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">&#x27;li&#x27;</span>);</span><br></pre></td></tr></table></figure><p>添加节点(两种方法)</p><ol><li><p><code>node.appendChild(child);</code>: node 为父节点 child 为新创建的节点 添加到父级最后面 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line">ul.appendChild(li);</span><br></pre></td></tr></table></figure></li><li><p><code>node.insertBefore(child,指定位置)</code>:  即将新创建的child节点添加到指定元素之前</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lili = <span class="built_in">document</span>.createElement(<span class="string">&#x27;li&#x27;</span>); </span><br><span class="line">ul.insertBefore(lili,ul.children[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure></li></ol></li><li><p>删除节点</p><p><code>node.removeChild()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ul.removeChild(ul.children[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure></li><li><p>克隆节点</p><p><code>node.cloneNode()</code></p><p>括号里参数如果为<code>空或者是false</code>,则是<code>浅拷贝</code> 则只复制 <code>node 本身</code>、<code>不复制里面的子节点</code><br>括号里参数如果为<code>true</code>,则是<code>深拷贝</code> 则复制 <code>node 本身、里面的子节点</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lili = ul.children[<span class="number">0</span>].cloneNode(); <span class="comment">// li </span></span><br><span class="line"><span class="keyword">var</span> lili = ul.children[<span class="number">0</span>].cloneNode(<span class="literal">true</span>); <span class="comment">// &lt;li&gt;1&lt;/li&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建文档碎片</p><p>  <code>document.createDocumentFragment()</code></p><p>  <a href="https://developer.mozilla.org/en-US/docs/DOM/DocumentFragment"><code>DocumentFragments</code></a> 是DOM节点。它们不是主DOM树的一部分。通常的用例是创建文档片段，将元素附加到文档片段，然后将文档片段附加到DOM树。在DOM树中，文档片段被其所有的子元素所代替。</p><p>  因为文档片段存在于<strong>内存中</strong>，并不在DOM树中，所以将子元素插入到文档片段时不会引起页面<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Reflow">回流</a>（对元素位置和几何上的计算）。因此，使用文档片段通常会带来更好的性能。</p></li><li><p>节点的文本内容</p><p>  <code>node.textContent</code></p><p>  textContent 属性设置或者返回指定节点的文本内容。</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;myList&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;item1&quot;</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;item2&quot;</span>&gt;</span>哈哈哈<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;item3&quot;</span>&gt;</span>Tea<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span>单击按钮获取列表元素的文本内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;myFunction()&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> lst=<span class="built_in">document</span>.getElementById(<span class="string">&quot;myList&quot;</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> x=<span class="built_in">document</span>.getElementById(<span class="string">&quot;demo&quot;</span>);  </span></span><br><span class="line">x.innerHTML=lst.textContent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">结果: Coffee哈哈哈Tea</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>附: 阻止链接跳转可以对 a 的 href 设置为<code>javascript:; 或 javacript:void(0)</code></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><p>获取父节点 <code>node.parentNode</code></p></li><li><p>获取子节点 <code>node.children</code></p></li><li><p>获取兄弟节点<code>node.nextElementSiibling</code>  <code>node.previousElementSibling(兼容性差)</code></p></li><li><p>创建节点 <code>document.createElement(节点类型)</code></p></li><li><p>添加节点 尾部添加 <code>node.appendChild() 某个元素之前添加</code> <code>node.insertBefore(child,指定元素)</code></p></li><li><p>删除节点 <code>node.removeChild() node为删除目标元素的父元素</code></p></li><li><p>复制节点 <code>node.cloneNode()</code></p></li></ul><h3 id="三种动态创建元素区别"><a href="#三种动态创建元素区别" class="headerlink" title="三种动态创建元素区别"></a>三种动态创建元素区别</h3><ol><li><p><code>document.write()</code></p></li><li><p><code>element.innerHTML()</code> 配合字符串使用</p></li><li><p><code>document.createElement()</code>配合 append、insertbefore 使用</p></li></ol><p>注意</p><ol><li><p><code>document.wirte</code> 如果是文档流执行完毕写入,<code>会导致页面全部重绘</code></p></li><li><p><code>innerHTML</code> 创建多个元素效率更高 前提是不要拼接字符串 而是通过先创建数组再将数组转换为字符串赋予对象的形式</p></li><li><p><code>createElement()</code>创建多个元素效率相对 innerHTML 的数组赋值方式较低,但是结构更清晰</p></li></ol><p>总结: <code>不同浏览器下,采取数组赋值的 innerHTML 效率比 creatElement 高</code></p><h2 id="事件高级"><a href="#事件高级" class="headerlink" title="事件高级"></a>事件高级</h2><h3 id="注册事件"><a href="#注册事件" class="headerlink" title="注册事件"></a>注册事件</h3><blockquote><p>传统方式和监听注册方式</p></blockquote><ol><li><p>传统方式(最简单的方式,即将函数赋值给目标对象的事件属性,属性名字都以<code>&quot;on&quot;开头</code>)</p><p><code>变量名.onclick = funciton()&#123;&#125;</code></p><p>特点: <code>唯一性</code>,即同个元素同个事件只能设置一个处理函数,如果重复注册则以最新一个(最后一个)为准</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;button&#x27;</span>); </span><br><span class="line">btns[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    alert(<span class="string">&#x27;HI&#x27;</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>监听注册方式(推荐 为 W3C标准 IE9 之前不支持)</p><p><code>变量名.addEventListener(&#39;事件触发方式&#39;,处理函数,事件流执行顺序参数(布尔值))</code></p><p>特点: 用一个元素同一个事件可以注册多个监听器,按注册顺序依次执行</p><p>注意: <code>事件触发方式</code>不能带 on ,且因为是字符串必须加引号;<code>处理函数</code>可以写函数名也可以写整个函数,当事件发生时，会调用该监听函数;<code>事件流执行顺序参数</code>可选参数,是一个布尔值,默认为 false。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">btns[<span class="number">1</span>].addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    alert(<span class="string">&#x27;22&#x27;</span>); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>attachEvent方式( IE9 之前支持 了解即可)</p><p> <code>变量名.attachEvent(事件类型(带on),时间处理函数)</code></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">btns[<span class="number">2</span>].attachEvent(<span class="string">&#x27;onclick&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">   alert(<span class="string">&#x27;11&#x27;</span>); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><p><code>在元素上写事件和 addEventListener() 的区别</code></p><ul><li><p>onclick 添加事件不能绑定多个事件,后面绑定的会覆盖前面的。而 addEventListener 能添加多个事件绑定,按顺序执行。</p></li><li><p>addEventListener 方式,不支持低版本的 IE。( attachEvent 支持 IE )。</p></li><li><p>普通方式绑定事件后,不可以取消。addEventListener 绑定后则可以用 removeEventListener 取消。</p></li><li><p>addEventListener 是 W3C DOM 规范中提供的注册事件监听器的方法。</p></li><li><p>对于传统事件注册记得加 on ,如 onclick , onkeydown 等</p></li></ul><h3 id="删除事件"><a href="#删除事件" class="headerlink" title="删除事件"></a>删除事件</h3><ol><li><p>对于传统方式注册的事件</p><p><code>变量名.事件类型 = null</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> divs = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;div&#x27;</span>); </span><br><span class="line">divs[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    alert(<span class="string">&#x27;11&#x27;</span>); </span><br><span class="line">    divs[<span class="number">0</span>].onclick = <span class="literal">null</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对于监听事件注册的事件</p><p><code>变量名.removeEventListener(删除的事件类型,删除的函数)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">divs[<span class="number">1</span>].addEventListener(<span class="string">&#x27;click&#x27;</span>,fn); </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    alert(<span class="string">&#x27;22&#x27;</span>); </span><br><span class="line">    divs[<span class="number">1</span>].removeEventListener(<span class="string">&#x27;click&#x27;</span>,fn); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对于attachEvent注册的事件(了解)</p><p><code>变量名.detachEvent(删除的事件类型,删除的函数)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">divs[<span class="number">2</span>].attachEvent(<span class="string">&#x27;onclick&#x27;</span>,fn1); </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    alert(<span class="string">&#x27;33&#x27;</span>); </span><br><span class="line">    divs[<span class="number">2</span>].detachEvent(<span class="string">&#x27;onclick&#x27;</span>,fn1); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>总结: </p><ul><li><p>注册事件</p><p><code>node.onclick</code></p><p><code>node.addEventListener(&#39;事件类型&#39;,处理程序,冒泡与否值)</code></p></li><li><p>删除事件</p><p><code>node.onclick = null;</code></p><p><code>node.removeEventListener (&#39;事件类型&#39;,处理程序)</code></p></li></ul><h3 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h3><blockquote><p>页面中获取接收事件的顺序</p></blockquote><blockquote><p>DOM 事件流: 事件发生时会在元素节点之间按照特定顺序传播</p></blockquote><p>DOM事件流有三个阶段: </p><ol><li><p>捕获阶段</p><p>事件发生时在页面中从 document 往下一级一级传播的过程</p></li><li><p>当前目标阶段</p><p>事件到达设置了该事件的元素时的阶段</p></li><li><p>冒泡阶段</p><p>事件接受后从事件触发节点逐级向上传播到 DOM 最顶层节点的过程</p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/202004291200905.png"></p><p>注意: </p><ul><li><p>JS 只能执行捕获或者冒泡其中一个阶段</p></li><li><p><code>onclick</code> 和 <code>attachEvent</code> 只能获得冒泡阶段</p></li><li><p><code>addEventListener</code> 第三个参数如果是 true ,则为捕获阶段(很少用)。如果是 false(默认),则为冒泡阶段</p></li><li><p>一些事件是没有冒泡的,如 onblur , onfocus , onmouseenter , onmouseleave</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//捕获阶段</span></span><br><span class="line"><span class="keyword">var</span> son = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.son&#x27;</span>); </span><br><span class="line">son.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">alert(<span class="string">&#x27;son&#x27;</span>); </span><br><span class="line">&#125;,<span class="literal">true</span>)</span><br><span class="line"><span class="keyword">var</span> father = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.father&#x27;</span>); </span><br><span class="line">father.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">alert(<span class="string">&#x27;father&#x27;</span>); </span><br><span class="line">&#125;,<span class="literal">true</span>)</span><br><span class="line"><span class="comment">// 因为是捕获阶段 所以先弹出 father 再弹出son</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//冒泡阶段</span></span><br><span class="line"><span class="keyword">var</span> son = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.son&#x27;</span>); </span><br><span class="line">son.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    alert(<span class="string">&#x27;son&#x27;</span>); </span><br><span class="line">&#125;,<span class="literal">false</span>)</span><br><span class="line"><span class="keyword">var</span> father = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.father&#x27;</span>); </span><br><span class="line">father.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    alert(<span class="string">&#x27;father&#x27;</span>); </span><br><span class="line">&#125;,<span class="literal">false</span>)</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    alert(<span class="string">&#x27;document&#x27;</span>); </span><br><span class="line"></span><br><span class="line">&#125;) </span><br><span class="line"><span class="comment">//因为是冒泡,所以如果点击father,则只弹father。点击son,则先弹出son,再弹出father</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><blockquote><p>事件的一系列相关数据的集合</p></blockquote><p><code>xxx.onclick = function(event)&#123;&#125;</code></p><p>其中event就是事件对象,写到事件的处理函数小括号里,可以任意命名(一般为 e )</p><p>事件对象只有有了事件才会存在,不需要传递参数,系统自动创建</p><p>存在兼容性问题 ie678 无法识别,只能通过 <code>window.event</code> 获取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementByTagName(<span class="string">&#x27;div&#x27;</span>); </span><br><span class="line">div.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(e); </span><br><span class="line">    <span class="comment">// 兼容写法 </span></span><br><span class="line">    e = e || <span class="built_in">window</span>.event; <span class="comment">//说明： 如果 e 为真的话 e = e ,否则为假的话 e = window.event </span></span><br><span class="line">    <span class="built_in">console</span>.log(e); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当函数参数有事件对象参数e以及自定义参数时,自定义参数应该在事件对象之前</p><h3 id="常见事件对象的属性和方法"><a href="#常见事件对象的属性和方法" class="headerlink" title="常见事件对象的属性和方法"></a>常见事件对象的属性和方法</h3><p><code>e.target</code>: 返回触发事件的对象(ie678不兼容)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>); </span><br><span class="line">div.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(e.target); </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>); </span><br><span class="line">&#125;)   </span><br><span class="line"><span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>); </span><br><span class="line">ul.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123; </span><br><span class="line">    <span class="comment">// 点击li触发 返回的是li </span></span><br><span class="line">    <span class="built_in">console</span>.log(e.target);<span class="comment">//绑定事件的是ul 返回的是ul </span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>注意: </p><ol><li><p>this 和 target 的区别为<code>前者返回的是绑定事件的对象</code>,<code>后者为触发事件的对象</code>,即<code>点击谁之后触发了事件就返回哪个</code>。</p></li><li><p>对于 ie678 应该用 <code>e.srcElement</code>(了解)</p></li><li><p>与 this 相似的属性是 <code>e.currentTarget</code>(了解)</p></li></ol><blockquote><p>返回事件类型</p></blockquote><p><code>e.type</code>: 返回 click mouseover 等,没有on</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>); </span><br><span class="line">div.addEventListener(<span class="string">&#x27;click&#x27;</span>,fn); </span><br><span class="line">div.addEventListener(<span class="string">&#x27;mouseover&#x27;</span>,fn); </span><br><span class="line">div.addEventListener(<span class="string">&#x27;mouseout&#x27;</span>,fn); </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">e</span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(e.type)</span><br><span class="line">&#125; <span class="comment">// 返回click 或 mouseover mouseout</span></span><br></pre></td></tr></table></figure><blockquote><p>阻止默认行为(比如让链接不跳转,让提交按钮不提交)</p></blockquote><ol><li><p>对于监听注册事件</p><p><code>e.preventDefault()</code>//只适用于高版本浏览器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;a&#x27;</span>); </span><br><span class="line">a.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123; </span><br><span class="line">    e.preventDefault(); <span class="comment">//dom标准写法 </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>对于传统注册方式</p><p><code>e.preventDefault()</code></p><p><code>e.returnValue()</code>适用于 ie678</p><p>return false 没有兼容性问题 但是后面的代码无法执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">a.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//普通浏览器 e.preventDefault(); 方法</span></span><br><span class="line">  e.preventDefault();</span><br><span class="line">  <span class="comment">//低版本浏览器 ie678 returnValue 属性</span></span><br><span class="line">  e.returnValue;</span><br><span class="line">  <span class="comment">//return false 没有兼容性问题 但是后面的代码无法执行</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li></ol><blockquote><p>阻止冒泡</p></blockquote><ol><li><p><code>e.stopPropagation(); // ie678不兼容</code></p><p>阻止当前对象执行事件后向上冒泡</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> son = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.son&#x27;</span>); </span><br><span class="line">son.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123; </span><br><span class="line">    alert(<span class="string">&#x27;son&#x27;</span>); </span><br><span class="line">    e.stopPropagation(); </span><br><span class="line">&#125;,<span class="literal">false</span>)</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p><code>e.cancelBubble = true; //ie678兼容写法(了解)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> son = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.son&#x27;</span>); </span><br><span class="line">son.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123; </span><br><span class="line">    alert(<span class="string">&#x27;son&#x27;</span>); </span><br><span class="line">    e.cancelBubble = <span class="literal">true</span>; <span class="comment">//ie678兼容写法 </span></span><br><span class="line">&#125;,<span class="literal">false</span>)</span><br></pre></td></tr></table></figure></li></ol><p>总结</p><ul><li><p><code>e.target</code>: 返回触发了事件的对象</p></li><li><p><code>e.type</code>: 返回事件类型</p></li><li><p><code>e.preventDefault()</code>: 阻止默认行为</p></li><li><p><code>e.stopPropagation()</code>: 阻止当前冒泡 </p></li></ul><h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span> </span><br><span class="line"><span class="javascript">    <span class="comment">// 给父节点设置事件 </span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>); </span></span><br><span class="line"><span class="javascript">    ul.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123; </span></span><br><span class="line"><span class="javascript">        e.target.style.backgroundColor = <span class="string">&#x27;red&#x27;</span>;      </span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&#x27;弹出了一条信息&#x27;</span>); <span class="comment">//因为事件冒泡所以点击li后上升到ul从而触发事件  </span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>事件调用顺序</p><ul><li>通过设置对象属性或 HTML 属性注册的处理程序一直优先调用</li><li>使用 <code>addEventListener()</code> 注册的处理程序按照它们的注册顺序调用</li><li>使用 <code>attachEvent()</code> 注册的处理程序可能按照任何顺序调用,所以代码不应该依赖于调用顺序</li></ul><h3 id="常用鼠标事件"><a href="#常用鼠标事件" class="headerlink" title="常用鼠标事件"></a>常用鼠标事件</h3><ul><li><p>禁止右键菜单</p><p><code>利用 contextmenu 事件类型中的 e.preventDefault</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;contextmenu&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123; </span><br><span class="line">    e.preventDefault(); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>禁止选中文字</p><p><code>利用 selectstart 事件类型中的 e.preventDefault</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;selectstart&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123; </span><br><span class="line">    e.preventDefault(); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>鼠标事件对象</p><p><code>e.clientX(Y)</code>: 鼠标相对于浏览器页面的xy坐标(页面滚动也不影响)</p><p><code>e.pageX(Y)</code>: 鼠标相对于整个页面文档的xy坐标</p><p><code>e.screenX(Y)</code>: 鼠标相对于电脑屏幕的xy坐标</p><p>注意: <code>通过此事件对对象位置进行改变时记得加px</code>！！！</p></li></ul><h3 id="常用键盘事件"><a href="#常用键盘事件" class="headerlink" title="常用键盘事件"></a>常用键盘事件</h3><ul><li><p><code>keyup</code>:按键弹起时触发</p></li><li><p><code>keydown</code>: 按键按下时触发</p></li><li><p><code>keypress</code>: 按键上下弹起的分界点时触发</p></li></ul><p>注意</p><ol><li><p>对于传统事件注册记得加 on</p></li><li><p><code>keypress</code> 无法识别 <code>ctrl</code>、<code>shift</code> 等功能键</p></li><li><p>三个时间执行顺序 <code>keydown -&gt; keypress -&gt; keyup</code></p></li></ol><blockquote><p>键盘事件对象</p></blockquote><p><code>e.keyCode</code>: 返回所按的键的ASCII值 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;keyup&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;keyup&#x27;</span>+e.keyCode); </span><br><span class="line">    <span class="keyword">if</span>(e.keyCode == <span class="number">65</span>)&#123; </span><br><span class="line">        alert(<span class="string">&#x27;您按下了a键&#x27;</span>); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        alert(<span class="string">&#x27;您没有按下a键&#x27;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>注意: </p><ol><li><p><code>keyup</code> 和 <code>keydown</code> 的 <code>keyCode</code> 不区分大小写 得到的都是大写的值</p></li><li><p><code>keypress</code> 的 <code>keyCode</code> 区分大小写</p></li><li><p><code>keydown</code> 和 <code>keypress</code> 在文本框里的特点: 两个事件触发时,文字还没落入文本框中</p></li></ol><blockquote><p>滚动事件</p></blockquote><p><code>element.onscroll</code>: 元素滚动时发生</p><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><blockquote><p>Browser Object model 浏览器对象模型,提供了独立于内容而与浏览器窗口进行交互的对象,核心为 window</p></blockquote><p>特点: BOM 由一系列相关的对象组成,并且每个对象提供了很多方法与属性。BOM 缺乏标准,js 语法的标准化组织是 ECMA,DOM 的标准化组织是 W3C,BOM 最初始 Netscape 浏览器标准的一部分</p><blockquote><p>DOM</p></blockquote><ul><li>文档对象</li><li>DOM就是把[<code>文档</code>]当做一个[<code>对象</code>]来看待</li><li>DOM主要学习的是操作页面元素</li><li>DOM是W3C标准规范</li></ul><blockquote><p>BOM</p></blockquote><ul><li>浏览器对象模型</li><li>把[<code>浏览器</code>]当作一个[<code>对象</code>]来看待</li><li>BOM的顶级对象是window</li><li>BOM学习是浏览器窗口交互的一些对象</li><li>BOM是浏览器厂商在各自浏览器窗口交互的一些对象</li><li>BOM是浏览器厂商在各自浏览器上定义的,兼容性较差</li></ul><div class="note info"><p>BOM的构成</p></div><p>Window 是浏览器的顶级对象,被 window 属性引用,代表是一个 web 浏览器窗口。它具有双重角色</p><ol><li><p>它是 JS 访问浏览器窗口的一个接口</p></li><li><p>它是全局对象,定义在全局作用域中的变量、函数都会变成 window 对象的属性和方法</p></li><li><p>document 是 window 最重要的属性之一,它是 DOM 的顶级对象</p></li></ol><p>调用的时候可以省略 window</p><p>注意: window 有一个特殊属性 window.name 命名变量时不要用 name</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200429204106.png"></p><h3 id="Window常见事件"><a href="#Window常见事件" class="headerlink" title="Window常见事件"></a>Window常见事件</h3><ul><li><p>页面加载事件</p><p><code>window.onload = function()&#123;&#125;</code></p><p><code>window.addEventListener(&#39;load&#39;,function()&#123;&#125;)</code></p><p>当文档内容<code>完全加载完成会触发该事件(包括图像、脚本文件、CSS文件等)</code>,使用这个事件就可将script放在任意位置不影响执行</p><p><code>document.addEventListener(&#39;DOMContentLoaded&#39;,function()&#123;&#125;)</code></p><p>当文档内容<code>不完全加载完成会触发该事件(不包括图像、flash、CSS文件等)</code>,速度较上两者<code>较快</code></p></li><li><p>调整窗口大小事件</p><p><code>window.onresize = function()&#123;&#125;</code></p><p><code>window.addEventListener(&#39;resize&#39;,function()&#123;&#125;);</code></p><p>当窗口大小发生变化时触发事件,常用于响应式布局</p></li><li><p>屏幕当前宽度</p><ol><li><p><code>window.innerWidth</code></p></li><li><p><code>window.innerHeight</code></p></li></ol></li><li><p>实现屏幕滚动</p><p><code>window.scroll(x,y)</code>: x,y为横向、纵向滚动的距离(<code>不加单位</code>)</p></li><li><p>禁止双击选中文字</p><p><code>window.getSelection ? window.getSelection().removeAllRanges() : document.selection.empty();</code></p></li><li><p>定时器</p><p><code>window.setTimeout(调用函数,延迟时间);</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    alert(<span class="string">&#x27;111&#x27;</span>); </span><br><span class="line">&#125;,<span class="number">2000</span>); </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;爆炸了&#x27;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">setTimeout</span>(callback,<span class="number">3000</span>); </span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="string">&#x27;callback()&#x27;</span>,<span class="number">3000</span>); </span><br><span class="line"><span class="keyword">var</span> time1 = <span class="built_in">setTimeout</span>(callback,<span class="number">1000</span>); </span><br><span class="line"><span class="keyword">var</span> time2 = <span class="built_in">setTimeout</span>(callback,<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>注意: </p><ol><li><p>延迟时间单位为毫秒 可以不写 默认为 0</p></li><li><p>这个调用函数可以直接写函数 也可以写 函数名  也可以 ‘函数名()’</p></li><li><p>window 可以省略</p></li><li><p>页面中可能有多个定时器 一般要起标识符</p></li><li><p>因为 setTimeout 是倒计时完再回调函数,所以也叫作回调函数</p></li></ol><p><code>window.setInterval(调用函数,延迟时间);</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;11&#x27;</span>); </span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>注意: 其他都和 setTimeout 相同,但是 setTimeout 只调用函数一次,而 setInterval 是每隔设定间隔时间就调用一次,常用于倒计时</p></li><li><p>清除倒计时</p><p><code>window.clearTimeout(定时器的名字)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn  = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;button&#x27;</span>); </span><br><span class="line"><span class="keyword">var</span> timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;爆炸&#x27;</span>); </span><br><span class="line">&#125;,<span class="number">5000</span>); </span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>window.clearInterval(定时器名字)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timer = <span class="literal">null</span>; </span><br><span class="line"><span class="keyword">var</span> begin = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.begin&#x27;</span>); </span><br><span class="line"><span class="keyword">var</span> stop = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.stop&#x27;</span>);  </span><br><span class="line">begin.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;hello?&#x27;</span>); </span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">stop.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="built_in">clearInterval</span>(timer); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>注意:函数内定时器赋予名字时最好现在外面建立全局变量,以便清除</p></li></ul><h3 id="this指向问题"><a href="#this指向问题" class="headerlink" title="this指向问题"></a>this指向问题</h3><ol><li><p>全局作用域或者普通函数中this指向全局对象 window(setTimeout、setInterval也是)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>);  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>); </span><br><span class="line">&#125; </span><br><span class="line">fn(); </span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>); </span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure></li><li><p>方法调用中指向调用方法者</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123; </span><br><span class="line">    sayHi: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>);  <span class="comment">//指向o 因为这个函数是o的  </span></span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">o.sayHi(); </span><br><span class="line">btn.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">//指向btn </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>构造函数this指向构造函数的实例(谁创建指向谁)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fun</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);  <span class="comment">//指向fun()</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> fun = <span class="keyword">new</span> Fun();</span><br></pre></td></tr></table></figure></li></ol><h3 id="JS的执行队列-非常重要"><a href="#JS的执行队列-非常重要" class="headerlink" title="JS的执行队列(非常重要)"></a>JS的执行队列(非常重要)</h3><blockquote><p>JavaScript的一大特点即<code>单线程</code>,即<code>同一时间只能做一件事</code></p></blockquote><p>JS有同步和异步</p><ul><li><p>同步: 即按顺序执行任务,前一个任务结束再执行另一个</p></li><li><p>异步: 执行一件任务的同时可以执行其他任务</p></li></ul><p>JS执行机制 - 分为<code>同步任务</code>和<code>异步任务</code></p><ul><li><p>同步任务: 都放到主线程上执行,形成一个<code>执行栈</code></p></li><li><p>异步任务: JS的异步是通过<code>回调函数</code>实现的</p></li></ul><p>异步任务三种类型: </p><ol><li><p>普通事件 如: click , resize , readystatechange 等</p></li><li><p>资源加载 如 load , error 等</p></li><li><p>定时器中的回调函数</p></li></ol><p>异步任务的相关回调函数添加到任务队列中(消息队列)</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200429210903.png"></p><p><code>执行过程</code>: </p><ol><li><p>先执行执行栈中的同步任务</p></li><li><p>遇到异步任务触发则将其回调函数放到任务队列中</p></li><li><p><code>等所有同步任务执行完毕后,再回去按序执行任务队列中的回调函数</code></p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200429211003.png"></p><p>异步进程处理: <code>用于检测异步任务是否被触发(比如点击,倒计时时间到等),一旦触发,就将其放入任务队列中。执行栈的同步任务全部执行完后,就会到任务队列查看是否有未执行的异步任务,一旦有则将其执行,全部执行完后会不断查看不断执行,形成 事件循环。</code></p><h3 id="Location对象"><a href="#Location对象" class="headerlink" title="Location对象"></a>Location对象</h3><blockquote><p>window 的 location 属性引用了 Location 对象,用于获取 URL 相关属性</p></blockquote><p><code>URL::统一资源定位符</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">URL的一般语法格式为: </span><br><span class="line"></span><br><span class="line">protocol:&#x2F;&#x2F;host[:port]&#x2F;path&#x2F;[?query]#fragment</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;zykjofficial.gitee.io&#x2F;index.html?name&#x3D;zykj&amp;age&#x3D;18#link</span><br></pre></td></tr></table></figure><ul><li><p><code>protocol</code>: 协议, http , ftp , maito 等</p></li><li><p><code>host</code>: 主机(域名) <code>[www.xxxx.com](http://www.xxxx.com)</code></p></li><li><p><code>port</code>: 端口号 可选,省略时使用方案的默认端口 如http的默认端口为80 </p></li><li><p><code>path</code>: 路径 由零个或多个<code>/</code>符号隔开的字符串,一般用来表示主机上的一个目录或文件</p></li><li><p><code>query</code>: 参数 以键值对的形式通过<code>&amp;</code>符号分隔开</p></li><li><p><code>fragment</code>: 片段,<code>#</code>后面内容 一般用于链接锚点</p></li></ul><p><code>location 对象的属性</code></p><table><thead><tr><th>location对象属性</th><th>返回值</th></tr></thead><tbody><tr><td><code>location.href</code></td><td>获取或者设置整个URL</td></tr><tr><td><code>location.host</code></td><td>返回主机(域名) zykjofficial.gitee.io</td></tr><tr><td><code>location.port</code></td><td>返回端口号 如果写返回 空字符串</td></tr><tr><td><code>location.pathname</code></td><td>返回路径</td></tr><tr><td><code>location.search</code></td><td>返回参数</td></tr><tr><td><code>location.hash</code></td><td>返回片段 #后面内容 常见于链接 锚点</td></tr></tbody></table><p><code>location另外几个属性</code></p><ul><li><p><code>location.assign</code>: 与href一样,实现页面跳转</p></li><li><p><code>location.replace</code>: 实现页面跳转,但是没有后退功能</p></li><li><p><code>location.reload</code>: 刷新页面 等于 f5  </p></li><li><p><code>location.reload(true)</code>: 强制刷新</p></li><li><p><code>location = &quot;#xx&quot;</code>: 可以使页面滚动到 id 为 xx 的元素的位置</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;button&#x27;</span>); </span><br><span class="line">btn.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="comment">//assign 与href一样,实现跳转 </span></span><br><span class="line">    location.assign(<span class="string">&#x27;http://www.baidu.com&#x27;</span>);</span><br><span class="line">    <span class="comment">//实现跳转 但是不记录历史 没有退回功能</span></span><br><span class="line">    <span class="comment">// location.replace(&#x27;http://www.baidu.com&#x27;); </span></span><br><span class="line">    <span class="comment">//重新加载刷新  等于f5 </span></span><br><span class="line">    location.reload(<span class="string">&#x27;http://www.baidu.com&#x27;</span>); </span><br><span class="line">    location.reload(<span class="literal">true</span>); <span class="comment">//强制刷新 Ctrl + F5</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;one&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;last&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span> </span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#last&quot;</span>); </span></span><br><span class="line"><span class="javascript">        div.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span></span><br><span class="line"><span class="javascript">            location = <span class="string">&quot;#one&quot;</span>; </span></span><br><span class="line">        &#125; </span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Navigator对象"><a href="#Navigator对象" class="headerlink" title="Navigator对象"></a>Navigator对象</h3><blockquote><p>window 的 navigator 属性引用的是 Navigator 对象。最常用的属性为 userAgent ,该属性可以返回有客户机发送服务机的 user-agent 头部的值</p></blockquote><p>下列代码可以判断用户哪个终端打开页面,实现跳转</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断用户哪个终端打开页面,实现跳转 </span></span><br><span class="line"><span class="keyword">if</span>((navigator.userAgent.match(<span class="regexp">/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry| IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i</span>)))&#123; </span><br><span class="line"><span class="built_in">window</span>.location.href = <span class="string">&quot;&quot;</span>; <span class="comment">//手机端打开页面 </span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="built_in">window</span>.location.href = <span class="string">&quot;&quot;</span>; </span><br><span class="line">    <span class="comment">//电脑端打开页面 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="History对象"><a href="#History对象" class="headerlink" title="History对象"></a>History对象</h3><blockquote><p>window 对象给我们提供了一个 history 属性,该属性引用了 History 对象。可以与浏览器历史记录进行交互。该对象包含用户(在浏览器窗口中)访问过的 URL</p></blockquote><table><thead><tr><th>history对象方法</th><th>作用</th></tr></thead><tbody><tr><td><code>back()</code></td><td>可以后退功能</td></tr><tr><td><code>forward()</code></td><td>前进功能</td></tr><tr><td><code>go(参数)</code></td><td>前进后退功能 参数如果是1 前进1个页面 如果是-1 后退1个页面</td></tr><tr><td><code>pushState(state, title, url)</code></td><td>向浏览器历史添加了一个状态。pushState()方法带有三个参数：一个状态对象、一个标题(现在被忽略了)以及一个可选的URL地址</td></tr><tr><td><code>history.replaceState(state, title, url)</code></td><td>修改当前历史记录条目而并非创建新的条目</td></tr></tbody></table><p><code>history.forward()</code>: 实现前进功能</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">btn.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    history.forward();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>history.back</code>: 实现后退功能</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">btn.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    history.back(); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>history.go(参数)</code>: 实现前进或后退功能</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">btn.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    history.go(<span class="number">1</span>); <span class="comment">// 前进一页     </span></span><br><span class="line">    history.go(<span class="number">-1</span>); <span class="comment">// 后退一页 </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>history.pushState()</code>：向浏览器历史添加了一个状态。pushState()方法带有三个参数：一个状态对象、一个标题(现在被忽略了)以及一个可选的URL地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">history.pushState(state, title, url);</span><br><span class="line"></span><br><span class="line">state object —— 状态对象是一个由pushState()方法创建的、与历史纪录相关的javascript对象。当用户定向到一个新的状态时，会触发</span><br><span class="line"></span><br><span class="line">popstate事件。事件的state属性包含了历史纪录的state对象。如果不需要这个对象，此处可以填null</span><br><span class="line"></span><br><span class="line">title —— 新页面的标题，但是所有浏览器目前都忽略这个值，因此这里可以填null</span><br><span class="line"></span><br><span class="line">URL —— 这个参数提供了新历史纪录的地址。新URL必须和当前URL在同一个域，否则，pushState()将丢出异常。这个参数可选，如果它没有被特别标注，会被设置为文档的当前URL</span><br></pre></td></tr></table></figure><p>假定当前网址是example.com/1.html，使用pushState方法在浏览记录(history对象)中添加一个新记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var stateObj &#x3D; &#123; foo: &#39;bar&#39; &#125;;</span><br><span class="line">history.pushState(stateObj, &#39;page 2&#39;, &#39;2.html&#39;);</span><br></pre></td></tr></table></figure><p>添加上面这个新记录后，浏览器地址栏立刻显示example.com/2.html，但并不会跳转到2.html，甚至也不会检查2.html是否存在，它只是成为浏览历史中的最新记录。假如这时访问了google.com，然后点击了倒退按钮，页面的url将显示2.html，但是内容还是原来的1.html。再点击一次倒退按钮，url将显示1.html，内容不变</p><ul><li><p>总之，pushState方法不会触发页面刷新，<code>只是导致history对象发生变化，地址栏的显示地址发生变化</code></p></li><li><p>如果pushState的url参数，设置了一个新的锚点值(即hash)，并不会触发hashchange事件，即使新的URL和旧的只在hash上有区别</p></li><li><p>如果设置了一个跨域网址，则会报错。这样设计的目的是，防止恶意代码让用户以为他们是在另一个网站上</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line">history.pushState(<span class="literal">null</span>, <span class="literal">null</span>, <span class="string">&#x27;https://twitter.com/hello&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul><p><code>history.replaceState</code>:方法的参数与pushState方法一模一样，不同之处在于replaceState()方法会修改当前历史记录条目而并非创建新的条目</p><p>假定当前网页是example.com/example.html</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">history.pushState(&#123;<span class="attr">page</span>: <span class="number">1</span>&#125;, <span class="string">&#x27;title 1&#x27;</span>, <span class="string">&#x27;?page=1&#x27;</span>);</span><br><span class="line">history.pushState(&#123;<span class="attr">page</span>: <span class="number">2</span>&#125;, <span class="string">&#x27;title 2&#x27;</span>, <span class="string">&#x27;?page=2&#x27;</span>);</span><br><span class="line">history.replaceState(&#123;<span class="attr">page</span>: <span class="number">3</span>&#125;, <span class="string">&#x27;title 3&#x27;</span>, <span class="string">&#x27;?page=3&#x27;</span>);</span><br><span class="line"></span><br><span class="line">history.back()</span><br><span class="line"><span class="comment">// url显示为http://example.com/example.html?page=1</span></span><br><span class="line"></span><br><span class="line">history.back()</span><br><span class="line"><span class="comment">// url显示为http://example.com/example.html</span></span><br><span class="line"></span><br><span class="line">history.go(<span class="number">2</span>)</span><br><span class="line"><span class="comment">// url显示为http://example.com/example.html?page=3</span></span><br></pre></td></tr></table></figure><p>注: history 对象一般在实际开发中比较少用,但在一些办公OA系统会见到</p><ul><li><p>无干扰的 JavaScript</p><blockquote><p>这种模式强调 JavaScript 自身不应该惹人注意,不应该产生打扰。不应该去干扰用户浏览一个 web 页面,不应该干扰内容作者创建 HTML 标记,或者干扰 Web 设计者创建 HTML 模板或 CSS 样式表</p></blockquote></li><li><p>方法</p><ol><li>分离: 保持 JavaScript 代码与HTML标记的分离。尽可能让 JavaScript 代码的外部文件成为模块</li><li>降级: 必须降低优雅性。JavaScript 模块应该首先确保它所需要的客户端功能在代码所运行的浏览器中是可用的</li><li>不能降低一个 HTML 页面的可访问性.JS 的角色是增加信息的表现力而不是负责信息的表现。为了实现可访问性,应该尽可能支持独立于设备的事件(onfocus、onchange等)。</li></ol></li></ul><h2 id="网页特效-PC端"><a href="#网页特效-PC端" class="headerlink" title="网页特效-PC端"></a>网页特效-PC端</h2><h3 id="offset系列"><a href="#offset系列" class="headerlink" title="offset系列"></a>offset系列</h3><blockquote><p>元素偏移量offset: 可以动态的获取元素的位置、大小等</p></blockquote><h4 id="offset系列常用属性"><a href="#offset系列常用属性" class="headerlink" title="offset系列常用属性"></a>offset系列常用属性</h4><table><thead><tr><th>offset系列属性</th><th>作用</th></tr></thead><tbody><tr><td><code>elememt.offsetParent</code></td><td>返回作为该元素<code>带有定位的父级元素 </code>如果父级都没有定位则返回body</td></tr><tr><td><code>element.offsetTop</code></td><td>返回元素相对带有定位父元素上方的偏移</td></tr><tr><td><code>element.offsetLeft</code></td><td>返回元素相对带有定位父元素左边框的偏移</td></tr><tr><td><code>element.offsetWidth</code></td><td>返回自身包括padding、边框、内容区的宽度，返回数值不带单位</td></tr><tr><td><code>element.offsetHeight</code></td><td>返回自身包括paddling、边框、内容区的高度，返回数值不带单位</td></tr></tbody></table><p>注意：</p><ol><li><p>返回的数值没有单位</p></li><li><p>offsetParent返回的不一定是亲父亲，而是最近的<code>带有定位</code>的父级元素。parentNode返回的是亲父亲且不管有没有定位</p></li></ol><h4 id="offset与style区别"><a href="#offset与style区别" class="headerlink" title="offset与style区别"></a>offset与style区别</h4><p><strong>offset</strong></p><ul><li>offset 可以得到任意样式表中的样式值</li><li>offset 系列获得的数值是没有单位的</li><li>offsetWidth 包含padding + border + width</li><li>offsetWidth 等属性是只读属性,只能获取不能赋值</li><li><code>所以， 我们想要获取元素大小位置,用offset更合适</code></li></ul><p><strong>style</strong></p><ul><li>style 只能得到行内样式表中的样式值</li><li>style.width获得的是带有单位的字符串</li><li>style.width获得不包含padingRaborder 的值</li><li>style.width 是可读写属性,可以获取也可以赋值</li><li>所以， 我们想要给元素更改值,则需要用style改变</li></ul><h3 id="client系列"><a href="#client系列" class="headerlink" title="client系列"></a>client系列</h3><blockquote><p>通过client的相关属性可以动态获取该元素的边框大小,元素大小等</p></blockquote><table><thead><tr><th>client</th><th>作用</th></tr></thead><tbody><tr><td><code>element.clientTop</code></td><td>返回元素上边框的大小</td></tr><tr><td><code>element.clientLeft</code></td><td>返回元素左边框的大小</td></tr><tr><td><code>element.clientWidth</code></td><td>返回自身包括padding,内容区宽度,不包含边框</td></tr><tr><td><code>element.clientHeight</code></td><td>返回自身包括padding,内容区高度,不包含边框</td></tr></tbody></table><h3 id="事件对象之offsetX-Y"><a href="#事件对象之offsetX-Y" class="headerlink" title="事件对象之offsetX/Y"></a>事件对象之offsetX/Y</h3><p>offsetX 规定了事件对象与目标节点的内填充边（padding edge）在 X 轴方向上的偏移量。</p><p>比如在元素内触发点击事件时点击位置距离元素右边距的距离</p><h3 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h3><blockquote><p>主要作用: 创建一个独立的作用域，避免了命名冲突问题</p></blockquote><p>两种写法</p><ol><li><p><code>(function(形参) &#123;&#125;)(实参)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(a+b); </span><br><span class="line">&#125;)(<span class="number">1</span>,<span class="number">2</span>); </span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p><code>(function(形参) &#123;&#125; (实参) )</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(a-b);</span><br><span class="line">&#125; (<span class="number">3</span>,<span class="number">2</span>));</span><br></pre></td></tr></table></figure></li></ol><h3 id="scroll系列"><a href="#scroll系列" class="headerlink" title="scroll系列"></a>scroll系列</h3><blockquote><p>通过scroll可以动态获取该元素的大小,滚动距离等</p></blockquote><table><thead><tr><th>scroll</th><th>作用</th></tr></thead><tbody><tr><td><code>element.scrollTop</code></td><td>返回被卷去的上侧距离</td></tr><tr><td><code>element.scrollLeft</code></td><td>返回被卷去的左侧距离</td></tr><tr><td><code>element.scrollWidth</code></td><td>返回自身实际的宽度,不含边框,包含padding</td></tr><tr><td><code>element.scrollHeight</code></td><td>返回自身实际的高度,不含边框,包含padding</td></tr></tbody></table><p>页面被卷曲的头部</p><p>页面被卷去的头部兼容性解决方案</p><p>需要注意的是,页面被卷去的头部，有兼容性问题， 因此被卷去的头部通常有如下几种写法:</p><ol><li><p>声明了DTD ,使用<code>document.documentElement.scrollTop</code></p></li><li><p>未声明DTD ,使用<code>document.body.scrollTop</code></p></li><li><p>新方法<code>window.pageYoffset</code>和window.pageXoffset，IE9开始支持</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScroll</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">left: <span class="built_in">window</span>.pageXoffset || <span class="built_in">document</span>.documentElement.scrollLeft || <span class="built_in">document</span>.body.scrollLeft || <span class="number">0</span>,</span><br><span class="line">top: <span class="built_in">window</span>.pageYOffset || <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop || <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*使用的时候 getScroll().left*/</span></span><br></pre></td></tr></table></figure><p>重点是<code>window.pageYoffset </code>和<code>window.pageXoffset</code></p><h3 id="三大系列总结"><a href="#三大系列总结" class="headerlink" title="三大系列总结"></a>三大系列总结</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200514221416.png"></p><p>用途</p><ul><li><p><code>element.offsetTop(offsetLeft)</code>: 获取元素位置 </p></li><li><p><code>element.clientWidth(clientHeight)</code>: 获取元素大小</p></li><li><p><code>element.scrollTop(scrollLeft)</code>: 获取元素滚动距离</p></li><li><p><code>window.pageXOffset(pageYOffset)</code>: 获取页面滚动距离</p></li></ul><p>总结：</p><ul><li><p><code>element.offsetLeft/Top</code>:  获取元素相对于最近的有定位的父元素的坐标，如果没有有定位的父元素，则是文档坐标</p></li><li><p><code>element.scrollTop/Left</code>:  获取元素滚动卷去的距离</p></li><li><p><code>element.offsetWidth/Height</code>:  获取元素的宽度高度（包含边框）</p></li><li><p><code>element.clientWidth/Height</code>: 获取元素的宽度高度（不包含边框）</p></li><li><p><code>element.scrollWidth/Height</code>: 获取元素的内容宽度高度（包括被卷曲的部分）</p></li><li><p><code>e.pageX/Y 获取鼠标的文档坐标</code>:（相对于文档而言）</p></li><li><p><code>e.clientX/Y</code>:  获取鼠标的视口坐标（相对于视口而言）</p></li><li><p><code>e.screenX/Y</code>:  获取鼠标的屏幕坐标（相对于整个浏览器而言）</p></li><li><p><code>window.pageY/XOfffset</code>:  获取页面的滚动距离</p></li></ul><h3 id="mouseover-mouseenter"><a href="#mouseover-mouseenter" class="headerlink" title="mouseover/mouseenter"></a>mouseover/mouseenter</h3><blockquote><p>mouseover和mouseenter的区别</p></blockquote><p>mouseover会冒泡，mouseenter不会冒泡 与之对应的mouseleave也不会冒泡</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> father = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.father&#x27;</span>); </span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> son = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.son&#x27;</span>); </span></span><br><span class="line"><span class="javascript">    father.addEventListener(<span class="string">&#x27;mouseenter&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;1&#x27;</span>); </span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：如果是<code>mouseenter</code>则经过父盒子本身才会触发，<code>mouseover</code>经过父盒子和子盒子都会触发</p><h2 id="动画函数"><a href="#动画函数" class="headerlink" title="动画函数"></a>动画函数</h2><p>核心原理: 通过定时器setInterval()不断移动盒子距离</p><blockquote><p> 缓动动画：即动画速度有所变化的动画</p></blockquote><p><code>逐渐变慢实现原理：每次的移动距离都下降（= （目标距离-移动距离）/定值）</code></p><p>每次移动的距离应该取整，如果是正值则往大了取，因为最后面如果往小取会等于0停止移动，负值同理</p><p><code>解决多次点击按钮速度变快的方法：每次调用定时器时先清除之前的定时器</code></p><p><code>回调函数写在清除定时器之后</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//缓动动画函数封装obj目标对象target目标位置</span></span><br><span class="line"><span class="comment">//思路:</span></span><br><span class="line"><span class="comment">// 1.让盒子每次移动的距离慢慢变小， 速度就会慢慢落下来。</span></span><br><span class="line"><span class="comment">// 2.核心算法: (目标值-现在的位置) / 10做为每次移动的距离步长</span></span><br><span class="line"><span class="comment">// 3.停止的条件是:让当前盒子位置等于目标位置就停止定时器</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">obj,target,callback</span>) </span>&#123; </span><br><span class="line">    <span class="comment">//先清除以前的定时器，只保留当前的个定时器执行</span></span><br><span class="line">    <span class="built_in">clearInterval</span>(obj.timer);</span><br><span class="line">    <span class="comment">//为每个对象添加一个定时器</span></span><br><span class="line">    obj.timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        <span class="comment">//设置步长(移动距离) 步长值写到定时器的里面</span></span><br><span class="line">        <span class="comment">//把我们步长值改为整数不要出现小数的问题</span></span><br><span class="line"><span class="keyword">var</span> step = ((target-obj.offsetLeft)/<span class="number">10</span>)&gt;<span class="number">0</span>? <span class="built_in">Math</span>.ceil((target-obj.offsetLeft)/<span class="number">10</span>):<span class="built_in">Math</span>.floor((target-obj.offsetLeft)/<span class="number">10</span>); </span><br><span class="line">        <span class="keyword">if</span>(obj.offsetLeft == target) &#123; </span><br><span class="line">            <span class="comment">//停止动画本质是停止定时器</span></span><br><span class="line">            <span class="built_in">clearInterval</span>(obj.timer); </span><br><span class="line">            <span class="comment">//if(callback) &#123; </span></span><br><span class="line">            <span class="comment">//    callback(); </span></span><br><span class="line">            <span class="comment">//&#125;</span></span><br><span class="line">            callback &amp;&amp; callback(); <span class="comment">//这样写更简单  </span></span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">//匀速动画 </span></span><br><span class="line">        <span class="comment">// obj.style.left = obj.offsetLeft + 1 + &#x27;px&#x27;; </span></span><br><span class="line">        <span class="comment">//缓动动画 </span></span><br><span class="line">        <span class="comment">//把每次加1这个步长值改为一个慢慢变小的值 步长公式: (目标值-现在的位置) / 10</span></span><br><span class="line">        obj.style.left = obj.offsetLeft + step + <span class="string">&#x27;px&#x27;</span>; </span><br><span class="line">&#125;,<span class="number">30</span>)&#125;;</span><br></pre></td></tr></table></figure><h2 id="节流阀"><a href="#节流阀" class="headerlink" title="节流阀"></a>节流阀</h2><blockquote><p>防止轮播图按钮连续点击过快</p></blockquote><p>当上一个动画执行完毕后再允许执行下一次，让事件无法连续触发</p><p>核心思路：利用回调函数，添加一个变量来控制，锁住函数和解锁函数</p><p>即：</p><ol><li><p>先设置一个变量为true</p></li><li><p>当变量为true时执行事件，并将变量改为false，关闭水龙头</p></li><li><p>利用回调函数在事件结束后将变量改为true，打开水龙头</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">    flag = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行的函数</span></span><br><span class="line"></span><br><span class="line">animate(obj,target,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  flag = <span class="literal">true</span>;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="客户端存储"><a href="#客户端存储" class="headerlink" title="客户端存储"></a>客户端存储</h2><blockquote><p>客户端存储的形式</p></blockquote><ol><li>web存储(包含 localStorage 和 sessionStorage 两个 API)</li><li>cookie</li><li>IE User Data</li><li>离线 Web 应用</li><li>Web 数据库</li><li>文件系统 API</li></ol><blockquote><p>客户端存储的特性</p></blockquote><p>客户端存储遵循同源策略,因此不同站点的页面是无法互相读取对方存储的数据,而同一站点的不同页面之间是可以互相共享存储数据的</p><p>任何形式的客户端都不应该用来保存密码,商业账号或者其他类似的敏感信息</p><ol><li><p>web存储</p><p><code>web存储特性</code></p><ul><li><p>数据存储在用户浏览器中</p></li><li><p>设置、读取方便</p></li><li><p>容量较大, sessionStorage 约 5M,localStorage 约 20M</p></li><li><p>只能存储字符串</p></li></ul><p><code>window.localStorage 本地存储</code></p><ul><li>生命周期为永久性的,除非人为删除</li><li>作用域限定在文档源中(文档源是通过协议、主机、端口号三者确定的),同源的 localStorage 可以互相读取对方数据,非同源文档则不可以(只要协议、主机、端口号有一个不同就是非同源文档)</li><li>作用域也受浏览器供应商限制</li><li>键值对形式存储</li></ul><p><code>Window.sessionStorage   临时存储</code></p><ul><li><p>生命周期为关闭窗口或标签页</p></li><li><p>作用域也是限定在同源文档中。此外也被限定在窗口中,即使是同源文档,在不同的浏览器标签页打开也无法共享同个 seesionStorage 数据</p></li><li><p>以键值对的形式存储使用</p></li></ul><p><code>存储API</code></p><ul><li><p>存储数据: <code>sessionStorage.setItem(key,value)</code></p></li><li><p>获取数据: <code>sessionStorage.getItem(key)</code></p></li><li><p>删除数据: <code>sessionStorage.removeItem(key)</code></p></li><li><p>删除所有数据: <code>sessionStorage.clear()</code></p><hr></li><li><p>存储数据: <code>localStorage.setItem(key,value)</code></p></li><li><p>获取数据: <code>localStorage.getItem(key)</code></p></li><li><p>删除数据: <code>localStorage.removeItem(key)</code></p></li><li><p>删除所有数据: <code>LocalStorage.clear()</code> </p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加某个数据 </span></span><br><span class="line">set.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">var</span> val = ipt.value; </span><br><span class="line">    sessionStorage.setItem(<span class="string">&#x27;unmame&#x27;</span>,val); </span><br><span class="line">    sessionStorage.setItem(<span class="string">&#x27;pwd&#x27;</span>,val); </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//获得某个数据 </span></span><br><span class="line">get.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(sessionStorage.getItem(<span class="string">&#x27;unmame&#x27;</span>)); </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//删除指定数据 </span></span><br><span class="line">remove.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    sessionStorage.removeItem(<span class="string">&#x27;unmame&#x27;</span>); </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//删除所有数</span></span><br><span class="line">del.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    sessionStorage.clear();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>cookie (指 web 存储的少量数据)</p><p>特点: </p><ul><li><p>cookie 数据会自动在 Web 浏览器和 Web 服务器之间传输</p></li><li><p>兼容性好</p></li><li><p>所有查询设置删除都要通过 Document 对象的 cookie 属性完成</p></li><li><p>通过 navigator.cookieEnabled 来检查 cookie 是否启用</p></li></ul><p><code>cookie的属性: 有效期和作用域</code></p><blockquote><p>有效期: cookie 的默认有效期很短,浏览器一旦关闭 cookie 保存的数据就丢失了。但是不是和 sessionStorage 相同,cookie 是整个浏览器关掉才会消失,而 sessionStorage 是标签页关掉则销毁该标签页的数据其他不影响。可以通过max-age 属性(单位为秒)设置有效期。</p></blockquote><blockquote><p>作用域: cookie 作用域由文档源和文档路径限制。一个页面的 cookie 可以和文档与其同个目录或者是其子目录的页面共享。</p></blockquote><p>如: <code>http://www.baidu.com/catalog/index.html</code>创建了一个 cookie ,那么该 cookie 对 <code>http://www.baidu.com/catalog/order.html</code> 或 <code>http://www.baidu.com/catalog/xxx/index.html</code> 都是可见的。可以通过修改cookie 的属性 path 来修改 cookie 的路径。</p><p>如: <code>http://www.baidu.com/catalog/xxx/index.html</code> 创建了 cookie,如果把 path 改为”/catalog”,那么该 cookie 对 <code>http://www.baidu.com/catalog/widget/index.html</code> 也是可见的</p><p><code>cookie的API</code></p><ul><li><p>保存 cookie: 将cookie属性值设置为 name = value 格式的字符串</p><p>如: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie = <span class="string">&quot;version = &quot;</span> + <span class="built_in">encodeURIComponent</span>(<span class="built_in">document</span>.lastModified);</span><br></pre></td></tr></table></figure></li></ul><p>注意: cookie 中的值不允许包含分号逗号空白符,所以要在存储前对数据进行编码。相应的,读取时也要对获取的数据解码</p><p>同样可以设置 cookie的 path、domain、secure 等属性,只需将以下字符串形式追加在 cookie 值后面: </p><p><code>;path = path</code></p><p><code>;domian = domain</code></p><p><code>;secure</code></p><p>如果要改变新 cookie 的值,就需要用相同的名字路径和域但是不同的值来设置 cookie 的值,如: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie = <span class="string">&quot;version = &quot;</span> + <span class="built_in">encodeURIComponent</span>(<span class="string">&#x27;new value&#x27;</span>);<span class="comment">//更改version的值</span></span><br></pre></td></tr></table></figure><p>要删除 cookie,就需要用相同的名字路径和域但是任意一个非空的值再次设置 cookie</p><ul><li>读取 cookie: 利用<code>document.cookie</code>读取,返回值为字符串,一般会先用split分开,然后解码,再利用<code>JSON.parse()方</code>法还原成json对象</li></ul></li><li><p>IE userData(通过在 document 元素后面附加一个专属的 “DHTML行为” 实现客户端存储)</p><p>步骤: </p><ol><li><p>对元素附加 userData 行为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div.style.behavior = <span class="string">&quot;url(&#x27;#default#userData&#x27;)&quot;</span>;</span><br></pre></td></tr></table></figure><p>此时的元素拥有 save() , load() 方法,接下来就可以通过元素的属性来访问这些名/值对形式的数据</p></li><li><p>通过 getAttribute、setAttribute 存储获取userData数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//存储 </span></span><br><span class="line">div.setAttribute(<span class="string">&quot;index&quot;</span>,<span class="number">1</span>); </span><br><span class="line">div.save(<span class="string">&quot;myindex&quot;</span>); </span><br><span class="line"><span class="comment">//读取 </span></span><br><span class="line">div.load(<span class="string">&quot;myindex&quot;</span>); </span><br><span class="line">div.getAttribute(<span class="string">&quot;index&quot;</span>);</span><br></pre></td></tr></table></figure></li></ol></li><li><p>离线Web应用(允许Web应用将应用程序自身本地保存到用户的浏览器中)</p><blockquote><p>是将应用程序自身保存起来——应用程序所需运行的所有文件(HTML、CSS、JavaScript/图片等),不会随着用户清楚浏览器缓存而被清除</p></blockquote><p>基本步骤: 首先要准备一个清单: 包含了所有应用程序依赖的所有 URL 列表,然后通过 html 标签中设置 manifest 属性指向该清单文件即可</p><p>清单文件以<code>.appcache</code>作为文件扩展名。首行内容必须为”CACHE MANIFEST”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CACHE MANIFEST</span><br><span class="line"></span><br><span class="line"> &#x2F;&#x2F;以下是文件清单 </span><br><span class="line">myapp.html </span><br><span class="line">myapp.js </span><br><span class="line">myapp.css </span><br><span class="line">images&#x2F;background.png</span><br></pre></td></tr></table></figure><p>复杂的清单</p><p>清单文件中可以使用特殊的区域头来标识该头信息之后清单项的类型</p><p>上面都属于<code>&quot;CACHE:&quot;</code>区域,也是默认的区域</p><p>此外还有两种</p><ul><li><p><code>&quot;NETWORK&quot;</code>: 该区域标识了该 URL 中的资源从不缓存,都是从网络获取</p></li><li><p><code>&quot;FALLBACK&quot;</code>: 该区域中清单项每行都包含两个 URL ,第一个 URL 是一个前缀,任何能够匹配到该前缀的URL都不会缓存起来,但是可能的话,它们会从网络中载入。第二个 URL 是指需要加载和存储在缓存中的资源。如果从网络中载入这样一个 URL 失败的话。就会使用第二个 URL 指定的缓存资源来代替,从缓存中获取。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CHCHE MANIFEST </span><br><span class="line"></span><br><span class="line">CACHE:   </span><br><span class="line">myapp.html   </span><br><span class="line">myapp.css    </span><br><span class="line">myapp.js     </span><br><span class="line"></span><br><span class="line">FALLBACK:    </span><br><span class="line">video&#x2F; offline_help.html         </span><br><span class="line"></span><br><span class="line">NETWORK:    </span><br><span class="line">cgi &#x2F; </span><br></pre></td></tr></table></figure></li></ul></li></ol><blockquote><p>缓存的更新</p></blockquote><p>在线的状态下,浏览器会异步检查清单文件是否有更新。但只是检查清单文件,而不是检查清单文件里的资源是否有更新。想更新资源文件需要手动修改</p><p>想要卸载 APP 应用,则要在服务器端删除清单文件,使得请求该文件的时候返回404无法找到的错误,同时,修改 HTML 文件 manifest 属性以便他们与该清单列表”断开连接”</p><h2 id="H5新增API"><a href="#H5新增API" class="headerlink" title="H5新增API"></a>H5新增API</h2><div class="note info"><p>这里的知识需要Jquery</p></div><h3 id="检测网络连接状态"><a href="#检测网络连接状态" class="headerlink" title="检测网络连接状态"></a>检测网络连接状态</h3><h4 id="网络连接事件"><a href="#网络连接事件" class="headerlink" title="网络连接事件"></a>网络连接事件</h4><p><code>online 当网络连接时触发</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;online&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    $(<span class="string">&quot;.tips&quot;</span>).text(<span class="string">&quot;网络已经连接&quot;</span>).fadeIn(<span class="number">500</span>).delay(<span class="number">1000</span>).fadeOut(<span class="number">500</span>); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="网路断开事件"><a href="#网路断开事件" class="headerlink" title="网路断开事件"></a>网路断开事件</h4><p><code>offline 网络断开时触发</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;offline&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    $(<span class="string">&quot;.tips&quot;</span>).text(<span class="string">&quot;网络已经断开&quot;</span>).fadeIn(<span class="number">500</span>).delay(<span class="number">1000</span>).fadeOut(<span class="number">500</span>); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="全屏显示"><a href="#全屏显示" class="headerlink" title="全屏显示"></a>全屏显示</h3><blockquote><p>全屏显示可以是任意元素,存在兼容性问题,包括高版本浏览器</p></blockquote><h4 id="请求全屏事件"><a href="#请求全屏事件" class="headerlink" title="请求全屏事件"></a>请求全屏事件</h4><blockquote><p>不同浏览器需要添加不同前缀</p></blockquote><p><code>xx.RequestFullScreen()</code></p><p><code>xxx.webkitRequestFullScreen()</code></p><p><code>xxx.mozRequestFullScreen()</code> 等等</p><p><code>ms的screen必须为小写</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(img.requestFullScreen)&#123;</span><br><span class="line">    img.requestFullScreen(); </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(img.webkitRequestFullScreen)&#123; </span><br><span class="line">    img.webkitRequestFullScreen(); </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(img.mozRequestFullScreen)&#123; </span><br><span class="line">    img.mozRequestFullScreen(); </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(img.msRequestFullscreen)&#123;      <span class="comment">// ms 的screen的s必须小写  即img.msRequestFullscreen();</span></span><br><span class="line">    img.msRequestFullscreen();</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="取消全屏"><a href="#取消全屏" class="headerlink" title="取消全屏"></a>取消全屏</h4><blockquote><p>跟元素没有关系,一般是用在 document 上,也要加浏览器前缀</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.CancelFullScreen();</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.webkitCancelFullScreen();</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.webkitCancelFullScreen();</span><br></pre></td></tr></table></figure><h4 id="检测是否全屏"><a href="#检测是否全屏" class="headerlink" title="检测是否全屏"></a>检测是否全屏</h4><blockquote><p>也是加在 document 上,也要加前缀</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.IsFullScreen();</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.webkitIsFullScreen();</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.webkitIsFullScreen();</span><br></pre></td></tr></table></figure><h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><h4 id="FileReader对象"><a href="#FileReader对象" class="headerlink" title="FileReader对象"></a>FileReader对象</h4><blockquote><p>FileReader 对象: 允许 web 应用程序异步读取存储在用户计算机上的文件,比如一个 input 元素上选择文件后返回的对象</p></blockquote><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul><li><code>FileReader.result</code>: 用于读取文件的内容,仅在文件读取操作完成后有效,数据的格式取决于使用哪个方法(以下)来启动读取操作</li></ul><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul><li><p><code>FileReader.readAsDataURL(目标文件)</code>: 读取指定的文件的内容,返回 data:URL 格式的字符串(地址)存放在 result 属性中</p></li><li><p><code>FileReader.readAsText(目标文件)</code>: 读取指定文件的内容,以字符串格式返回文件内容到 result 属性中</p></li></ul><h4 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h4><p><code>FileReader.onload</code>: 该事件在读取完成时触发</p><p>file 类型 input 表单中有一个属性 files,以伪数组形式保存上传的文件信息,可以用 filereader 对象读取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reader.readAsDataURL(file.files[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p>可以用 onchange 事件处理来检测 file 表单是否上传了文件</p><h3 id="video标签"><a href="#video标签" class="headerlink" title="video标签"></a>video标签</h3><p>属性</p><ul><li><p><code>video.duration</code>: 返回当前音频/视频的长度</p></li><li><p><code>currentTime</code>: 返回或设置当前音频/视频的播放进度</p></li></ul><p>事件</p><ul><li><p><code>video.oncanplay</code>: 当前视频/音频可以播放时触发</p></li><li><p><code>video.onended</code>: 当前视频/音频播放结束时触发</p></li><li><p><code>video.ontimeupdate</code>: 当前视频/音频播放位置改变时触发 通常与 currentTime 属性一起使用</p></li></ul><h1 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h1><div class="note info"><p>思维导图来自: <a href="https://gitee.com/jinsexiaozhima/jiujin/tree/master/Mindmap">https://gitee.com/jinsexiaozhima/jiujin/tree/master/Mindmap</a> 侵删!!!<br>更多文章 <a href="https://juejin.im/user/1626932942224398/posts">https://juejin.im/user/1626932942224398/posts</a></p></div><h2 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h2><h3 id="前端发展史"><a href="#前端发展史" class="headerlink" title="前端发展史"></a>前端发展史</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/jinsexiaozhima/jiujin/raw/master/Mindmap/%E5%8E%9F%E7%94%9FJS%E7%AF%87/1%E3%80%81%E5%9F%BA%E7%A1%80%E7%AF%87/1%E3%80%81%E5%89%8D%E7%AB%AF%E5%8F%91%E5%B1%95%E5%8F%B2.png"></p><h3 id="认识浏览器"><a href="#认识浏览器" class="headerlink" title="认识浏览器"></a>认识浏览器</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/jinsexiaozhima/jiujin/raw/master/Mindmap/%E5%8E%9F%E7%94%9FJS%E7%AF%87/1%E3%80%81%E5%9F%BA%E7%A1%80%E7%AF%87/2%E3%80%81%E8%AE%A4%E8%AF%86%E6%B5%8F%E8%A7%88%E5%99%A8.png"></p><h3 id="JS-基础知识"><a href="#JS-基础知识" class="headerlink" title="JS 基础知识"></a>JS 基础知识</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/jinsexiaozhima/jiujin/raw/master/Mindmap/%E5%8E%9F%E7%94%9FJS%E7%AF%87/1%E3%80%81%E5%9F%BA%E7%A1%80%E7%AF%87/3%E3%80%81JS%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.png"></p><h3 id="三类输出方式"><a href="#三类输出方式" class="headerlink" title="三类输出方式"></a>三类输出方式</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/jinsexiaozhima/jiujin/raw/master/Mindmap/%E5%8E%9F%E7%94%9FJS%E7%AF%87/1%E3%80%81%E5%9F%BA%E7%A1%80%E7%AF%87/4%E3%80%81%E4%B8%89%E7%B1%BB%E8%BE%93%E5%87%BA%E6%96%B9%E5%BC%8F.png"></p><h3 id="number数据类型"><a href="#number数据类型" class="headerlink" title="number数据类型"></a>number数据类型</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/jinsexiaozhima/jiujin/raw/master/Mindmap/%E5%8E%9F%E7%94%9FJS%E7%AF%87/1%E3%80%81%E5%9F%BA%E7%A1%80%E7%AF%87/5%E3%80%81number%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png"></p><h3 id="string数据类型"><a href="#string数据类型" class="headerlink" title="string数据类型"></a>string数据类型</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/jinsexiaozhima/jiujin/raw/master/Mindmap/%E5%8E%9F%E7%94%9FJS%E7%AF%87/1%E3%80%81%E5%9F%BA%E7%A1%80%E7%AF%87/6%E3%80%81string%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png"></p><h3 id="boolean数据类型"><a href="#boolean数据类型" class="headerlink" title="boolean数据类型"></a>boolean数据类型</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/jinsexiaozhima/jiujin/raw/master/Mindmap/%E5%8E%9F%E7%94%9FJS%E7%AF%87/1%E3%80%81%E5%9F%BA%E7%A1%80%E7%AF%87/7%E3%80%81boolean%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png"></p><h3 id="object数据类型"><a href="#object数据类型" class="headerlink" title="object数据类型"></a>object数据类型</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/jinsexiaozhima/jiujin/raw/master/Mindmap/%E5%8E%9F%E7%94%9FJS%E7%AF%87/1%E3%80%81%E5%9F%BA%E7%A1%80%E7%AF%87/8%E3%80%81object%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png"></p><h3 id="条件判断里的相互转换规则"><a href="#条件判断里的相互转换规则" class="headerlink" title="条件判断里的相互转换规则"></a>条件判断里的相互转换规则</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/jinsexiaozhima/jiujin/raw/master/Mindmap/%E5%8E%9F%E7%94%9FJS%E7%AF%87/1%E3%80%81%E5%9F%BA%E7%A1%80%E7%AF%87/9%E3%80%81%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD%E9%87%8C%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2%E8%A7%84%E5%88%99.png"></p><h3 id="数据类型之间的区别-堆栈内存"><a href="#数据类型之间的区别-堆栈内存" class="headerlink" title="数据类型之间的区别(堆栈内存)"></a>数据类型之间的区别(堆栈内存)</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/jinsexiaozhima/jiujin/raw/master/Mindmap/%E5%8E%9F%E7%94%9FJS%E7%AF%87/1%E3%80%81%E5%9F%BA%E7%A1%80%E7%AF%87/10%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB(%E5%A0%86%E6%A0%88%E5%86%85%E5%AD%98).png"></p><h3 id="JS中三种常见的判断及判断中常用的散知识"><a href="#JS中三种常见的判断及判断中常用的散知识" class="headerlink" title="JS中三种常见的判断及判断中常用的散知识"></a>JS中三种常见的判断及判断中常用的散知识</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/jinsexiaozhima/jiujin/raw/master/Mindmap/%E5%8E%9F%E7%94%9FJS%E7%AF%87/1%E3%80%81%E5%9F%BA%E7%A1%80%E7%AF%87/11%E3%80%81JS%E4%B8%AD%E4%B8%89%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E5%88%A4%E6%96%AD%E5%8F%8A%E5%88%A4%E6%96%AD%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E6%95%A3%E7%9F%A5%E8%AF%86.png"></p><h3 id="JS中三种常见的判断及判断中常用的散知识-1"><a href="#JS中三种常见的判断及判断中常用的散知识-1" class="headerlink" title="JS中三种常见的判断及判断中常用的散知识"></a>JS中三种常见的判断及判断中常用的散知识</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/jinsexiaozhima/jiujin/raw/master/Mindmap/%E5%8E%9F%E7%94%9FJS%E7%AF%87/1%E3%80%81%E5%9F%BA%E7%A1%80%E7%AF%87/12%E3%80%81JS%E4%B8%AD%E7%9A%84for%E5%BE%AA%E7%8E%AF.png"></p><h3 id="函数基础知识（全）"><a href="#函数基础知识（全）" class="headerlink" title="函数基础知识（全）"></a>函数基础知识（全）</h3><p><a href="https://gitee.com/jinsexiaozhima/jiujin/raw/master/Mindmap/%E5%8E%9F%E7%94%9FJS%E7%AF%87/1%E3%80%81%E5%9F%BA%E7%A1%80%E7%AF%87/13%E3%80%81%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E5%85%A8%EF%BC%89.png">https://gitee.com/jinsexiaozhima/jiujin/raw/master/Mindmap/原生JS篇/1、基础篇/13、函数基础知识（全）.png</a></p><h3 id="数组的基础知识"><a href="#数组的基础知识" class="headerlink" title="数组的基础知识"></a>数组的基础知识</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/jinsexiaozhima/jiujin/raw/master/Mindmap/%E5%8E%9F%E7%94%9FJS%E7%AF%87/1%E3%80%81%E5%9F%BA%E7%A1%80%E7%AF%87/14%E3%80%81%E6%95%B0%E7%BB%84%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.png"></p><h3 id="数组中的常用方法"><a href="#数组中的常用方法" class="headerlink" title="数组中的常用方法"></a>数组中的常用方法</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/jinsexiaozhima/jiujin/raw/master/Mindmap/%E5%8E%9F%E7%94%9FJS%E7%AF%87/1%E3%80%81%E5%9F%BA%E7%A1%80%E7%AF%87/15%E3%80%81%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95.png"></p><h3 id="数组常用方法补充reduce、filter、flat"><a href="#数组常用方法补充reduce、filter、flat" class="headerlink" title="数组常用方法补充reduce、filter、flat"></a>数组常用方法补充reduce、filter、flat</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/jinsexiaozhima/jiujin/raw/master/Mindmap/%E5%8E%9F%E7%94%9FJS%E7%AF%87/1%E3%80%81%E5%9F%BA%E7%A1%80%E7%AF%87/16%E3%80%81%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E8%A1%A5%E5%85%85reduce%E3%80%81filter%E3%80%81flat.png"></p><h3 id="Math的常用方法"><a href="#Math的常用方法" class="headerlink" title="Math的常用方法"></a>Math的常用方法</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/jinsexiaozhima/jiujin/raw/master/Mindmap/%E5%8E%9F%E7%94%9FJS%E7%AF%87/1%E3%80%81%E5%9F%BA%E7%A1%80%E7%AF%87/17%E3%80%81Math%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95.png"></p><h3 id="字符串中的常用方法"><a href="#字符串中的常用方法" class="headerlink" title="字符串中的常用方法"></a>字符串中的常用方法</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/jinsexiaozhima/jiujin/raw/master/Mindmap/%E5%8E%9F%E7%94%9FJS%E7%AF%87/1%E3%80%81%E5%9F%BA%E7%A1%80%E7%AF%87/18%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95.png"></p>]]></content>
      
      
      <categories>
          
          <category> Web教程 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS学习</title>
      <link href="/posts/4b2dadbc/"/>
      <url>/posts/4b2dadbc/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS学习"><a href="#CSS学习" class="headerlink" title="CSS学习"></a>CSS学习</h2><div class="note danger"><p>本教程里的资料来源于网友的资料，自己整理以供学习。视频学习: <a href="https://www.bilibili.com/video/BV1pE411q7FU?p=60">黑马程序员</a></p></div><h3 id="CSS样式规则"><a href="#CSS样式规则" class="headerlink" title="CSS样式规则"></a>CSS样式规则</h3><p>格式: </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">选择器&#123; </span><br><span class="line">    属性: 属性值;</span><br><span class="line">    属性: 属性值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>规则: </p><ul><li><p>选择器用于指定CSS样式作用的Html对象，花括号内是具体的样式</p></li><li><p>属性和属性值以”键対值”的形式出现 </p></li><li><p>属性是对指定的对象设置的样式属性，例如字体大小，文本颜色等</p></li><li><p>属性和属性值之间用英文”:”链接 不是等号</p></li><li><p>多个键值对之间用英文”:”区分</p></li></ul><h3 id="字体设置"><a href="#字体设置" class="headerlink" title="字体设置"></a>字体设置</h3><ul><li><p>CSS Unicode字体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">微软雅黑 \5FAE\8F6F\96C5\9ED1</span><br><span class="line"></span><br><span class="line">宋体 \5B8B\4F53</span><br></pre></td></tr></table></figure><p>尽量只写unicode字体 写宋体和微软雅黑</p></li><li><p>CSS中注释方式: <code>/*这里是注释内容*/ </code></p></li><li><p>设置字体样式(font-family)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">font-family</span>: &quot;<span class="selector-tag">xxx</span>&quot;;</span><br></pre></td></tr></table></figure></li><li><p>设置字体字号(font-size)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">font-size</span>: &quot;<span class="selector-tag">xxpx</span>&quot;;</span><br></pre></td></tr></table></figure><p>字体字号常用技巧:</p><ol><li><p>网页中正文普遍使用<code>14px</code></p></li><li><p>若有设置多个字体，则字体之间应用<code>英文逗号隔开</code></p></li><li><p><code>中文字体需要加英文双引号</code>，英文字体不需要，且<code>英文字体应在中文字体之前</code></p></li><li><p>若字体中包含<code>空格、π、$</code>等符号，无论是英文还是中文字体都<code>必须加引号</code></p></li><li><p>尽量使用系统默认字体</p></li></ol></li><li><p>设置字体粗细(font-weight)</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">font-weight</span>:</span><br></pre></td></tr></table></figure><p>  属性值:<br>  <code>normal(即400)、bold(即700)、bolder、lighter、100-900之间100的整倍数</code></p></li><li><p>设置字体风格(font-style)</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">font-style</span>:</span><br></pre></td></tr></table></figure><p>  属性值:<br>  <code>normal,italic(斜体)</code></p></li><li><p>字体综合设置</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">选择器&#123;</span><br><span class="line">  <span class="attribute">font</span>: font-style font-weight font-size/line-height font-family;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <em>注意 :</em></p><p>  <code>不能更换顺序，以空格隔开</code></p><p>  <code>不需要设置的属性可以忽略</code></p></li></ul><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><h4 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h4><p>格式: </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">标签名&#123;</span><br><span class="line">    属性1: 属性值1;</span><br><span class="line">    属性2: 属性值2;</span><br><span class="line">    属性3: 属性值3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><p>格式:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.类名&#123;</span><br><span class="line">    属性1: 属性值1;</span><br><span class="line">    属性2: 属性值2;</span><br><span class="line">    属性3: 属性值3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>标签调用时用<code>class=&quot;类名&quot;</code>即可</p><p><code>命名规范</code>:</p><ul><li>长名称或词组可以使用中横线来为选择器命名</li><li>不建议使用 “_” 下划线命名 css选择器</li><li>不要纯数字、中文等命名，尽量使用英文字母</li></ul><h4 id="多类名选择器"><a href="#多类名选择器" class="headerlink" title="多类名选择器"></a>多类名选择器</h4><p>即一个标签带多个类名，从而实现灵活自由搭配</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;font20 blue&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;font14 blue&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;font20 orange&quot;</span>&gt;</span>C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;font14 orange&quot;</span>&gt;</span>D<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意: </p><ul><li>样式显示效果跟Html中的<code>类名先后顺序无关</code></li><li>各个类名中间用<code>空格</code>隔开</li></ul><h4 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">标签名.类名&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*一般上下写*/</span></span><br><span class="line">标签名,</span><br><span class="line">标签名,</span><br><span class="line">标签名&#123;</span><br><span class="line">    </span><br><span class="line">&#125;      </span><br></pre></td></tr></table></figure><h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h4><p>语法格式: </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#id</span>名&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xx</span> <span class="attr">id</span>=<span class="string">&quot;id名&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">xx</span>&gt;</span></span><br></pre></td></tr></table></figure><p>id与类选择器区别: <code>一个id只能用于一个标签</code>，<code>类可以用于多个标签</code>。</p><h4 id="链接伪类选择器"><a href="#链接伪类选择器" class="headerlink" title="链接伪类选择器"></a>链接伪类选择器</h4><p>语法格式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:link</span>&#123; <span class="comment">/*设置未点击链接时链接的样式*/</span></span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">:visited</span>&#123; <span class="comment">/*设置点击链接后链接的样式*/</span></span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">:hover</span>&#123; <span class="comment">/*设置鼠标移动到链接时的样式*/</span></span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">:active</span>&#123; <span class="comment">/*设置鼠标点击链接且不松开时的样式*/</span></span><br><span class="line"></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>注意: 必须按照以上<code>lvha</code>的顺序( link visited hover active )</p><p>一般工作不需要用到 active 和 visited ，所以有以下便捷写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: gray;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h4><blockquote><p>原理:先找到XX元素的父元素，再找这个父元素的第指定个元素，如果不与xx元素相同则无视。即是相对于父元素的结构伪类</p></blockquote><p>注意: <code>n是从0到指定的元素个数</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*选择xx元素中的第一个子元素*/</span></span><br><span class="line"><span class="selector-tag">xx</span><span class="selector-pseudo">:first-child</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*选择xx元素中的最后一个子元素*/</span></span><br><span class="line"><span class="selector-tag">xx</span><span class="selector-pseudo">:last-child</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*选择xx元素中的第y个子元素*/</span></span><br><span class="line"><span class="selector-tag">xx</span><span class="selector-pseudo">:nth-child(y)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*选择所有子元素*/</span></span><br><span class="line"><span class="selector-tag">xx</span><span class="selector-pseudo">:nth-child(n)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*选择所有第偶数个子元素*/</span></span><br><span class="line"><span class="selector-tag">xx</span><span class="selector-pseudo">:nth-child(even)</span>&#123;&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*选择所有第奇数个子元素*/</span></span><br><span class="line"><span class="selector-tag">xx</span><span class="selector-pseudo">:nth-child(odd)</span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*选择所有第偶数个子元素*/</span></span><br><span class="line"><span class="selector-tag">xx</span><span class="selector-pseudo">:nth-child(2n)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*选择所有第奇数个子元素*/</span></span><br><span class="line"><span class="selector-tag">xx</span><span class="selector-pseudo">:nth-child(2n+1)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*与上面相同，但是是倒数*/</span></span><br><span class="line"><span class="selector-tag">xx</span><span class="selector-pseudo">:nth-last-child</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*选择前y个*/</span></span><br><span class="line"><span class="selector-tag">xx</span><span class="selector-pseudo">:nth-child(-n+y)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*只认定xx元素同级元素中所有xx元素。即所有xx元素中的第n个*/</span></span><br><span class="line"><span class="selector-tag">xx</span><span class="selector-pseudo">:nth-of-type(n)</span>&#123;&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*倒数*/</span></span><br><span class="line"><span class="selector-tag">xx</span><span class="selector-pseudo">:nth-last-of-type()</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="兄弟伪类选择器"><a href="#兄弟伪类选择器" class="headerlink" title="兄弟伪类选择器"></a>兄弟伪类选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">xx</span> + <span class="selector-tag">yy</span> &#123;</span><br><span class="line">    <span class="comment">/*选择在xx后面的yy元素*/</span></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="selector-tag">xx</span> ~ <span class="selector-tag">yy</span>&#123;</span><br><span class="line">    <span class="comment">/*选择xx之前的yy元素*/</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*选中x标签中文档的第一个字*/</span></span><br><span class="line"><span class="selector-tag">x</span><span class="selector-pseudo">::first-letter</span>&#123;&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">/*选中x标签中文档的第一行*/</span></span><br><span class="line"><span class="selector-tag">x</span><span class="selector-pseudo">::first-line</span>&#123;&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*使选中的文字发生实时变化(只能改变显示样式不能改变内容大小)*/</span></span><br><span class="line"><span class="selector-tag">x</span><span class="selector-pseudo">::selection</span>&#123;&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*在x文档的开头添加文字xx*/</span></span><br><span class="line"><span class="selector-tag">x</span><span class="selector-pseudo">::before</span>&#123;<span class="attribute">content</span>:<span class="string">&quot;xx&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*在x文档的结尾添加文字XX*/</span></span><br><span class="line"><span class="selector-tag">x</span><span class="selector-pseudo">::after</span>&#123;<span class="attribute">content</span>:<span class="string">&quot;xx&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p><em>伪元素的本质</em></p><ul><li>伪元素本质为<code>行内元素</code>，改为块级元素(或者浮动、定位)后可以设置宽高，伪元素不占位置。设置<code>:before</code>和<code>:after</code>时<code>必须设置content属性</code>，否则伪元素不起作用</li></ul><h4 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">父标签 子孙标签&#123;&#125;</span><br></pre></td></tr></table></figure><p>可以选择父标签内的所有对应子标签、孙标签、重孙标签。</p><h4 id="子元素选择器"><a href="#子元素选择器" class="headerlink" title="子元素选择器"></a>子元素选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">父标签 &gt; 字标签&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>只能选择父标签的亲生儿子标签。</strong></p><h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><blockquote><p>选取标签带有某些特殊属性的选择器我们成为属性选择器</p></blockquote><table><thead><tr><th>选择器</th><th>含义</th></tr></thead><tbody><tr><td>E[attr]</td><td>存在attr属性即可</td></tr><tr><td>E[attr=ya]</td><td>属性值完全等于val</td></tr><tr><td>E[attr*=val]</td><td>属性值里包含val字符并且在”任意”位置</td></tr><tr><td>E[attr^=val]</td><td>属性值里包含val字符并且在”开始”位置</td></tr><tr><td>E[attr$=val]</td><td>属性值里包含val字符并且在”结束”位置</td></tr></tbody></table><p>当然、直接通过<code>[attr]</code> 获取也是可以的、比如获取自定义属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 注意：选择的是 title 对应的元素 */</span></span><br><span class="line"><span class="selector-attr">[title]</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>获取到拥有该属性的元素</code></p><h4 id="状态选择器"><a href="#状态选择器" class="headerlink" title="状态选择器"></a>状态选择器</h4><table><thead><tr><th>选择器</th><th>例子</th><th>含义</th></tr></thead><tbody><tr><td><code>:empty</code></td><td>p:empty</td><td>选择没有子元素的每个 <code>&lt;p&gt; </code>元素(包括文本节点)。</td></tr><tr><td><code>:target</code></td><td>#news:target</td><td>选择当前活动的 #news 元素。</td></tr><tr><td><code>:enabled</code></td><td>input:enabled</td><td>选择每个启用的<code> &lt;input&gt;</code> 元素。</td></tr><tr><td><code>:disabled</code></td><td>input:disabled</td><td>选择每个禁用的<code> &lt;input&gt;</code> 元素</td></tr><tr><td><code>:checked</code></td><td>input:checked</td><td>选择每个被选中的 <code>&lt;input&gt;</code> 元素。</td></tr><tr><td><code>:not(selector)</code></td><td>:not(p)</td><td>选择非 <code>&lt;p&gt;</code> 元素的每个元素。</td></tr></tbody></table><p>注意: </p><ul><li><p>not() 括号里可以是类名id名属性等等</p></li><li><p>target 样式: 可以为锚点目标元素添加样式，当目标元素被触发为当前锚点链接的目标时，调用此样式</p><p>  语法 目标链接 :target {样式;}</p></li></ul><h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><blockquote><p>CSS颜色三种表达方式</p></blockquote><ul><li><p>直接用名字表示: color: red</p></li><li><p>用16进制代码表示: color: #ffb100</p></li><li><p>用rgb代码表示 rgb( 192,255,252 ) ，分别代表红绿蓝，16进制数</p></li><li><p>rgba( x,x,x,x )最后一个数值可以设置半透明度</p></li><li><p>hsl( 颜色,饱和度,亮度 ); 颜色 <code>0~360</code>  饱和度、亮度 <code>0%~100%</code></p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/2020042123428.png"></p><h3 id="行高对齐和首行缩进"><a href="#行高对齐和首行缩进" class="headerlink" title="行高对齐和首行缩进"></a>行高对齐和首行缩进</h3><ul><li><p>行间距: </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">line-height</span>: <span class="selector-tag">xxpx</span>;</span><br></pre></td></tr></table></figure></li><li><p>首行缩进: </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">text-indent</span>: <span class="selector-tag">xxpx</span>;</span><br></pre></td></tr></table></figure></li><li><p>字间距: </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">letter-spacing</span>: <span class="selector-tag">xxpx</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="英文大小写转换"><a href="#英文大小写转换" class="headerlink" title="英文大小写转换"></a>英文大小写转换</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text-transform: capitalize | uppercase | lowercase | none</span><br></pre></td></tr></table></figure><ul><li><code>capitalize</code>: 首字母转大写</li><li><code>uppercase</code>: 转换成大写</li><li><code>lowercase</code>: 转换成小写</li></ul><h3 id="文字阴影"><a href="#文字阴影" class="headerlink" title="文字阴影"></a>文字阴影</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text-shadow: 水平位置(px) 垂直位置(px) 模糊距离(px) 阴影颜色(rgba);</span><br></pre></td></tr></table></figure><h3 id="CSS书写规范"><a href="#CSS书写规范" class="headerlink" title="CSS书写规范"></a>CSS书写规范</h3><ul><li><p>选择器与花括号之间必有空格</p></li><li><p>属性名与冒号之间不允许有空格，冒号后必须有空格</p></li><li><p>属性值后必须加分号</p></li><li><p>当选择器有多个并行标签时，应上下逗号分开</p></li><li><p>选择器的嵌套尽量不超三层 </p></li><li><p>不同属性应另起一行</p></li></ul><h3 id="CSS样式表"><a href="#CSS样式表" class="headerlink" title="CSS样式表"></a>CSS样式表</h3><h4 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">选择器 &#123; 属性1: 属性值1;属性2: 属性值2;属性3: 属性值3;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="行内样式表"><a href="#行内样式表" class="headerlink" title="行内样式表"></a>行内样式表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span> <span class="attr">style</span>=<span class="string">&quot;属性1: 属性值1; 属性2: 属性值2; 属性3: 属性值3;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--是个单标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;css的路径&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span>   </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结: <code>推荐使用外部样式表</code></p><h3 id="标签显示类型"><a href="#标签显示类型" class="headerlink" title="标签显示类型"></a>标签显示类型</h3><h4 id="块级标签"><a href="#块级标签" class="headerlink" title="块级标签"></a>块级标签</h4><p><code>display: block 此元素将显示为块级元素，此元素前后会带有换行符。</code></p><p>如 <code>&lt;h1&gt;</code> <code>&lt;p&gt;</code> <code>&lt;div&gt;</code> <code> &lt;ul&gt;</code> <code>&lt;ol&gt;</code> <code>&lt;li&gt;</code> 等</p><p><em>块级元素特点 :</em></p><ul><li>总是从新行开始</li><li>高度、行高、外边距以及内边距都可以控制</li><li>宽度默认是容器的100%</li><li>可以容纳内联元素和其他块元素</li></ul><h4 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h4><p><code>display: inline 默认。此元素会被显示为内联元素，元素前后没有换行符。</code></p><p>如 <code>&lt;a&gt;</code> <code>&lt;strong&gt;</code> <code>&lt;b&gt;</code> <code>&lt;em&gt;</code> <code>&lt;i&gt;</code> <code>&lt;del&gt;</code> <code>&lt;s&gt;</code> <code>&lt;ins&gt;</code> <code>&lt;u&gt;</code> <code>&lt;span&gt;</code> 等</p><p><em>特点 :</em></p><ul><li>和相邻行内元素在一行上</li><li>高宽无效，但水平方向的 padding 和 margin 可以设置，垂直方向的无效</li><li>默认宽度是它本身内容的宽度</li><li>行内元素只能容纳文本或其他行内元素</li></ul><p><em>注意 :</em></p><ul><li>文字标签里不能放块级元素。链接里不能再放链接</li></ul><h4 id="行内块元素"><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h4><p><code>display: inline-block 行内块元素。</code></p><p>如<code>&lt;img/&gt;</code> <code>&lt;input/&gt;</code> <code>&lt;td&gt;</code>等</p><p><em>特点 :</em></p><ul><li>和相邻行内元素在一行上，但是之间会有空白缝隙</li><li>默认宽度就是它本身内容的宽度</li><li>高度，行高，外边距以及内边距都可以控制</li></ul><h3 id="背景图设置"><a href="#背景图设置" class="headerlink" title="背景图设置"></a>背景图设置</h3><ul><li><p>背景图地址</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">url</span>(图片地址);</span><br></pre></td></tr></table></figure></li><li><p>设置背景颜色</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span><br></pre></td></tr></table></figure></li><li><p>设置平铺方式 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-repeat</span>: <span class="selector-tag">repeat</span>;</span><br></pre></td></tr></table></figure><p>有<code>no-repeat(全平铺)</code>、<code>repeat-x(x轴方向平铺)</code>、<code>repeat-y(y轴方向平铺)</code>、<code>space(图片不缩放并增加空隙后平铺)</code>、<code>round(图片缩放后使其紧贴平铺)</code>选项.</p></li></ul><h4 id="设置背景图位置"><a href="#设置背景图位置" class="headerlink" title="设置背景图位置"></a>设置背景图位置</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-position</span>: <span class="selector-tag">x</span>轴方向像素 <span class="selector-tag">y</span>轴方向像素; <span class="comment">/* 第一个值是水平位置，第二个值是垂直位置 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">background-posiiton</span>: 方位词 方位词; <span class="comment">/* (无先后顺序之分)top bottom left right center; */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">background-position</span>: 方位词+<span class="selector-tag">y</span>像素(<span class="selector-tag">x</span>像素+方位词);</span><br></pre></td></tr></table></figure><h4 id="背景图平铺开始位置"><a href="#背景图平铺开始位置" class="headerlink" title="背景图平铺开始位置"></a>背景图平铺开始位置</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">background-origin: border-box/padding-box/content-box; (即从border、padding、content开始平铺)</span><br><span class="line"></span><br><span class="line">background-clip: border-box/padding-box/content-box/text ; (即分别只显示border及以内、padding及以内、content的内容、背景被裁剪成文字的前景色)</span><br></pre></td></tr></table></figure><h4 id="背景附着"><a href="#背景附着" class="headerlink" title="背景附着"></a>背景附着</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">background-attachment: scroll/fixed; </span><br><span class="line"><span class="comment">/* 前者为默认随对象内容滚动，后者为背景图像固定 */</span></span><br></pre></td></tr></table></figure><ul><li><p>背景简写: <code>background: color  url  平铺方式  滚动方式  位置;</code> <code>(尽量采用此顺序)</code></p></li><li><p>背景半透明: 在颜色设置中采用<code>rgba( x，x，x，0.x )</code>最后为透明度数值</p></li></ul><h4 id="背景缩放"><a href="#背景缩放" class="headerlink" title="背景缩放"></a>背景缩放</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-size</span>: <span class="selector-tag">xxpx</span> <span class="selector-tag">xxpx</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">background-size</span>: <span class="selector-tag">xx</span>% <span class="selector-tag">xx</span>%;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">background-size</span>: <span class="selector-tag">contain</span>;    <span class="comment">/*自动调整缩放比例保证图片完整显示*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">background-size</span>: <span class="selector-tag">cover</span>;    <span class="comment">/*自动调整缩放比例保证图片填充满背景区域*/</span></span><br></pre></td></tr></table></figure><h4 id="多背景图片"><a href="#多背景图片" class="headerlink" title="多背景图片"></a>多背景图片</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">url</span>(),<span class="selector-tag">url</span>();</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">url</span>(<span class="selector-tag">xxxx</span>)..., <span class="selector-tag">url</span>(<span class="selector-tag">xxx</span>)...;   <span class="comment">/*不同图片以逗号隔开*/</span></span><br></pre></td></tr></table></figure><h3 id="凹陷文字效果"><a href="#凹陷文字效果" class="headerlink" title="凹陷文字效果"></a>凹陷文字效果</h3><ul><li><p>突出效果: </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:first-child</span>&#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">2px</span> <span class="number">#000</span>, -<span class="number">1px</span> -<span class="number">1px</span> <span class="number">1px</span> <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><style>.tuchu{      text-shadow: 2px 2px 2px #000, -1px -1px 1px #fff;}</style><div>  <p class="tuchu">突出效果的文字</p></div></li><li><p>凹陷效果: </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:last-child</span>&#123;</span><br><span class="line">  <span class="attribute">text-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">#fff</span>, -<span class="number">2px</span> -<span class="number">2px</span> <span class="number">2px</span> <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><style>  .aoxian{        text-shadow: 1px 1px 1px #fff, -2px -2px 2px #000;  }  </style>  <div>    <p class="aoxian">凹陷效果的文字</p>  </div></li><li><p>小技巧: <code>将行距设置为盒子高度即可使文本垂直居中 line-height: 盒子高度</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">text-decoration</span>: <span class="selector-tag">none</span>; <span class="comment">/*不设置下划线*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">text-decoration</span>: <span class="selector-tag">underline</span>; <span class="comment">/*设置下划线*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">text-decoration</span>: <span class="selector-tag">overline</span>; <span class="comment">/*设置上划线*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">text-decoration</span>: <span class="selector-tag">line-through</span>; <span class="comment">/*设置穿过文本的一条线*/</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="CSS三大特性"><a href="#CSS三大特性" class="headerlink" title="CSS三大特性"></a>CSS三大特性</h3><h4 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h4><blockquote><p>当同个标签设置样式属性不同值出现冲突时，则依照就近原则以最后的样式属性为准。</p></blockquote><h4 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h4><blockquote><p>子元素能继承父元素的样式</p></blockquote><h4 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h4><blockquote><p>!important&gt;行内样式&gt;id选择器&gt;类选择器&gt;标签选择器&gt;通配符&gt;继承<br>优先级高的规则会忽视层叠性，忽视就近原则来定义样式。比如定义了!important，即使行内样式离得近，最终生效的还是!important标注的属性</p></blockquote><h4 id="CSS-Speciality-权重值"><a href="#CSS-Speciality-权重值" class="headerlink" title="CSS Speciality 权重值"></a>CSS Speciality 权重值</h4><ol><li><p>继承或*的贡献值 0,0,0,0</p></li><li><p>每个元素标签的贡献值 0,0,0,1</p></li><li><p>类、伪类、元素选择器的贡献值 0,0,1,0</p></li><li><p>id选择器的贡献值 0,1,0,0</p></li><li><p>行内样式贡献值 1,0,0,0</p></li><li><p>!important的贡献值 ∞ 无穷大</p></li></ol><p>注意:</p><ul><li><p>权重可以叠加 如: div ul li 的贡献值为 0,0,0,3</p></li><li><p>数位之间没有进制</p></li><li><p>继承的权重为0</p></li></ul><p>总结优先级: </p><ul><li>使用了<code>!important</code>声明的规则。</li><li>内嵌在HTML元素的style属性里面的声明。</li><li>使用了ID选择器的规则。</li><li>使用了类选择器、属性选择器、伪元素和伪类选择器的规则。</li><li>使用了元素选择器的规则。</li><li>只包含一个通用选择器的规则。</li><li>同一类选择器则遵循就近原则。</li></ul><h3 id="CSS盒子模型"><a href="#CSS盒子模型" class="headerlink" title="CSS盒子模型"></a>CSS盒子模型</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200422110217.png"></p><h4 id="盒子边框"><a href="#盒子边框" class="headerlink" title="盒子边框"></a>盒子边框</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border-color</span>: 设置边框颜色</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">border-width</span>: 设置边框厚度</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">border-style</span>: 设置边框类型</span><br></pre></td></tr></table></figure><p><code>style</code>属性值有:  </p><ul><li>实线 <code>solid</code></li><li>虚线 <code>dashed</code></li><li>点线 <code>dotted</code></li><li>双实线 <code>double</code></li></ul><h4 id="不同方向边框的写法"><a href="#不同方向边框的写法" class="headerlink" title="不同方向边框的写法"></a>不同方向边框的写法</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border-top</span>(<span class="selector-tag">left</span>、<span class="selector-tag">right</span>、<span class="selector-tag">bottom</span>)<span class="selector-tag">-width</span>(<span class="selector-tag">color</span>、<span class="selector-tag">style</span>)</span><br></pre></td></tr></table></figure><h4 id="边框综合写法"><a href="#边框综合写法" class="headerlink" title="边框综合写法"></a>边框综合写法</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border</span>: <span class="selector-tag">width</span> <span class="selector-tag">style</span> <span class="selector-tag">color</span></span><br></pre></td></tr></table></figure><h4 id="合并细线表格"><a href="#合并细线表格" class="headerlink" title="合并细线表格"></a>合并细线表格</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border-collapse</span>: <span class="selector-tag">collapse</span></span><br></pre></td></tr></table></figure><h4 id="圆角矩形"><a href="#圆角矩形" class="headerlink" title="圆角矩形"></a>圆角矩形</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">border-radius: xxpx(xx%)  &#x2F;*设置四个角*&#x2F;</span><br><span class="line"></span><br><span class="line">border-radius: xx xx     &#x2F;*设置左上右下  左下右上*&#x2F;</span><br><span class="line"></span><br><span class="line">border-radius: XX XX XX &#x2F;*设置左上 左下右上 右下*&#x2F;</span><br><span class="line"></span><br><span class="line">border-radius: xx xx xx xx   &#x2F;*左上 右上 右下 左下*&#x2F;</span><br><span class="line"></span><br><span class="line">border-radius: xx&#x2F;xx     &#x2F;*设置每个角的水平&#x2F;垂直方向*&#x2F;</span><br><span class="line"></span><br><span class="line">border-方位词-方位词-radius: xxpx; &#x2F;*如broder-top-right-radius*&#x2F;</span><br><span class="line"></span><br><span class="line">border-radius: x1 x3 x5 x7&#x2F;x2 x4 x6 x8;   &#x2F;*x1x2为左上 x3x4右上 以此类推*&#x2F;  </span><br></pre></td></tr></table></figure><h4 id="边框图片"><a href="#边框图片" class="headerlink" title="边框图片"></a>边框图片</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">border-image-source: url();</span><br><span class="line"></span><br><span class="line">border-image-slice: xx fill; &#x2F;*图片切片，不需加单位,即将图片四个边xx像素的宽度作为边框 fill则是将整个图片填充 *&#x2F;</span><br><span class="line"></span><br><span class="line">border-image-width: xxpx; &#x2F;*设置边框背景图宽度 但是不影响内容放置*&#x2F;</span><br><span class="line"></span><br><span class="line">border-image-outset: 0; &#x2F;*边框扩展，一般为0*&#x2F;</span><br><span class="line"></span><br><span class="line">border-image-repeat: repeat&#x2F;round; &#x2F;*(前者直接平铺&#x2F;后者缩放后平铺)*&#x2F;</span><br></pre></td></tr></table></figure><ul><li>简写: border-image: <code>source</code> <code>slice</code> <code>width</code> <code>outset</code> <code>repeat|initial|inherit</code>;</li></ul><h4 id="盒子内边距"><a href="#盒子内边距" class="headerlink" title="盒子内边距"></a>盒子内边距</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">padding</span>: <span class="selector-tag">xx</span>     <span class="comment">/*设置四个边距*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">padding</span>: <span class="selector-tag">xx</span> <span class="selector-tag">xx</span>    <span class="comment">/*设置上下 左右边距*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">padding</span>: <span class="selector-tag">xx</span> <span class="selector-tag">xx</span> <span class="selector-tag">xx</span>   <span class="comment">/*设置 上 左右 下边距*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">padding</span>: <span class="selector-tag">xx</span> <span class="selector-tag">xx</span> <span class="selector-tag">xx</span> <span class="selector-tag">xx</span>   <span class="comment">/*设置上 右 下 左 边距*/</span></span><br></pre></td></tr></table></figure><h4 id="清除内外边距"><a href="#清除内外边距" class="headerlink" title="清除内外边距"></a>清除内外边距</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>行内元素只有左右内外边距没有上下内外边距，尽量不要给行内元素指定上下内外边距</strong></p><h4 id="外边距合并的问题"><a href="#外边距合并的问题" class="headerlink" title="外边距合并的问题"></a>外边距合并的问题</h4><blockquote><p>垂直相邻的块元素，若上面的元素有margin-bottom，下面的块元素有margin-top，则他们之间的外边距之和不是两者相加而是两者较大者。这种现象被称为相邻块元素垂直外边距的合并</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200426162303.png"></p><p>解决方法: 只设置一个盒子的外边距即可</p><h4 id="嵌套块元素的合并"><a href="#嵌套块元素的合并" class="headerlink" title="嵌套块元素的合并"></a>嵌套块元素的合并</h4><blockquote><p>对于两个嵌套关系的块元素，如果父元素没有上内边距及边框，则父元素的上外边距会与子元素的上外边距合并，合并结果为两者中较大者。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200426162553.png"></p><p>解决方法: </p><ul><li>为父元素定义1像素的边距或内边距</li><li>可以为父元素添加<code>overflow: hidden</code></li></ul><h4 id="盒子尺寸计算"><a href="#盒子尺寸计算" class="headerlink" title="盒子尺寸计算"></a>盒子尺寸计算</h4><blockquote><p>外盒尺寸 = width(height) + padding + border + margin<br>内盒尺寸 = width(height) + padding + border</p></blockquote><p>注意: </p><ul><li>width 和 height 对行内元素无效</li><li>要考虑上下两个盒子的外边距合并</li><li>若盒子没有指定高度或宽度(或继承了父元素的高度或宽度)，则 padding 不会影响整体高度或宽度</li></ul><h4 id="盒子模型布局稳定性"><a href="#盒子模型布局稳定性" class="headerlink" title="盒子模型布局稳定性"></a>盒子模型布局稳定性</h4><blockquote><p>使用优先级: width &gt; padding &gt; margin</p></blockquote><p>原因: </p><ul><li><p>margin 会有外边距合并，还有IE6下面 margin 加倍的bug</p></li><li><p>padding 会影响盒子大小，需要进行加减计算</p></li><li><p>width 没有问题，常用宽度剩余法 高度剩余法来做</p></li></ul><h4 id="CSS3盒模型"><a href="#CSS3盒模型" class="headerlink" title="CSS3盒模型"></a>CSS3盒模型</h4><ul><li><p>box-sizing: content-box<br>  盒子大小为width + padding + border 为默认值</p></li><li><p>box-sizing: border-box<br>  盒子大小为width 即 padding 和 border 包含到了 width 里面 如果为这个值，则设置 padding 时不用重新计算</p></li></ul><h4 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">box-shadow</span>: 0<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0 ,0 ,0, <span class="selector-class">.3</span>) <span class="selector-tag">inset</span>    </span><br><span class="line"><span class="comment">/*分别设置 水平距离 垂直距离 模糊距离 阴影大小 颜色 内阴影/外阴影*/</span></span><br></pre></td></tr></table></figure><h3 id="文档流"><a href="#文档流" class="headerlink" title="文档流"></a>文档流</h3><h4 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h4><ul><li><p>普通流: 网页内标签正常地从上到下从左到右的排序，如块级元素独占一行，行内元素会依照顺序依次前后排列。</p></li><li><p>浮动: 使元素脱离文档流，按照指定的方向发生移动，遇到父级的边界或者是相邻的浮动元素就会停止。</p></li><li><p>定位: 定位同浮动一样是脱离文档流的布局方式，但定位是完全脱离文档流，浮动是不完全脱离文档流。所以它可以完全由设计者确定其位置。通过定位可以实现盒子的覆盖，但是又不影响被覆盖盒子的位置。</p></li></ul><h4 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h4><blockquote><p>指设置了浮动属性的元素会脱离标准普通流的控制，移动到其父元素中指定位置的过程。</p></blockquote><ul><li><p>语法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">选择器&#123;</span><br><span class="line"><span class="attribute">float</span>: 属性值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>属性值: <code>left</code>、<code>right</code>、<code>none</code></p><p>使用浮动首先要添加标准流父盒，从而防止布局失真</p></li></ul><p><em>浮动特性</em></p><ul><li><p>父盒内的盒子设置浮动后会就近对齐父盒子，但不会遮盖 padding 和 margin</p></li><li><p>兄弟盒子中第一个盒子如果浮动，第二个盒子设置浮动后会与其顶部对齐。若第一个盒子不浮动，第二个盒子设置浮动后顶部会与其底部对齐<br>  元素(包括块级和行内)添加浮动后，都会具有行内块元素的特性</p></li></ul><p><em>总结: float ==&gt; 浮 漏 特</em></p><ul><li><p><code>浮</code>: 加了浮动的元素盒子是浮起来的，漂浮在其他的标准流盒子上面</p></li><li><p><code>漏</code>: 加了浮动的盒子，不占位置的，他浮起来了，他原来的位置漏给了标准流的盒子</p></li><li><p><code>特</code>: 特别注意要和标准流父级搭配使用。</p></li></ul><h4 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h4><blockquote><p>在一般情况下，考虑到子盒子的内容变化，父盒子都不方便设置高度。子盒子没有浮动时会自动撑开父盒子。如果子盒子浮动，则父盒子高度会变为0，导致其他盒子占据位置。</p></blockquote><blockquote><p>清除浮动就是解决没有设置高度的父盒子在子盒子浮动后高度变为0的现象</p></blockquote><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><ol><li><p>在父盒子中添加 overflow 除了 visible 以外的属性值(如 hidden、auto或scroll)</p><p>也相当于堵上一堵墙</p><p>优点: 简单</p><p>缺点: 溢出隐藏</p></li><li><p>额外标签法: 父盒子内最后一个浮动盒子的后面添加空标签，且将该标签的 clear 属性值设置为 both</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clear</span> &#123;</span><br><span class="line"><span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>清除浮动的影响: 相当于设置一堵墙，防止浮动盒子影响外部</p><p>优点: 通俗易懂，书写方便</p><p>缺点: 添加了无意义的标签</p></li><li><p><code>用 after 伪元素清除浮动(推荐)</code></p><p>父盒子类名添加 clearfix</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line"> <span class="attribute">content</span>: <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"> <span class="attribute">display</span>: block;</span><br><span class="line"> <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">visibility</span>: hidden;</span><br><span class="line"> <span class="attribute">clear</span>: both; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">    *zoom: 1;</span><br><span class="line">&#125; <span class="comment">/*兼容IE老版本*/</span></span><br></pre></td></tr></table></figure><p>优点: 结构语义化正确</p><p>缺点: IE6-7不支持: after 兼容性问题</p></li><li><p><code>用 before 和 after 双伪元素清除浮动(推荐)</code></p><p>父盒子类名添加clearfix</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">    *zoom:1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点: 结构语义化正确</p><p>缺点: IE6-7不支持: after 兼容性问题</p></li></ol><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><h4 id="边偏移"><a href="#边偏移" class="headerlink" title="边偏移"></a>边偏移</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top bottom left right</span><br></pre></td></tr></table></figure><h4 id="定位模式"><a href="#定位模式" class="headerlink" title="定位模式"></a>定位模式</h4><p>语法: </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">position</span>: 属性值;</span><br></pre></td></tr></table></figure><p>属性值: </p><ul><li>静态定位 <code>static</code></li><li>相对定位 <code>relative</code></li><li>绝对定位 <code>absolute</code></li><li>固定定位 <code>fixed</code></li></ul><h4 id="Static定位"><a href="#Static定位" class="headerlink" title="Static定位"></a>Static定位</h4><blockquote><p>默认，该定位下无法使用边偏移属性</p></blockquote><h4 id="Relative定位"><a href="#Relative定位" class="headerlink" title="Relative定位"></a>Relative定位</h4><blockquote><p> 定位后可通过边偏移改变位置，是以自身左上角为基准。<code>不脱标，依旧是标准流，原先位置保留</code></p></blockquote><p><a href="https://www.runoob.com/try/try.php?filename=trycss_position_relative">Relative定位演示</a></p><h4 id="Absolute定位"><a href="#Absolute定位" class="headerlink" title="Absolute定位"></a>Absolute定位</h4><blockquote><p>可通过边偏移改变位置，<code>完全脱标不占位置</code>。</p></blockquote><blockquote><p>子盒子设置为 absolute 后，父盒子必须定位为任何定位类型，子盒子才能以父盒子为基准设置边偏移改变位置，否则会乱跑</p></blockquote><p><a href="https://www.runoob.com/try/try.php?filename=trycss_position_absolute">Absolute定位演示</a></p><ul><li><p><code>子绝父相</code>: 一般子盒子设置为绝对定位后，父盒子要设置为相对定位较好</p></li><li><p>水平/垂直居中: 盒子设置绝对定位后，margin中的auto无效(具体数值有效)</p></li><li><p>要居中一般是以: left:50%(父容器宽度的一半),然后走外边距负的一半 margin-left:(自己宽度的一半)即可</p></li></ul><p>如: </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">left</span>: 50%;</span><br><span class="line"><span class="selector-tag">margin-left</span>: <span class="selector-tag">-xxpx</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">top</span>: 50%;</span><br><span class="line"><span class="selector-tag">margin-top</span>: <span class="selector-tag">-xxpx</span>;</span><br><span class="line"></span><br><span class="line">或者 </span><br><span class="line"></span><br><span class="line"><span class="selector-tag">left</span>: 父盒子宽度一半减去子盒子宽度一半;</span><br><span class="line"><span class="selector-tag">top</span>: 父盒子高度一半减去子盒子高度一半;</span><br></pre></td></tr></table></figure><h4 id="Fixed定位"><a href="#Fixed定位" class="headerlink" title="Fixed定位"></a>Fixed定位</h4><ul><li>固定定位的元素跟父亲没有任何关系，只认浏览器</li><li>完全脱标,不占位置,不随着滚动条移动</li></ul><p><a href="https://www.runoob.com/try/try.php?filename=trycss_position_fixed">Fixed定位演示</a></p><p><em>叠加次序</em></p><ul><li>index: 正整数、负整数、0</li></ul><p><em>注意 :</em></p><ul><li><p>index 默认属性值为0，取值越大，定位元素在层叠元素中越居上</p></li><li><p>如果取值相同，则按顺序后来居上</p></li><li><p>后面数字不能家单位</p></li><li><p>只有相对定位绝对定位固定定位有这个属性。</p></li></ul><p><em>定位总结 :</em></p><table><thead><tr><th>定位模式</th><th>是否脱标占有位置</th><th>是否可以使用边偏移</th><th>移动位置基准</th></tr></thead><tbody><tr><td>静态 <code>static</code></td><td>不脱标，正常模式</td><td>不可以</td><td>正常模式</td></tr><tr><td>相对定位 <code>relative</code></td><td>不脱标，占有位置</td><td>可以</td><td>相对自身位置移动</td></tr><tr><td>绝对定位 <code>absolute</code></td><td>完全脱标，不占有位置</td><td>可以</td><td>相对于定位父级移动位置</td></tr><tr><td>固定定位 <code>fixed</code></td><td>完全脱标，不占有位置</td><td>可以</td><td>相对于浏览器移动位置</td></tr></tbody></table><h4 id="固定绝对定位模式转换"><a href="#固定绝对定位模式转换" class="headerlink" title="固定绝对定位模式转换"></a>固定绝对定位模式转换</h4><blockquote><p>跟浮动一样,元素添加了绝对定位和固定定位之后,元素都会变成行内块模式</p></blockquote><blockquote><p>也就是;如果行内元素添加了绝对定位和固定定位后,可以不用转换模式,直接添加高度宽度。</p></blockquote><h3 id="display和visibility的使用"><a href="#display和visibility的使用" class="headerlink" title="display和visibility的使用"></a>display和visibility的使用</h3><blockquote><p>display: 设置或检索对象是否及如何显示</p></blockquote><ul><li><p>display: none 隐藏对象</p></li><li><p>display: block 除了转换为块级元素之外还有显示元素的意思</p></li><li><p>特点: 隐藏之后，不再保留位置</p></li></ul><blockquote><p>visibility: 设置或检索是否显示对象</p></blockquote><ul><li><p>visible: 对象可视</p></li><li><p>hidden: 对象隐藏</p></li><li><p>特点: 隐藏之后,继续保留原有位置</p></li></ul><blockquote><p>overflow: 溢出</p></blockquote><p>属性值</p><ul><li><p><code>visible</code>: 不剪切内容也不添加滚动条(默认)</p></li><li><p><code>auto</code>: 超出自动显示滚动条,不超出不显示滚动条</p></li><li><p><code>hidden</code>: 不显示超出对象内容的尺寸,超出的部分隐藏掉</p></li><li><p><code>scroll</code>: 不管超出内容否,总是显示滚动条</p></li></ul><h3 id="CSS高级技巧"><a href="#CSS高级技巧" class="headerlink" title="CSS高级技巧"></a>CSS高级技巧</h3><h4 id="鼠标样式"><a href="#鼠标样式" class="headerlink" title="鼠标样式"></a>鼠标样式</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">cursor</span>: <span class="selector-tag">default</span>;    小白(默认)</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">cursor</span>: <span class="selector-tag">pointer</span>;    小手</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">cursor</span>: <span class="selector-tag">text</span>;   文本</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">cursor</span>: <span class="selector-tag">move</span>;   移动</span><br></pre></td></tr></table></figure><h4 id="取消轮廓线"><a href="#取消轮廓线" class="headerlink" title="取消轮廓线"></a>取消轮廓线</h4><p>语法: </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">outline</span> : <span class="selector-tag">color</span> <span class="selector-tag">style</span> <span class="selector-tag">width</span>;</span><br><span class="line"></span><br><span class="line">例子: </span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">outline</span>: <span class="number">#00FF00</span> dotted thick;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>取消轮廓线设置为 <code>none</code></p><p><a href="https://www.w3school.com.cn/cssref/pr_outline.asp">详解教程</a></p><h4 id="防止拖拽文本"><a href="#防止拖拽文本" class="headerlink" title="防止拖拽文本"></a>防止拖拽文本</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">textarea</span> &#123;</span><br><span class="line"> <span class="attribute">resize</span>: none;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="行内块和文字对齐"><a href="#行内块和文字对齐" class="headerlink" title="行内块和文字对齐"></a>行内块和文字对齐</h4><p><code>vertical-align</code>: 实现行内元素和行内块元素的对齐，对于块级元素无效</p><p>属性值: </p><ul><li><p><code>top</code>、<code>middle</code>、<code>bottom</code>、<code>baseline(默认)</code> </p></li><li><p>一般选用middle</p></li><li><p>注意: 一些低版本浏览器中盒子内的图片可能底部出现缝隙</p></li></ul><h4 id="去除图片底侧缝隙"><a href="#去除图片底侧缝隙" class="headerlink" title="去除图片底侧缝隙"></a>去除图片底侧缝隙</h4><ul><li>将图片转为块级元素 <code>display: block</code></li><li>将图片顶部对齐或者中线对齐 <code>vertical-align: top(middle)</code></li></ul><h4 id="文本相关"><a href="#文本相关" class="headerlink" title="文本相关"></a>文本相关</h4><h5 id="word-break用法"><a href="#word-break用法" class="headerlink" title="word-break用法"></a>word-break用法</h5><ul><li><p>word-break: normal     默认方式</p></li><li><p>word-break: break-all  允许单词中换行</p></li><li><p>word-break: keep-all 只能在半角空格或连字符处换行</p></li></ul><h5 id="word-wrap用法"><a href="#word-wrap用法" class="headerlink" title="word-wrap用法"></a>word-wrap用法</h5><ul><li><p>word-wrap: normal    只在允许的断字点换行(浏览器保持默认处理)</p></li><li><p>word-wrap: break-word    在长单词或URL地址内部进行换行</p></li></ul><h5 id="white-space用法"><a href="#white-space用法" class="headerlink" title="white-space用法"></a>white-space用法</h5><ul><li><p>white-space: normal  默认处理方式    </p></li><li><p>white-space: nowrap 强制在同一行显示所有文本，直到文本结束或遇到br才换行</p></li></ul><h5 id="text-overflow使用"><a href="#text-overflow使用" class="headerlink" title="text-overflow使用"></a>text-overflow使用</h5><ul><li><p>text-overflow: clip   不显示省略标记,而是简单的裁切</p></li><li><p>text-overflow: ellipsis 当对象文本溢出时显示省略标记</p></li></ul><p>注意: <code>必须先使用white-space: nowrap和overflow: hidden两个属性后才能使用这个</code></p><h3 id="精灵技术"><a href="#精灵技术" class="headerlink" title="精灵技术"></a>精灵技术</h3><blockquote><p>即将所有背景图通过一张图来显示<br>先设置对应元素的宽高，再设置background-position,注意此处应为负值</p></blockquote><h3 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h3><p>网站: <a href="https://icomoon.io/">icomoon.io</a></p><p>将下载后的 icomoon 文件夹中的font文件夹放到与html文件同个文件夹中，然后声明(打开style.css文件复制@font-face属性)，声明后打开 icomoon 文件夹中的Html文件复制<code>小空格</code>或者<code>对应的编码</code>到目标元素中，再设置 font-family。</p><p>追加字体文件要利用 icomoon 文件夹中的 selection 文件</p><h3 id="滑动门技术"><a href="#滑动门技术" class="headerlink" title="滑动门技术"></a>滑动门技术</h3><p>固定语法: </p><ul><li><p>a 里面包含 span</p></li><li><p>不能设置宽度</p></li><li><p>a 负责左边框，span 负责右边框且背景图位置应设置为 right</p></li><li><p>记得转换为块元素或行内块元素</p></li></ul><h3 id="裁剪路径"><a href="#裁剪路径" class="headerlink" title="裁剪路径"></a>裁剪路径</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><div class="note info"><p>clip-path CSS 属性可以创建一个只有元素的部分区域可以显示的剪切区域。区域内的部分显示，区域外的隐藏。剪切区域是被引用内嵌的URL定义的路径或者外部svg的路径，或者作为一个形状。clip-path属性代替了现在已经弃用的剪切 clip属性。</p></div><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clip-source | basic-shape | geometry-box | none</span><br></pre></td></tr></table></figure><h4 id="属性说明"><a href="#属性说明" class="headerlink" title="属性说明"></a>属性说明</h4><p><code>clip-source = url</code><br><code>basic-shape = inset | circle | ellipse | polygon</code><br><code>geometry-box = shape-box | fill-box | stroke-box | view-box</code></p><h4 id="语法详解"><a href="#语法详解" class="headerlink" title="语法详解"></a>语法详解</h4><ul><li><p>基本图形：inset</p><blockquote><p>inset() : 定义一个矩形 。注意，定义矩形不是rect，而是 inset。</p></blockquote><ol><li><p>语法: <code>inset( &lt;length-percentage&gt;&#123;1,4&#125; [ round &lt;border-radius&gt; ]? )</code></p></li><li><p>说明: <code>inset()可以传入5个参数，分别对应top,right,bottom,left的裁剪位置,round radius（可选，圆角）</code></p></li><li><p>示例</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">clip-path</span>: <span class="selector-tag">inset</span>(5% 20% 15% 10%);</span><br></pre></td></tr></table></figure> <style>     .insetbox{         background: orange;         clip-path: inset(5% 20% 15% 10%);         -webkit-clip-path: inset(5% 20% 15% 10%);         width:100px;         height: 100px;         background:orange;     } </style> <div class="insetbox"></div></li></ol></li><li><p>基本图形：circle</p><blockquote><p>circle() : 定义一个圆 。</p></blockquote><ol><li><p>语法: <code>circle( [ &lt;shape-radius&gt; ]? [ at &lt;position&gt; ]? )</code></p></li><li><p>说明: <code>circle()可以传人2个可选参数；</code></p><ul><li>圆的半径，默认元素宽高中短的那个为直径，支持百分比</li><li>圆心位置，默认为元素中心点</li></ul></li><li><p>示例</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">clip-path</span>: <span class="selector-tag">circle</span>(50% <span class="selector-tag">at</span> 50% 50%);</span><br></pre></td></tr></table></figure><style>    .circlebox {      background: orange;      clip-path: circle(50% at 50% 50%);      -webkit-clip-path: circle(50% at 50% 50%);      height: 100px;      width: 100px;    } </style> <div class="circlebox"></div> </li></ol></li><li><p>基本图形：ellipse</p><blockquote><p>ellipse() : 定义一个椭圆 。</p></blockquote><ol><li><p>语法: <code>ellipse( [ &lt;shape-radius&gt;&#123;2&#125; ]? [ at &lt;position&gt; ]? )</code></p></li><li><p>说明: <code>ellipse()可以传人3个可选参数;</code></p><ul><li>椭圆的X轴半径，默认是宽度的一半，支持百分比</li><li>椭圆的Y轴半径，默认是高度的一半，支持百分比</li><li>椭圆中心位置，默认是元素的中心点</li></ul></li><li><p>示例</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">clip-path</span>: <span class="selector-tag">ellipse</span>(25% 40% <span class="selector-tag">at</span> 50% 50%);</span><br></pre></td></tr></table></figure> <style>   .ellipsebox {     background: orange;     clip-path: ellipse(25% 40% at 50% 50%);     -webkit-clip-path: ellipse(25% 40% at 50% 50%);     height: 100px;     width: 100px;   } </style>  <div class="ellipsebox"></div> </li></ol></li></ul><ul><li><p>基本图形：polygon</p><blockquote><p>polygon() : 定义一个多边形 。</p></blockquote><ol><li><p>语法: <code>polygon( &lt;fill-rule&gt;? , [ &lt;length-percentage&gt; &lt;length-percentage&gt; ]# )</code></p></li><li><p>说明: <code>&lt;fill-rule&gt;</code>可选，表示填充规则用来确定该多边形的内部。可能的值有nonzero和evenodd,默认值是nonzero后面的每对参数表示多边形的顶点坐标（X,Y），也就是连接点</p></li><li><p>示例</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">clip-path</span>: <span class="selector-tag">polygon</span>(50% 0,100% 50%,0 100%);    </span><br></pre></td></tr></table></figure> <style>   .polygonbox {     background: orange;     clip-path: polygon(50% 0,100% 50%,0 100%);      -webkit-clip-path: polygon(50% 0,100% 50%,0 100%);      height: 100px;     width: 100px;   } </style>  <div class="polygonbox"></div>         </li></ol></li></ul><h4 id="多边形裁剪"><a href="#多边形裁剪" class="headerlink" title="多边形裁剪"></a>多边形裁剪</h4><ul><li><p>三角形</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-clip-path</span>: <span class="selector-tag">polygon</span>(50% 0%, 0% 100%, 100% 100%);</span><br></pre></td></tr></table></figure></li><li><p>菱形</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-clip-path</span>: <span class="selector-tag">polygon</span>(50% 0%, 100% 50%, 50% 100%, 0% 50%);</span><br></pre></td></tr></table></figure></li><li><p>梯形</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-clip-path</span>: <span class="selector-tag">polygon</span>(20% 0%, 80% 0%, 100% 100%, 0% 100%);</span><br></pre></td></tr></table></figure></li><li><p>平行四边形</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-clip-path</span>: <span class="selector-tag">polygon</span>(25% 0%, 100% 0%, 75% 100%, 0% 100%);</span><br></pre></td></tr></table></figure></li><li><p>五边形</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-clip-path</span>: <span class="selector-tag">polygon</span>(50% 0%, 100% 38%, 82% 100%, 18% 100%, 0% 38%);</span><br></pre></td></tr></table></figure></li><li><p>六边形</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-clip-path</span>: <span class="selector-tag">polygon</span>(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0% 25%);</span><br></pre></td></tr></table></figure></li><li><p>七边形</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-clip-path</span>: <span class="selector-tag">polygon</span>(50% 0%, 90% 20%, 100% 60%, 75% 100%, 25% 100%, 0% 60%, 10% 20%);</span><br></pre></td></tr></table></figure></li><li><p>八边形</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-clip-path</span>: <span class="selector-tag">polygon</span>(30% 0%, 70% 0%, 100% 30%, 100% 70%, 70% 100%, 30% 100%, 0% 70%, 0% 30%);  </span><br></pre></td></tr></table></figure></li></ul><div class="note info"><p>特殊图形裁剪</p></div><ul><li><p>斜角</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-clip-path</span>: <span class="selector-tag">polygon</span>(20% 0%, 80% 0%, 100% 20%, 100% 80%, 80% 100%, 20% 100%, 0% 80%, 0% 20%);</span><br></pre></td></tr></table></figure></li><li><p>槽口</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-clip-path</span>: <span class="selector-tag">polygon</span>(0% 15%, 15% 15%, 15% 0%, 85% 0%, 85% 15%, 100% 15%, 100% 85%, 85% 85%, 85% 100%, 15% 100%, 15% 85%, 0% 85%);</span><br></pre></td></tr></table></figure></li><li><p>左箭头</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-clip-path</span>: <span class="selector-tag">polygon</span>(40% 0%, 40% 20%, 100% 20%, 100% 80%, 40% 80%, 40% 100%, 0% 50%);<span class="selector-tag">s</span></span><br></pre></td></tr></table></figure></li><li><p>右箭头</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-clip-path</span>: <span class="selector-tag">polygon</span>(0% 20%, 60% 20%, 60% 0%, 100% 50%, 60% 100%, 60% 80%, 0% 80%);</span><br></pre></td></tr></table></figure></li><li><p>星星</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-clip-path</span>: <span class="selector-tag">polygon</span>(50% 0%, 61% 35%, 98% 35%, 68% 57%, 79% 91%, 50% 70%, 21% 91%, 32% 57%, 2% 35%, 39% 35%);</span><br></pre></td></tr></table></figure></li><li><p>十字架</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-clip-path</span>: <span class="selector-tag">polygon</span>(10% 25%, 35% 25%, 35% 0%, 65% 0%, 65% 25%, 90% 25%, 90% 50%, 65% 50%, 65% 100%, 35% 100%, 35% 50%, 10% 50%);</span><br></pre></td></tr></table></figure></li><li><p>叉号</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-clip-path</span>: <span class="selector-tag">polygon</span>(20% 0%, 0% 20%, 30% 50%, 0% 80%, 20% 100%, 50% 70%, 80% 100%, 100% 80%, 70% 50%, 100% 20%, 80% 0%, 50% 30%);</span><br></pre></td></tr></table></figure></li></ul><ul><li>对话框  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-clip-path</span>: <span class="selector-tag">polygon</span>(0% 0%, 100% 0%, 100% 75%, 75% 75%, 75% 100%, 50% 75%, 0% 75%);   </span><br></pre></td></tr></table></figure></li></ul><h3 id="2D-3D效果"><a href="#2D-3D效果" class="headerlink" title="2D/3D效果"></a>2D/3D效果</h3><blockquote><p>3D: 近大远小</p></blockquote><h4 id="web坐标轴"><a href="#web坐标轴" class="headerlink" title="web坐标轴"></a>web坐标轴</h4><blockquote><p>左右是x轴负、正方向<br>上下是y轴负、正方向<br>朝外朝内是z轴正负方向</p></blockquote><p><code>transform-style</code>: 指定嵌套元素如何在3d空间中呈现 (写给父级,作用于子元素)<br>属性值:</p><ul><li><p>flat(默认值): 所有子元素在2D平面呈现</p></li><li><p>preserve-3d: 表示所有子元素在3D空间中呈现</p></li></ul><h4 id="过渡效果"><a href="#过渡效果" class="headerlink" title="过渡效果"></a>过渡效果</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transition</span>: 变化的属性 过渡时间 时间曲线 开始时间</span><br></pre></td></tr></table></figure><ul><li><p>变化的属性: 所有属性过渡效果一样时可以用 all 代表，不相同则需逗号隔开重写</p></li><li><p>过渡时间: s为单位，必须写，包括0</p></li><li><p>时间曲线: <code>linear 匀速</code> <code>ease 变慢</code> <code>ease-in 加速</code> <code>ease-out 减速</code> <code>ease-in-out 先加速后减速</code> </p></li><li><p>开始时间: s为单位，必写</p></li><li><p>transition 要写在变化的元素内而不是元素的 hover 内</p></li></ul><h4 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translate</span>(<span class="selector-tag">xxpx</span> <span class="selector-tag">xxpx</span>); 第一个为<span class="selector-tag">x</span>轴方向移动距离,第2个为<span class="selector-tag">y</span>轴方向移动距离</span><br></pre></td></tr></table></figure><p><code>盒子居中新方法</code>: left、top(浏览器一般长度) 然后 transform: translate(-盒子一半宽度,-盒子一半长度) <code>transform: translate(-50%,-50%);</code></p><p>注意：</p><ul><li><p>translate 如果用百分比则是以元素本身长宽为基准</p></li><li><p>translate <code>对于行内元素是无效的</code></p></li><li><p>translate 先移动、后翻转效果更好</p></li></ul><hr/><ul><li><p>translateX: 沿x轴移动</p></li><li><p>translateY: 沿y轴移动</p></li><li><p>translateZ: 沿Z轴移动(一般用px单位)</p></li><li><p>translate3d(x方向的偏移，y方向的偏移，z方向的偏移)</p></li></ul><h4 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">scale</span>(任何正整数);    0<span class="selector-tag">-0</span><span class="selector-class">.99</span>是缩小 大于1是放大倍数、放大1倍</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">scale</span>(任何正整数,任何正整数);  0<span class="selector-tag">-0</span><span class="selector-class">.99</span>是缩小 大于1是放大倍数、放大1倍</span><br></pre></td></tr></table></figure><ul><li><p>scale缩放最大的优势: 可以设置转换中心点缩放的,而且不影响其他盒子</p></li><li><p>scale3d(x方向的缩放，y方向的缩放，z方向的缩放)</p></li></ul><h4 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">rotate</span>(<span class="selector-tag">xxdeg</span>); <span class="selector-tag">deg</span>是度数单位 </span><br></pre></td></tr></table></figure><ul><li><p>rotateX: 绕x轴旋转</p></li><li><p>rotateY: 绕y轴旋转</p></li><li><p>rotateZ: 绕z轴旋转</p></li><li><p>rotate3d(x方向向量,y方向向量,z方向向量,旋转角度)  xyz代表旋转轴矢量 rotate3d(1,0,0,45deg);</p></li></ul><p>改变旋转中心: </p><ul><li>transform-origin: xxpx xxpx 或者 方位词 方位词;(ps:方位词- top right bottom left) (写在<code>变化元素标签</code>内，而不是动作内)</li></ul><h4 id="倾斜"><a href="#倾斜" class="headerlink" title="倾斜"></a>倾斜</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">skew</span>(<span class="selector-tag">xxdeg</span> <span class="selector-tag">xxdeg</span>); </span><br></pre></td></tr></table></figure><p>属性: </p><ul><li><p>第一个为x轴方向倾斜,正值向右负值向左</p></li><li><p>第二个为y轴倾斜方向,正值向上负值向下</p></li></ul><h4 id="透视"><a href="#透视" class="headerlink" title="透视"></a>透视</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">perspective</span>: <span class="selector-tag">xxpx</span>;</span><br></pre></td></tr></table></figure><ul><li><p><code>perspective 写在被观察元素的父盒子上</code></p></li><li><p>perspective 代表着观察者眼睛到屏幕的距离,赋予3d效果</p></li><li><p><code>数值越小透视效果越好</code> <code>数值越大透视效果越差</code> 值越小元素越大</p></li><li><p>perspective-origin: xxpx  xxpx; 设置观察的角度</p></li></ul><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><h4 id="引用动画"><a href="#引用动画" class="headerlink" title="引用动画"></a>引用动画</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">animation</span>: 动画名称(<span class="selector-tag">name</span>) 持续时间(<span class="selector-tag">duration</span>) 运动曲线(<span class="selector-tag">timing-function</span>) 何时开始(<span class="selector-tag">delay</span>) 播放次数(<span class="selector-tag">iteration-count</span>) 是否反向(<span class="selector-tag">direction</span>) 动画起始或者结束的状态(<span class="selector-tag">fill-mode</span>);</span><br></pre></td></tr></table></figure><ul><li><code>动画名称(name) 持续时间(duration) 必须写</code></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200514100150.png"></p><p><code>animation-fill-mode: 设置动画结束的状态</code></p><p>属性值: </p><ul><li>forward: 动画结束时保持状态 backward 动画结束时不保持状态，在设置了动画延时的前提下，如果动画有初始状态，那么会立刻进行到初始状态  </li><li>both: 会保留动画结束的初始状态,在设置了动画延时的前提下，如果动画有初始状态，那么会立刻进行到初始状态 </li></ul><p><code>animation-play-state: running(paused)设置动画播放状态</code> <code>[上面图片中的写错了、是running和paused]</code></p><ul><li>动画持续时间还有个属性值为steps(n)就是将动画分为n步执行</li><li>布局时为了防止浏览器缩小时两个元素重叠，可以将两个元素先定位到相反的位置，然后再用 translate 移动到目的位置</li><li>实现打字动画效果，可以先将完整文字图片的宽度改为0，再利用 transform 将宽度改回来，并用 steps 分步执行</li><li>如果需要添加多个动画，用<code>逗号隔开</code> <code>animation: move 0.5s,fly 0.5s</code></li></ul><p><code>transition-timing-function</code>: 属性规定过渡效果的速度曲线。</p><table><thead><tr><th>linear</th><th>规定以相同速度开始至结束的过渡效果（等于 cubic-bezier(0,0,1,1)）。</th></tr></thead><tbody><tr><td>ease</td><td>规定慢速开始，然后变快，然后慢速结束的过渡效果（cubic-bezier(0.25,0.1,0.25,1)）。</td></tr><tr><td>ease-in</td><td>规定以慢速开始的过渡效果（等于 cubic-bezier(0.42,0,1,1)）。</td></tr><tr><td>ease-out</td><td>规定以慢速结束的过渡效果（等于 cubic-bezier(0,0,0.58,1)）。</td></tr><tr><td>ease-in-out</td><td>规定以慢速开始和结束的过渡效果（等于 cubic-bezier(0.42,0,0.58,1)）。</td></tr><tr><td>cubic-bezier(<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>)</td><td>在 cubic-bezier 函数中定义自己的值。可能的值是 0 至 1 之间的数值。</td></tr></tbody></table><h4 id="定义动画"><a href="#定义动画" class="headerlink" title="定义动画"></a>定义动画</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> 动画名称</span><br><span class="line">&#123;</span><br><span class="line"><span class="selector-tag">from</span> &#123;&#125;   </span><br><span class="line"><span class="selector-tag">to</span> &#123;&#125;       </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">或者 </span><br><span class="line">&#123;</span><br><span class="line">百分数 &#123;&#125; </span><br><span class="line">百分数 &#123;&#125; </span><br><span class="line">百分数 &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>from to 等同于 0% 100%</p></li><li><p>时间曲线同 transition</p></li><li><p>播放次数:<code>infinite 无限次播放</code></p></li></ul><p>方向: </p><ul><li><code>normal</code> 正常方向</li><li><code>reverse</code> 反方向</li><li><code>alternate</code> 先正常后反方向，不断交替</li><li><code>alternate-reverse</code>:  先反方向再正常，不断交替</li></ul><h3 id="多列布局"><a href="#多列布局" class="headerlink" title="多列布局"></a>多列布局</h3><ul><li><p>column-count: 设置分成的列数</p></li><li><p>column-rule: 宽度 线条样式 颜色;  设置列之间的样式</p></li><li><p>column-gap: xxpx;  设置列之间的距离</p></li><li><p>column-width: 设置每一列的宽度  如果设置宽度比当前列数所默认的宽度小，则不改变，如果比较大，则取其值并铺满整个浏览器;</p></li><li><p>column-span: 设置某个元素跨越的列数，只有1和all两个选项;</p></li></ul><h3 id="BFC-块级格式化上下文"><a href="#BFC-块级格式化上下文" class="headerlink" title="BFC(块级格式化上下文)"></a>BFC(块级格式化上下文)</h3><blockquote><p>是一个独立的渲染区域,只有 Block-Level Box  参与,它规定了内部的 Block-Level Box 如何布局，并且与这个区域外部毫不相干</p></blockquote><p>具有BFC条件的元素模式: block、list-item、table</p><p>触发BFC的属性: </p><ul><li>float 属性不为 none</li><li>position 为 absolute 或 fixed</li><li>display 为 inline-block、table-cell、table-caption、flex、inline-flex</li><li>overflow 不为 visible</li></ul><h4 id="BFC特性"><a href="#BFC特性" class="headerlink" title="BFC特性"></a>BFC特性</h4><ul><li>BFC中，盒子从顶端垂直的一个接一个排列</li><li>属于同一个BFC的两个相邻盒子的 margin 会发生重叠   </li><li>BFC中，每一个盒子的左外边缘会触碰到容器的左边缘</li><li>BFC的区域不会与浮动盒子产生交集，而是紧贴浮动边缘(用于产生浮动盒子旁边的自适应盒子)</li><li>计算BFC的高度时，自然也会检测浮动的盒子高度(用于清除浮动)</li></ul><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ul><li><p>清除浮动<br>  给父盒子激活BFC就可以</p></li><li><p>解决外边距合并<br>  用另一个BFC盒子将两个盒子中的一个包起来，即可解决</p></li><li><p>产生浮动盒子旁的自适应盒子<br>  将新盒子激活BFC，就不会跑到浮动盒子下面，而是与其紧贴</p></li></ul><h3 id="渐进增强"><a href="#渐进增强" class="headerlink" title="渐进增强"></a>渐进增强</h3><blockquote><p>构建网站时先满足低版本再考虑高版本</p></blockquote><h3 id="优雅降级-与上者相反"><a href="#优雅降级-与上者相反" class="headerlink" title="优雅降级: 与上者相反"></a>优雅降级: 与上者相反</h3><h3 id="浏览器前缀"><a href="#浏览器前缀" class="headerlink" title="浏览器前缀"></a>浏览器前缀</h3><ul><li><p>-webkit-: chrome ，safari，android，browser</p></li><li><p>-moz-: firefox</p></li><li><p>-o-: opera</p></li><li><p>-ms-: ie，edge</p></li><li><p>-khtml-: konqueror</p></li></ul><h3 id="背景颜色渐变"><a href="#背景颜色渐变" class="headerlink" title="背景颜色渐变"></a>背景颜色渐变</h3><blockquote><p>因为兼容性问题严重，所以需要加浏览器前缀</p></blockquote><p>线性渐变: </p><ul><li><p>background: <code>-浏览器前缀-linear-gradient(渐变起始位置， 起始颜色， 结束颜色);</code></p></li><li><p>background: <code>-浏览器前缀-linear-gradient(渐变起始位置， 起始颜色 百分比， 结束颜色 百分比);用渐变起始位置就需要加浏览器前缀</code></p></li><li><p>background: <code>linear-gradient(point/angle,颜色 位置，颜色 位置 颜色 位置....)</code></p></li><li><p>point: <code>to left(从右到左),to right,to top,to bottom(默认值)</code></p></li><li><p>angle: <code>对应上面为270deg，90deg，0deg，180deg</code></p></li><li><p>用 <code>point/angle</code> 就不用加浏览器前缀</p></li></ul><p>径向渐变</p><ul><li><p>background: <code>radial-gradient(形状 大小 发散位置，颜色 位置，颜色 位置，颜色 位置，。。。);</code></p></li><li><p>形状: <code>默认为ellipse(即自动适配当前形状)，circle(圆形)</code></p></li><li><p>大小: <code>closest-corner、closest-side、farthest-corner、farthest-side</code></p></li><li><p>发散位置: <code>at xxpx xxpx 或 at 方位词 方位词(默认在正中心)</code></p></li></ul><p>重复渐变</p><ul><li>repeating-radial(linear)-gradient: <code>属性值同上</code></li></ul><h3 id="三大标签优化"><a href="#三大标签优化" class="headerlink" title="三大标签优化"></a>三大标签优化</h3><h4 id="Title"><a href="#Title" class="headerlink" title="Title"></a>Title</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure><p>长度: google(35中文) baidu(28个中文)</p><p>最先出现的词语的权重越高</p><p>建议: 首页标题: 网站名(产品名)-网站的介绍</p><h4 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;内容&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>搜索结构的部分摘要，即简要说明我们的网站是做什么的</p><p>注意: 不要超过120个汉字，用英文逗号</p><h4 id="Keyword"><a href="#Keyword" class="headerlink" title="Keyword"></a>Keyword</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keyword&quot;</span> <span class="attr">content</span>=<span class="string">&quot;内容&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>页面关键词，搜索引擎关注点之一，限制在6-8个关键词左右</p><h3 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h3><p>国内大部分浏览器内核都是根据 Webkit 修改过来的内核</p><p>总结:兼容移动主流浏览器，处理 webkit 内核浏览器即可</p><h4 id="视口"><a href="#视口" class="headerlink" title="视口"></a>视口</h4><ol><li><p>布局视口(layout viewport)</p><p>一般浏览器都默认设置了一个布局视口，用于解决早期的PC端页面在手机上显示的问题</p><p>一般为980px <code>document.documentElement.clientWidth</code></p></li><li><p>视觉视口</p></li></ol><p>​    用户正在看到的网站的区域</p><ol start="3"><li><p>理想视口</p><p>设备有多宽,屏幕就有多宽</p><p><code>meta</code>视口标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0,user-scalable=no,maximum-scale=1.0,minimum-scale=1.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>分别代表 <code>宽度</code>、<code>初始缩放比</code>、<code>用户是否可以缩放</code>、<code>最大缩放</code>、<code>最小缩放</code></p></li></ol><h4 id="物理像素-amp-物理像素比"><a href="#物理像素-amp-物理像素比" class="headerlink" title="物理像素&amp;物理像素比"></a>物理像素&amp;物理像素比</h4><blockquote><p> 物理像素点:指的是屏幕显示的最小颗粒，是物理真实存在的</p></blockquote><p>注意:</p><ul><li><p>开发时写的 1px 不一定等于 1 个物理像素</p></li><li><p>pc 端: 1px = 1 物理像素 </p></li><li><p>移动端 1px = 1、2、3 物理像素等等( 2 最常见)</p></li><li><p>物理像素比:  px 能显示的物理像素点的个数</p></li><li><p>pc 和移动端中，1px 的大小都是一样的,但是 1px 包含的像素点不同, pc 中图片是满足 pc 的，但到了移动端后增在物理像素点层面上扩大了两倍，导致模糊,所以只有选择 pc 端上放大两倍的图片，并设置高宽确保大小一致,物理像素点层面上扩大两倍仍是 pc 端原图大小，不会变模糊。</p></li></ul><h4 id="二倍图"><a href="#二倍图" class="headerlink" title="二倍图"></a>二倍图</h4><p>对于 <code>50px*50px</code> 的图片,在手机屏打开会被放大，导致模糊</p><p>所以可以用<code>100px*100px</code>的图片，然后大小改为 <code>50*50</code> 即可</p><p>即在将图片在所需要的大小基础放大两倍并在属性设置中将大小设置为目标大小</p><h4 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h4><h5 id="移动端开发主流方案"><a href="#移动端开发主流方案" class="headerlink" title="移动端开发主流方案"></a>移动端开发主流方案</h5><ol><li><p>单独制作移动端页面(主流,包括流式布局、flex 弹性布局、less + rem + 媒体查询布局、混合布局)</p></li><li><p>响应式页面(只制作一个页面，根据设备不同自适应，包括媒体响应和 bootstrap)</p></li></ol><h5 id="移动端技术解决方案"><a href="#移动端技术解决方案" class="headerlink" title="移动端技术解决方案"></a>移动端技术解决方案</h5><p>浏览器私有前缀只需要考虑添加 webkit，因为移动端浏览器以 webkit为主,对 h5 和 css3 支持性好</p><p>CSS 初始化选择 <code>normalize.css</code></p><p>pc 端如果需要完全兼容,就用传统 CSS 盒模型(content-box)</p><p>如果不考虑，则用 CSS3 盒子模型(border-box)</p><p>特殊样式:</p><ul><li><p><code>-webkit-box-sizing: border-box</code></p></li><li><p><code>-webkit-tap-highlight-color: transparent; </code>   取消点击链接时的背景色</p></li><li><p><code>-webkit-appearance: none; </code>  ios中取消样式后才能对按钮和输入框的样式进行设置</p></li><li><p><code>-webkit-touch-callout: none;</code>      取消长按链接或图片时出现的菜单列表</p></li></ul><h4 id="流式布局-百分比布局"><a href="#流式布局-百分比布局" class="headerlink" title="流式布局(百分比布局)"></a>流式布局(百分比布局)</h4><p>移动端一般采用流式布局(百分比布局)</p><ol><li><p>高度定死,宽度自适应</p></li><li><p>对于大的轮播图等,宽度100%自适应</p></li><li><p>对于小图标挥着文本,一般都是固定宽高大小</p></li></ol><p>流式布局的缺点: 对于大屏幕来说,用户体验并不是特别好,有些布局元素会显得很长</p><p>使用： 即将盒子的宽度设置成百分比来根据屏幕的宽度来进行伸缩,不收固定像素的限制，内容向两侧填充</p><p>重点: 应设置 <code>max-width(max-height)</code>、<code>min-width(min-height)</code>两个属性</p><h4 id="rem布局"><a href="#rem布局" class="headerlink" title="rem布局"></a>rem布局</h4><p><code>em</code>: 相对于父元素字体大小倍数的单位</p><p>例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">  font-size: 50px;</span><br><span class="line">&#125;</span><br><span class="line">a &#123;</span><br><span class="line">  font-size: 2em</span><br><span class="line">&#125;    </span><br><span class="line">&#x2F;*</span><br><span class="line">若div字体大小为50px   </span><br><span class="line">a字体大小设置为2em则a字体大小为100px</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><p><code>rem</code>: 相对于html元素(根元素)的字体大小倍数的单位</p><p>例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">html 字体大小为 50px </span><br><span class="line">其子元素div字体大小为 2rem </span><br><span class="line">则div字体大小为 100px</span><br></pre></td></tr></table></figure><p><code>vw / vh</code>: 把屏幕分为100份, 1vw等于屏幕宽的1%</p><hr/><p>注意：要给body重置一下<code>font-size: 16px;</code></p><p>rem布局的本质是等比缩放</p><h4 id="less"><a href="#less" class="headerlink" title="less"></a>less</h4><blockquote><p>css弊端: 1.冗余度高 2.维护成本高 3.没有很好的计算能力 </p></blockquote><p>less: 是一门 css 扩展语言，也成为 css 预处理器</p><p>引入了变量，mixin(混入)、运算以及函数等功能</p><ul><li><p>less变量定义: <code>@变量名: 值；</code> 值可以是任意 css 属性值，如：尺寸大小<code>@num: 100px</code></p><p>注意: </p><ol><li>大小写区分 </li><li>不能以数字开头 </li><li>不能有特殊符号</li></ol></li><li><p>less变量引用，直接<code>@变量名</code>即可</p></li><li><p>less嵌套</p><p>子元素样式直接写到父元素嵌套里</p><p>如果是伪类、交集选择器、伪元素选择器等父元素子元素之间有特殊符号的，则需要加上<code>&amp;</code></p><p>例</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;  </span><br><span class="line">    <span class="selector-tag">a</span>&#123;<span class="selector-tag">xxxx</span>&#125;  </span><br><span class="line">&#125; <span class="comment">/*代表div a &#123;&#125;;*/</span> </span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;   </span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-tag">hover</span> &#123;&#125; </span><br><span class="line">&#125; <span class="comment">/*代表div:hover*/</span></span><br></pre></td></tr></table></figure></li><li><p>less运算</p><p>less可以使用<code>+ -  * /</code> 运算符号</p><p><code>~</code>可以避免编译</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="string">~&#x27;calc(300px -30px)&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#main</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">300px</span> -<span class="number">30px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>颜色大小都可以运算 <code>#010203 *2 结果为 #020406</code></p><p>运算符左右必须空格隔开</p><p><code>两个数参与运算，只有一个有单位，则结果单位与其相同</code></p><p><code>两个数参与运算，量个数都有单位且不一样，则结果与第一个数的单位相同</code></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@num:</span> <span class="number">100px</span></span><br><span class="line">div&#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10em</span> + <span class="variable">@num</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">110em</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注: less 中可以用 @import 引入其他 less 文件 如 <code>@import:url(xxxx.less);</code></p></li></ul><ul><li><p>函数</p><p><code>round() 四舍五入</code> <code>例: round(3.52px) 为 4px</code></p><p><code>percentage() 百分比</code> <code>例 percentage(0.2) 为 20%</code></p><p><code>sqrt() 开平方</code></p><p>简单的自定义函数</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@function</span> sun($n,$m)&#123;</span><br><span class="line">  <span class="variable">@return</span> $n + $m</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>混入</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.show</span> &#123; <span class="attribute">display</span>:block; &#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123; <span class="attribute">width</span>: <span class="number">100px</span>; <span class="selector-class">.show</span>; &#125;</span><br><span class="line"><span class="comment">/*np</span></span><br><span class="line"><span class="comment">.show &#123; display:block; &#125;</span></span><br><span class="line"><span class="comment">.box &#123; width: 100px; display:block; &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.show1</span>() &#123; <span class="attribute">display</span>:block; &#125;</span><br><span class="line"><span class="selector-class">.box1</span> &#123; <span class="attribute">width</span>: <span class="number">100px</span>; <span class="selector-class">.show1</span>(); &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">.box1 &#123; width: 100px; display:block; &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.show2</span>(<span class="variable">@color</span>) &#123; <span class="attribute">display</span>:block; <span class="attribute">color</span>: <span class="variable">@color</span>;&#125;</span><br><span class="line"><span class="selector-class">.box2</span> &#123; <span class="attribute">width</span>: <span class="number">100px</span>; <span class="selector-class">.show1</span>(blue); &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">.box2 &#123; width: 100px; display:block; color:blue &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>命名空间</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#nm</span>()&#123; <span class="selector-class">.show</span>&#123; <span class="attribute">display</span>: inline-block; &#125; &#125;</span><br><span class="line"><span class="selector-class">.box3</span>&#123; <span class="selector-id">#nm</span><span class="selector-class">.show</span> &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">.box3&#123; display: inline-block; &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>继承</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.line</span> &#123; <span class="attribute">display</span>: inline; &#125;</span><br><span class="line"><span class="selector-class">.box4</span>&#123; <span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.line)</span>; &#125;</span><br><span class="line"><span class="selector-class">.box5</span>&#123; <span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.line)</span>; &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">.line</span></span><br><span class="line"><span class="comment">.bo4</span></span><br><span class="line"><span class="comment">.box5&#123;</span></span><br><span class="line"><span class="comment">  display: inline;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>合并</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box6</span>&#123;</span><br><span class="line">  <span class="selector-tag">background</span>+: <span class="selector-tag">url</span>(./<span class="number">1</span>.png);</span><br><span class="line">  <span class="selector-tag">background</span>+: <span class="selector-tag">url</span>(./<span class="number">2</span>.png);</span><br><span class="line">  <span class="selector-tag">transform</span>+<span class="selector-tag">_</span>: <span class="selector-tag">scale</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="selector-tag">transform</span>+<span class="selector-tag">_</span>: <span class="selector-tag">rotate</span>(<span class="number">30deg</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">.box6&#123;</span></span><br><span class="line"><span class="comment">   background: url(./1.png),url(./1.png);</span></span><br><span class="line"><span class="comment">   transform: scale(1) rotate(30deg);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>媒体查询</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box7</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="keyword">@media</span> all and ( <span class="attribute">min-width</span>: <span class="number">768px</span> )&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@media all and ( min-width: 768px )&#123;</span></span><br><span class="line"><span class="comment">    .box7&#123;</span></span><br><span class="line"><span class="comment">      width: 600px;</span></span><br><span class="line"><span class="comment">    &#125;  </span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>循环</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@cout:</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.get</span>(<span class="variable">@cn</span>) <span class="keyword">when</span> (<span class="variable">@cn</span> &gt; <span class="number">4</span>)&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span> + <span class="variable">@cn</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box8</span>&#123;</span><br><span class="line">  <span class="selector-class">.get</span>(<span class="variable">@count</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">.box8&#123;</span></span><br><span class="line"><span class="comment">  width: 105px;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="rem适配方案-目的"><a href="#rem适配方案-目的" class="headerlink" title="rem适配方案(目的)"></a>rem适配方案(目的)</h4><blockquote><p>让一些不能等比自适应的元素,达到当设备尺寸发生改变时，等比例适配当前设备</p></blockquote><p><code>js方法动态修改</code></p><p>我们以 iphone6 的宽度 375 为原型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fontsize = <span class="built_in">document</span>.documentElement.clientWidth / <span class="number">3.75</span>;</span><br><span class="line"><span class="built_in">document</span>.documentElement.style.fontSize = fontsize + <span class="string">&quot;px&quot;</span>;</span><br></pre></td></tr></table></figure><p>一个快速px转换rem插件 VSCODE中搜索 <code>px to rem</code>右键配置、设置1rem等于多少px、css中通过<code>ALt+z</code>进行转换</p><p><code>rem适配方案原理</code></p><p>使用媒体查询根据不同设备按比例设置 html 的字体大小，然后页面元素使用 rem 做尺寸单位，当 html 字体大小变化元素尺寸也会发生变化，从而达到等比例缩放的适配</p><p><code>实际开发适配方案步骤</code></p><p>先利用媒体查询，按照初始设计稿的宽度与 html 字体大小的比例，动态的根据当前的尺寸设置 html 的字体大小。然后在 css 中，元素的长宽位置等取值按同等比例换算为rem单位的值</p><p><code>rem适配方案技术使用(市场主流)</code></p><p>技术方案1: </p><ul><li><p>利用 less 和媒体查询和 rem</p></li><li><p>先用less写媒体查询，设置各种屏幕尺寸下的 html 为大小。然后再写样式 less ，样式中的元素一般以750/10 或 750/15 为准</p></li></ul><p>技术方案2:</p><ul><li><p>flexible.js 和 rem(利用 flexible.js 省略了媒体查询的步骤)</p></li><li><p>不用写媒体查询，直接引入flexible.js，里面直接划分 10 份。注意在具体样式文件中补充媒体查询设置屏幕宽度大于 750 时 html 文字大小按 750 处理</p></li></ul><ul><li>常见屏幕尺寸</li></ul><p><code>320px</code> <code>360px</code> <code>375px</code> <code>384px</code> <code>400px</code> <code>414px</code> <code>424px</code> <code>480px</code> <code>540px</code> <code>720px</code> <code>750px</code></p><h4 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h4><blockquote><p>父盒子设置 flex 后，子元素的<code>float</code>，<code>clear</code>，<code>vertical-align</code>失效</p></blockquote><p>采用 flex 的元素,称为 flex 容器，其子元素称为 flex 项目</p><ul><li><p>父盒子先设置 <code>display: flex</code></p></li><li><p>子盒子再设置 flex: 所占份数(没有单位) 默认为 0  可以写百分比(相对于父盒子)</p><p><code>当某一子盒子设置宽度后则无法进行缩放，其余盒子的缩放是在该盒子之外的区域划分</code></p></li><li><p>flex-direction: column(垂直方向) row(水平方向,默认) column-reverse  row-reverse</p></li><li><p>justify-content: 调整主轴(<code>即flex-direction设置的方向</code>)对齐</p><p>属性值: </p><ol><li><code>flex-start</code>: 子元素从父元素开头排列 </li><li><code>flex-end</code>: 子元素从容器尾部开始排列 </li><li><code>center</code>: 子元素在父容器中间显示 </li><li><code>space-between</code>: 盒子之间加间距 </li><li><code>space-around</code>: 盒子添加左右间距</li></ol></li><li><p><code>align-items</code>: 调整侧轴方向的对齐方式(即非 flex-direction 设置的方向)</p><p>属性值</p><ol><li><code>center</code>: 垂直居中 </li><li><code>flex-start</code>: 顶部对齐  </li><li><code>flex-end</code>: 底部对齐 </li><li><code>stretch</code>: 拉伸使其高度与父盒子相同</li></ol></li><li><p><code>align-self</code>: 调整单个元素在侧轴方向上的对齐方式</p></li><li><p><code>align-content</code>: 设置多行盒子垂直部分(单行下没有效果，多了 space 两个属性)</p><p>必须先写<code>flex-flow: row wrap;</code> </p><p>属性值: </p><ol><li><p><code>center</code>: 垂直居中 </p></li><li><p><code>flex-start</code>: 顶部对齐  </p></li><li><p><code>flex-end</code>: 底部对齐 </p></li><li><p><code>space-around</code>: 盒子添加左右间距</p></li><li><p><code>space-between</code>: 盒子之间加间距 </p></li><li><p><code>stretch</code>: 拉伸使其高度与父盒子相同</p></li></ol></li><li><p><code>flex-wrap</code>: 设置多出的盒子显示方式</p><p>属性值: </p><ol><li><p><code>wrap</code>: 换行显示</p></li><li><p><code>nowrap</code>: 不换行压缩显示( 默认)</p></li><li><p><code>wap-reverse</code>: 反向换行显示</p></li></ol></li><li><p><code>flex-flow flex-dircetion</code> 和 <code>flex-wrap</code>的简写</p><p><code>flex-flow: flex-direction   flex-wrap</code></p></li><li><p><code>flex-grow</code>: 设置多余空间的分配比例 默认值为 1</p></li><li><p><code>flex-shrink</code>: 设置缺乏的空间的分配比例，即减去按比例分配缺少的空间的数值。默认值为 0；</p></li><li><p>order属性  用来控制子项目的排列顺序，数字越小拍的越前越大拍得越后，可以用负整数</p><p>order: 整数</p></li><li><p>常见flex布局思路</p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200502203818.png"></p><h4 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h4><h5 id="媒体查询-media-query"><a href="#媒体查询-media-query" class="headerlink" title="媒体查询(media query)"></a>媒体查询(media query)</h5><p>利用媒体查询,即media queries ,可以针对不同的媒体类型定义不同的样式，从而实现响应式布局</p><p><code>媒体类型</code></p><table><thead><tr><th>取值</th><th>含义</th></tr></thead><tbody><tr><td><code>all</code></td><td>用于所有设备。</td></tr><tr><td><code>print</code></td><td>用于打印机和打印预览。</td></tr><tr><td><code>screen</code></td><td>用于电脑屏幕，平板电脑，智能手机等。</td></tr><tr><td><code>speech</code></td><td>应用于屏幕阅读器等发声设备。</td></tr></tbody></table><p>利用 <code>@media</code> 查询，可以针对不同的媒体类型定义不同的样式</p><p><code>@media</code> 可以针对不同的屏幕尺寸设置不同的样式</p><p>语法: </p><p><code>@media mediatype and|only|not (media feature) &#123;css-code;&#125;</code></p><p>注意: </p><ol><li><p><code>@media</code>开头不可或缺</p></li><li><p>media feature 媒体特性 必须有小括号包含</p></li></ol><ul><li><p><code>mediatype查询类型</code>: 将不同的终端设备划分不同的类型，称为媒体类型，包括: </p><p><code>all 用于所有设备</code></p><p><code>print 用于打印架和打印预览</code></p><p><code>screen 用于电脑屏幕、平板电脑、智能手机等(最常用)</code></p></li></ul><ul><li><p>关键字:将媒体类型或多个媒体类型特性连接到一起作为媒体查询的条件</p><p><code>and</code>: 连接多个媒体特性</p><p><code>not</code>: 排除某个媒体特性</p><p><code>only</code>: 指定某个特定的媒体类型</p></li><li><p>媒体特性: 根据不同媒体类型的媒体特性来展示不同的风格</p><p><code>width</code>: 当指定 mediatype 宽度为某个值时，css-code 样式起效</p><p><code>max-width</code>: 当指定 mediatype 宽度小于这个值时，css-code 样式起效</p><p><code>min-width</code>: 但指定mediatype宽度大于这个值时，样式起效</p></li><li><p>利用 rem+媒体查询 来实现元素样式动态变化</p><p>即利用媒体查询设置 html 字体大小随浏览器宽度变化，再在具体元素样式中设置样式宽高度为 xxrem，即可实现元素样式动态变化</p></li></ul><ul><li><p>引入资源</p><p>即利用媒体查询 在link 中判断设备的尺寸，然后引用不同的 css 文件</p><p>语法规范: </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link=&quot;stylesheet&quot;</span> <span class="attr">media</span>=<span class="string">&quot;media type and|not|only (media features)&quot;</span> <span class="attr">href</span>=<span class="string">&quot;xx.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line"><span class="tag">&lt;<span class="name">link=&quot;stylesheet&quot;</span> <span class="attr">media</span>=<span class="string">&quot;all and (min-width: 768px)&quot;</span> <span class="attr">href</span>=<span class="string">&quot;xx.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意不需要@media</p></li></ul><blockquote><p>利用媒体查询针对不同宽度的设备进行布局和样式的设置，从而设配不同设备的目的</p></blockquote><table><thead><tr><th>设备划分</th><th>尺寸区间</th></tr></thead><tbody><tr><td>超小屏幕(手机)</td><td><code>&lt; 768px</code></td></tr><tr><td>小屏设备(平板)</td><td><code>&gt;= 768px ~ &lt; 992px</code></td></tr><tr><td>中等屏幕(桌面显示器)</td><td><code>&gt;= 992px ~ &lt; 1200px</code></td></tr><tr><td>宽屏设备(大桌面显示器)</td><td><code>&gt;= 1200px</code></td></tr></tbody></table><h5 id="响应式布局容器"><a href="#响应式布局容器" class="headerlink" title="响应式布局容器"></a>响应式布局容器</h5><blockquote><p>响应式需要一个父级作为布局容器，来配合子级元素来实现变化效果</p></blockquote><p>原理: 不同屏幕下，通过媒体查询来改变这个布局容器的大小，再改变里面子元素的排列方式和大小，从而实现不同屏幕下，看到不同的页面布局和样式变化</p><p>平时我们的响应式尺寸划分</p><ul><li>超小屏幕(手机, 小于 768px ) : 设置宽度为 100%</li><li>小屏幕(平板, 大于等于 768px ) ;设置宽度为 750px</li><li>中等屏幕 (桌面显示器,大于等于 992px ) :宽度设置为 970px</li><li>大屏幕 (大桌面显示器,大于等于 1200px) :宽度设置为 170px</li></ul><h4 id="PostCSS"><a href="#PostCSS" class="headerlink" title="PostCSS"></a>PostCSS</h4><blockquote><p>PostCSS本身是一个功能比较单一的工具。它提供了一种方式用JavaScript代码来处理CSS。利用PostCSS可以实现- -些T程化的操作,如:自动添加浏览器前缀，代码合并,代码压缩等。<br>官方网址: <a href="https://postcss.org/">https://postcss.org/</a></p></blockquote><p>安装:</p><ol><li><p>安装node环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install postcss-cli -g</span><br></pre></td></tr></table></figure></li><li><p><code>-o 、 -w</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># postcss 转换前的文件位置 -o 转换后的文件位置</span></span><br><span class="line">postcss src/demo.css -o dist/demo.css</span><br></pre></td></tr></table></figure></li><li><p><code>postcss.config.js</code>  在转换前的位置下创建</p></li></ol><p>常见插件:</p><p>需要<code>npm install 插件名</code></p><ul><li><p>autoprefixer <code>添加浏览器前缀</code></p><p>编辑 <code>postcss.config.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> autoprefixer = <span class="built_in">require</span>(<span class="string">&#x27;autoprefixer&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    autoprefixer(&#123;</span><br><span class="line">      browsers: [<span class="string">&#x27; &gt; 0% &#x27;</span>] <span class="comment">// 所有浏览器</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>postcss-import <code>多文件css合并</code></p><p>编辑 <code>postcss.config.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> postcssImport = <span class="built_in">require</span>(<span class="string">&#x27;postcss-import&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">   postcssImport</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>cssnano <code>压缩css</code></p><p>编辑 <code>postcss.config.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cssnano = <span class="built_in">require</span>(<span class="string">&#x27;cssnano&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">   cssnano</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>postcss-cssnext <code>浏览器兼容性处理</code></p><p>编辑 <code>postcss.config.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cssnext = <span class="built_in">require</span>(<span class="string">&#x27;postcss-cssnext&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">   cssnext</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>stylelint <code>语法检测</code></p><p>查阅官网使用 <a href="https://stylelint.io/user-guide/rules">https://stylelint.io/user-guide/rules</a></p></li><li><p>postcss-sprites <code>精灵图合并</code></p></li></ul><h3 id="CSS新特性"><a href="#CSS新特性" class="headerlink" title="CSS新特性"></a>CSS新特性</h3><h4 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h4><blockquote><p>CSS自定义属性(也称为”CSS 变量”) ,在目前所有的现代浏览器中都得到了支持。</p></blockquote><ul><li><p>定义与使用</p><p><code>:root</code>声明、<code>--属性名</code>定义属性名、<code>var(变量名)</code>使用变量名</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span>&#123;</span><br><span class="line">  <span class="attribute">--color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#box</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>计算</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span>&#123;</span><br><span class="line">  <span class="attribute">--number</span>: <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#box</span>&#123;</span><br><span class="line">  <span class="comment">/* 没有单位可以通过 calc 计算并且乘1px */</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(var(--number) * <span class="number">1px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>默认值</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#box</span>&#123;</span><br><span class="line">  <span class="comment">/* 因为 --number 不存在、所以默认 100px */</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">var</span>(--number,<span class="number">100px</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>作用域</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span>&#123;</span><br><span class="line">  <span class="attribute">--color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#box</span>&#123;</span><br><span class="line">  <span class="attribute">--color</span>: blue;</span><br><span class="line">  <span class="comment">/* 就近 显示蓝色 */</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="shapes"><a href="#shapes" class="headerlink" title="shapes"></a>shapes</h4><blockquote><p>CSS Shapes布局可以实现不规则的文字环绕效果，需要和浮动配合使用。</p></blockquote><ul><li><p>shape-outside <code>围绕方式</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shape-outside: margin-box | padding-box | content-box</span><br></pre></td></tr></table></figure></li><li><p>clip-path <code>裁剪图形</code></p></li><li><p>shape-margin <code>边距</code></p></li></ul><h4 id="scrollbar"><a href="#scrollbar" class="headerlink" title="scrollbar"></a>scrollbar</h4><blockquote><p>CSS scrollbar用于实现自定义滚动条样式。</p></blockquote><p>滚动条组成部分</p><p>图解: <a href="https://images2018.cnblogs.com/blog/940884/201808/940884-20180816152620621-1300097326.png">https://images2018.cnblogs.com/blog/940884/201808/940884-20180816152620621-1300097326.png</a></p><ol><li><p><code>::-webkit-scrollbar</code> 滚动条整体部分</p></li><li><p><code>::-webkit-scrollbar-thumb</code> 滚动条里面的小方块，能向上向下移动（或向左向右移动）</p></li><li><p><code>::-webkit-scrollbar-track</code> 滚动条的轨道（里面装有Thumb）</p></li><li><p><code>::-webkit-scrollbar-button</code> 滚动条的轨道的两端按钮，由于通过点击微调小方块的位置。</p></li><li><p><code>::-webkit-scrollbar-track-piece</code> 内层轨道，滚动条中间部分</p></li><li><p><code>::-webkit-scrollbar-corner</code> 边角，即垂直滚动条和水平滚动条相交的地方</p></li><li><p><code>::-webkit-resizer</code> 两个滚动条的交汇处上用于拖动调整元素大小的小控件</p></li></ol><h4 id="Scroll-snap"><a href="#Scroll-snap" class="headerlink" title="Scroll snap"></a>Scroll snap</h4><blockquote><p>CSS Scroll Snap (CSS滚动捕捉)允许你在用户完成滚动后多锁定特定的元素或位置。</p></blockquote><ul><li><p><code>scroll-snap-type</code>: </p><p>属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x</span><br><span class="line">mandatory</span><br></pre></td></tr></table></figure></li><li><p><code>scroll-snap-align</code> </p><p>属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">start</span><br><span class="line">center</span><br><span class="line">end</span><br></pre></td></tr></table></figure></li></ul><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p><a href="/case/Spotlight_effect.html">纯CSS实现的聚光灯效果</a><br><a href="/case/Gradient_label.html">渐变色标签 过渡效果</a></p><h2 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h2><div class="note danger"><p>图片来自B站的一位UP主</p></div><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/head.png"><br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/cssselector.png"><br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/flexbox.png"><br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/grid.png"></p>]]></content>
      
      
      <categories>
          
          <category> Web教程 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML学习</title>
      <link href="/posts/9ca22a28/"/>
      <url>/posts/9ca22a28/</url>
      
        <content type="html"><![CDATA[<h2 id="HTML学习"><a href="#HTML学习" class="headerlink" title="HTML学习"></a>HTML学习</h2><div class="note danger"><p>本教程里的资料来源于网友的资料，自己整理以供学习。视频学习：<a href="https://www.bilibili.com/video/BV1pE411q7FU">黑马程序员</a></p></div><h3 id="什么是HTML"><a href="#什么是HTML" class="headerlink" title="什么是HTML?"></a>什么是HTML?</h3><div class="note info"><p>HTML：超文本标签语言、注意：H5并不是新语言，而是Html语言的第五个版本</p></div><p><strong>支持：</strong></p><ul><li>所有主流浏览器都支持H5(Chrome，Firefox，Safari …)</li><li>IE9(部分支持）及以上支持H5，但是IE8(完全不支持)及以下不支持H5</li></ul><p><strong>增加了新特性:</strong></p><ul><li>语义特性(aside、nav、header、footer…)</li><li>本地存储特性(localStorage、sessionStorage)</li><li>网页多媒体(video、audio）</li><li>二维三维(transform)</li><li>特效</li></ul><h4 id="HTML的基本骨架"><a href="#HTML的基本骨架" class="headerlink" title="HTML的基本骨架"></a>HTML的基本骨架</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--根标签/根节点--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!--用于存放title、meta、base、style、script、link--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!--标题标签--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!--主体标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note success"><p>vscode 快速生成 html 骨架：</p></div><ul><li>!后tab</li><li>*快速生成必备插件：emmet</li></ul><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p><code>&lt;!DOCTYPE xxx&gt;（DTD）</code>：文件类型定义，用于告诉浏览器该用什么规范解析文件，必须写在HTML文档第一行、如：<!DOCTYPE html>说明使用的是H5版本</p><p><code>严格模式</code>：又称标准模式，指浏览器按照W3C标准解析代码</p><p><code>混杂模式</code>：又称怪异模式或兼容模式，值浏览器按照自己的方式解析代码</p><p><code>如何区分？</code>：看DTD，如果文档包含严格的DOCTYPE，那么一般以严格模式呈现。(严格DTD–严格模式);如果包含过渡DTD和URI(统一资源标识符)的DOCTYPE，也以严格模式呈现。但有过渡DTD而没有URI会导致页面以混杂模式呈现。(有URI的过渡DTD——严格模式;没有URI的过渡DTD——混杂模式);DOCTYPE不存在或形式不正确会导致文档以混杂模式呈现(DTD不存在或者格式不正确——混杂模式);HTML5没有DTD，没有严格模式与混杂模式的区别；<strong>区分意义</strong>：如果只有严格模式，那么旧网站会受到影响，如果只有混杂模式，那么就会回到浏览器大战的混乱，每个浏览器都有自己的解析模式</p><p><code>严格模式与混杂模式的解析不同点：</code></p><ul><li>严格模式设置元素的宽高指的是元素内容的宽度和高度，而在混杂模式则包括了padding和margin</li><li>严格模式无法设置行内元素的高宽。混杂模式则可以</li><li><code>margin：0 auto 在IE会失效</code></li></ul><p><code>html标签的lang属性：</code>用来定义当前文档显示的语言，<strong>en为英语</strong>，<strong>zh-CN为中文</strong></p><h4 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h4><ul><li>UTF-8：包含全世界所有国家需要用到的字符</li><li>GB2312：简体中文</li><li>BIG5：繁体中文</li><li>GBK：包含全部中文字符</li></ul><p><strong><em>H5中字符集写法</em></strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>标签的语义化</code>：即用合适的标签标记对应的内容，内容与标签的含义相近。比如说导航栏用nav标签，文章段落用p标签等等。标签语义化的好处在于使Html结构更清晰，便于阅读和<a href="https://baike.baidu.com/item/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%BC%98%E5%8C%96/">SEO</a>，有利于团队开发</p><p><code>遵循的原则</code>：先确定语义的Html，再选合适的CSS</p><h3 id="HTML标签"><a href="#HTML标签" class="headerlink" title="HTML标签"></a>HTML标签</h3><h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><h5 id="标签分类"><a href="#标签分类" class="headerlink" title="标签分类"></a>标签分类</h5><ul><li>双标签 <code>&lt;标签名&gt;内容&lt;/标签名&gt;</code>: <code>div</code>、<code>p</code>、<code>span</code>等</li><li>单标签 <code>&lt;标签名/&gt;</code>: <code>br</code>、<code>input</code>、<code>img</code>等</li></ul><h5 id="标签关系"><a href="#标签关系" class="headerlink" title="标签关系"></a>标签关系</h5><ul><li>嵌套关系：如Html是所有标签的父标签</li><li>并列关系：如head和body标签</li><li>注：如果两个标签是嵌套关系，子元素最好缩进一个Tab的身位。若是并列关系，最好上下对齐。</li></ul><h5 id="标签类型"><a href="#标签类型" class="headerlink" title="标签类型"></a>标签类型</h5><p>一、排版标签</p><ol><li><p>标题标签：</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题一共六级选<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>文字加粗一行显<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>从大到小依次减<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>从重到轻随之变<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>语法规范书写后<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>具体效果刷新见<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure><p>文字大小h1-h5逐渐变小</p></li><li><p>段落标签：</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 文本内容 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure> <div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看演示    </button><span class="hide-content"><p>文本内容</p></span></div></li><li><p>水平线标签：</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span>(单标签) 增加一条线 hr=horizon</span><br></pre></td></tr></table></figure> <div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看演示    </button><span class="hide-content"><hr /></span></div></li><li><p>换行标签：</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">br=<span class="tag">&lt;<span class="name">break</span>&gt;</span><span class="tag">&lt;/<span class="name">break</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>div span标签：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">网页布局的两个主要盒子  div&#x3D;division</span><br><span class="line">  </span><br><span class="line">&lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;span&gt;&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure></li></ol><p>二、文本格式化标签</p><ol><li><p>字体加粗</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span> <span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br></pre></td></tr></table></figure> <div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看演示    </button><span class="hide-content"><p><strong> 字体加粗 </strong></p><p> <b>字体加粗</b></p></span></div></li><li><p>字体倾斜</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span> <span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span> <span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure> <div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看演示    </button><span class="hide-content"><p><em> 字体倾斜 </em></p><p><i> 字体倾斜 </i> </p></span></div></li><li><p>字体加删除线</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span> <span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br></pre></td></tr></table></figure> <div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看演示    </button><span class="hide-content"><p><del> 字体加删除线 </del></p></span></div></li><li><p>字体加下划线</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ins</span>&gt;</span> <span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br></pre></td></tr></table></figure> <div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看演示    </button><span class="hide-content"><p><ins> 字体加下划线 </ins></p></span></div></li><li><p>其他</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sup</span>&gt;</span>定义上标<span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sub</span>&gt;</span>定义下标<span class="tag">&lt;/<span class="name">sub</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">small</span>&gt;</span>变小字号<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">big</span>&gt;</span>变大字号<span class="tag">&lt;/<span class="name">big</span>&gt;</span></span><br></pre></td></tr></table></figure>  <div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看演示    </button><span class="hide-content"><p>123<sup>定义上标</sup><br>123<sub>定义下标</sub><br><small>变小字号</small><br><big>变大字号</big></p></span></div></li></ol><h5 id="标签属性"><a href="#标签属性" class="headerlink" title="标签属性"></a>标签属性</h5><p>基本语法格式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line"><span class="tag">&lt;<span class="name">标签名</span> 属性<span class="attr">1</span>=<span class="string">&quot;属性值&quot;</span> 属性<span class="attr">2</span>=<span class="string">&quot;属性值2&quot;</span> <span class="attr">...</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">标签名</span>&gt;</span></span><br><span class="line">示例：</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>我是盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的语法中:</p><ul><li>标签可以拥有多个属性，必须写在开始标签中，位于标签名后面</li><li>属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。</li><li>任何标签的属性都有默认值，省略该属性则取默认值</li><li>采取 <code>键值对 </code>的格式 key=”value”的格式</li></ul><h4 id="图像标签"><a href="#图像标签" class="headerlink" title="图像标签"></a>图像标签</h4><ul><li><p>基本语法格式</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;图像URL(图像路径)&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./public/img.jpg&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>  <div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看演示    </button><span class="hide-content"><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/index.jpg" /></span></div></li><li><p>标记属性</p><table><thead><tr><th align="center">属性</th><th align="center">属性值</th></tr></thead><tbody><tr><td align="center">src</td><td align="center">URL</td></tr><tr><td align="center">alt</td><td align="center">文本</td></tr><tr><td align="center">title</td><td align="center">文本</td></tr><tr><td align="center">width</td><td align="center">像素</td></tr><tr><td align="center">height</td><td align="center">像素</td></tr><tr><td align="center">border</td><td align="center">像素</td></tr></tbody></table></li></ul><h4 id="链接标签"><a href="#链接标签" class="headerlink" title="链接标签"></a>链接标签</h4><p>基本语法格式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;跳转目标&quot;</span>  <span class="attr">target</span>=<span class="string">&quot;目标窗口的弹出方式&quot;</span>&gt;</span>文本或图像<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看演示    </button><span class="hide-content"><p><a href="https://zykjofficial.gitee.io/" >点击跳转到我的博客</a></p></span></div><p><code>href</code>：用于指定链接目标的url地址，当为标签应用href属性值时，它就具有了超链接的功能</p><p><code>target</code>：用于指定链接页面打开方式，有 _self 和 _blank 两种取值，其中self为默认值(在当前页面打开)，blank为在新窗口中打开方式。</p><p><code>即如果想要对元素添加点击链接功能，则需要对其加上链接标签即a标签</code></p><p><em>注意 :</em></p><ul><li><p>外部链接:需要添加http://</p></li><li><p>内部链接:直接链接内部页面名称即可 比如<code>&lt;a href=&quot;index.html&quot;&gt;首页&lt;/a&gt;</code></p></li><li><p>如果没有确定链接目标，通常将链接标签的href属性值定义为”#”，表示该链接暂时为一个空链接</p></li><li><p>除了文本，图像表格音频视频等都可以添加超链接<br>  如：<code>&lt;a href=&quot;img标签.html&quot; target=&quot;blank&quot;&gt; &lt;img src=&quot;C:\photo.jpg&quot;&gt; &lt;/a&gt;</code></p></li></ul><h4 id="锚点定位"><a href="#锚点定位" class="headerlink" title="锚点定位"></a>锚点定位</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#id=uu&quot;</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 记得添加#和&quot;&quot;号！非常重要！--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">标签名</span> <span class="attr">id</span>=<span class="string">uu</span>&gt;</span> <span class="tag">&lt;/<span class="name">标签名</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看演示    </button><span class="hide-content"><p><a href="#HTML学习">点我跳转到开头</a></p></span></div><h4 id="Base标签"><a href="#Base标签" class="headerlink" title="Base标签"></a>Base标签</h4><p>在head中添加<code>&lt;base target=&quot;_blank&quot; /&gt;</code>可实现所有链接都以新窗口打开，同理<code>_blank</code>改为<code>_self</code>则实现所有链接都以自身窗口打开<br>若想实现其中某个链接以不同方式打开，则对其单独设置target属性即可。</p><h4 id="特殊字符代码"><a href="#特殊字符代码" class="headerlink" title="特殊字符代码"></a>特殊字符代码</h4><p>都要记得加“&amp;”</p><p>注意：<code>实体名称对大小写敏感！</code></p><table><thead><tr><th align="left">显示结果</th><th align="left">描述</th><th align="left">实体名称</th><th align="left">实体编号</th></tr></thead><tbody><tr><td align="left"></td><td align="left">空格</td><td align="left"><code>&amp;nbsp; </code></td><td align="left"><code>&amp;#160;</code></td></tr><tr><td align="left">&lt;</td><td align="left">小于号</td><td align="left"><code>&amp;lt; </code></td><td align="left"><code>&amp;#60;</code></td></tr><tr><td align="left">&gt;</td><td align="left">大于号</td><td align="left"><code>&amp;gt; </code></td><td align="left"><code>&amp;#62;</code></td></tr><tr><td align="left">&amp;</td><td align="left">和号</td><td align="left"><code>&amp;amp;</code></td><td align="left"><code>&amp;#38;</code></td></tr><tr><td align="left">“</td><td align="left">引号</td><td align="left"><code>&amp;quot;</code></td><td align="left"><code>&amp;#34;</code></td></tr><tr><td align="left">‘</td><td align="left">撇号</td><td align="left"><code>&amp;apos; (IE不支持)</code></td><td align="left"><code>&amp;#39;</code></td></tr><tr><td align="left">￠</td><td align="left">分（cent）</td><td align="left"><code>&amp;cent; </code></td><td align="left"><code>&amp;#162;</code></td></tr><tr><td align="left">£</td><td align="left">镑（pound）</td><td align="left"><code>&amp;pound; </code></td><td align="left"><code>&amp;#163;</code></td></tr><tr><td align="left">¥</td><td align="left">元（yen）</td><td align="left"><code>&amp;yen;  </code></td><td align="left"><code>&amp;#165;</code></td></tr><tr><td align="left">€</td><td align="left">欧元（euro）</td><td align="left"><code>&amp;euro; </code></td><td align="left"><code>&amp;#8364;</code></td></tr><tr><td align="left">§</td><td align="left">小节</td><td align="left"><code>&amp;sect;</code></td><td align="left"><code>&amp;#167;</code></td></tr><tr><td align="left">©</td><td align="left">版权（copyright）</td><td align="left"><code>&amp;copy; </code></td><td align="left"><code>&amp;#169;</code></td></tr><tr><td align="left">®</td><td align="left">注册商标</td><td align="left"><code>&amp;reg; </code></td><td align="left"><code>&amp;#174;</code></td></tr><tr><td align="left">™</td><td align="left">商标</td><td align="left"><code>&amp;trade; </code></td><td align="left"><code>&amp;#8482;</code></td></tr><tr><td align="left">×</td><td align="left">乘号</td><td align="left"><code>&amp;times;</code></td><td align="left"><code>&amp;#215;</code></td></tr><tr><td align="left">÷</td><td align="left">除号</td><td align="left"><code>&amp;divide;</code></td><td align="left"><code>&amp;#247;</code></td></tr></tbody></table><h4 id="注释标签"><a href="#注释标签" class="headerlink" title="注释标签"></a>注释标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注释内容--&gt;</span> </span><br></pre></td></tr></table></figure><p>养成注释的习惯！</p><h4 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h4><p><strong>相对路径:</strong></p><ol><li>图像文件和HTML文件位于同一文件夹。只需输入图像文件的名称即可，如<code>&lt;img src=&quot;logo.gif&quot; /&gt;</code></li><li>图像文件位于HTML文件的下一级文件夹:输入文件夹名和文件名，之间用”隔开，如<code>&lt;img src=&quot;img/logo.gif&quot; 1&gt;</code></li><li>图像文件位于HTML文件的上- -级文件夹:在文件名之前加入.””，如果是上两级，则需要使用”./. .”.以此类推，如<code>&lt;img src=&quot;./logo.gif&quot;&gt;</code></li></ol><p><strong>绝对路径:</strong></p><p>“D:\logo.gif”.或完整的网络地址，例如:网络地址:”<code>https://zykjofficial.gitee.io/img/avatar.png</code>“</p><p><strong>一般不用绝对路径</strong></p><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><blockquote><p>各个列表项之间没有顺序级别之分，是并列的(没有顺序数字前戳)。</p></blockquote><p>基本语法格式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看演示    </button><span class="hide-content"><ul>    <li>列表项1</li>    <li>列表项2</li>    <li>列表项3</li></ul></span></div><p>注意事项：</p><ol><li><p><code>&lt;ul&gt;&lt;/ul&gt;</code>之间只能嵌套<code>&lt;li&gt;&lt;/li&gt;</code>，直接在<code>&lt;ul&gt;&lt;/ul&gt;</code>标签中输入其他标签或者文字的做法是不被允许的。</p></li><li><p><code>&lt;li&gt;&lt;/li&gt;</code>之间相当于一个容器,可以容纳所有元素</p></li><li><p>无序列表的样式可让CSS来完成设置</p></li></ol><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><blockquote><p>带顺序数字前缀的列表</p></blockquote><p>基本语法格式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    ....</span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>属性说明：</p><table><thead><tr><th>属性</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td></td><td>1</td><td>百度吧。。。</td></tr><tr><td></td><td>A</td><td>百度吧。。。</td></tr><tr><td>type</td><td>a</td><td>百度吧。。。</td></tr><tr><td></td><td>I</td><td>百度吧。。。</td></tr><tr><td></td><td>i</td><td>百度吧。。。</td></tr><tr><td>start</td><td>数值</td><td>有序列表的起始数字</td></tr></tbody></table><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看演示    </button><span class="hide-content"><ol >    <li>列表项</li></ol></span></div><p>注意事项与无序列表相同</p><h4 id="自定义列表-理解即可）"><a href="#自定义列表-理解即可）" class="headerlink" title="自定义列表(理解即可）"></a>自定义列表(理解即可）</h4><blockquote><p>常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。一般用于网页结尾。</p></blockquote><p>基本语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词1<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词1解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词1解释2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词2<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词2解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词2解释2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看演示    </button><span class="hide-content"><dl>    <dt>名词1</dt>    <dd>名词1解释1</dd>    <dd>名词1解释2</dd>    <dt>名词2</dt>    <dd>名词2解释1</dd>    <dd>名词2解释2</dd></dl></span></div><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><ul><li><p>基本语法格式：</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>标题1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>标题2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>内容1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>内容2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>  <div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看演示    </button><span class="hide-content"><table>  <tr>    <th>标题1</th>    <th>标题2</th>  </tr>  <tr>    <td>内容1</td>    <td>内容2</td>  </tr></table></span></div><p>  <code>table</code>：为整体框架</p><p>  <code>tr</code>：行数</p><p>  <code>th</code>: 表头(通俗来说就是标题)</p><p>  <code>td</code>：每一行内的单元格数(没有列的说法)</p><p>  注意事项：<code>table里只能放tr标签，不能放其他。而td里可以放任何东西。</code></p></li></ul><ul><li><p>表格属性</p><table><thead><tr><th align="left">属性名</th><th align="left">含义</th><th align="left">像素值</th></tr></thead><tbody><tr><td align="left"><code>border</code></td><td align="left">设置表格的边框(默认border=”0”无边框)</td><td align="left">像素值</td></tr><tr><td align="left"><code>cellspacing</code></td><td align="left">设置单元格与单元格边框之间的空白间距</td><td align="left">像素值(默认为2像素)</td></tr><tr><td align="left"><code>cellpadding</code></td><td align="left">设置单元格内容与单元格边框之间的空白间距</td><td align="left">像素值(默认为1像素)</td></tr><tr><td align="left"><code>width</code></td><td align="left">设置表格的宽度</td><td align="left">像素值</td></tr><tr><td align="left"><code>height</code></td><td align="left">设置表格的高度</td><td align="left">像素值</td></tr><tr><td align="left"><code>align</code></td><td align="left">设置表格在网页中的水平对齐方式</td><td align="left">left、center、 right</td></tr></tbody></table></li><li><p>表头标签</p><p><code>把表头的&lt;td&gt;换成&lt;th&gt;，会自动加粗居中</code></p></li><li><p>表头结构</p><p>  表格布局时可分为头部主体和页脚</p><p>  <code>&lt;thead&gt;&lt;/thead&gt;</code>:用于定义表格头部</p><p>  <code>&lt;tbody&gt;&lt;/tbody&gt;</code>:用于定位表格主体</p><p>  以上两种都不显示，只是用于布局。</p></li><li><p>表格标题</p><p><code>&lt;caption&gt;标题&lt;/caption&gt;</code> 写在table标签内</p></li><li><p>合并单元格</p><p>   跨行合并：<code>rowspan</code> 跨列合并：<code>colspan</code></p><p>   合并单元格的思想：将多个内容合并的时候，会有多余的东西，将其删除。例如把3个td合并成一个，就多于2个，需要删除</p><p>   公式 删除的个数=合并的个数-1</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--表格框架标签--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">caption</span>&gt;</span>表格<span class="tag">&lt;/<span class="name">caption</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span> </span><br><span class="line">  <span class="comment">&lt;!--表头结构标签--&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span> </span><br><span class="line">          <span class="comment">&lt;!--行标签--&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span> </span><br><span class="line">          <span class="comment">&lt;!--表头标签--&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span> </span><br><span class="line">      <span class="comment">&lt;!--表头主题标签--&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>克拉克肯特<span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span><br><span class="line">          <span class="comment">&lt;!--单元标签--&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>35<span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>布鲁斯韦恩<span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span><br><span class="line">          <span class="comment">&lt;!--跨列合并--&gt;</span> </span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>戴安娜普林斯<span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>28<span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>巴里艾伦<span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>  <div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看演示    </button><span class="hide-content"><table width="500" height="200" border="1" cellpadding="0" cellspacing="0" align="center">      <!--表格框架标签-->      <caption>表格</caption>       <thead>       <!--表头结构标签-->           <tr>               <!--行标签-->               <th>姓名</th>               <!--表头标签-->               <th>性别</th>               <th>年龄</th>           </tr>       </thead>      <tbody>           <!--表头主题标签-->           <tr>               <td>克拉克肯特</td>               <!--单元标签-->               <td>男</td>               <td>35</td>           </tr>           <tr>               <td>布鲁斯韦恩</td>               <td colspan="2">男</td>               <!--跨列合并-->           </tr>           <tr>               <td>戴安娜普林斯</td>               <td>女</td>               <td rowspan="2">28</td>           </tr>           <tr>               <td colspan="2">巴里艾伦</td>           </tr>       </tbody>     </table></span></div><p>  表格不要纠结于外观，是CSS的作用</p></li></ul><h4 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h4><blockquote><p>组成：表单控件，提示信息，表单域3个部分构成</p></blockquote><ul><li><p>input控件（重点）及其属性</p><table><thead><tr><th>属性</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td></td><td><code>text</code></td><td>单行文本输入框</td></tr><tr><td></td><td><code>password</code></td><td>密码输入框</td></tr><tr><td></td><td><code>radio</code></td><td>单选按钮</td></tr><tr><td></td><td><code>checkbox</code></td><td>复选框</td></tr><tr><td><code>type</code></td><td><code>button</code></td><td>普通按钮</td></tr><tr><td></td><td><code>submit</code></td><td>提交按钮</td></tr><tr><td></td><td><code>reset</code></td><td>重置按钮</td></tr><tr><td></td><td><code>image</code></td><td>图像形式的提交按钮</td></tr><tr><td></td><td><code>file</code></td><td>文件域</td></tr><tr><td><code>name</code></td><td>由用户自定义</td><td>控件的名称</td></tr><tr><td><code>value</code></td><td>由用户自定义</td><td>input控件中的默认文本值</td></tr><tr><td><code>size</code></td><td>正整数</td><td>input控件在页面中的可见的字符数</td></tr><tr><td><code>checked</code></td><td>checked</td><td>定义选择控件默认被选中的项</td></tr><tr><td><code>maxlength</code></td><td>正整数</td><td>控件允许输入的最多字符数</td></tr></tbody></table><p>  <code>type</code>：image可以设置按钮为其他图像 <code>&lt;input type=&quot;image&quot; src=&quot;img/logo.jpg&quot;&gt;</code></p><p>  <code>radio</code>: 通过设置相同<code>name</code>属性来实现单选 <input type="radio" name="sex" value="male">男 <input type="radio" name="sex" value=female>女</p><p>  <code>file</code>：类型可以用来上传文件 添加multiple属性可以上传多个文件</p><p>  <code>name</code>：如果单选框radio是同一组，那么可以通过name属性来设置为一组，从而限制选择</p><p>  <code>value</code>：属性可以改变按钮中的文本</p><p>  <code>checked</code>：属性可以设置默认选中项 即<code>&lt;input type=&quot;button&quot; checked=&quot;checked&quot; /&gt;</code></p><p>  <code>maxlength</code>：可以设置其最大输入字符数</p><p>  <em>其他常用属性值:</em></p><p>  <code>placeholder</code>：可实现用户输入时里面的文字消失，删除所有文字，自动返回</p><p>  <code>autofocus</code>：实现打开网页时，光标自动定位到其所在表单</p><p>  <code>autocomplete</code>：实现自动记录表单内容，再次输入时可智能提示</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">用户名：</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;on&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  注意：必须要有提交按钮。其次表单<code>必须要有名字</code>。</p><p>  <code>required</code>：要求必须输入</p><p>  <code>pattern</code>：正则表达式验证</p><p>  <code>multiple</code>： 实现上传填写多个东西</p><p>  <code>form</code>：指定某个表单id，再将当前表单的form属性值设置为与其id相同。在将来指定id号的表单进行数据提交的时候，也会将当前表单元素的数据进行提交</p></li><li><p>H5 input新增的type类型</p><table><thead><tr><th>类型</th><th>使用示例</th><th>含义</th></tr></thead><tbody><tr><td>email</td><td><code>&lt;input type=&quot;email&quot;&gt;</code></td><td>输入邮箱格式</td></tr><tr><td>tel</td><td><code>&lt;input type=&quot;tel&quot;&gt;</code></td><td>输入手机号格式</td></tr><tr><td>url</td><td><code>&lt;input type=&quot;url&quot;&gt;</code></td><td>输入url格式</td></tr><tr><td>number</td><td><code>&lt;input type=&quot;number&quot;&gt;</code></td><td>输入数字格式</td></tr><tr><td>search</td><td><code>&lt;input type=&quot;search&quot;&gt;</code></td><td>搜索框(体积语义化)</td></tr><tr><td>range</td><td><code>&lt;input type=&quot;range&quot;&gt;</code></td><td>自由拖动滑块</td></tr><tr><td>time</td><td><code>&lt;input type=&quot;time&quot;&gt;</code></td><td>小时分钟</td></tr><tr><td>date</td><td><code>&lt;input type=&quot;date&quot;&gt;</code></td><td>年月日</td></tr><tr><td>datetime</td><td><code>&lt;input type=&quot;datetime&quot;&gt;</code></td><td>时间</td></tr><tr><td>month</td><td><code>&lt;input type=&quot;month&quot;&gt;</code></td><td>月年</td></tr><tr><td>week</td><td><code>&lt;input type=&quot;week&quot;&gt;</code></td><td>星期年</td></tr></tbody></table><p>  <code>email</code>：用于填写邮箱，填写时必须有@符号，同时包含服务器域名。如不能满足验证，则会阻止当前的数据提交</p><p>  <code>tel</code>：用于填写号码，不是用来验证，是为了能在移动端打开键盘时打开数字键盘。即限制了用户只能输入数字</p><p>  <code>url</code>：填写网址。只能输入合法的网址，必须包含http://</p><p>  <code>number</code> ：只能输入数字 其中 max最大值 min最小值 value默认值</p><p>  <code>color</code>：选择颜色</p></li></ul><h4 id="Label"><a href="#Label" class="headerlink" title="Label"></a>Label</h4><blockquote><p>若想实现点击文字就可进入文本框，则可用label标签包裹整个表单选项</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>输入账号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span> </span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看演示    </button><span class="hide-content"><p><label>输入账号：<input type="text" /></label> </p></span></div><p>若有多个输入框，想定位到某个，则对目标框设置id，然后<code>&lt;label for=&quot;id&quot;&gt;&lt;/label&gt;</code></p><p><label for="username">输入账号：<input type="text" id="username" /></label> </p><p><label for="password">输入密码：<input type="password" id="password" /></label> </p><h4 id="textarea"><a href="#textarea" class="headerlink" title="textarea"></a>textarea</h4><blockquote><p>若想实现大量文本输入，则可用textarea标签</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span>请输入留言<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span>  </span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看演示    </button><span class="hide-content"><p><textarea>请输入留言</textarea>  </p></span></div><p><strong>H5新增的属性</strong></p><table><thead><tr><th align="left">属性</th><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>autofocus</code></td><td align="left">autofocus</td><td align="left">规定在页面加载后文本区域自动获得焦点。</td></tr><tr><td align="left"><code>cols</code></td><td align="left">number</td><td align="left">规定文本区内的可见宽度。</td></tr><tr><td align="left"><code>disabled</code></td><td align="left">disabled</td><td align="left">规定禁用该文本区。</td></tr><tr><td align="left"><code>form</code></td><td align="left">form_id</td><td align="left">规定文本区域所属的一个或多个表单。</td></tr><tr><td align="left"><code>maxlength</code></td><td align="left">number</td><td align="left">规定文本区域的最大字符数。</td></tr><tr><td align="left"><code>name</code></td><td align="left">name_of_textarea</td><td align="left">规定文本区的名称。</td></tr><tr><td align="left"><code>placeholder</code></td><td align="left">text</td><td align="left">规定描述文本区域预期值的简短提示。</td></tr><tr><td align="left"><code>readonly</code></td><td align="left">readonly</td><td align="left">规定文本区为只读。</td></tr><tr><td align="left"><code>required</code></td><td align="left">required</td><td align="left">规定文本区域是必填的。</td></tr><tr><td align="left"><code>rows</code></td><td align="left">number</td><td align="left">规定文本区内的可见行数。</td></tr><tr><td align="left"><code>wrap</code></td><td align="left">hardsoft</td><td align="left">规定当在表单中提交时，文本区域中</td></tr></tbody></table><h4 id="select下拉菜单标签"><a href="#select下拉菜单标签" class="headerlink" title="select下拉菜单标签"></a>select下拉菜单标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>=<span class="string">&quot;selected&quot;</span> &gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> &gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看演示    </button><span class="hide-content"><select>     <option>北京</option>     <option selected="selected" >上海</option>    <option >广州</option>     <option>深圳</option></select></span></div><p>其中<code>selected=&quot;selected&quot;</code>代表<code>默认选项</code></p><p>option也可以为单标签，效果一样</p><p>实现多选 <code>multiple</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">multiple</span>=<span class="string">&quot;multiple&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> &gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看演示    </button><span class="hide-content"><select multiple="multiple">     <option>北京</option>     <option>上海</option>    <option >广州</option>     <option>深圳</option></select></span></div><h4 id="表单域"><a href="#表单域" class="headerlink" title="表单域"></a>表单域</h4><blockquote><p>即整个表单框架</p></blockquote><ul><li><p>基本语法：</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;url地址&quot;</span> <span class="attr">method</span>=<span class="string">&quot;提交方式&quot;</span> <span class="attr">name</span>=<span class="string">&quot;表单名称&quot;</span>&gt;</span>各种表单控件<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>常用属性：</p><p><code>action</code>：表单收集到信息后，需要将信息传递给服务器进行处理，action属性用于指定接收并处理表单数据的服务器程序的url地址</p><p><code>method</code>:用于设置表单数据的提交方式，其取值为get或post</p><p><code>enctype</code>：设置解码方式，如果有file表单元素，则一定为multipart/form-data</p><p><code>name</code>：用于指定表单的名称，以区分同一个页面中的多个表单。</p><p><strong>注意：每个表单都要有自己的表单域</strong></p></li></ul><h3 id="H5-常用新标签"><a href="#H5-常用新标签" class="headerlink" title="H5 常用新标签"></a>H5 常用新标签</h3><p><code>header</code>：定义文档的页眉头部</p><p><code>nav</code>：定义导航链接的部分</p><p><code>footer</code>：定义文档或节的页脚 底部</p><p><code>article</code>：定义文章</p><p><code>section</code>：定义文档中的节</p><p><code>aside</code>：定义其所处内容之外的内容 侧边</p><p><code>datalist</code>：标签定义选项列表，请与input元素配合使用该元素</p><p><code>fieldset</code>:可将表单内的相关元素分组，打包</p><h4 id="Datalist用法"><a href="#Datalist用法" class="headerlink" title="Datalist用法"></a>Datalist用法</h4><p>通过设置id并在input中的list属性链接这个id，从而达到智能显示的效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;输入明星&quot;</span> <span class="attr">list</span>=<span class="string">&quot;star&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- input里面用list --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;star&quot;</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- datalist里面用id实现和input的链接 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> &gt;</span>刘德华<span class="tag">&lt;/<span class="name">option</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> &gt;</span>郭富城<span class="tag">&lt;/<span class="name">option</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> &gt;</span>黎明<span class="tag">&lt;/<span class="name">option</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> &gt;</span>张学友<span class="tag">&lt;/<span class="name">option</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看演示    </button><span class="hide-content"><input type="text" value="输入明星" list="star"><!-- input里面用list --><datalist id="star">     <!-- datalist里面用id实现和input的链接 -->     <option >刘德华</option>     <option >郭富城</option>     <option >黎明</option>     <option >张学友</option> </datalist></span></div><p>datalist与selection的区别:前者不仅可以选择，还可以输入。</p><p>datalist弊端：在不同浏览器的显示不同，少用</p><p>注：如果与之连接的input type值为url，则其value值必须添加http://</p><h4 id="Fieldset用法"><a href="#Fieldset用法" class="headerlink" title="Fieldset用法"></a>Fieldset用法</h4><p>与legend搭配使用，legend包含在fieldset里面负责写标题。例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">legend</span>&gt;</span>用户登录<span class="tag">&lt;/<span class="name">legend</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 标题 --&gt;</span> </span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span> </span><br><span class="line">    密　　码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span> </span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看演示    </button><span class="hide-content"><fieldset>     <legend>用户登录</legend>     <!-- 标题 -->     用户名：<input type="text"> <br />     密　码：<input type="password"></fieldset> </span></div><h4 id="多媒体标签"><a href="#多媒体标签" class="headerlink" title="多媒体标签"></a>多媒体标签</h4><p><code>引用网上的视频</code>：embed</p><p><code>引用本地视频</code>：video 三种格式：mp4、ogg、wmv</p><p><code>引用本地音频</code>：audio 三种格式：mp3、ogg、wav</p><p><strong>常用属性 ：</strong></p><p><code>autoplay</code>：控制自动播放</p><p><code>controls</code>：添加进度条等控制元素</p><p><code>loop</code>：x 循环播放x次</p><p><code>poster</code>：设置视频封面</p><p>格式的兼容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 从上往下一个个尝试 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;xxx.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/ogg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;xxx.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button button--animated" style="">查看演示    </button><span class="hide-content"><video controls>     <source src="https://www.runoob.com/try/demo_source/movie.mp4" type="video/ogg">     <source src="https://www.runoob.com/try/demo_source/movie.ogg" type="video/mp4"> </video></span></div><p>解决低版本浏览器新标签不兼容的措施</p><ol><li><p>通过创建新标签并转化标签模式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.createElement(<span class="string">&quot;名字&quot;</span>); <span class="comment">//默认为行级元素 </span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>通过引入第三方插件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web教程 </category>
          
          <category> Html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git的安装与使用</title>
      <link href="/posts/6536dfdf/"/>
      <url>/posts/6536dfdf/</url>
      
        <content type="html"><![CDATA[<h2 id="Git的安装与使用"><a href="#Git的安装与使用" class="headerlink" title="Git的安装与使用"></a>Git的安装与使用</h2><blockquote><p>Git 是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200315181949.png"></p><p>官方教程 : <a href="https://git-scm.com/book/zh/v2">https://git-scm.com/book/zh/v2</a></p><ul><li><p>下载</p><ul><li>官网下载 ：Git <a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a> (速度较慢)</li><li>淘宝下载 ：Git for Windows <a href="https://npm.taobao.org/mirrors/git-for-windows/">https://npm.taobao.org/mirrors/git-for-windows/</a> (国内、速度快)</li></ul></li><li><p>验证是否安装成功</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><p>  显示版本号代表安装成功</p><p>  或</p><p>  资源管理器内单击鼠标右键选择 <code>Git Bash Here</code></p></li></ul><h2 id="Git-基本工作流程"><a href="#Git-基本工作流程" class="headerlink" title="Git 基本工作流程"></a>Git 基本工作流程</h2><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200404122700.png"></p><p>主要涉及到四个关键点：</p><ol><li><p><code>工作区</code>：本地电脑存放项目文件的地方，比如learnGitProject文件夹；</p></li><li><p><code>暂存区（Index/Stage）</code>：在使用git管理项目文件的时候，其本地的项目文件会多出一个.git的文件夹，将这个.git文件夹称之为版本库。其中.git文件夹中包含了两个部分，一个是暂存区（Index或者Stage）,顾名思义就是暂时存放文件的地方，通常使用add命令将工作区的文件添加到暂存区里；</p></li><li><p><code>本地仓库</code>：.git文件夹里还包括git自动创建的master分支，并且将HEAD指针指向master分支。使用commit命令可以将暂存区中的文件添加到本地仓库中；</p></li><li><p><code>远程仓库</code>：不是在本地仓库中，项目代码在远程git服务器上，比如项目放在github上，就是一个远程仓库，通常使用clone命令将远程仓库拷贝到本地仓库中，开发后推送到远程仓库中即可；</p><table><thead><tr><th>工作目录</th><th>暂存区</th><th>git 仓库</th><th>远程仓库</th></tr></thead><tbody><tr><td>被Git管理的项目</td><td>临时存放被修改的文件</td><td>目录用于存放提交记录</td><td>远程代码仓库</td></tr><tr><td><code>git init</code></td><td><code>git add</code></td><td><code>git commit</code></td><td><code>git push</code></td></tr></tbody></table></li></ol><h2 id="Git命令"><a href="#Git命令" class="headerlink" title="Git命令"></a>Git命令</h2><h3 id="配置用户信息"><a href="#配置用户信息" class="headerlink" title="配置用户信息"></a>配置用户信息</h3><p>第一次使用git需要配置用户信息</p><ul><li><p>配置用户名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;你的用户名&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>配置用户邮箱：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;你的邮箱&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>查询配置信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">列出当前配置：</span><br><span class="line">git config --list;</span><br><span class="line"></span><br><span class="line">列出repository配置：</span><br><span class="line">git config --local --list;</span><br><span class="line"></span><br><span class="line">列出全局配置：</span><br><span class="line">git config --global --list;</span><br><span class="line"></span><br><span class="line">列出系统配置：</span><br><span class="line">git config --system --list;</span><br></pre></td></tr></table></figure></li></ul><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><h4 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h4><p>克隆仓库:使用 <code>git clone</code> 从 <code>远程仓库</code> 中拷贝项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git clone [仓库地址] [本地目录]</span><br><span class="line"></span><br><span class="line">ps: </span><br><span class="line">[本地目录] : 可加参数、默认在当前目录下克隆。</span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line">git clone git@github.com:spring-projects&#x2F;spring-boot.git </span><br><span class="line"></span><br><span class="line">git clone git@github.com:spring-projects&#x2F;spring-boot.git spring &#x2F;&#x2F;在当前目录下的spring目录下克隆</span><br></pre></td></tr></table></figure><h4 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h4><p>初始化仓库:在执行 <code>git init</code> 命令后，会在当前目录下生成一个 <code>.git</code> 目录(需要显示隐藏目录)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git init [目录名]</span><br><span class="line"></span><br><span class="line">ps: </span><br><span class="line">[目录名] : 可加参数、在[目录名]下生成 .git 目录。</span><br></pre></td></tr></table></figure><h4 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h4><p>查询当前工作区所有文件的状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git status </span><br><span class="line"></span><br><span class="line">ps:</span><br><span class="line">-s ：以获得简短的结果输出；</span><br></pre></td></tr></table></figure><h4 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h4><p>显示工作区，暂存区，版本区之间的差别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git diff : 尚未缓存的改动</span><br><span class="line">git diff --cached : 查看已缓存的改动：</span><br><span class="line">git diff HEAD : 查看已缓存的与未缓存的所有改动</span><br><span class="line">git diff --stat : 显示摘要而非整个 diff</span><br></pre></td></tr></table></figure><h4 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h4><p>提交文件到暂存区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git add [文件名&#x2F;文件列表] </span><br><span class="line"></span><br><span class="line">ps:</span><br><span class="line">git add . : 提交工作区所有文件到暂存区;</span><br><span class="line">git add 文件名 : 提交工作区中指定文件到暂存区;</span><br><span class="line">git add 文件1 文件2 文件3 ... : 提交工作区中指定的多个文件到暂存区;</span><br><span class="line">git add [dir] : 提交工作区中某个文件夹中所有文件到暂存区;</span><br></pre></td></tr></table></figure><h4 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h4><p>将暂存区里的改动提交到本地的版本库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m [提交信息] </span><br></pre></td></tr></table></figure><ol><li>将暂存区中的文件提交到本地仓库中，即打上新版本：git commit -m “提交信息”;</li><li>将所有已经使用git管理过的文件暂存后一并提交，跳过add到暂存区的过程：git commit -a -m “提交信息”;</li><li>提交文件时，发现漏掉几个文件，或者注释写错了，可以撤销上一次提交：git commit –amend;</li></ol><h4 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h4><p>查看提交记录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> </span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span> --pretty=oneline</span><br><span class="line"></span><br><span class="line">ps:</span><br><span class="line">-p : 展开每次提交的内容差异，用-2显示最近的两次更新、如git <span class="built_in">log</span> -p -2;</span><br><span class="line">--pretty=oneline : 查看一行</span><br></pre></td></tr></table></figure><h4 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h4><p>切换分支或恢复工作树文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout [分支名]  切换到指定分区</span><br><span class="line"></span><br><span class="line">git checkout -- filename</span><br><span class="line">用暂存区中filename文件来覆盖工作区中的filename文件。相当于取消自上次执行git add filename以来（如果执行过）的本地修改。</span><br></pre></td></tr></table></figure><h4 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h4><p>版本回退</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard [提交编号]</span><br><span class="line"></span><br><span class="line">ps:</span><br><span class="line">[提交编号] : 通过git log可以查看，至少写七位编号</span><br><span class="line">回退之后查看不了历史版本可以通过git reflog查看</span><br></pre></td></tr></table></figure><h4 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h4><p>拉取远程仓库代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull git@github.com:用户名/仓库名.git</span><br></pre></td></tr></table></figure><h4 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h4><p>提交本地仓库到远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure><h4 id="git-mv"><a href="#git-mv" class="headerlink" title="git mv"></a>git mv</h4><p>用于移动或重命名一个文件、目录、软连接。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git mv [文件名]  [新文件名]</span><br></pre></td></tr></table></figure><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><blockquote><p>几乎每一种版本控制系统都以某种形式支持分支。使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。</p><p>有人把 Git 的分支模型称为必杀技特性，而正是因为它，将 Git 从版本控制系统家族里区分出来。</p></blockquote><h4 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h4><p>查看分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch </span><br></pre></td></tr></table></figure><h4 id="git-branch-分支名称"><a href="#git-branch-分支名称" class="headerlink" title="git branch 分支名称"></a>git branch 分支名称</h4><p>创建分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch 分支名称 </span><br></pre></td></tr></table></figure><h4 id="git-checkout-1"><a href="#git-checkout-1" class="headerlink" title="git checkout"></a>git checkout</h4><p>切换指定分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout 分支名称 </span><br></pre></td></tr></table></figure><h4 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h4><p>将当前分支与指定分支进行合并</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge 分支名 </span><br></pre></td></tr></table></figure><h4 id="git-branch-d"><a href="#git-branch-d" class="headerlink" title="git branch -d"></a>git branch -d</h4><p>删除分支（分支合并后才允许被删除）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git branch -d 分支名称</span><br><span class="line"></span><br><span class="line">ps:</span><br><span class="line">-D : 大写强制删除</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol><li>创建分支：<code>git branch </code>，如<code>git branch testing</code>；</li><li>从当前所处的分支切换到其他分支：<code>git checkout </code>，如<code>git checkout testing</code>；</li><li>新建并切换到新建分支上：<code>git checkout -b </code>;</li><li>删除分支：<code>git branch -d </code>；</li><li>将当前分支与指定分支进行合并：<code>git merge </code>;</li><li>显示本地仓库的所有分支：<code>git branch</code>;</li><li>查看各个分支最后一个提交对象的信息：<code>git branch -v</code>;</li><li>查看哪些分支已经合并到当前分支：<code>git branch --merged</code>;</li><li>查看当前哪些分支还没有合并到当前分支：<code>git branch --no-merged</code>;</li><li>把远程分支合并到当前分支：<code>git merge /</code>，如<code>git merge origin/serverfix</code>；如果是单线的历史分支不存在任何需要解决的分歧，只是简单的将HEAD指针前移，所以这种合并过程可以称为快进（Fast forward），而如果是历史分支是分叉的，会以当前分叉的两个分支作为两个祖先，创建新的提交对象；如果在合并分支时，遇到合并冲突需要人工解决后，再才能提交；</li><li>在远程分支的基础上创建新的本地分支<code>：git checkout -b  /</code>，如<code>git checkout -b serverfix origin/serverfix</code>;</li><li>从远程分支checkout出来的本地分支，称之为跟踪分支。在跟踪分支上向远程分支上推送内容：<code>git push</code>。该命令会自动判断应该向远程仓库中的哪个分支推送数据；在跟踪分支上合并远程分支：<code>git pull</code>；</li><li>将一个分支里提交的改变移到基底分支上重放一遍：<code>git rebase</code>，如<code>git rebase master server</code>，将特性分支server提交的改变在基底分支master上重演一遍；使用rebase操作最大的好处是像在单个分支上操作的，提交的修改历史也是一根线；如果想把基于一个特性分支上的另一个特性分支变基到其他分支上，可以使用<code>--onto</code>操作：<code>git rebase --onto   </code>，如<code>git rebase --onto master server client</code>；使用rebase操作应该遵循的原则是：<strong>一旦分支中的提交对象发布到公共仓库，就千万不要对该分支进行rebase操作</strong>；</li></ol><h3 id="Git标签"><a href="#Git标签" class="headerlink" title="Git标签"></a>Git标签</h3><blockquote><p>Git 使用的标签有两种类型：轻量级的（lightweight）和含附注的（annotated）。轻量级标签就像是个不会变化的分支，实际上它就是个指向特定提交对象的引用。而含附注标签，实际上是存储在仓库中的一个独立对象，它有自身的校验和信息，包含着标签的名字，电子邮件地址和日期，以及标签说明，标签本身也允许使用 GNU Privacy Guard (GPG) 来签署或验证。一般我们都建议使用含附注型的标签，以便保留相关信息；当然，如果只是临时性加注标签，或者不需要旁注额外信息，用轻量级标签也没问题。</p></blockquote><h4 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h4><p>列出现在所有的标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ol><li>使用特定的搜索模式列出符合条件的标签，例如只对1.4.2系列的版本感兴趣：<code>git tag -l &quot;v1.4.2.*&quot;</code>;</li><li>创建一个含附注类型的标签，需要加<code>-a</code>参数，如<code>git tag -a v1.4 -m &quot;my version 1.4&quot;</code>;</li><li>使用git show命令查看相应标签的版本信息，并连同显示打标签时的提交对象：<code>git show v1.4</code>;</li><li>如果有自己的私钥，可以使用GPG来签署标签，只需要在命令中使用<code>-s</code>参数：<code>git tag -s v1.5 -m &quot;my signed 1.5 tag&quot;</code>;</li><li>验证已签署的标签：git tag -v ，如<code>git tag -v v1.5</code>;</li><li>创建一个轻量级标签的话，就直接使用git tag命令即可，连<code>-a</code>,<code>-s</code>以及<code>-m</code>选项都不需要，直接给出标签名字即可，如<code>git tag v1.5</code>;</li><li>将标签推送到远程仓库中：git push origin ，如<code>git push origin v1.5</code>；</li><li>将本地所有的标签全部推送到远程仓库中：<code>git push origin --tags</code>;</li></ol><h2 id="Github远程仓库的使用"><a href="#Github远程仓库的使用" class="headerlink" title="Github远程仓库的使用"></a>Github远程仓库的使用</h2><h3 id="基于HTTPS协议"><a href="#基于HTTPS协议" class="headerlink" title="基于HTTPS协议"></a>基于HTTPS协议</h3><ul><li><p>通过 <code>git clone https://github.com/Github用户名/仓库名.git</code></p></li><li><p>修改 <code>.git</code> 下的 <code>config</code> 的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">url &#x3D; https:&#x2F;&#x2F;github.com&#x2F;Github用户名&#x2F;仓库名.git</span><br><span class="line"></span><br><span class="line">修改为</span><br><span class="line"></span><br><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">url &#x3D; https:&#x2F;&#x2F;用户名:密码@github.com&#x2F;Github用户名&#x2F;仓库名.git</span><br></pre></td></tr></table></figure></li><li><p><code>git remote add origin https://github.com/Github用户名/仓库名.git</code> 要上传的远程仓库</p></li><li><p><code>git push</code> 将本地仓库提交到远程仓库 </p></li></ul><h3 id="基于SSH协议"><a href="#基于SSH协议" class="headerlink" title="基于SSH协议"></a>基于SSH协议</h3><ul><li><p>生成公私钥</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;example@example.com&quot;</span><br></pre></td></tr></table></figure><p>  然后找到生成的秘钥：位置在 C:/Users/你电脑的用户名/.ssh<br>  用记事本打开<code>id_rsa.pub</code>复制里面的内容</p><p>  进入 <a href="https://github.com/settings/keys">https://github.com/settings/keys</a> 点击<code>New SSH Key</code>把之前复制的内容粘贴到这里就可以了。</p></li><li><p><code>git remote add origin git@github.com:用户名/仓库名.git</code> 要上传的远程仓库</p></li><li><p><code>git push</code> 将本地仓库提交到远程仓库 </p></li></ul><h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2><p>多人开发同一个项目时，如果两个人修改了同一个文件同一个地方</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200404211201.png"></p><p>解决方法： </p><ol><li>手动解决冲突</li><li>写代码之前要先git pull 拉去最新代码</li></ol><h2 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h2><p>在git根目录下创建<code>.gitignore</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 此为注释 – 将被 Git 忽略</span><br><span class="line"># 忽略所有 .a 结尾的文件</span><br><span class="line">*.a</span><br><span class="line"># 但 lib.a 除外</span><br><span class="line">!lib.a</span><br><span class="line"># 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir&#x2F;TODO</span><br><span class="line">&#x2F;TODO</span><br><span class="line"># 忽略 build&#x2F; 目录下的所有文件</span><br><span class="line">build&#x2F;</span><br><span class="line"># 会忽略 doc&#x2F;notes.txt 但不包括 doc&#x2F;server&#x2F;arch.txt</span><br><span class="line">doc&#x2F;*.txt</span><br><span class="line"># 忽略 doc&#x2F; 目录下所有扩展名为 txt 的文件</span><br><span class="line">doc&#x2F;**&#x2F;*.txt</span><br></pre></td></tr></table></figure><h2 id="同时提交多个仓库"><a href="#同时提交多个仓库" class="headerlink" title="同时提交多个仓库"></a>同时提交多个仓库</h2><div class="note idea"><p>例如我有下面两个仓库：<br><a href="https://gitee.com/zykj/test.git">https://gitee.com/zykj/test.git</a><br><a href="https://github.com/zykj/test.git">https://github.com/zykj/test.git</a></p></div><h3 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h3><ol><li><p>在本地项目文件夹执行 <code>git init</code> 之后</p><p> 先添加第一个仓库</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://gitee.com/zykj/test.git</span><br></pre></td></tr></table></figure><p> 再添加第二个仓库</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="built_in">set</span>-url --add origin https://github.com/zykj/test.git</span><br></pre></td></tr></table></figure><p> 如果还有其他，则可以像添加第二个一样继续添加其他仓库。</p></li><li><p>然后使用下面命令提交：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --all</span><br></pre></td></tr></table></figure><p> 打开<code>.git/config</code>，可以看到这样的配置：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">url &#x3D; https:&#x2F;&#x2F;gitee.com&#x2F;zykj&#x2F;test.git</span><br><span class="line">fetch &#x3D; +refs&#x2F;heads&#x2F;*:refs&#x2F;remotes&#x2F;origin&#x2F;*</span><br><span class="line">url &#x3D; https:&#x2F;&#x2F;github.com&#x2F;zykj&#x2F;test.git</span><br></pre></td></tr></table></figure><p> 刚才的命令其实就是添加了这些配置。如果不想用命令行，可以直接编辑该文件，添加对应的url即可。</p></li></ol><h3 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h3><ol><li><p>在本地项目文件夹执行 <code>git init</code> 之后</p><p> 先添加第一个仓库</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add gitee https://gitee.com/zykj/test.git</span><br></pre></td></tr></table></figure><p> 再添加第二个仓库</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add github https://github.com/zykj/test.git</span><br></pre></td></tr></table></figure><p> 如果还有其他，则可以像添加第二个一样继续添加其他仓库。</p><p> 在这里为了方便区分，我把github仓库地址代号(上面代码add后面的单词)命名为<code>github</code>，码云仓库地址代号命名为<code>gitee</code></p></li><li><p>在<code>git bash</code>中输入<code>git remote -v</code>可以查看本地仓库现在连接了那个远程仓库。</p></li><li><p>使用<code>git push</code>仓库代号 分支提交代码到远程仓库</p><p> 刚才我链接的两个远程仓库，推得时候就要这样写了：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push github master</span><br><span class="line">git push gitee master</span><br></pre></td></tr></table></figure><p> 打开<code>.git/config</code>,此时配置文件如下所示</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[remote &quot;github&quot;]</span><br><span class="line">    url &#x3D; git@github.com:zykj&#x2F;test.git</span><br><span class="line">    fetch &#x3D; +refs&#x2F;heads&#x2F;*:refs&#x2F;remotes&#x2F;github&#x2F;*</span><br><span class="line">[remote &quot;gitee&quot;]</span><br><span class="line">    url &#x3D; git@gitee.com:zykj&#x2F;test.git</span><br><span class="line">    fetch &#x3D; +refs&#x2F;heads&#x2F;*:refs&#x2F;remotes&#x2F;gitee&#x2F;*</span><br><span class="line">[branch &quot;master&quot;]</span><br><span class="line">    remote &#x3D; gitee</span><br><span class="line">    remote &#x3D; github</span><br><span class="line">    merge &#x3D; refs&#x2F;heads&#x2F;master</span><br></pre></td></tr></table></figure><p> 和第一种方法一样，如果不想用命令行，可以直接编辑该文件，添加对应的<code>remote</code>及<code>url</code>即可。</p></li></ol><p>参考链接：</p><ul><li><a href="https://github.com/Eished/git_notes">Git和GitHub详解</a></li><li><a href="https://www.jianshu.com/p/51892ee912e2">git本地仓库推送到多个远程仓库</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker的安装与使用</title>
      <link href="/posts/2c867817/"/>
      <url>/posts/2c867817/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker的安装与使用"><a href="#Docker的安装与使用" class="headerlink" title="Docker的安装与使用"></a>Docker的安装与使用</h2><blockquote><p>什么是Docker？</p></blockquote><div class="note info"><p><a href="https://www.docker.com/">Docker</a> 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。<br>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。<br>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）, 更重要的是容器性能开销极低。 </p><p>关键字：<code>容器虚拟化技术</code></p></div><h3 id="需要准备"><a href="#需要准备" class="headerlink" title="需要准备"></a>需要准备</h3><ul><li>Centos7.x系统、64位系统、内核版本3.10以上 <code>或</code> Centos6.5以上系统、64位系统、内核版本2.6.32以上</li><li>Centos必须能够联网</li></ul><p>如何查看Liunx系统内核?</p><div class="hide-block"><button type="button" class="hide-button button--animated" style="">点击查看    </button><span class="hide-content"><ul><li><p>Centos7.x查看方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure></li><li><p>Centos6.x查看方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lsb_release -a</span><br><span class="line"></span><br><span class="line">cat /etc/redhat-release</span><br></pre></td></tr></table></figure></li></ul></span></div><p>如果满足了上面的条件、我们现在就开始吧！</p><h2 id="Docker概念"><a href="#Docker概念" class="headerlink" title="Docker概念"></a>Docker概念</h2><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200328161635.png"></p><p><code>docker主机(Host)：</code>安装了Docker程序的机器（Docker直接安装在操作系统之上）；<br><code>docker客户端(Client)：</code>连接docker主机进行操作；<br><code>docker仓库(Registry)：</code>用来保存各种打包好的软件镜像；<br><code>docker镜像(Images)：</code>软件打包好的镜像；放在docker仓库中；<br><code>docker容器(Container)：</code>镜像启动后的实例称为一个容器；容器是独立运行的一个或一组应用；</p><h3 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h3><p>Centos7.x安装</p><div class="hide-block"><button type="button" class="hide-button button--animated" style="">点击查看    </button><span class="hide-content"><ol><li><p>需要提前安装的必备组件: gcc gcc-c++ (如果安装了可以忽略)</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc</span><br><span class="line">yum -y install gcc-c++</span><br></pre></td></tr></table></figure></li><li><p>卸载旧版本Docker (如果没有安装可以忽略)</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y remove docker docker-common docker-selinux docker-engine</span><br></pre></td></tr></table></figure></li><li><p>安装需要的软件包</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-peristent-data lvm2 </span><br></pre></td></tr></table></figure><p> 如果yum被其他进程占用、 <code>ps -ef|grep yum</code> 查看占用进程 <code>kill -9 占用的端口号</code> 就可以了。</p></li><li><p>设置镜像仓库地址</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></li><li><p>更新yum软件包索引</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure></li><li><p>安装Docker CE</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install docker-ce</span><br></pre></td></tr></table></figure></li><li><p>启动Docker</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker //启动Docker</span><br><span class="line">systemctl status docker //查看启动状态</span><br></pre></td></tr></table></figure></li><li><p>其他</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker version //查看版本</span><br><span class="line">docker run hello-world //运行helloworld镜像(没有会从远程仓库pull)</span><br><span class="line"></span><br><span class="line">卸载</span><br><span class="line">systemctl stop docker</span><br><span class="line">yum -y remove docker-re</span><br><span class="line">rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure></li></ol></span></div><p><strong>Centos6.8安装</strong></p><div class="hide-block"><button type="button" class="hide-button button--animated" style="">点击查看    </button><span class="hide-content"><ol><li><p>yum install -y epel-release</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Docker使用EPEL发布，RHEL系的OS首先要确保已经持有EPEL仓库，否则先检查OS的版本，然后安装相应的EPEL包。</span><br></pre></td></tr></table></figure></li><li><p>yum install -y docker-io</p></li><li><p>安装后的配置文件： /etc/sysconfig/docker</p></li><li><p>启动Docker后台服务： service docker start</p></li><li><p>docker version验证 </p></li></ol></span></div><h3 id="配置镜像加速"><a href="#配置镜像加速" class="headerlink" title="配置镜像加速"></a>配置镜像加速</h3><blockquote><p>使用阿里云镜像加速(<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a>)</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200328174602.png"></p><div class="hide-block"><button type="button" class="hide-button button--animated" style="">Centos配置方法    </button><span class="hide-content"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/docker //创建多级目录</span><br><span class="line">vim /etc/docker/daemon.json //编辑镜像地址</span><br><span class="line"></span><br><span class="line">输入：</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;粘贴你的镜像加速地址&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload //刷新配置</span><br><span class="line">systemctl restart docker //重启Docker</span><br></pre></td></tr></table></figure></span></div><h2 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h2><h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><ol><li><p><strong>docker version //Docker版本</strong></p></li><li><p><strong>docker info //Docker详细信息</strong></p></li><li><p><strong>docker help //Docker命令信息</strong></p></li></ol><h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><ol><li><p><strong>docker images //列出本地主机上的镜像</strong></p><table><thead><tr><th align="left">REPOSITORY</th><th align="left">TAG</th><th align="left">IMAGE ID</th><th align="left">CREATED</th><th align="left">SIZE</th></tr></thead><tbody><tr><td align="left">表示镜像的仓库源</td><td align="left">镜像的标签</td><td align="left">镜像ID</td><td align="left">镜像创建时间</td><td align="left">镜像大小</td></tr></tbody></table><p> <strong>可加参数：</strong></p><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>-a</code></td><td align="left">列出本地所有的镜像(含中间映像层)</td></tr><tr><td align="left"><code>-q</code></td><td align="left">只显示镜像ID</td></tr><tr><td align="left"><code>--digests</code></td><td align="left">只显示镜像的摘要信息</td></tr><tr><td align="left"><code>--no-trunc</code></td><td align="left">显示完整的镜像信息</td></tr></tbody></table></li><li><p><strong>docker search 镜像名字 //从云端查询指定镜像</strong></p><table><thead><tr><th align="left">NAME</th><th align="left">DESCRIPTION</th><th align="left">OFFICIAL</th><th align="left">STARTS</th><th align="left">AUTOMATED</th></tr></thead><tbody><tr><td align="left">镜像仓库源的名称</td><td align="left">镜像的描述</td><td align="left">是否 docker 官方发布</td><td align="left">类似 Github 里面的 star，表示点赞、喜欢的意思</td><td align="left">自动构建</td></tr></tbody></table><p> 官网：<a href="https://hub.docker.com/">https://hub.docker.com/</a></p><p> <strong>可加参数：</strong></p><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>--no-trunc</code></td><td align="left">显示完整的镜像描述</td></tr><tr><td align="left"><code>-s 数字</code></td><td align="left">列出收藏数不小于指定值的镜像)</td></tr><tr><td align="left"><code>--automated</code></td><td align="left">只列出 <code>automated bulid</code> 类型的镜像</td></tr></tbody></table></li><li><p><strong>docker pull 镜像名字[:TAG] //从云端下载指定镜像</strong></p></li><li><p><strong>docker rmi 镜像ID //删除本地指定镜像</strong></p><p> <strong>可加参数：</strong></p><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>-f</code></td><td align="left">强制删除某个镜像 例：docker rmi -f fce289e99eb9</td></tr><tr><td align="left"><code>-f 镜像名1:TAG 镜像名2:TAG</code></td><td align="left">强制删除多个镜像 例：docker rmi -f hello-world tomcat</td></tr><tr><td align="left"><code>-f $(docker images -qa)</code></td><td align="left">强制删除所有本地镜像</td></tr></tbody></table></li></ol><h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><ol><li><p><strong>docker run [OPTIONS] <code>IMAGE</code> [COMMAND] [ARG…] //新建并启动容器</strong></p><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>--name=&quot;容器新名字&quot;</code></td><td align="left">为容器指定一个名字</td></tr><tr><td align="left"><code>-d</code></td><td align="left">后台运行容器，并返回容器ID，也启动守护式容器</td></tr><tr><td align="left"><code>-i</code></td><td align="left">以交互模式运行容器，通常与 -t 同时运行</td></tr><tr><td align="left"><code>-t</code></td><td align="left">为容器重新分配一个伪输入终端，通常与 -i 同时运行</td></tr><tr><td align="left"><code>-P</code></td><td align="left">随机端口映射</td></tr><tr><td align="left"><code>-p</code></td><td align="left">指定端口映射，有以下四种格式:</td></tr><tr><td align="left"></td><td align="left">ip:hostPort:containerPort</td></tr><tr><td align="left"></td><td align="left">ip::containerPort</td></tr><tr><td align="left"></td><td align="left">hostPort:containerPort 主机端口:容器端口</td></tr><tr><td align="left"></td><td align="left">containerPort</td></tr></tbody></table></li><li><p><strong>docker ps [OPTIONS] //列出当前所有正在运行的容器</strong></p><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>-a</code></td><td align="left">列出当前所有<code>正在运行的容器</code>+<code>历史上运行过的</code></td></tr><tr><td align="left"><code>-l</code></td><td align="left">显示最近创建的容器</td></tr><tr><td align="left"><code>-n</code></td><td align="left">显示最近n个创建的容器 例：docker ps -n 3</td></tr><tr><td align="left"><code>-q</code></td><td align="left"><code>静默模式，只显示容器编号</code></td></tr><tr><td align="left"><code>--no-trunc</code></td><td align="left">随机端口映射</td></tr></tbody></table></li><li><p><strong>退出容器</strong></p><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>exit</code></td><td align="left">容器停止退出</td></tr><tr><td align="left"><code>Ctrl+P+Q</code></td><td align="left">容器不停止退出</td></tr></tbody></table></li><li><p><strong>docker start 容器ID或者容器名 //启动容器</strong></p></li><li><p><strong>docker restart 容器ID或者容器名 //重启容器</strong></p></li><li><p><strong>docker stop 容器ID或者容器名 //停止容器</strong></p></li><li><p><strong>docker kill 容器ID或者容器名 //强制停止容器</strong></p></li><li><p><strong>docker rm 容器ID //删除已经停止容器</strong></p><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>docker rm -f $(docker ps -a -q)</code></td><td align="left">一次性删除多个容器</td></tr><tr><td align="left"><code>docker ps -a -q｜xargs docker rm</code></td><td align="left">容器不停止退出</td></tr></tbody></table></li><li><p><strong>docker commit 提交容器副本使之成为一个新的镜像</strong></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit -m=<span class="string">&quot;提交的描述信息&quot;</span> -a=<span class="string">&quot;作者&quot;</span> 容器ID 要创建的目标镜像名[:标签名]</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>-a</code></td><td align="left">提交的镜像作者</td></tr><tr><td align="left"><code>-c</code></td><td align="left">使用Dockerfile指令来创建镜像</td></tr><tr><td align="left"><code>-m</code></td><td align="left">提交时的说明文字</td></tr><tr><td align="left"><code>-p</code></td><td align="left">在commit时，将容器暂停</td></tr></tbody></table></li><li><p><strong>docker inspect 镜像ID //获取容器/镜像的元数据、返回一个 JSON 文件记录着 Docker 容器的配置和状态信息。</strong></p><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>-f</code></td><td align="left">指定返回值的模板文件</td></tr><tr><td align="left"><code>-s</code></td><td align="left">显示总的文件大小</td></tr><tr><td align="left"><code>--type</code></td><td align="left">为指定类型返回JSON</td></tr></tbody></table></li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li><p><strong>启动守护式容器</strong></p><p> <code>docker run -d 容器名</code></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">使用镜像centos:latest以后台模式启动一个容器</span><br><span class="line"></span><br><span class="line">docker run -d centos</span><br><span class="line"></span><br><span class="line">问题:然后docker ps -a进行查看,会发现容器已经退出</span><br><span class="line"></span><br><span class="line">很重要的要说明的一点:Docker容器后台运行就必须有一个前台进程</span><br><span class="line"></span><br><span class="line">容器运行的命令如果不是那些一直挂起的命令(比如运行top,tail),就是会自动退出的。</span><br></pre></td></tr></table></figure> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d centos /bin/sh -C <span class="string">&quot;while true;do echo hello zykj;sleep 2;done&quot;</span></span><br><span class="line">启动时给centos一些参数、可以让容器不停止运行、死循环输出日志</span><br></pre></td></tr></table></figure></li><li><p><strong>查看容器日志</strong></p><ul><li><p>docker logs -f -t –tail 容器ID</p><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>-t</code></td><td align="left">是加入时间戳</td></tr><tr><td align="left"><code>-f</code></td><td align="left">跟随最新的日志打印</td></tr><tr><td align="left"><code>--tail</code></td><td align="left">数字显示最后多少条</td></tr></tbody></table></li></ul></li><li><p><strong>查看容器内运行的进程</strong></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker top 容器ID </span><br></pre></td></tr></table></figure></li><li><p><strong>进入正在运行的容器以命令行交互</strong></p><ul><li><p>docker exec -it 容器ID bashShell //不进入容器里执行容器命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">以Centos为例:</span><br><span class="line">docker <span class="built_in">exec</span> -it 容器ID ls -l /tmp </span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it 容器ID /bin/bash //进入交互模式</span><br></pre></td></tr></table></figure></li><li><p>重新进入docker attach 容器ID</p></li></ul><p> <strong>区别：</strong></p><p>  <code>exec</code>: 是在容器中打开新的终端，并且可以启动新的进程<br>  <code>attach</code>: 直接进入容器启动命令的终端，不会启动新的进程</p></li><li><p><strong>从容器内拷贝文件到主机上</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 容器ID:容器内路径目的主机路径</span><br></pre></td></tr></table></figure></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200402170142.png"></p><div class="hide-block"><button type="button" class="hide-button button--animated" style="">更多命令    </button><span class="hide-content"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">attach    Attach to a running container                 # 当前 shell 下 attach 连接指定运行镜像</span><br><span class="line">build     Build an image from a Dockerfile              # 通过 Dockerfile 定制镜像</span><br><span class="line">commit    Create a new image from a container changes   # 提交当前容器为新的镜像</span><br><span class="line">cp        Copy files&#x2F;folders from the containers filesystem to the host path   #从容器中拷贝指定文件或者目录到宿主机中</span><br><span class="line">create    Create a new container                        # 创建一个新的容器，同 run，但不启动容器</span><br><span class="line">diff      Inspect changes on a container&#39;s filesystem   # 查看 docker 容器变化</span><br><span class="line">events    Get real time events from the server          # 从 docker 服务获取容器实时事件</span><br><span class="line">exec      Run a command in an existing container        # 在已存在的容器上运行命令</span><br><span class="line">export    Stream the contents of a container as a tar archive   # 导出容器的内容流作为一个 tar 归档文件[对应 import ]</span><br><span class="line">history   Show the history of an image                  # 展示一个镜像形成历史</span><br><span class="line">images    List images                                   # 列出系统当前镜像</span><br><span class="line">import    Create a new filesystem image from the contents of a tarball # 从tar包中的内容创建一个新的文件系统映像[对应export]</span><br><span class="line">info      Display system-wide information               # 显示系统相关信息</span><br><span class="line">inspect   Return low-level information on a container   # 查看容器详细信息</span><br><span class="line">kill      Kill a running container                      # kill 指定 docker 容器</span><br><span class="line">load      Load an image from a tar archive              # 从一个 tar 包中加载一个镜像[对应 save]</span><br><span class="line">login     Register or Login to the docker registry server    # 注册或者登陆一个 docker 源服务器</span><br><span class="line">logout    Log out from a Docker registry server          # 从当前 Docker registry 退出</span><br><span class="line">logs      Fetch the logs of a container                 # 输出当前容器日志信息</span><br><span class="line">port      Lookup the public-facing port which is NAT-ed to PRIVATE_PORT    # 查看映射端口对应的容器内部源端口</span><br><span class="line">pause     Pause all processes within a container        # 暂停容器</span><br><span class="line">ps        List containers                               # 列出容器列表</span><br><span class="line">pull      Pull an image or a repository from the docker registry server   # 从docker镜像源服务器拉取指定镜像或者库镜像</span><br><span class="line">push      Push an image or a repository to the docker registry server    # 推送指定镜像或者库镜像至docker源服务器</span><br><span class="line">restart   Restart a running container                   # 重启运行的容器</span><br><span class="line">rm        Remove one or more containers                 # 移除一个或者多个容器</span><br><span class="line">rmi       Remove one or more images             # 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除]</span><br><span class="line">run       Run a command in a new container              # 创建一个新的容器并运行一个命令</span><br><span class="line">save      Save an image to a tar archive                # 保存一个镜像为一个 tar 包[对应 load]</span><br><span class="line">search    Search for an image on the Docker Hub         # 在 docker hub 中搜索镜像</span><br><span class="line">start     Start a stopped containers                    # 启动容器</span><br><span class="line">stop      Stop a running containers                     # 停止容器</span><br><span class="line">tag       Tag an image into a repository                # 给源中镜像打标签</span><br><span class="line">top       Lookup the running processes of a container   # 查看容器中运行的进程信息</span><br><span class="line">unpause   Unpause a paused container                    # 取消暂停容器</span><br><span class="line">version   Show the docker version information           # 查看 docker 版本号</span><br><span class="line">wait      Block until a container stops, then print its exit code   # 截取容器停止时的退出状态值</span><br></pre></td></tr></table></figure></span></div>   <h2 id="Docker容器数据卷"><a href="#Docker容器数据卷" class="headerlink" title="Docker容器数据卷"></a>Docker容器数据卷</h2><blockquote><p>docker的理念将运行的环境打包形成容器运行，运行可以伴随容器，但是我们对数据的要求是希望持久化，容器之间可以共享数据，Docker容器产生的数据，如果不通过docker commit生成新的镜像，使得数据作为容器的一部分保存下来，那么当容器被删除之后，数据也就没了，为了能够保存数据，在docker容器中使用卷。卷就是目录或者文件，存在于一个或者多个容器中，但是不属于联合文件系统，因此能够绕过Union File System提供一些用于持久化数据或共享数据的特点。<br>关键字: <code>容器的持久化</code>、<code>容器间继承+共享数据</code></p></blockquote><h3 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h3><h4 id="容器内添加"><a href="#容器内添加" class="headerlink" title="容器内添加"></a>容器内添加</h4><h5 id="直接命令添加"><a href="#直接命令添加" class="headerlink" title="直接命令添加"></a>直接命令添加</h5><ul><li><p>命令 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v /宿主机绝对路径目录:/容器内目录 镜像名</span><br><span class="line"></span><br><span class="line">例：(ps:目录不存在会自动创建)</span><br><span class="line">docker run -it -v /myDataVolume:/dataVolumeContianer centos </span><br><span class="line"></span><br><span class="line">通过docker inspect查看</span><br><span class="line"><span class="string">&quot;VolimesRW&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;/dataVolumeContainer&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">Docker挂载主机目录Docker访问出现cannot open directory : Permission denied</span><br><span class="line">解决办法:在挂载目录后多加一个--privileged=<span class="literal">true</span>参数即可</span><br></pre></td></tr></table></figure></li><li><p>容器和宿主机之间会数据共享</p></li><li><p>容器停止退出后，主机修改后数据同样数据同步</p></li><li><p>命令(带权限：主机目录创建文件、容器目录只读)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v /宿主机绝对路径目录:/容器内目录:ro镜像名</span><br><span class="line"></span><br><span class="line">通过docker inspect查看</span><br><span class="line"><span class="string">&quot;VolimesRW&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;/dataVolumeContainer&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul><h5 id="Dockerfile添加"><a href="#Dockerfile添加" class="headerlink" title="Dockerfile添加"></a>Dockerfile添加</h5><ul><li><p>根目录(其他目录也可以)下新建mydocker文件夹并进入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /</span><br><span class="line">mkdir mydocker</span><br></pre></td></tr></table></figure></li><li><p>可在Dockerfile中使用VOLUME指令来给镜像添加一个或多个数据卷</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">VOLUME[<span class="string">&quot;/dataVolumeContainer&quot;</span>,<span class="string">&quot;/dataVolumeContainer2&quot;</span>,<span class="string">&quot;/dataVolumeContainer3&quot;</span>]</span><br><span class="line"></span><br><span class="line">说明:</span><br><span class="line">出于可移植和分享的考虑，用 -v主机目录:容器目录这种方法不能够直接在Dockerfile中实现。</span><br><span class="line">由于宿主机目录是依赖于特定宿主机的，并不能够保证在所有的宿主机上都存在这样的特定目录。</span><br></pre></td></tr></table></figure></li><li><p>File构建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vim Dockerfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># volume test</span></span><br><span class="line">FROM centos</span><br><span class="line">VOLUME [<span class="string">&quot;/dataVolumeContainer1&quot;</span>,<span class="string">&quot;/dataVolumeContainer2&quot;</span>]</span><br><span class="line">CMD <span class="built_in">echo</span> <span class="string">&quot;Hello,-----world!&quot;</span></span><br><span class="line">CMD /bin/bash</span><br><span class="line"></span><br><span class="line">通过docker命令解释就是：</span><br><span class="line">docker run -it -V /host1: /dataVolumeContainer1 -v /host2:/dataVolumeContainer2 centos /bin/bash</span><br></pre></td></tr></table></figure></li><li><p>build后生成镜像 获得一个新镜像zykj/centos</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker build -f /mydocker/Dockerfile -t zykj/centos .</span><br><span class="line"></span><br><span class="line">-f :指定要使用的Dockerfile路径；</span><br><span class="line">--tag, -t: 镜像的名字及标签，通常 name:tag 或者 name 格式；可以在一次构建中为一个镜像设置多个标签。</span><br><span class="line">. :当前目录</span><br></pre></td></tr></table></figure></li><li><p>run容器 </p></li></ul><h3 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h3><blockquote><p>命名的容器挂载数据卷，其它容器通过挂载这个(父容器)实现数据共享，挂载数据卷的容器，称之为数据卷容器</p></blockquote><h4 id="容器间数据共享-volumes-from"><a href="#容器间数据共享-volumes-from" class="headerlink" title="容器间数据共享 - -volumes-from"></a>容器间数据共享 - -volumes-from</h4><ul><li><p>命令</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name 子容器 --volumes-from 父容器 zykj&#x2F;centos</span><br></pre></td></tr></table></figure></li><li><p>结论:容器之间配置信息的传递，数据卷的生命周期一直持续到没有容器使用它为止</p></li></ul><h2 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h2><blockquote><p>Dockerfile是用来构建Docker镜像的构建文件，是由一系列命令和参数构成的脚本。</p></blockquote><h3 id="构建三个步骤"><a href="#构建三个步骤" class="headerlink" title="构建三个步骤"></a>构建三个步骤</h3><ul><li>编写Dockerfile文件</li><li>docker build</li><li>docker run</li></ul><h3 id="Dockerfile构建过程解析"><a href="#Dockerfile构建过程解析" class="headerlink" title="Dockerfile构建过程解析"></a>Dockerfile构建过程解析</h3><p><strong>Dockerfile内容基础知识</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">每条保留字指令都必须为大写字母且后面要跟随至少一个参数</span><br><span class="line">指令按照从上到下，顺序执行</span><br><span class="line">#表示注释</span><br><span class="line">每条指令都会创建一一个新的镜像层，并对镜像进行提交</span><br></pre></td></tr></table></figure><h3 id="Docker执行Dockerfile的大致流程"><a href="#Docker执行Dockerfile的大致流程" class="headerlink" title="Docker执行Dockerfile的大致流程"></a>Docker执行Dockerfile的大致流程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker从基础镜像运行一个容器</span><br><span class="line">执行一条指令并对容器作出修改</span><br><span class="line">执行类似docker commit的操作提交-一个新的镜像层</span><br><span class="line">docker再基于刚提交的镜像运行一个新容器</span><br><span class="line">执行dockerfile中的下一条指令直到所有指令都执行完成</span><br></pre></td></tr></table></figure><p>总结：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Dockerfile，需要定义一个Dockerfile，Dockerfile定义了进程需要的一切东西。Dockerfile涉 及的内容包括执行代码或者是文件、环境</span><br><span class="line">变量、依赖包、运行时环境、动态链接库、操作系统的发行版、服务进程和内核进程(当应用进程需要和系统服务和内核进程打交道，</span><br><span class="line">这时需要考虑如何设计namespace的权限控制)等等;</span><br><span class="line">Docker镜像，在用Dockerfile定义一个文件之后，docker build时会产生一个Docker镜像，当运行Docker镜像时，会真正开始提供服务;</span><br><span class="line">Docker容器，容器是直接提供服务的。</span><br></pre></td></tr></table></figure><h3 id="Docker体系结构-保留字指令"><a href="#Docker体系结构-保留字指令" class="headerlink" title="Docker体系结构(保留字指令)"></a>Docker体系结构(保留字指令)</h3><ul><li><p><code>FROM</code> 基础镜像，当前新镜像是基于哪个镜像的</p></li><li><p><code>MAINTAINER</code> 镜像维护者的姓名和邮箱地址</p></li><li><p><code>RUN</code> 容器构建时需要运行的命令</p></li><li><p><code>EXPOSE</code> 当前容器对外暴露出的端口</p></li><li><p><code>WORKDIR</code> 指定在创建容器后，终端默认登陆的进来工作目录，一个落脚点(就是工作目录)</p></li><li><p><code>ENV</code> 用来在构建镜像过程中设置环境变量</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ENV MY_PATH &#x2F;usr&#x2F;mytest</span><br><span class="line"> </span><br><span class="line">这个环境变量可以在后续的任何RUN指令中使用，这就如同在命令前面指定了环境变量前缀一样;</span><br><span class="line">也可以在其它指令中直接使用这些环境变量</span><br><span class="line"></span><br><span class="line">比如: WORKDIR $MY_PATH </span><br></pre></td></tr></table></figure></li><li><p><code>ADD</code> 将宿主机目录下的文件拷贝进镜像且ADD命令会 <code>自动处理URL</code> 和 <code>解压tar压缩包</code>，类似ADD，拷贝文件和目录到镜像中。</p></li><li><p><code>COPY</code> 将从构建上下文目录中&lt;源路径&gt;的文件/目录复制到新的一层的镜像内的&lt;目标路径&gt;位置</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">两种方法：</span><br><span class="line">COPY src dest</span><br><span class="line">COPY [&quot;src&quot;,&quot;dest&quot;]</span><br></pre></td></tr></table></figure></li><li><p><code>VOLUME</code> 容器数据卷， 用于数据保存和持久化工作</p></li><li><p><code>CMD</code></p><ul><li><p>Dockerfile中可以有多个CMD指令，但<code>只有最后一个生效</code>，<code>CMD 会被docker run之后的参数替换</code></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CMD容器启动命令</span><br><span class="line">CMD指令的格式和RUN相似，也是两种格式:</span><br><span class="line"></span><br><span class="line">● shell格式: CMD &lt;命令&gt;</span><br><span class="line">● exec格式: CMD [&quot;可执行文件&quot;，&quot;参数1&quot;， &quot;参数2&quot; ...]</span><br><span class="line">● 参数列表格式: CMD [&quot;参数1&quot;，&quot;参数2&quot;...]。在指定了 ENTRYPOINT 指令后，用 CMD 指定具体的参数。</span><br></pre></td></tr></table></figure></li><li><p>指定一个容器启动时要运行的命令口</p></li></ul></li><li><p><code>ENTRYPOINT</code> </p><ul><li>指定一个容器启动时要运行的命令</li><li>ENTRYPOINT的目的和CMD一样，都是在指定容器启动程序及参数</li></ul></li><li><p><code>ONBUILD</code> 当构建一个被继承的Dockerfile时运行命令，父镜像在被子继承后父镜像的onbuild被触发</p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200401115745.png"></p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="Base镜像-scratch"><a href="#Base镜像-scratch" class="headerlink" title="Base镜像(scratch)"></a><code>Base镜像(scratch)</code></h4><p>DockerHub中99%的镜像都是通过在base镜像中安装和配置需要的软件构建出来的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos</span><br><span class="line">docker run -it centos &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><h4 id="自定义镜像mycentos"><a href="#自定义镜像mycentos" class="headerlink" title="自定义镜像mycentos"></a><code>自定义镜像mycentos</code></h4><ul><li>编写<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vim Dockerfile</span><br><span class="line"></span><br><span class="line">FROM centos</span><br><span class="line">MAINTAINER zykj&lt;zykj@zykj.com&gt;</span><br><span class="line"></span><br><span class="line">ENV MYPATH &#x2F;usr&#x2F;local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD echo $MYPATH</span><br><span class="line">CMD echo &quot;success-------------ok&quot;</span><br><span class="line">CMD &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure></li><li>构建 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker build 镜像名字:TAG .</span><br><span class="line">       </span><br><span class="line">例：docker build -f &#x2F;mydocker&#x2F;Dockerfile mycentos:1.3 .</span><br></pre></td></tr></table></figure></li><li>运行  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it 镜像名字:TAG</span><br></pre></td></tr></table></figure></li><li>列出镜像的变更历史  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker history 镜像ID</span><br></pre></td></tr></table></figure></li></ul><h4 id="CMD-ENTRYPOINT案例"><a href="#CMD-ENTRYPOINT案例" class="headerlink" title="CMD/ENTRYPOINT案例"></a><code>CMD/ENTRYPOINT案例</code></h4><ul><li>都是指定一个容器启动时要运行的命令</li><li>CMD <ul><li>Dockerfile中可以有多个CMD指令，但只有最后一个生效，CMD会被docker run之后的参数替换    </li><li>运行tomcat docker run -it -p 8888:8080 tomcat ls -l</li></ul></li><li>ENTRYPOINT <ul><li>docker run之后的参数会被当做参数传递给ENTRYPOINT，之后形成新的命令组合</li><li>例子 <ul><li>制作 <code>CMD</code> 版可以查询IP信息的容器(<code>curl直接访问http://ip.cn会报403、所以。。。以下告诉方法</code>)  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">RUN yum install -y curl</span><br><span class="line">CMD [ &quot;curl&quot; , &quot;-s&quot; , &quot;http:&#x2F;&#x2F;ip.cn&quot; ]</span><br></pre></td></tr></table></figure>  <strong>curl命令解释</strong>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">curl命令可以用来执行下载、发送各种HTTP请求，指定HTTP头部等操作。</span><br><span class="line">如果系统没有curl可以使用yum install curl安装，也可以下载安装。</span><br><span class="line">curl是将下载文件输出到stdout</span><br><span class="line"></span><br><span class="line">使用命令: curl http:&#x2F;&#x2F;www.baidu.com</span><br><span class="line">执行后，www.baidu.com的html就会显示在屏幕上了</span><br><span class="line"></span><br><span class="line">这是最简单的使用方法。用这个命令获得了http:&#x2F;&#x2F;curl.haxx.se指向的页面，同样，如果这里的URL指向的是一个文件</span><br><span class="line">或者一幅图都可以直接下载到本地。如果下载的是HTML文档，那么缺省的将只显示文件头部，即HTML文档的</span><br><span class="line">header。要全部显示，请加参数 -i</span><br></pre></td></tr></table></figure></li><li>问题 如果我们希望显示HTTP头信息，就需要加上i参数、docker run myip -i 但是会报错</li><li>WHY  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">我们可以看到可执行文件找不到的报错，executable file not found。 </span><br><span class="line">之前我们说过，跟在镜像名后面的是command,运行时会替换CMD的默认值。</span><br><span class="line">因此这里的-i替换了原来的CMD，而不是添加在原来的curl -s htp:&#x2F;&#x2F;ip.cn 后面。而-i根本不是命令，所以自然找不到。</span><br><span class="line"></span><br><span class="line">那么如果我们希望加入-i这参数，我们就必须重新完整的输入这个命令:</span><br><span class="line"></span><br><span class="line">docker run myip curl -s http:&#x2F;&#x2F;ip.cn -i</span><br></pre></td></tr></table></figure></li><li>制作 <code>ENTROYPOINT</code> 版查询IP信息的容器  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">RUN yum install -y curl</span><br><span class="line">ENTROYPOINT [ &quot;curl&quot; , &quot;-s&quot; , &quot;http:&#x2F;&#x2F;ip.cn&quot; ]</span><br></pre></td></tr></table></figure>  通过使用ENTROYPOINT可以执行docker run myip -i、-i作为参数追加</li></ul></li></ul></li></ul><h4 id="自定义Tomcat9镜像"><a href="#自定义Tomcat9镜像" class="headerlink" title="自定义Tomcat9镜像"></a><code>自定义Tomcat9镜像</code></h4><ol><li><p><code>mkdir -p /zykjuse/mydockerfile/tomcat9</code></p></li><li><p>在上述目录下 <code>touch c.txt</code></p></li><li><p>将 <code>jdk</code> 和 <code>tomcat</code> 安装的压缩包拷贝进上一步目录</p><p> <a href="http://archive.apache.org/dist/tomcat/tomcat-9/v9.0.8/bin/">apache-tomcat-9.0.8.tar.gz</a><br> <a href="https://download.huihoo.com/java/javase/8/">jdk-8u171-linux-x64.tar.gz</a></p></li><li><p>在/zzkjuse/mydockerfile/tomcat9目录下新建Dockerfile文件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">MAINTAINER zykj&lt;zykj@zykj.com&gt;</span><br><span class="line">#把宿主机当前上下文的c.txt拷贝到容器&#x2F;usr&#x2F;local&#x2F;路径下</span><br><span class="line">COPY c.txt &#x2F;usr&#x2F;local&#x2F;cincontainer.txt</span><br><span class="line">#把java与tomcat添加到容器中</span><br><span class="line">ADD jdk-8u171-linux-x64.tar.gz &#x2F;usr&#x2F;local&#x2F;</span><br><span class="line">ADD apache-tomcat-9.0.8.tar.gz &#x2F;usr&#x2F;local&#x2F;</span><br><span class="line">#安装vim编辑器</span><br><span class="line">RUN yum -y install vim</span><br><span class="line">#设置工作访问时候的WORKDIR路径，登录落脚点</span><br><span class="line">ENV MYPATH &#x2F;usr&#x2F;local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line">#配置java与tomcat环境变量</span><br><span class="line">ENV JAVA_HOME &#x2F;usr&#x2F;local&#x2F;jdk1.8.0_171</span><br><span class="line">ENV CLASSPATH $JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jar</span><br><span class="line">ENV CATALINA_HOME &#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.8</span><br><span class="line">ENV CATALINA_BASE &#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.8</span><br><span class="line">ENV PATH $PATH:$JAVA_HOME&#x2F;bin:$CATALINA_HOME&#x2F;lib:$CATALINA_HOME&#x2F;bin</span><br><span class="line">#容器运行时监听的端口</span><br><span class="line">EXPOSE  8080</span><br><span class="line">#启动时运行tomcat</span><br><span class="line"># ENTRYPOINT [&quot;&#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.8&#x2F;bin&#x2F;startup.sh&quot; ]</span><br><span class="line"># CMD [&quot;&#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.8&#x2F;bin&#x2F;catalina.sh&quot;,&quot;run&quot;]</span><br><span class="line">CMD &#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.8&#x2F;bin&#x2F;startup.sh &amp;&amp; tail -F &#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.8&#x2F;bin&#x2F;logs&#x2F;catalina.out</span><br></pre></td></tr></table></figure></li><li><p>构建</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t zykjtomcat9 .</span><br><span class="line">ps:如果Dockerfile在当前目录内可以不指定</span><br></pre></td></tr></table></figure></li><li><p>运行</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 9080:8080 --name myt9 -v /zzyyuse/mydockerfile/tomcat9/<span class="built_in">test</span>:/usr/<span class="built_in">local</span>/apache-tomcat-9.0.8/webapps/<span class="built_in">test</span> -v /zzyyuse/mydockerfile/tomcat9/tomcat9logs/:/usr/<span class="built_in">local</span>/apache-tomcat-9.0.8/logs --privileged=<span class="literal">true</span> zykjtomcat9</span><br></pre></td></tr></table></figure></li><li><p>结合前述容器卷将测试的web服务test发布</p><ul><li><p>在/zykjuse/mydockerfile/tomcat9下创建test目录</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir <span class="built_in">test</span></span><br></pre></td></tr></table></figure></li><li><p>编写 <code>a.jsp</code></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vim a.jsp</span><br><span class="line"></span><br><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">-----------welcome------------</span><br><span class="line">&lt;%=<span class="string">&quot;i am in docker tomcat self &quot;</span>%&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;% System.out.println(<span class="string">&quot;=============docker tomcat self&quot;</span>);%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>在当前创建WEB-INF目录</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir WEB-INF</span><br></pre></td></tr></table></figure></li><li><p>编写<code>web.xml</code></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vim web.xml</span><br><span class="line"></span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">xmlns&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;javaee&quot;</span><br><span class="line">xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;javaee http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;javaee&#x2F;web-app_2_5.xsd&quot;</span><br><span class="line">id&#x3D;&quot;WebApp_ID&quot; version&#x3D;&quot;2.5&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;display-name&gt;test&lt;&#x2F;display-name&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;web-app&gt;</span><br><span class="line"></span><br><span class="line">最后重启容器访问 localhost:9080&#x2F;test&#x2F;a.jsp就可以了</span><br></pre></td></tr></table></figure><h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h3></li></ul></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200402165812.png"></p><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><h3 id="安装Tomcat"><a href="#安装Tomcat" class="headerlink" title="安装Tomcat"></a>安装Tomcat</h3><ol><li>docker hub上面查找tomcat镜像(<code>docker search tomcat</code>)</li><li>从docker hub上拉取tomcat镜像到本地(<code>docker pull tomcat</code>)</li><li><code>docker images</code>查看是否有拉取到的tomcat</li><li>使用tomcat镜像创建容器(也叫运行镜像) (<code>docker run -it -p 8080:8080 tomcat</code>)<ul><li><code>-p</code> : 主机端口:docker容器端口</li><li><code>-P</code> : 随机分配端口D</li><li><code>-i</code> : 交互</li><li><code>-t</code> : 终端</li></ul></li></ol><h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><ol><li>docker hub上面查找mysql镜像</li><li>从docker hub上(阿里云加速器)拉取mysql镜像到本地标签为5.7</li><li>使用mysql5.7镜像创建容器(也叫运行镜像)<ul><li>使用mysql镜像  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 3306:3306 --name mysql -v &#x2F;zykjuse&#x2F;mysql&#x2F;conf:&#x2F;etc&#x2F;mysql&#x2F;conf.d -v &#x2F;zzyyuse&#x2F;mysql&#x2F;logs:&#x2F;logs -v &#x2F;zykjuse&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql -e MYSQL_ROOT_PASSWORD&#x3D;123456 -d mysql:5.7</span><br></pre></td></tr></table></figure>  命令说明：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-p 3306:3306：将主机的3306端口映射到docker容器的3306端口。</span><br><span class="line">--name mysql：运行服务名字</span><br><span class="line">-v &#x2F;zykjuse&#x2F;mysql&#x2F;conf:&#x2F;etc&#x2F;mysql&#x2F;conf.d ：将主机&#x2F;zykjuse&#x2F;mysql目录下的conf&#x2F;my.cnf 挂载到容器的 &#x2F;etc&#x2F;mysql&#x2F;conf.d</span><br><span class="line">-v &#x2F;zykjuse&#x2F;mysql&#x2F;logs:&#x2F;logs：将主机&#x2F;zykjuse&#x2F;mysql目录下的 logs 目录挂载到容器的 &#x2F;logs。</span><br><span class="line">-v &#x2F;zykjuse&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql ：将主机&#x2F;zykjuse&#x2F;mysql目录下的data目录挂载到容器的 &#x2F;var&#x2F;lib&#x2F;mysql </span><br><span class="line">-e MYSQL_ROOT_PASSWORD&#x3D;123456：初始化 root 用户的密码。</span><br><span class="line">-d mysql:5.7 : 后台程序运行mysql5.7</span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it MySQL运行成功后的容器ID  &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure></li><li>外部Win10也来连接运行在docker上的mysql服务</li><li>数据备份小测试(可以不做)  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec mysql服务容器ID sh -c &#39; exec mysqldump --all-databases -uroot -p&quot;123456&quot; &#39; &gt; &#x2F;zykjuse&#x2F;all-databases.sql</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h3><ol><li><p>从docker hub.上(阿里云加速器)拉取redis镜像到本地标签为3.2 </p></li><li><p>使用redis3. 2镜像创建容器(也叫运行镜像)</p><ul><li><p>使用镜像</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 6379:6379 -v /zykjuse/myredis/data:/data -v /zykjuse/myredis/conf/redis.conf:/usr/<span class="built_in">local</span>/etc/redis/redis.conf  -d redis:3.2 redis-server /usr/<span class="built_in">local</span>/etc/redis/redis.conf --appendonly yes</span><br></pre></td></tr></table></figure><p>  命令说明：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-p 6379:6379：将主机的6379端口映射到docker容器的3306端口。</span><br><span class="line">-v &#x2F;zykjuse&#x2F;myredis&#x2F;data:&#x2F;data：将主机&#x2F;zykjuse&#x2F;myredis目录下的 data 目录挂载到容器的 &#x2F;data。</span><br><span class="line">-v &#x2F;zykjuse&#x2F;myredis&#x2F;conf&#x2F;redis.conf:&#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis&#x2F;redis.conf：将主机&#x2F;zykjuse&#x2F;myredis&#x2F;conf&#x2F;目录下的 redis.conf 目录 挂载到容器的 &#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis&#x2F;redis.conf</span><br><span class="line">-d redis:3.2 redis-server: 后台程序运行redis:3.2、redis-server</span><br><span class="line">--appendonly yes：开启AOF模式</span><br></pre></td></tr></table></figure></li><li><p>在主机 /zykjuse/myredis/conf/redis.conf 目录下新建redis.conf文件 </p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /zzyuse/myredis/conf/redis.conf/redis.conf</span><br></pre></td></tr></table></figure><p>  <code>redis.conf</code> 在这里可以复制 <a href="https://github.com/antirez/redis/blob/unstable/redis.conf">https://github.com/antirez/redis/blob/unstable/redis.conf</a></p></li><li><p>测试redis cli连接上来</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 运行着Rediis服务的容器ID redis-cli</span><br></pre></td></tr></table></figure></li><li><p>测试持久化文件生成</p></li></ul></li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="IDEA整合Docker部署java项目"><a href="#IDEA整合Docker部署java项目" class="headerlink" title="IDEA整合Docker部署java项目"></a>IDEA整合Docker部署java项目</h3><h4 id="配置Docker的远程访问"><a href="#配置Docker的远程访问" class="headerlink" title="配置Docker的远程访问"></a>配置Docker的远程访问</h4><ol><li><p>修改/lib/systemd/system/docker.service</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure></li><li><p>替换ExecStart</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">替换</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;dockerd -H fd:&#x2F;&#x2F; --containerd&#x3D;&#x2F;run&#x2F;containerd&#x2F;containerd.sock</span><br><span class="line">为</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;dockerd -H tcp:&#x2F;&#x2F;0.0.0.0:2375 -H unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock</span><br></pre></td></tr></table></figure><p> <img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200403094734.png"></p></li><li><p>重启Docker服务</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></li><li><p>查看2375端口是否被监听</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -nlpt</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200403095311.png"></p></li><li><p>服务器防火墙开启2375端口</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 开放2375端口</span><br><span class="line">firewall-cmd --add-port&#x3D;2375&#x2F;tcp --permanent</span><br><span class="line"># 重启防火墙(修改配置后要重启防火墙)</span><br><span class="line">firewall-cmd --reload</span><br><span class="line"># 查看开放的端口</span><br><span class="line">firewall-cmd --zone&#x3D;public --list-ports</span><br><span class="line">  </span><br><span class="line"># 参数解释</span><br><span class="line">firwall-cmd：是Linux提供的操作firewall的一个工具；</span><br><span class="line">--permanent：表示设置为持久；</span><br><span class="line">--add-port：标识添加的端口； </span><br></pre></td></tr></table></figure><p> <img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200403103843.png"></p><p> 如果是云服务器、那么还要添加安全组规则(这里以阿里云服务器为演示)<br> <img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200403103421.png"></p></li><li><p>验证是否成功</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">本地：</span><br><span class="line">   curl http:&#x2F;&#x2F;127.0.0.1:2375&#x2F;version</span><br><span class="line">网页：</span><br><span class="line">   http:&#x2F;&#x2F;服务器IP:2375&#x2F;version</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200403104848.png"><br>网页访问一样。</p></li></ol><h4 id="IDEA中配置Docker插件"><a href="#IDEA中配置Docker插件" class="headerlink" title="IDEA中配置Docker插件"></a>IDEA中配置Docker插件</h4><ul><li><p>确保IDEA安装Docker插件<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200404104926.png"></p></li><li><p>打开设置<code>Settings-&gt;Build,Execution,Deployment</code>、找到Docker添加 </p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200403170430.png"></p><p>配置好了会显示<code>Connection successful</code></p><p>接下来配置镜像加速</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200403171417.png"></p><p>点击OK之后，下方控制栏，出现Docker控制台</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200403173150.png"></p><h4 id="集成Maven插件"><a href="#集成Maven插件" class="headerlink" title="集成Maven插件"></a>集成Maven插件</h4><ul><li><p>在项目的pom.xml文件中添加以下内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--docker镜像的前缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">docker.image.prefix</span>&gt;</span>docker<span class="tag">&lt;/<span class="name">docker.image.prefix</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--远程Docker的地址--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dockerHost</span>&gt;</span>http://localhost:2375<span class="tag">&lt;/<span class="name">dockerHost</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--镜像名称，前缀/项目名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定标签--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">imageTags</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">imageTag</span>&gt;</span>latest<span class="tag">&lt;/<span class="name">imageTag</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">imageTags</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- 指定 Dockerfile 路径 $&#123;project.basedir&#125;：项目根路径下--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dockerDirectory</span>&gt;</span>src/main/docker<span class="tag">&lt;/<span class="name">dockerDirectory</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里是复制 jar 包到 docker 容器指定目录配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--jar 包所在的路径 此处配置的 即对应 target 目录--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 需要包含的 jar包 ，这里对应的是 Dockerfile中添加的文件名　--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>根据配置的 <code>&lt;dockerDirectory&gt;src/main/docker&lt;/dockerDirectory&gt;</code> 在<code>src</code>的<code>main</code>创建docker目录、编写Dockerfile</p></li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /tmp</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> *.jar app.jar</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-Djava.security.egd=file:/dev/./urandom&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><ul><li>Maven生成jar包</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200404112738.png"></p><p>确保 <code>target</code> 目录下有生成的jar包</p><ul><li>Maven构建镜像</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200404113216.png"></p><ul><li>运行Docker镜像</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200404114110.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200404114347.png"></p><p>然而、这样就行了吗？</p><blockquote><p>当然不行的,前面提到的配置是允许所有人都可以访问的，因为docker默认是root权限的，你把2375端口暴露在外面，意味着别人随时都可以提取到你服务器的root权限，是很容易被黑客黑的</p></blockquote><p><strong>我们需要继续配置</strong></p><h4 id="Docker-CA认证"><a href="#Docker-CA认证" class="headerlink" title="Docker CA认证"></a>Docker CA认证</h4><ul><li><p>创建ca文件夹，用于存放CA私钥和公钥</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/<span class="built_in">local</span>/ca</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/ca/</span><br></pre></td></tr></table></figure></li><li><p>创建密码(需要连续输入两次相同的密码)</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -aes256 -out ca-key.pem 4096</span><br></pre></td></tr></table></figure></li><li><p>依次输入密码、国家、省、市、组织名称等(随便输入、影响不大)</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -x509 -days 365 -key ca-key.pem -sha256 -out ca.pem</span><br></pre></td></tr></table></figure></li><li><p>生成 <code>server-key.pem</code></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out server-key.pem 4096</span><br></pre></td></tr></table></figure></li><li><p>把下面的 <code>$Host</code> 换成你自己服务器外网的IP或者域名</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">openssl req -subj <span class="string">&quot;/CN=<span class="variable">$HOST</span>&quot;</span> -sha256 -new -key server-key.pem -out server.csr</span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line">openssl req -subj <span class="string">&quot;/CN=192.168.1.106&quot;</span> -sha256 -new -key server-key.pem -out server.csr</span><br><span class="line">openssl req -subj <span class="string">&quot;/CN=www.baidu.com&quot;</span> -sha256 -new -key server-key.pem -out server.csr</span><br></pre></td></tr></table></figure></li><li><p>配置白名单</p><blockquote><p>配置要允许那些ip可以连接到服务器的docker，因为已经是ssl连接，所以我推荐配置0.0.0.0,也就是所有ip都可以连接(但只有拥有证书的才可以连接成功)，这样配置好之后公司其他人也可以使用。如果你不想这样，那你可以配置ip，用逗号分隔开。下面的<code>$Host</code>依旧是你服务器外网的IP或者域名，请自行替换。</p></blockquote>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">填写的是ip地址的话命令如下<span class="built_in">echo</span> subjectAltName = IP:<span class="variable">$HOST</span>,IP:0.0.0.0 &gt;&gt; extfile.cnf</span><br><span class="line"></span><br><span class="line">填写的是域名的话命令如下 <span class="built_in">echo</span> subjectAltName = DNS:<span class="variable">$HOST</span>,IP:0.0.0.0 &gt;&gt; extfile.cnf</span><br></pre></td></tr></table></figure></li><li><p>执行命令，将Docker守护程序密钥的扩展使用属性设置为仅用于服务器身份验证</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> extendedKeyUsage = serverAuth &gt;&gt; extfile.cnf</span><br></pre></td></tr></table></figure></li><li><p>执行命令，并输入之前设置的密码，生成签名证书</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -req -days 365 -sha256 -<span class="keyword">in</span> server.csr -CA ca.pem -CAkey ca-key.pem \-CAcreateserial -out server-cert.pem -extfile extfile.cnf</span><br></pre></td></tr></table></figure></li><li><p>生成客户端的key.pem，到时候把生成好的几个公钥私钥拷出去即可</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out key.pem 4096</span><br></pre></td></tr></table></figure></li><li><p>执行命令</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -subj <span class="string">&#x27;/CN=client&#x27;</span> -new -key key.pem -out client.csr</span><br></pre></td></tr></table></figure></li><li><p>执行命令，要使密钥适合客户端身份验证，请创建扩展配置文件</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> extendedKeyUsage = clientAuth &gt;&gt; extfile.cnf</span><br></pre></td></tr></table></figure></li><li><p>生成 <code>cert.pem</code> ,需要输入前面设置的密码，生成签名证书</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -req -days 365 -sha256 -<span class="keyword">in</span> client.csr -CA ca.pem -CAkey ca-key.pem \-CAcreateserial -out cert.pem -extfile extfile.cnf</span><br></pre></td></tr></table></figure></li><li><p>删除不需要的文件，两个证书签名请求</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -v client.csr server.csr</span><br></pre></td></tr></table></figure></li><li><p>修改权限，要保护您的密钥免受意外损坏，请删除其写入权限。要使它们只能被您读取，更改文件模式</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -v 0400 ca-key.pem key.pem server-key.pem</span><br></pre></td></tr></table></figure></li><li><p>证书可以是对外可读的，删除写入权限以防止意外损坏</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -v 0444 ca.pem server-cert.pem cert.pem</span><br></pre></td></tr></table></figure></li><li><p>归集服务器证书</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp server-*.pem  /etc/docker/</span><br><span class="line"></span><br><span class="line">cp ca.pem /etc/docker/</span><br></pre></td></tr></table></figure></li><li><p>修改Docker配置，使Docker守护程序仅接受来自提供CA信任的证书的客户端的连接</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure></li><li><p>将 <code>ExecStart=/usr/bin/dockerd</code> 替换</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExecStart=/usr/bin/dockerd --tlsverify --tlscacert=/etc/docker/ca.pem --tlscert=/etc/docker/server-cert.pem --tlskey=/etc/docker/server-key.pem -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock</span><br></pre></td></tr></table></figure></li><li><p>重新加载daemon并重启docker</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload </span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></li><li><p>重启docker</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker restart</span><br></pre></td></tr></table></figure></li><li><p>复制这几个文件到本地</p><p>  <img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200414195122.png"></p></li></ul><ul><li><p>回到IDEA</p><p>  <img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200414195807.png"></p><ul><li><p>重新配置pom文件</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--CA存放路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dockerCertPath</span>&gt;</span>D:\ca<span class="tag">&lt;/<span class="name">dockerCertPath</span>&gt;</span></span><br></pre></td></tr></table></figure>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--docker镜像的前缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">docker.image.prefix</span>&gt;</span>docker<span class="tag">&lt;/<span class="name">docker.image.prefix</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--远程Docker的地址--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dockerHost</span>&gt;</span>http://localhost:2375<span class="tag">&lt;/<span class="name">dockerHost</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--CA存放路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dockerCertPath</span>&gt;</span>D:\ca<span class="tag">&lt;/<span class="name">dockerCertPath</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--镜像名称，前缀/项目名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定标签--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">imageTags</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">imageTag</span>&gt;</span>latest<span class="tag">&lt;/<span class="name">imageTag</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">imageTags</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- 指定 Dockerfile 路径 $&#123;project.basedir&#125;：项目根路径下--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dockerDirectory</span>&gt;</span>src/main/docker<span class="tag">&lt;/<span class="name">dockerDirectory</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里是复制 jar 包到 docker 容器指定目录配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--jar 包所在的路径 此处配置的 即对应 target 目录--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 需要包含的 jar包 ，这里对应的是 Dockerfile中添加的文件名　--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后重新生成jar包、重新构建docker镜像就可以了。</p></li></ul></li></ul><p>参考连接:</p><ul><li><a href="https://blog.csdn.net/lovexiaotaozi/article/details/82797236">【Docker】在IDEA中实现一键部署到服务器(附ssl连接加密)</a></li><li><a href="https://docs.docker.com/engine/security/https/#create-a-ca-server-and-client-keys-with-openssl">Docker官方教程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Docker教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>卓越科技- 的Hexo博客搭建与美化教程</title>
      <link href="/posts/e55bad60/"/>
      <url>/posts/e55bad60/</url>
      
        <content type="html"><![CDATA[<h2 id="卓越科技-的个人博客搭建"><a href="#卓越科技-的个人博客搭建" class="headerlink" title="卓越科技- 的个人博客搭建"></a>卓越科技- 的个人博客搭建</h2><div class="note info"><p>这个博客是基于 Hexo 搭建的 <a href="https://blog.geekmubai.com/hexoblog/">教程链接</a><br>搭建博客也花了一定的时间、然后把搭建的步骤以及一些方法写出来、算是作为自己的第一篇博客吧！</p></div><p>&nbsp;&nbsp;这是B站一位UP主的Hexo博客搭建教程(同上面的教程)：</p><div class="bili_video"><iframe src="https://player.bilibili.com/player.html?aid=42905802&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" width="100%" height="580" allowfullscreen="true"> </iframe></div><div class="note success"><p>如果你看了这个视频、你应该会搭建 Hexo 了。</p></div><div class="note primary"><p>如果还是不太懂的话、可以看下面的文章，其中的一些命令、可供大家复制。</p></div><hr><h3 id="什么是-Hexo"><a href="#什么是-Hexo" class="headerlink" title="什么是 Hexo"></a>什么是 Hexo</h3><p>&nbsp;&nbsp;<a href="https://hexo.io/zh-cn/docs/">Hexo</a> 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h3 id="基本环境的搭建"><a href="#基本环境的搭建" class="headerlink" title="基本环境的搭建"></a>基本环境的搭建</h3><p>;这里以Windows系统作为演示、其他系统类似。</p><div class="note info"><p>首先、需要安装 <a href="http://nodejs.cn/download/">Node.js</a> 和 <a href="https://git-scm.com/downloads">Git</a><br>尽量下载.exe 扩展名的可执行文件，这样的好处是一键安装、省去了一些配置。安装版本也可以安装最新的版本。<br>如果有问题卸载安装旧版。</p></div><h4 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h4><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200315181124.png"></p><p>验证Node.js的方法(终端中输入)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>输入后能够显示版本说明安装成功、如图：</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200315182940.png"></p><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200315181949.png"></p><p>下载速度可能很慢。Windows用户可以前往 淘宝 <a href="https://npm.taobao.org/mirrors/git-for-windows/">Git for Windows</a> 镜像 下载 git 安装包。</p><p>验证Git的方法(终端中输入)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --verion</span><br></pre></td></tr></table></figure><p>同样输入后能够显示版本说明安装成功。</p><h3 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h3><h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><p>通过npm命令安装Hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><div class="note info"><p>接下来是一些常用的 <code>Hexo</code> 命令、<a href="https://hexo.io/zh-cn/docs/commands">官方文档</a></p></div><h5 id="init"><a href="#init" class="headerlink" title="init"></a>init</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init [folder]</span><br></pre></td></tr></table></figure><p>创建Hexo网站、<code>folder</code>为文件名、如图：</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200315210412.png"></p><p>这样就代表创建成功。但是发现npm报警告(<code>注意</code>:在windows环境，所以可以忽略这个警告、如果是其他系统、可以通过查阅资料解决。)</p><p><code>Hexo的目录结构</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">|-- _config.yml</span><br><span class="line">|-- package.json</span><br><span class="line">|-- scaffolds</span><br><span class="line">|-- <span class="built_in">source</span></span><br><span class="line">   |-- _posts</span><br><span class="line">|-- public</span><br><span class="line">|-- themes</span><br><span class="line">|-- .gitignore</span><br></pre></td></tr></table></figure><p><code>_config.yml</code>：网站的全局配置文件，设置包括<code>网站标题</code>、<code>副标题</code>、<code>作者</code>、<code>关键字</code>和<code>描述信息</code>等。<br><code>package.json</code>：框架的基本参数信息和它所依赖的插件，在 npm 安装时使用 –save 保存进去。<br><code>scaffolds</code>：本意是 “脚手架” 的意思，这里引申为模板文件夹。当你 hexo new [layout(布局)] [title] 的时候，Hexo 会根据该文件夹下的对应文件进行初始化构建。<br><code>source</code>：正如其名，source 文件夹存储一些直接来自用户的文件，它很重要，如果不出意外你的文章就是保存在这个文件夹下（_posts）。_posts 目录下的md文件，会被编译成 html 文件，放到 public 文件夹下。<br><code>public</code>：参考 source 文件夹，在初始化后是没有 public 文件夹的，除非 hexo g 编译生成静态文件后，public 文件夹会自动生成。使用 hexo clean 清除 db.json 和 public 文件夹下的所有文件。<br><code>themes</code>：主题文件夹，存储主题。主题可以在 Github 上 <code>clone</code> 。<br><code>.gitignore</code>：.gitignore 文件作用是声明不被 git 记录的文件，hexo init <folder> 也会产生一个 .gitignore 文件，可以先删除或者直接编辑，对hexo不会有影响。</p><p>打开<code>_config.yml</code>文件、需要自己配置的几个地方：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">网站标题</span> <span class="string">//网站标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">副标题</span><span class="string">//副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">描述信息</span><span class="string">//描述信息</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">关键字</span><span class="string">//关键字</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">作者</span><span class="string">//作者</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span><span class="string">//语言</span> <span class="string">可以在</span> <span class="string">/themes/landscape/languages</span> <span class="string">找到支持的语言</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span><span class="string">//时区</span> <span class="string">Asia/Shanghai</span></span><br></pre></td></tr></table></figure><div class="note warning"><p>之后的命令一定要 <code>cd</code> 到文件夹 (博客根目录) 中进行操作！！！</p></div><h5 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><h5 id="server"><a href="#server" class="headerlink" title="server"></a>server</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br><span class="line">或(简写)</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>启动服务器。默认访问的网址： <a href="http://localhost:4000/">http://localhost:4000/</a> , 还可以带参数。</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--port</code></td><td align="left">重设端口</td></tr><tr><td align="left"><code>-s</code>, <code>--static</code></td><td align="left">只使用静态文件</td></tr><tr><td align="left"><code>-l</code>, <code>--log</code></td><td align="left">启动日记记录，使用覆盖记录格式</td></tr></tbody></table><p>启动成功如图：</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200315214815.png"></p><h5 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">或(简写)</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>生成静态文件。</p><h5 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br><span class="line">或(简写)</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>部署网站。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-g</code>, <code>--generate</code></td><td align="left">部署之前预先生成静态文件</td></tr></tbody></table><p>这里与后面部署到Github上结合使用。</p><h5 id="new"><a href="#new" class="headerlink" title="new"></a>new</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [title]</span><br></pre></td></tr></table></figure><p>新建一篇文章。title为文章名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;blog&quot;</span><br></pre></td></tr></table></figure><p>文件在 <code>/source/_posts/blog.md</code> 中</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--path</code></td><td align="left">自定义新文章的路径</td></tr><tr><td align="left"><code>-r</code>, <code>--replace</code></td><td align="left">如果存在同名文章，将其替换</td></tr><tr><td align="left"><code>-s</code>, <code>--slug</code></td><td align="left">文章的 Slug，作为新文章的文件名和发布后的 URL</td></tr></tbody></table><div class="note success"><p>一个基本的步骤：<br>hexo s (用于本地调试)<br>hexo new "blog"<br>hexo clean<br>hexo g<br>hexo d</p></div><blockquote><p>到这里、你应该了解如何搭建Hexo博客了。</p></blockquote><h3 id="主题美化"><a href="#主题美化" class="headerlink" title="主题美化"></a>主题美化</h3><p>使用主题可以让我们的博客更加的好看。所以我们选择下载自己喜欢的主题。</p><div class="note info"><p>Hexo 默认使用的是 landscape 官方主题、我们可以通过下载其他主题进行更换。<br>1、通过<a href="https://hexo.io/themes/">官方主题网站</a>可以找到主题。<br>2、直接在 Github 中搜索 <code>hexo-theme</code> 相关的内容。</p></div><h4 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> `Github主题地址` themes/文件名</span><br></pre></td></tr></table></figure><p>例如我想下载 Butterfly 主题、只需要<code>git clone https://github.com/jerryc127/hexo-theme-butterfly themes/Butterfly</code> 就可以了。</p><p>下载完成之后配置<code>_config.yml</code>、改成上面的那个文件名。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">Butterfly</span></span><br></pre></td></tr></table></figure><p>这里介绍我喜欢的几个主题: </p><p><a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly</a>: 现在正在使用的主题、页面、个性化都很好、集成了很多插件。<br><a href="https://github.com/blinkfox/hexo-theme-matery">matery</a>: 一个基于材料设计和响应式设计而成的全面、美观的Hexo主题。<br><a href="https://github.com/theme-volantis/hexo-theme-volantis">Volantis</a>: 一个高度模块化和可定制化、功能相对完善的 Hexo 博客主题，既可以用作个人博客，也适合用来搭建文档。</p><p>更多关于主题的可以点击上述链接进入官网进行详细的了解。</p><h3 id="博客部署"><a href="#博客部署" class="headerlink" title="博客部署"></a>博客部署</h3><div class="note success"><p>博客已经搭建好了、如何部署到 Web 上呢？</p></div><blockquote><p>Github提供了Github Pages，Github Pages是Github免费给开发者提供的一款托管个人网站的产品，目前只能托管静态内容，我们使用Hexo搭建的就是静态博客， 所以非常适合用来搭博客。<br>简单介绍一些步骤及命令。</p></blockquote><p>步骤也很简单，创建仓库、如图：<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200316100055.png"></p><h4 id="配置SSH-Key"><a href="#配置SSH-Key" class="headerlink" title="配置SSH-Key"></a>配置SSH-Key</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;example&quot;</span></span><br><span class="line">git config --global user.email example@example.com</span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;example@example.com&quot;</span></span><br></pre></td></tr></table></figure><p>然后找到生成的秘钥：位置在 <code>C:/Users/你电脑的用户名/.ssh</code><br>用记事本打开<code>id_rsa.pub</code>复制里面的内容</p><p>进入 <a href="https://github.com/settings/keys">https://github.com/settings/keys</a> 点击<code>New SSH Key</code>把之前复制的内容粘贴到这里就可以了。</p><h4 id="安装部署插件"><a href="#安装部署插件" class="headerlink" title="安装部署插件"></a>安装部署插件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>安装完成之后在<code>_config.yml</code>中配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">你创建仓库的位置</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200316101714.png"></p><p>配置完成之后通过<code>hexo d</code>就可以部署到Github上了。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><div class="note success"><p>Hexo 博客搭建完成了、主题也美化了、接下来就介绍几个常用的 Hexo 插件！</p></div><h4 id="Valine-评论功能"><a href="#Valine-评论功能" class="headerlink" title="Valine 评论功能"></a>Valine 评论功能</h4><p>无后端的评论功能。</p><p>官方教程：<a href="https://valine.js.org/quickstart.html">快速开始</a> </p><p>效果如图：<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200316104850.png"></p><h4 id="aplayer-音乐插件"><a href="#aplayer-音乐插件" class="headerlink" title="aplayer 音乐插件"></a>aplayer 音乐插件</h4><p>在线音乐播放器、支持一些平台的歌单播放。</p><p>官方教程：<a href="https://github.com/MoePlayer/hexo-tag-aplayer">aplayer</a></p><p>效果如图：<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200316105349.png"></p><h4 id="bilibili-bangumi-番剧插件"><a href="#bilibili-bangumi-番剧插件" class="headerlink" title="bilibili-bangumi 番剧插件"></a>bilibili-bangumi 番剧插件</h4><p>显示番剧：想看、在看、已看功能。</p><div class="note info"><p>豆瓣 <a href="https://github.com/mythsman/hexo-douban">hexo-douban</a> 一样。</p></div><p>官方教程：<a href="https://github.com/HCLonely/hexo-bilibili-bangumi">hexo-bilibili-bangumi</a></p><p>效果如图：<br><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200316110015.png"></p><h4 id="看板娘"><a href="#看板娘" class="headerlink" title="看板娘"></a>看板娘</h4><p>很可爱的Live2D！</p><ul><li><a href="https://github.com/stevenjoezhang/live2d-widget">Live2D Widget</a></li><li><a href="https://github.com/fghrsh/live2d_demo">Live2D demo</a></li></ul><p>效果在左下角</p><blockquote><p>到这里、Hexo搭建博客到这里就结束了、更多功能可以查阅官方文档。</p></blockquote><h2 id="美化教程"><a href="#美化教程" class="headerlink" title="美化教程"></a>美化教程</h2><p><code>下面的是我的魔改代码</code></p><ul><li>CSS：<a href="https://cdn.jsdelivr.net/gh/zykjofficial/zykjresource@master/css/custom.css">https://cdn.jsdelivr.net/gh/zykjofficial/zykjresource@master/css/custom.css</a></li><li>JS：目前在整合为ZYKJTools、敬请期待。。。</li></ul><div class="note red"><p>美化博客之前请注意：</p><ol><li>确保你懂得前端的知识、部分错误可以通过错误提示在搜索引擎中找到</li><li>魔改有风险、任何修改主题代码的操作请先备份、避免不必要的错误</li><li>评论区的内容不一定会回复、如果急需解决、可以通过<a href="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/alipay.png">支付宝</a>或者<a href="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/wechat.png">微信</a>备注您的邮箱、我会及时联系您</li></ol></div><div class="note info"><p>美化教程针对 Butterfly 开启 Pjax 博客主题、对于开启 Pjax 需要在导入的 js 添加 <code>data-pjax</code> 属性 <code>&lt;script src="xxx" data-pjax&gt;&lt;/script&gt;</code>、目的是让页面切换也重新加载 js </p></div><h3 id="Pixiv-日榜"><a href="#Pixiv-日榜" class="headerlink" title="Pixiv 日榜"></a>Pixiv 日榜</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200710171947.png" alt="20200710171947.png"></p><div class="note info"><p><a href="https://blog.hclonely.com/posts/57bd67ce/">大佬原文</a></p></div><ul><li><p>在 <code>themes\Butterfly\layout\includes\widget</code> 文件夹新建 <code>card_pixiv.pug</code> 文件，文件内容如下：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.card-widget.card-pixiv</span><br><span class="line">  .card-content</span><br><span class="line">    .item-headline</span><br><span class="line">      i.fa.fa-image(aria-hidden&#x3D;&quot;true&quot;)</span><br><span class="line">      span&#x3D; _p(&#39;aside.card_pixiv&#39;)</span><br><span class="line">    iframe(src&#x3D;&quot;https:&#x2F;&#x2F;cloud.mokeyjay.com&#x2F;pixiv&quot; frameborder&#x3D;&quot;0&quot; style&#x3D;&quot;width:99%;height:380px;margin:0;&quot;)</span><br></pre></td></tr></table></figure><p>  <code>https://cloud.mokeyjay.com/pixiv</code> 使用的是超能小紫提供的服务，也可以自行搭建</p></li><li><p>编辑 <code>themes\Butterfly\layout\includes\widget\index.pug</code> 文件，在你想要显示的位置插入以下代码：</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if theme.aside.card_pixiv</span><br><span class="line">    include .&#x2F;card_pixiv.pug</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>编辑 <code>butterfly.yml</code> 文件，在 <code>card_webinfo</code> 下面添加一行 <code>card_pixiv: true</code></p></li><li><p>编辑 <code>themes\Butterfly\languages\zh-CN.yml</code> 文件 (请根据你的网站语言选择)，找到 <code>card_announcement: 公告</code> , 在下面添加一行 <code>card_pixiv: Pixiv日榜Top50</code>(后面的文本可自定义)</p><p>  如果不想显示，直接把 <code>butterfly.yml</code> 文件的 <code>card_pixiv: true</code> 改为 <code>card_pixiv: false</code> 即可</p></li></ul><h3 id="双评论"><a href="#双评论" class="headerlink" title="双评论"></a>双评论</h3><div class="note info"><p>目前博客最新版 <code>Butterfly</code> 已经自带双评论了、请查阅官方文档</p></div><h3 id="滚动条"><a href="#滚动条" class="headerlink" title="滚动条"></a>滚动条</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200710172208.png" alt="20200710172208.png"></p><div class="note info"><p><a href="https://www.antmoe.com/posts/1dc865d0/index.html">大佬原文</a></p></div><ul><li><p>在 <code>themes\Butterfly\source\css</code> 文件夹新建 <code>custom.css</code> 文件，文件内容如下：</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 滚动条 */</span></span><br><span class="line"><span class="selector-pseudo">::-webkit-scrollbar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">::-webkit-scrollbar-track</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">73</span>, <span class="number">177</span>, <span class="number">245</span>, <span class="number">0.2</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">::-webkit-scrollbar-thumb</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#49b1f5</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">-webkit-linear-gradient</span>(</span><br><span class="line">    <span class="number">45deg</span>,</span><br><span class="line">    rgba(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.4</span>) <span class="number">25%</span>,</span><br><span class="line">    transparent <span class="number">25%</span>,</span><br><span class="line">    transparent <span class="number">50%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.4</span>) <span class="number">50%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.4</span>) <span class="number">75%</span>,</span><br><span class="line">    transparent <span class="number">75%</span>,</span><br><span class="line">    transparent</span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">::-webkit-scrollbar-corner</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">::-moz-selection</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#49b1f5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编辑 <code>butterfly.yml</code> 文件</p><p>  在 <code>inject-&gt;head</code> 下面添加如下内容：</p>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/custom.min.css&quot;&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="网站运行时间"><a href="#网站运行时间" class="headerlink" title="网站运行时间"></a>网站运行时间</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200710203953.png" alt="20200710203953.png"></p><p><code>以下使用其他一种方法就行、不要都使用</code></p><div class="note info"><p><a href="https://www.itrhx.com/2018/08/27/A04-Hexo-blog-topic-personalization/">大佬原文</a></p></div><ul><li><p>在 <code>themes\Butterfly\source\js</code> 文件夹新建 <code>timeDate.js</code> 文件，文件内容如下：</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>(); </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createtime</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">var</span> grt= <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&quot;08/10/2018 17:38:00&quot;</span>);<span class="comment">//在此处修改你的建站时间，格式：月/日/年 时:分:秒</span></span><br><span class="line">    now.setTime(now.getTime()+<span class="number">250</span>); </span><br><span class="line">    days = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>; dnum = <span class="built_in">Math</span>.floor(days); </span><br><span class="line">    hours = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> - (<span class="number">24</span> * dnum); hnum = <span class="built_in">Math</span>.floor(hours); </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">String</span>(hnum).length ==<span class="number">1</span> )&#123;hnum = <span class="string">&quot;0&quot;</span> + hnum;&#125; minutes = (now - grt ) / <span class="number">1000</span> /<span class="number">60</span> - (<span class="number">24</span> * <span class="number">60</span> * dnum) - (<span class="number">60</span> * hnum); </span><br><span class="line">    mnum = <span class="built_in">Math</span>.floor(minutes); <span class="keyword">if</span>(<span class="built_in">String</span>(mnum).length ==<span class="number">1</span> )&#123;mnum = <span class="string">&quot;0&quot;</span> + mnum;&#125; </span><br><span class="line">    seconds = (now - grt ) / <span class="number">1000</span> - (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * dnum) - (<span class="number">60</span> * <span class="number">60</span> * hnum) - (<span class="number">60</span> * mnum); </span><br><span class="line">    snum = <span class="built_in">Math</span>.round(seconds); <span class="keyword">if</span>(<span class="built_in">String</span>(snum).length ==<span class="number">1</span> )&#123;snum = <span class="string">&quot;0&quot;</span> + snum;&#125; </span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;timeDate&quot;</span>).innerHTML = <span class="string">&quot;本站已安全运行 &quot;</span>+dnum+<span class="string">&quot; 天 &quot;</span>; </span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;times&quot;</span>).innerHTML = hnum + <span class="string">&quot; 小时 &quot;</span> + mnum + <span class="string">&quot; 分 &quot;</span> + snum + <span class="string">&quot; 秒&quot;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">setInterval</span>(<span class="string">&quot;createtime()&quot;</span>,<span class="number">250</span>);</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>编辑 <code>themes\Butterfly\layout\includes\footer.pug</code> 文件，插入以下代码：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if theme.footer_timeDate.enable</span><br><span class="line">    .timeDate</span><br><span class="line">      span#timeDate 载入天数...</span><br><span class="line">      span#times 载入时分秒...</span><br></pre></td></tr></table></figure></li><li><p>编辑 <code>butterfly.yml</code> 文件</p><p>  在 <code>footer_custom_text</code> 后面添加如下内容：</p>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">footer_timeDate:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>  在 <code>inject-&gt;bottom</code> 下面添加如下内容：</p>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;/js/timeDate.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></li></ul><div class="note info"><p><a href="https://butterfly.hclonely.com/">大佬原文</a> : 优化版本</p></div><ul><li><p>编辑 <code>themes\Butterfly\layout\includes\footer.pug</code> 文件，插入以下代码：</p><p>  注意与<code>if</code>同级</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#running-time</span><br></pre></td></tr></table></figure></li><li><p>编辑 <code>butterfly.yml</code> 文件</p><p>  在 <code>inject-&gt;bottom</code> 下面添加如下内容：</p>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">&lt;script&gt;setInterval(()=&gt;&#123;let</span> <span class="string">create_time=Math.round(new</span> <span class="string">Date(Date.UTC(2020,2,21,12,14,0)).getTime()/1000);let</span> <span class="string">timestamp=Math.round((new</span> <span class="string">Date().getTime()+8*60*60*1000)/1000);let</span> <span class="string">second=timestamp-create_time;let</span> <span class="string">time=new</span> <span class="string">Array(0,0,0,0,0);if(second&gt;=365*24*3600)&#123;time[0]=parseInt(second/(365*24*3600));second%=365*24*3600&#125;if(second&gt;=24*3600)&#123;time[1]=parseInt(second/(24*3600));second%=24*3600&#125;if(second&gt;=3600)&#123;time[2]=parseInt(second/3600);second%=3600&#125;if(second&gt;=60)&#123;time[3]=parseInt(second/60);second%=60&#125;if(second&gt;0)&#123;time[4]=second&#125;currentTimeHtml=&#x27;小破站已经安全运行</span> <span class="string">&#x27;+time[0]+&#x27;</span> <span class="string">年</span> <span class="string">&#x27;+time[1]+&#x27;</span> <span class="string">天</span> <span class="string">&#x27;+time[2]+&#x27;</span> <span class="string">时</span> <span class="string">&#x27;+time[3]+&#x27;</span> <span class="string">分</span> <span class="string">&#x27;+time[4]+&#x27;</span> <span class="string">秒&#x27;;var</span> <span class="string">elementById=document.getElementById(&#x27;running-time&#x27;);if(elementById)&#123;elementById.innerHTML=currentTimeHtml&#125;&#125;,1000);&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>  注意: <code>时间需要早1个月、显示的才准确</code>  </p></li></ul><h3 id="恶搞标题"><a href="#恶搞标题" class="headerlink" title="恶搞标题"></a>恶搞标题</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/202007102044.gif" alt="202007102044.gif"></p><div class="note info"><p><a href="https://www.itrhx.com/2018/08/27/A04-Hexo-blog-topic-personalization/">大佬原文</a></p></div><ul><li><p>在 <code>themes\Butterfly\source\js</code> 文件夹新建 <code>title.js</code> 文件，文件内容如下：</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 浏览器搞笑标题</span></span><br><span class="line"><span class="keyword">var</span> OriginTitle = <span class="built_in">document</span>.title;</span><br><span class="line"><span class="keyword">var</span> titleTime;</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;visibilitychange&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.hidden) &#123;</span><br><span class="line">        $(<span class="string">&#x27;[rel=&quot;icon&quot;]&#x27;</span>).attr(<span class="string">&#x27;href&#x27;</span>, <span class="string">&quot;/img/funny.ico&quot;</span>);</span><br><span class="line">        <span class="built_in">document</span>.title = <span class="string">&#x27;(っ °Д °;)っ 访问的页面不存在了&#x27;</span>;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(titleTime);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        $(<span class="string">&#x27;[rel=&quot;icon&quot;]&#x27;</span>).attr(<span class="string">&#x27;href&#x27;</span>, <span class="string">&quot;/img/favicon.ico&quot;</span>);</span><br><span class="line">        <span class="built_in">document</span>.title = <span class="string">&#x27;(●\&#x27;◡\&#x27;●)噫又好啦 ~&#x27;</span> + OriginTitle;</span><br><span class="line">        titleTime = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.title = OriginTitle;</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>编辑 <code>butterfly.yml</code> 文件</p><p>  在 <code>inject-&gt;bottom</code> 下面添加如下内容：</p>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;/js/title.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="github-badge"><a href="#github-badge" class="headerlink" title="github-badge"></a>github-badge</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200710203953.png" alt="20200710203953.png"></p><div class="note info"><p><a target="_blank" rel="noopener external nofollow noreferrer" href="https://blog.csdn.net/victoryxa/article/details/105841440">大佬原文</a></p></div><ul><li><p>在 <code>themes\Butterfly\source\css</code> 文件夹新建 <code>custom.css</code> 文件，文件内容如下：</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.github-badge</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>:inline-block;</span><br><span class="line">    <span class="attribute">border-radius</span>:<span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">text-shadow</span>:none;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">13px</span>;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">line-height</span>:<span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>:<span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.github-badge</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.github-badge</span> <span class="selector-class">.badge-subject</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>:inline-block;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="number">#4D4D4D</span>;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">4px</span> <span class="number">4px</span> <span class="number">4px</span> <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">border-top-left-radius</span>:<span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">border-bottom-left-radius</span>:<span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.github-badge</span> <span class="selector-class">.badge-value</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>:inline-block;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">4px</span> <span class="number">6px</span> <span class="number">4px</span> <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">border-top-right-radius</span>:<span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">border-bottom-right-radius</span>:<span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.github-badge</span> <span class="selector-class">.bg-brightgreen</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="number">#4DC820</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.github-badge</span> <span class="selector-class">.bg-orange</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="number">#FFA500</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.github-badge</span> <span class="selector-class">.bg-yellow</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="number">#D8B024</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.github-badge</span> <span class="selector-class">.bg-blueviolet</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="number">#8833D7</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.github-badge</span> <span class="selector-class">.bg-pink</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="number">#F26BAE</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.github-badge</span> <span class="selector-class">.bg-red</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="number">#e05d44</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.github-badge</span> <span class="selector-class">.bg-blue</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="number">#007EC6</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.github-badge</span> <span class="selector-class">.bg-lightgrey</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="number">#9F9F9F</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.github-badge</span> <span class="selector-class">.bg-grey</span>, <span class="selector-class">.github-badge</span> <span class="selector-class">.bg-gray</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="number">#555</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.github-badge</span> <span class="selector-class">.bg-lightgrey</span>, <span class="selector-class">.github-badge</span> <span class="selector-class">.bg-lightgray</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="number">#9f9f9f</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><div class="note info"><p>以下方法任选一种</p></div><p><code>方法1：</code></p><ul><li><p>编辑 <code>themes\Butterfly\layout\includes\footer.pug</code> 文件，插入以下代码：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">if theme.githubBadge.enable</span><br><span class="line">  .github-badge</span><br><span class="line">    a(style&#x3D;&quot;color: #fff&quot; rel&#x3D;&quot;license&quot; href&#x3D;&quot;https:&#x2F;&#x2F;hexo.io&#x2F;&quot; target&#x3D;&quot;_blank&quot; title&#x3D;&quot;由 Hexo 强力驱动&quot;)</span><br><span class="line">       span(class&#x3D;&quot;badge-subject&quot;) Powered</span><br><span class="line">       span(class&#x3D;&quot;badge-value bg-blue&quot;) Hexo</span><br><span class="line">    a(style&#x3D;&quot;color: #fff&quot; rel&#x3D;&quot;license&quot; href&#x3D;&quot;https:&#x2F;&#x2F;gitee.com&#x2F;&quot; target&#x3D;&quot;_blank&quot; title&#x3D;&quot;静态网页托管于 GitHub Pages 和 Coding Pages 和 Gitee Pages&quot;)</span><br><span class="line">       span(class&#x3D;&quot;badge-subject&quot;) Hosted</span><br><span class="line">       span(class&#x3D;&quot;badge-value bg-brightgreen&quot;) GitHub &amp; Coding &amp; Gitee</span><br><span class="line">    a(style&#x3D;&quot;color: #fff&quot; rel&#x3D;&quot;license&quot; href&#x3D;&quot;https:&#x2F;&#x2F;www.jsdelivr.com&#x2F;&quot; target&#x3D;&quot;_blank&quot; title&#x3D;&quot;jsDelivr 提供 CDN 加速服务&quot;)</span><br><span class="line">       span(class&#x3D;&quot;badge-subject&quot;) CDN</span><br><span class="line">       span(class&#x3D;&quot;badge-value bg-orange&quot;) jsDelivr</span><br><span class="line">    a(style&#x3D;&quot;color: #fff&quot; rel&#x3D;&quot;license&quot; href&#x3D;&quot;https:&#x2F;&#x2F;jerryc.me&quot; target&#x3D;&quot;_blank&quot; title&#x3D;&quot;站点使用 Butterfly主题&quot;)</span><br><span class="line">       span(class&#x3D;&quot;badge-subject&quot;) Theme</span><br><span class="line">       span(class&#x3D;&quot;badge-value bg-blue&quot;) Butterfly</span><br><span class="line">    a(style&#x3D;&quot;color: #fff&quot; rel&#x3D;&quot;license&quot; href&#x3D;&quot;http:&#x2F;&#x2F;creativecommons.org&#x2F;licenses&#x2F;by-nc-sa&#x2F;4.0&#x2F;&quot; target&#x3D;&quot;_blank&quot; title&#x3D;&quot;本站点采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议进行许可&quot;)</span><br><span class="line">      span(class&#x3D;&quot;badge-subject&quot;)</span><br><span class="line">         i(class&#x3D;&quot;fa fa-copyright&quot;)</span><br><span class="line">      span(class&#x3D;&quot;badge-value bg-lightgrey&quot;) BY-NC-SA 4.0</span><br></pre></td></tr></table></figure></li><li><p>编辑 <code>butterfly.yml</code> 文件、添加</p>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 是否开启 Badge</span></span><br><span class="line"><span class="attr">githubBadge:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ul><p><code>方法2：</code></p><ul><li><p>在<code>butterfly.yml</code>、<code>card_announcement</code>下 <code>content</code>中添加</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;github-badge&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">&quot;color: #fff&quot;</span>  <span class="attr">href</span>=<span class="string">&quot;https://hexo.io/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">title</span>=<span class="string">&quot;由 Hexo 强力驱动&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;badge-subject&quot;</span>&gt;</span>Powered<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;badge-value bg-blue&quot;</span>&gt;</span>Hexo<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">&quot;color: #fff&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://vercel.com/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">title</span>=<span class="string">&quot;静态网页托管于 Vercel&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;badge-subject&quot;</span>&gt;</span>Hosted<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;badge-value bg-brightgreen&quot;</span>&gt;</span>Vercel<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">&quot;color: #fff&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://www.jsdelivr.com/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">title</span>=<span class="string">&quot;jsDelivr 提供 CDN 加速服务&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;badge-subject&quot;</span>&gt;</span>CDN<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;badge-value bg-orange&quot;</span>&gt;</span>jsDelivr<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">&quot;color: #fff&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://github.com/jerryc127/hexo-theme-butterfly&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">title</span>=<span class="string">&quot;站点使用 Butterfly 3.0.0-pjax版本 主题&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;badge-subject&quot;</span>&gt;</span>Theme<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;badge-value bg-blue&quot;</span>&gt;</span>Butterfly 3.0.0-pjax<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">&quot;color: #fff&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://creativecommons.org/licenses/by-nc-sa/4.0/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">title</span>=<span class="string">&quot;本站点采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议进行许可&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;badge-subject&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-copyright&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;badge-value bg-lightgrey&quot;</span>&gt;</span>BY-NC-SA 4.0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  可以看我的博客的公告栏</p></li></ul><p><code>方法3：</code></p><p>通过这个网站可以在线生成 <a href="https://shields.io/">https://shields.io/</a></p><img src= "/img/loading.gif" data-lazy-src="https://img.shields.io/badge/Hexo-5.0.0-blue"><img src= "/img/loading.gif" data-lazy-src="https://img.shields.io/badge/Butterfly-3.0.0-green"><img src= "/img/loading.gif" data-lazy-src="https://img.shields.io/badge/REPO-Gitee-brightgreen"><img src= "/img/loading.gif" data-lazy-src="https://img.shields.io/badge/REPO-Github-yellowgreen"><img src= "/img/loading.gif" data-lazy-src="https://img.shields.io/badge/REPO-Coding-yellow"><img src= "/img/loading.gif" data-lazy-src="https://img.shields.io/badge/.com-阿里云-orange"><h3 id="tag外挂标签"><a href="#tag外挂标签" class="headerlink" title="tag外挂标签"></a>tag外挂标签</h3><div class="note info"><p><a href="https://github.com/xaoxuu/hexo-theme-volantis">hexo-theme-volantis</a> 与 <a target="_blank" href="https://www.antmoe.com/posts/a811d614/index.html#标签外挂">大佬原文</a></p></div><ul><li><p>找到 <code>themes\Butterfly\source\css</code> 下创建 <code>tag.css</code> 文件、输入以下内容：</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span><span class="selector-class">.btn</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.btn</span> &gt; <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#2196f3</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">4px</span> <span class="number">2px</span> <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.1</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all .<span class="number">28s</span> ease;</span><br><span class="line">    <span class="attribute">-moz-transition</span>: all .<span class="number">28s</span> ease;</span><br><span class="line">    <span class="attribute">-webkit-transition</span>: all .<span class="number">28s</span> ease;</span><br><span class="line">    <span class="attribute">-o-transition</span>: all .<span class="number">28s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.btn</span> &gt; <span class="selector-tag">a</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.btn</span> &gt; <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#ff5722</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.btn</span> &gt; <span class="selector-tag">a</span><span class="selector-pseudo">:not(</span><span class="selector-attr">[href]</span>) &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: .<span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.btn</span> &gt; <span class="selector-tag">a</span><span class="selector-pseudo">:not(</span><span class="selector-attr">[href]</span>)<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: not-allowed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.btn</span><span class="selector-class">.regular</span> &gt; <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">12px</span> <span class="number">6px</span> <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.btn</span><span class="selector-class">.regular</span> &gt; <span class="selector-tag">a</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.btn</span><span class="selector-class">.large</span> &gt; <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">12px</span> <span class="number">36px</span> <span class="number">10px</span> <span class="number">36px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.btn</span><span class="selector-class">.large</span> &gt; <span class="selector-tag">a</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.btn</span><span class="selector-class">.center</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-tag">div</span><span class="selector-class">.btns</span> &#123;</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">brightness</span>(<span class="number">0.7</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-tag">div</span><span class="selector-class">.btns</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.btns</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> -<span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">    <span class="attribute">align-items</span>: flex-start;</span><br><span class="line">    <span class="attribute">overflow</span>: visible;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.btns</span>, <span class="selector-tag">div</span><span class="selector-class">.btns</span> <span class="selector-tag">p</span>, <span class="selector-tag">div</span><span class="selector-class">.btns</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: .<span class="number">8125rem</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#555</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.btns</span> <span class="selector-tag">b</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: .<span class="number">875rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.btns</span><span class="selector-class">.wide</span> &gt; <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">32px</span>;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">32px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.btns</span><span class="selector-class">.fill</span> &gt; <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">width</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.btns</span><span class="selector-class">.around</span> &#123;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-around</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.btns</span><span class="selector-class">.center</span> &#123;</span><br><span class="line">    <span class="attribute">justify-content</span>: center</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.btns</span><span class="selector-class">.grid2</span> &gt; <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> / <span class="number">2</span> - <span class="number">16px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">1024px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.btns</span><span class="selector-class">.grid2</span> &gt; <span class="selector-tag">a</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> / <span class="number">2</span> - <span class="number">16px</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">768px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.btns</span><span class="selector-class">.grid2</span> &gt; <span class="selector-tag">a</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> / <span class="number">2</span> - <span class="number">16px</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">500px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.btns</span><span class="selector-class">.grid2</span> &gt; <span class="selector-tag">a</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> / <span class="number">1</span> - <span class="number">16px</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.btns</span><span class="selector-class">.grid3</span> &gt; <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> / <span class="number">3</span> - <span class="number">16px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">1024px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.btns</span><span class="selector-class">.grid3</span> &gt; <span class="selector-tag">a</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> / <span class="number">3</span> - <span class="number">16px</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">768px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.btns</span><span class="selector-class">.grid3</span> &gt; <span class="selector-tag">a</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> / <span class="number">3</span> - <span class="number">16px</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">500px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.btns</span><span class="selector-class">.grid3</span> &gt; <span class="selector-tag">a</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> / <span class="number">1</span> - <span class="number">16px</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.btns</span><span class="selector-class">.grid4</span> &gt; <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> / <span class="number">4</span> - <span class="number">16px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">1024px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.btns</span><span class="selector-class">.grid4</span> &gt; <span class="selector-tag">a</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> / <span class="number">3</span> - <span class="number">16px</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">768px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.btns</span><span class="selector-class">.grid4</span> &gt; <span class="selector-tag">a</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> / <span class="number">3</span> - <span class="number">16px</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">500px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.btns</span><span class="selector-class">.grid4</span> &gt; <span class="selector-tag">a</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> / <span class="number">2</span> - <span class="number">16px</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.btns</span><span class="selector-class">.grid5</span> &gt; <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> / <span class="number">5</span> - <span class="number">16px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">1024px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.btns</span><span class="selector-class">.grid5</span> &gt; <span class="selector-tag">a</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> / <span class="number">4</span> - <span class="number">16px</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">768px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.btns</span><span class="selector-class">.grid5</span> &gt; <span class="selector-tag">a</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> / <span class="number">3</span> - <span class="number">16px</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">500px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.btns</span><span class="selector-class">.grid5</span> &gt; <span class="selector-tag">a</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> / <span class="number">2</span> - <span class="number">16px</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.btns</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: all .<span class="number">28s</span> ease;</span><br><span class="line">    <span class="attribute">-moz-transition</span>: all .<span class="number">28s</span> ease;</span><br><span class="line">    <span class="attribute">-webkit-transition</span>: all .<span class="number">28s</span> ease;</span><br><span class="line">    <span class="attribute">-o-transition</span>: all .<span class="number">28s</span> ease;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="built_in">calc</span>(<span class="number">1.25</span> * <span class="number">16px</span> + <span class="number">32px</span>);</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">120px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: flex-start;</span><br><span class="line">    <span class="attribute">align-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f6f6f6</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.btns</span> <span class="selector-tag">a</span> &gt; <span class="selector-tag">img</span><span class="selector-pseudo">:first-child</span>, <span class="selector-tag">div</span><span class="selector-class">.btns</span> <span class="selector-tag">a</span> &gt; <span class="selector-tag">i</span><span class="selector-pseudo">:first-child</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: all .<span class="number">28s</span> ease;</span><br><span class="line">    <span class="attribute">-moz-transition</span>: all .<span class="number">28s</span> ease;</span><br><span class="line">    <span class="attribute">-webkit-transition</span>: all .<span class="number">28s</span> ease;</span><br><span class="line">    <span class="attribute">-o-transition</span>: all .<span class="number">28s</span> ease;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">64px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">64px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">16px</span> <span class="number">8px</span> <span class="number">4px</span> <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="built_in">calc</span>(-<span class="number">1.25</span> * <span class="number">16px</span> - <span class="number">32px</span>);</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">28px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.btns</span> <span class="selector-tag">a</span> &gt; <span class="selector-tag">img</span><span class="selector-pseudo">:first-child.auto</span>, <span class="selector-tag">div</span><span class="selector-class">.btns</span> <span class="selector-tag">a</span> &gt; <span class="selector-tag">i</span><span class="selector-pseudo">:first-child.auto</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: auto</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.btns</span> <span class="selector-tag">a</span> &gt; <span class="selector-tag">i</span><span class="selector-pseudo">:first-child</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#2196f3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.btns</span> <span class="selector-tag">a</span> <span class="selector-tag">p</span>, <span class="selector-tag">div</span><span class="selector-class">.btns</span> <span class="selector-tag">a</span> <span class="selector-tag">b</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: .<span class="number">25em</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.25</span>;</span><br><span class="line">    <span class="attribute">word-wrap</span>: break-word;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.btns</span> <span class="selector-tag">a</span> <span class="selector-tag">b</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.btns</span> <span class="selector-tag">a</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: .<span class="number">4em</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.btns</span> <span class="selector-tag">a</span><span class="selector-pseudo">:not(</span><span class="selector-attr">[href]</span>) &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: default;</span><br><span class="line">    <span class="attribute">color</span>: inherit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.btns</span> <span class="selector-tag">a</span><span class="selector-attr">[href]</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">87</span>, <span class="number">34</span>, <span class="number">0.15</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.btns</span> <span class="selector-tag">a</span><span class="selector-attr">[href]</span><span class="selector-pseudo">:hover</span>, <span class="selector-tag">div</span><span class="selector-class">.btns</span> <span class="selector-tag">a</span><span class="selector-attr">[href]</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">b</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ff5722</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.btns</span> <span class="selector-tag">a</span><span class="selector-attr">[href]</span><span class="selector-pseudo">:hover</span> &gt; <span class="selector-tag">img</span><span class="selector-pseudo">:first-child</span>, <span class="selector-tag">div</span><span class="selector-class">.btns</span> <span class="selector-tag">a</span><span class="selector-attr">[href]</span><span class="selector-pseudo">:hover</span> &gt; <span class="selector-tag">i</span><span class="selector-pseudo">:first-child</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.1</span>) <span class="built_in">translateY</span>(-<span class="number">8px</span>);</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">4px</span> <span class="number">8px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.btns</span> <span class="selector-tag">a</span><span class="selector-attr">[href]</span><span class="selector-pseudo">:hover</span> &gt; <span class="selector-tag">i</span><span class="selector-pseudo">:first-child</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#ff5722</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.btns</span><span class="selector-class">.circle</span> <span class="selector-tag">a</span> &gt; <span class="selector-tag">img</span><span class="selector-pseudo">:first-child</span>, <span class="selector-tag">div</span><span class="selector-class">.btns</span><span class="selector-class">.circle</span> <span class="selector-tag">a</span> &gt; <span class="selector-tag">i</span><span class="selector-pseudo">:first-child</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">32px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.btns</span><span class="selector-class">.rounded</span> <span class="selector-tag">a</span> &gt; <span class="selector-tag">img</span><span class="selector-pseudo">:first-child</span>, <span class="selector-tag">div</span><span class="selector-class">.btns</span><span class="selector-class">.rounded</span> <span class="selector-tag">a</span> &gt; <span class="selector-tag">i</span><span class="selector-pseudo">:first-child</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-class">.checkbox</span> &#123;</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">brightness</span>(<span class="number">0.7</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.checkbox</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.checkbox</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-appearance</span>: none;</span><br><span class="line">    <span class="attribute">-moz-appearance</span>: none;</span><br><span class="line">    <span class="attribute">-ms-appearance</span>: none;</span><br><span class="line">    <span class="attribute">-o-appearance</span>: none;</span><br><span class="line">    <span class="attribute">appearance</span>: none;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all .<span class="number">15s</span> ease-out <span class="number">0s</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.checkbox</span> <span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span><span class="selector-pseudo">:before</span>, <span class="selector-class">.checkbox</span> <span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.checkbox</span> <span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">    <span class="attribute">-o-transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.checkbox</span> <span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">7px</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all .<span class="number">2s</span> ease-out;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">40deg</span>);</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(<span class="number">40deg</span>);</span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotate</span>(<span class="number">40deg</span>);</span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">rotate</span>(<span class="number">40deg</span>);</span><br><span class="line">    <span class="attribute">-o-transform</span>: <span class="built_in">rotate</span>(<span class="number">40deg</span>);</span><br><span class="line">    <span class="attribute">transition-delay</span>: .<span class="number">25s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.checkbox</span> <span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span><span class="selector-pseudo">:checked</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">7px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.checkbox</span> <span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span><span class="selector-pseudo">:checked</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.checkbox</span><span class="selector-class">.minus</span> <span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.checkbox</span><span class="selector-class">.minus</span> <span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.checkbox</span><span class="selector-class">.minus</span> <span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span><span class="selector-pseudo">:checked</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.checkbox</span><span class="selector-class">.minus</span> <span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span><span class="selector-pseudo">:checked</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.checkbox</span><span class="selector-class">.plus</span> <span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.checkbox</span><span class="selector-class">.plus</span> <span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.checkbox</span><span class="selector-class">.plus</span> <span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span><span class="selector-pseudo">:checked</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.checkbox</span><span class="selector-class">.plus</span> <span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span><span class="selector-pseudo">:checked</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.checkbox</span><span class="selector-class">.times</span> <span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.checkbox</span><span class="selector-class">.times</span> <span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">135deg</span>);</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.checkbox</span><span class="selector-class">.times</span> <span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span><span class="selector-pseudo">:checked</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.checkbox</span><span class="selector-class">.times</span> <span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span><span class="selector-pseudo">:checked</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.checkbox</span> <span class="selector-tag">input</span><span class="selector-attr">[type=radio]</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.checkbox</span> <span class="selector-tag">input</span><span class="selector-attr">[type=radio]</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="attribute">transition</span>: all .<span class="number">25s</span> ease-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.checkbox</span> <span class="selector-tag">input</span><span class="selector-attr">[type=radio]</span><span class="selector-pseudo">:checked</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.checkbox</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#2196f3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.checkbox</span> <span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span><span class="selector-pseudo">:checked</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#2196f3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.checkbox</span> <span class="selector-tag">input</span><span class="selector-attr">[type=radio]</span><span class="selector-pseudo">:checked</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#2196f3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.checkbox</span><span class="selector-class">.red</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#fe5f58</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.checkbox</span><span class="selector-class">.red</span> <span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span><span class="selector-pseudo">:checked</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fe5f58</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.checkbox</span><span class="selector-class">.red</span> <span class="selector-tag">input</span><span class="selector-attr">[type=radio]</span><span class="selector-pseudo">:checked</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fe5f58</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.checkbox</span><span class="selector-class">.green</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#3dc550</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.checkbox</span><span class="selector-class">.green</span> <span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span><span class="selector-pseudo">:checked</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#3dc550</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.checkbox</span><span class="selector-class">.green</span> <span class="selector-tag">input</span><span class="selector-attr">[type=radio]</span><span class="selector-pseudo">:checked</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#3dc550</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.checkbox</span><span class="selector-class">.yellow</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#ffbd2b</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.checkbox</span><span class="selector-class">.yellow</span> <span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span><span class="selector-pseudo">:checked</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#ffbd2b</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.checkbox</span><span class="selector-class">.yellow</span> <span class="selector-tag">input</span><span class="selector-attr">[type=radio]</span><span class="selector-pseudo">:checked</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#ffbd2b</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.checkbox</span><span class="selector-class">.cyan</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#1bcdfc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.checkbox</span><span class="selector-class">.cyan</span> <span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span><span class="selector-pseudo">:checked</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#1bcdfc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.checkbox</span><span class="selector-class">.cyan</span> <span class="selector-tag">input</span><span class="selector-attr">[type=radio]</span><span class="selector-pseudo">:checked</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#1bcdfc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.checkbox</span><span class="selector-class">.blue</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#2196f3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.checkbox</span><span class="selector-class">.blue</span> <span class="selector-tag">input</span><span class="selector-attr">[type=checkbox]</span><span class="selector-pseudo">:checked</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#2196f3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.checkbox</span><span class="selector-class">.blue</span> <span class="selector-tag">input</span><span class="selector-attr">[type=radio]</span><span class="selector-pseudo">:checked</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#2196f3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.checkbox</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">2px</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-tag">details</span> &#123;</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">brightness</span>(<span class="number">0.7</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">details</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: .<span class="number">5rem</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: .<span class="number">7375rem</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all .<span class="number">28s</span> ease;</span><br><span class="line">    <span class="attribute">-moz-transition</span>: all .<span class="number">28s</span> ease;</span><br><span class="line">    <span class="attribute">-webkit-transition</span>: all .<span class="number">28s</span> ease;</span><br><span class="line">    <span class="attribute">-o-transition</span>: all .<span class="number">28s</span> ease;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#f6f6f6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">details</span> <span class="selector-tag">summary</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: -<span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">85</span>, <span class="number">85</span>, <span class="number">85</span>, <span class="number">0.7</span>);</span><br><span class="line">    <span class="attribute">font-size</span>: .<span class="number">7375rem</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">line-height</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">details</span> <span class="selector-tag">summary</span> &gt; <span class="selector-tag">p</span>, <span class="selector-tag">details</span> <span class="selector-tag">summary</span> &gt; <span class="selector-tag">h1</span>, <span class="selector-tag">details</span> <span class="selector-tag">summary</span> &gt; <span class="selector-tag">h2</span>, <span class="selector-tag">details</span> <span class="selector-tag">summary</span> &gt; <span class="selector-tag">h3</span>, <span class="selector-tag">details</span> <span class="selector-tag">summary</span> &gt; <span class="selector-tag">h4</span>, <span class="selector-tag">details</span> <span class="selector-tag">summary</span> &gt; <span class="selector-tag">h5</span>, <span class="selector-tag">details</span> <span class="selector-tag">summary</span> &gt; <span class="selector-tag">h6</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline;</span><br><span class="line">    <span class="attribute">border-bottom</span>: none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">details</span> <span class="selector-tag">summary</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#555</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">details</span> <span class="selector-tag">summary</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;+&#x27;</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">details</span> &gt; <span class="selector-tag">summary</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f6f6f6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">details</span><span class="selector-attr">[blue]</span> &#123;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#e8f4fd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">details</span><span class="selector-attr">[blue]</span> &gt; <span class="selector-tag">summary</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#e8f4fd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">details</span><span class="selector-attr">[cyan]</span> &#123;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#e8fafe</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">details</span><span class="selector-attr">[cyan]</span> &gt; <span class="selector-tag">summary</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#e8fafe</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">details</span><span class="selector-attr">[green]</span> &#123;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#ebf9ed</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">details</span><span class="selector-attr">[green]</span> &gt; <span class="selector-tag">summary</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#ebf9ed</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">details</span><span class="selector-attr">[yellow]</span> &#123;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#fff8e9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">details</span><span class="selector-attr">[yellow]</span> &gt; <span class="selector-tag">summary</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff8e9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">details</span><span class="selector-attr">[red]</span> &#123;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#feefee</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">details</span><span class="selector-attr">[red]</span> &gt; <span class="selector-tag">summary</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#feefee</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">details</span><span class="selector-attr">[open]</span> &#123;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="built_in">rgba</span>(<span class="number">85</span>, <span class="number">85</span>, <span class="number">85</span>, <span class="number">0.2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">details</span><span class="selector-attr">[open]</span> &gt; <span class="selector-tag">summary</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">85</span>, <span class="number">85</span>, <span class="number">85</span>, <span class="number">0.2</span>);</span><br><span class="line">    <span class="attribute">border-bottom-left-radius</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-bottom-right-radius</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">details</span><span class="selector-attr">[open]</span><span class="selector-attr">[blue]</span> &#123;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="built_in">rgba</span>(<span class="number">33</span>, <span class="number">150</span>, <span class="number">243</span>, <span class="number">0.3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">details</span><span class="selector-attr">[open]</span><span class="selector-attr">[blue]</span> &gt; <span class="selector-tag">summary</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom-color</span>: <span class="built_in">rgba</span>(<span class="number">33</span>, <span class="number">150</span>, <span class="number">243</span>, <span class="number">0.3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">details</span><span class="selector-attr">[open]</span><span class="selector-attr">[cyan]</span> &#123;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="built_in">rgba</span>(<span class="number">27</span>, <span class="number">205</span>, <span class="number">252</span>, <span class="number">0.3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">details</span><span class="selector-attr">[open]</span><span class="selector-attr">[cyan]</span> &gt; <span class="selector-tag">summary</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom-color</span>: <span class="built_in">rgba</span>(<span class="number">27</span>, <span class="number">205</span>, <span class="number">252</span>, <span class="number">0.3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">details</span><span class="selector-attr">[open]</span><span class="selector-attr">[green]</span> &#123;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="built_in">rgba</span>(<span class="number">61</span>, <span class="number">197</span>, <span class="number">80</span>, <span class="number">0.3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">details</span><span class="selector-attr">[open]</span><span class="selector-attr">[green]</span> &gt; <span class="selector-tag">summary</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom-color</span>: <span class="built_in">rgba</span>(<span class="number">61</span>, <span class="number">197</span>, <span class="number">80</span>, <span class="number">0.3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">details</span><span class="selector-attr">[open]</span><span class="selector-attr">[yellow]</span> &#123;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">189</span>, <span class="number">43</span>, <span class="number">0.3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">details</span><span class="selector-attr">[open]</span><span class="selector-attr">[yellow]</span> &gt; <span class="selector-tag">summary</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">189</span>, <span class="number">43</span>, <span class="number">0.3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">details</span><span class="selector-attr">[open]</span><span class="selector-attr">[red]</span> &#123;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="built_in">rgba</span>(<span class="number">254</span>, <span class="number">95</span>, <span class="number">88</span>, <span class="number">0.3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">details</span><span class="selector-attr">[open]</span><span class="selector-attr">[red]</span> &gt; <span class="selector-tag">summary</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom-color</span>: <span class="built_in">rgba</span>(<span class="number">254</span>, <span class="number">95</span>, <span class="number">88</span>, <span class="number">0.3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">details</span><span class="selector-attr">[open]</span> &gt; <span class="selector-tag">summary</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#555</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">details</span><span class="selector-attr">[open]</span> &gt; <span class="selector-tag">summary</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">details</span><span class="selector-attr">[open]</span> &gt; <span class="selector-tag">div</span><span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: -<span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">details</span><span class="selector-attr">[open]</span> &gt; <span class="selector-tag">div</span><span class="selector-class">.content</span> <span class="selector-tag">p</span> &gt; <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">details</span><span class="selector-attr">[open]</span> &gt; <span class="selector-tag">div</span><span class="selector-class">.content</span> &gt; <span class="selector-tag">p</span><span class="selector-pseudo">:first-child</span>, <span class="selector-tag">details</span><span class="selector-attr">[open]</span> &gt; <span class="selector-tag">div</span><span class="selector-class">.content</span> &gt; <span class="selector-class">.tabs</span><span class="selector-pseudo">:first-child</span>, <span class="selector-tag">details</span><span class="selector-attr">[open]</span> &gt; <span class="selector-tag">div</span><span class="selector-class">.content</span> &gt; <span class="selector-tag">ul</span><span class="selector-pseudo">:first-child</span>, <span class="selector-tag">details</span><span class="selector-attr">[open]</span> &gt; <span class="selector-tag">div</span><span class="selector-class">.content</span> &gt; <span class="selector-tag">ol</span><span class="selector-pseudo">:first-child</span>, <span class="selector-tag">details</span><span class="selector-attr">[open]</span> &gt; <span class="selector-tag">div</span><span class="selector-class">.content</span> &gt; <span class="selector-class">.highlight</span><span class="selector-pseudo">:first-child</span>, <span class="selector-tag">details</span><span class="selector-attr">[open]</span> &gt; <span class="selector-tag">div</span><span class="selector-class">.content</span> &gt; <span class="selector-class">.note</span><span class="selector-pseudo">:first-child</span>, <span class="selector-tag">details</span><span class="selector-attr">[open]</span> &gt; <span class="selector-tag">div</span><span class="selector-class">.content</span> &gt; <span class="selector-class">.fancybox</span><span class="selector-pseudo">:first-child</span>, <span class="selector-tag">details</span><span class="selector-attr">[open]</span> &gt; <span class="selector-tag">div</span><span class="selector-class">.content</span> &gt; <span class="selector-tag">details</span><span class="selector-pseudo">:first-child</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">details</span><span class="selector-attr">[open]</span> &gt; <span class="selector-tag">div</span><span class="selector-class">.content</span> &gt; <span class="selector-tag">p</span><span class="selector-pseudo">:last-child</span>, <span class="selector-tag">details</span><span class="selector-attr">[open]</span> &gt; <span class="selector-tag">div</span><span class="selector-class">.content</span> &gt; <span class="selector-class">.tabs</span><span class="selector-pseudo">:last-child</span>, <span class="selector-tag">details</span><span class="selector-attr">[open]</span> &gt; <span class="selector-tag">div</span><span class="selector-class">.content</span> &gt; <span class="selector-tag">ul</span><span class="selector-pseudo">:last-child</span>, <span class="selector-tag">details</span><span class="selector-attr">[open]</span> &gt; <span class="selector-tag">div</span><span class="selector-class">.content</span> &gt; <span class="selector-tag">ol</span><span class="selector-pseudo">:last-child</span>, <span class="selector-tag">details</span><span class="selector-attr">[open]</span> &gt; <span class="selector-tag">div</span><span class="selector-class">.content</span> &gt; <span class="selector-class">.highlight</span><span class="selector-pseudo">:last-child</span>, <span class="selector-tag">details</span><span class="selector-attr">[open]</span> &gt; <span class="selector-tag">div</span><span class="selector-class">.content</span> &gt; <span class="selector-class">.note</span><span class="selector-pseudo">:last-child</span>, <span class="selector-tag">details</span><span class="selector-attr">[open]</span> &gt; <span class="selector-tag">div</span><span class="selector-class">.content</span> &gt; <span class="selector-class">.fancybox</span><span class="selector-pseudo">:last-child</span>, <span class="selector-tag">details</span><span class="selector-attr">[open]</span> &gt; <span class="selector-tag">div</span><span class="selector-class">.content</span> &gt; <span class="selector-tag">details</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-tag">span</span><span class="selector-class">.p</span> &#123;</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">brightness</span>(<span class="number">0.7</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.p</span><span class="selector-class">.subtitle</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#2196f3</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.p</span><span class="selector-class">.subtitle</span><span class="selector-pseudo">:first-child</span> &#123;</span><br><span class="line">    <span class="attribute">padding-top</span>: .<span class="number">5rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.p</span><span class="selector-class">.code</span>, <span class="selector-tag">p</span><span class="selector-class">.p</span><span class="selector-class">.code</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Menlo, Monaco, monospace, courier, sans-serif</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.p</span><span class="selector-class">.left</span>, <span class="selector-tag">p</span><span class="selector-class">.p</span><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.p</span><span class="selector-class">.center</span>, <span class="selector-tag">p</span><span class="selector-class">.p</span><span class="selector-class">.center</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.p</span><span class="selector-class">.right</span>, <span class="selector-tag">p</span><span class="selector-class">.p</span><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">text-align</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.p</span><span class="selector-class">.small</span>, <span class="selector-tag">p</span><span class="selector-class">.p</span><span class="selector-class">.small</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: .<span class="number">575rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.p</span><span class="selector-class">.large</span>, <span class="selector-tag">p</span><span class="selector-class">.p</span><span class="selector-class">.large</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.p</span><span class="selector-class">.huge</span>, <span class="selector-tag">p</span><span class="selector-class">.p</span><span class="selector-class">.huge</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">4rem</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.p</span><span class="selector-class">.ultra</span>, <span class="selector-tag">p</span><span class="selector-class">.p</span><span class="selector-class">.ultra</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">6rem</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.p</span><span class="selector-class">.small</span>, <span class="selector-tag">p</span><span class="selector-class">.p</span><span class="selector-class">.small</span>, <span class="selector-tag">span</span><span class="selector-class">.p</span><span class="selector-class">.large</span>, <span class="selector-tag">p</span><span class="selector-class">.p</span><span class="selector-class">.large</span>, <span class="selector-tag">span</span><span class="selector-class">.p</span><span class="selector-class">.huge</span>, <span class="selector-tag">p</span><span class="selector-class">.p</span><span class="selector-class">.huge</span>, <span class="selector-tag">span</span><span class="selector-class">.p</span><span class="selector-class">.ultra</span>, <span class="selector-tag">p</span><span class="selector-class">.p</span><span class="selector-class">.ultra</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: UbuntuMono, <span class="string">&quot;PingFang SC&quot;</span>, <span class="string">&quot;Microsoft YaHei&quot;</span>, Helvetica, Arial, Menlo, Monaco, monospace, sans-serif;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.p</span><span class="selector-class">.bold</span>, <span class="selector-tag">p</span><span class="selector-class">.p</span><span class="selector-class">.bold</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.p</span><span class="selector-class">.h1</span>, <span class="selector-tag">p</span><span class="selector-class">.p</span><span class="selector-class">.h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.625rem</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#555</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.p</span><span class="selector-class">.h2</span>, <span class="selector-tag">p</span><span class="selector-class">.p</span><span class="selector-class">.h2</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.375rem</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#555</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">85</span>, <span class="number">85</span>, <span class="number">85</span>, <span class="number">0.1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.p</span><span class="selector-class">.h3</span>, <span class="selector-tag">p</span><span class="selector-class">.p</span><span class="selector-class">.h3</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.25rem</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#2196f3</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">1rem</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.p</span><span class="selector-class">.h4</span>, <span class="selector-tag">p</span><span class="selector-class">.p</span><span class="selector-class">.h4</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.125rem</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#555</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">1rem</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.p</span><span class="selector-class">.red</span>, <span class="selector-tag">p</span><span class="selector-class">.p</span><span class="selector-class">.red</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fe5f58</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.p</span><span class="selector-class">.yellow</span>, <span class="selector-tag">p</span><span class="selector-class">.p</span><span class="selector-class">.yellow</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ffbd2b</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.p</span><span class="selector-class">.green</span>, <span class="selector-tag">p</span><span class="selector-class">.p</span><span class="selector-class">.green</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#3dc550</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.p</span><span class="selector-class">.cyan</span>, <span class="selector-tag">p</span><span class="selector-class">.p</span><span class="selector-class">.cyan</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#1bcdfc</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.p</span><span class="selector-class">.blue</span>, <span class="selector-tag">p</span><span class="selector-class">.p</span><span class="selector-class">.blue</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#2196f3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.p</span><span class="selector-class">.gray</span>, <span class="selector-tag">p</span><span class="selector-class">.p</span><span class="selector-class">.gray</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#666</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.tabs</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">margin-top</span>: .<span class="number">5rem</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: .<span class="number">5rem</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">85</span>, <span class="number">85</span>, <span class="number">85</span>, <span class="number">0.2</span>);</span><br><span class="line">    <span class="attribute">font-size</span>: .<span class="number">9375rem</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.tabs</span> <span class="selector-class">.highlight</span>, <span class="selector-tag">div</span><span class="selector-class">.tabs</span> <span class="selector-tag">p</span>, <span class="selector-tag">div</span><span class="selector-class">.tabs</span> <span class="selector-tag">ul</span>, <span class="selector-tag">div</span><span class="selector-class">.tabs</span> <span class="selector-tag">ol</span>, <span class="selector-tag">div</span><span class="selector-class">.tabs</span> <span class="selector-tag">div</span><span class="selector-class">.note</span>, <span class="selector-tag">div</span><span class="selector-class">.tabs</span> <span class="selector-tag">details</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: .<span class="number">5rem</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: .<span class="number">5rem</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.tabs</span> <span class="selector-tag">ul</span><span class="selector-class">.nav-tabs</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">overflow-x</span>: auto;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">justify-content</span>: flex-start;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">8px</span> <span class="number">0</span> <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f6f6f6</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span> <span class="number">4px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.tabs</span> <span class="selector-tag">ul</span><span class="selector-class">.nav-tabs</span> <span class="selector-tag">li</span><span class="selector-class">.tab</span> &#123;</span><br><span class="line">    <span class="attribute">list-style-type</span>: none;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.tabs</span> <span class="selector-tag">ul</span><span class="selector-class">.nav-tabs</span> <span class="selector-tag">li</span><span class="selector-class">.tab</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">16px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.tabs</span> <span class="selector-tag">ul</span><span class="selector-class">.nav-tabs</span> <span class="selector-tag">li</span><span class="selector-class">.tab</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span> <span class="number">4px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">font-size</span>: .<span class="number">875rem</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: inherit;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">85</span>, <span class="number">85</span>, <span class="number">85</span>, <span class="number">0.65</span>);</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid transparent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.tabs</span> <span class="selector-tag">ul</span><span class="selector-class">.nav-tabs</span> <span class="selector-tag">li</span><span class="selector-class">.tab</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#555</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.tabs</span> <span class="selector-tag">ul</span><span class="selector-class">.nav-tabs</span> <span class="selector-tag">li</span><span class="selector-class">.tab</span> <span class="selector-tag">a</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">    <span class="attribute">pointer-events</span>: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.tabs</span> <span class="selector-tag">ul</span><span class="selector-class">.nav-tabs</span> <span class="selector-tag">li</span><span class="selector-class">.tab</span><span class="selector-class">.active</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: default;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#555</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">85</span>, <span class="number">85</span>, <span class="number">85</span>, <span class="number">0.2</span>);</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#fff</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.tabs</span> <span class="selector-class">.tab-content</span> &#123;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">85</span>, <span class="number">85</span>, <span class="number">85</span>, <span class="number">0.2</span>);</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">1px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.tabs</span> <span class="selector-class">.tab-content</span> <span class="selector-class">.tab-pane</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">16px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.tabs</span> <span class="selector-class">.tab-content</span> <span class="selector-class">.tab-pane</span><span class="selector-pseudo">:not(.active)</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.tabs</span> <span class="selector-class">.tab-content</span> <span class="selector-class">.tab-pane</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.tabs</span> <span class="selector-class">.tab-content</span> <span class="selector-class">.tab-pane</span> &gt; <span class="selector-tag">p</span><span class="selector-pseudo">:first-child</span>, <span class="selector-tag">div</span><span class="selector-class">.tabs</span> <span class="selector-class">.tab-content</span> <span class="selector-class">.tab-pane</span> &gt; <span class="selector-class">.tabs</span><span class="selector-pseudo">:first-child</span>, <span class="selector-tag">div</span><span class="selector-class">.tabs</span> <span class="selector-class">.tab-content</span> <span class="selector-class">.tab-pane</span> &gt; <span class="selector-tag">ul</span><span class="selector-pseudo">:first-child</span>, <span class="selector-tag">div</span><span class="selector-class">.tabs</span> <span class="selector-class">.tab-content</span> <span class="selector-class">.tab-pane</span> &gt; <span class="selector-tag">ol</span><span class="selector-pseudo">:first-child</span>, <span class="selector-tag">div</span><span class="selector-class">.tabs</span> <span class="selector-class">.tab-content</span> <span class="selector-class">.tab-pane</span> &gt; <span class="selector-class">.highlight</span><span class="selector-pseudo">:first-child</span>, <span class="selector-tag">div</span><span class="selector-class">.tabs</span> <span class="selector-class">.tab-content</span> <span class="selector-class">.tab-pane</span> &gt; <span class="selector-class">.note</span><span class="selector-pseudo">:first-child</span>, <span class="selector-tag">div</span><span class="selector-class">.tabs</span> <span class="selector-class">.tab-content</span> <span class="selector-class">.tab-pane</span> &gt; <span class="selector-class">.fancybox</span><span class="selector-pseudo">:first-child</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.tabs</span> <span class="selector-class">.tab-content</span> <span class="selector-class">.tab-pane</span> &gt; <span class="selector-tag">p</span><span class="selector-pseudo">:last-child</span>, <span class="selector-tag">div</span><span class="selector-class">.tabs</span> <span class="selector-class">.tab-content</span> <span class="selector-class">.tab-pane</span> &gt; <span class="selector-class">.tabs</span><span class="selector-pseudo">:last-child</span>, <span class="selector-tag">div</span><span class="selector-class">.tabs</span> <span class="selector-class">.tab-content</span> <span class="selector-class">.tab-pane</span> &gt; <span class="selector-tag">ul</span><span class="selector-pseudo">:last-child</span>, <span class="selector-tag">div</span><span class="selector-class">.tabs</span> <span class="selector-class">.tab-content</span> <span class="selector-class">.tab-pane</span> &gt; <span class="selector-tag">ol</span><span class="selector-pseudo">:last-child</span>, <span class="selector-tag">div</span><span class="selector-class">.tabs</span> <span class="selector-class">.tab-content</span> <span class="selector-class">.tab-pane</span> &gt; <span class="selector-class">.highlight</span><span class="selector-pseudo">:last-child</span>, <span class="selector-tag">div</span><span class="selector-class">.tabs</span> <span class="selector-class">.tab-content</span> <span class="selector-class">.tab-pane</span> &gt; <span class="selector-class">.note</span><span class="selector-pseudo">:last-child</span>, <span class="selector-tag">div</span><span class="selector-class">.tabs</span> <span class="selector-class">.tab-content</span> <span class="selector-class">.tab-pane</span> &gt; <span class="selector-class">.fancybox</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>编辑 <code>butterfly.yml</code> 文件</p><p>  在 <code>inject-&gt;head</code> 下面添加如下内容：</p>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/tag.css&quot;&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>下载 <a href="https://github.com/xaoxuu/hexo-theme-volantis">hexo-theme-volantis</a> 主题、复制 <code>scripts\tags</code> 下的主题到 <code>themes\Butterfly\scripts\tags</code> 中</p></li></ul><ul><li>使用参考<a href="https://volantis.js.org/v2/tag-plugins/">Tag Plugins「标签插件」</a></li></ul><h3 id="当前访问用户"><a href="#当前访问用户" class="headerlink" title="当前访问用户"></a>当前访问用户</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200710204624.png" alt="20200710204624.png"></p><div class="note info"><p>使用前须知：确保使用了上面 tag 外挂标签 span 的样式 、否则没有彩色样式</p></div><ul><li><p>在 <code>themes\Butterfly\layout\includes\widget\</code> 下创建 <code>card_ip.pug</code> 文件</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.card-widget.card-ip</span><br><span class="line">        .card-content</span><br><span class="line">            .item-headline</span><br><span class="line">                i.fa.fa-user(aria-hidden&#x3D;&quot;true&quot;)</span><br><span class="line">                span&#x3D; _p(&#39;aside.card_ip&#39;)</span><br><span class="line">            .ip_content</span><br><span class="line">                &#x3D; _p(&#39;欢迎来自 &#39;)</span><br><span class="line">                span(class&#x3D;&quot;p red&quot;)&#x3D; _p(&#39;未知区域&#39;)</span><br><span class="line">                &#x3D; _p(&#39; 的小伙伴&#39;)</span><br><span class="line">                br</span><br><span class="line">                &#x3D; _p(&#39;访问IP为： &#39;)</span><br><span class="line">                span(class&#x3D;&quot;p cyan&quot;)&#x3D; _p(&#39;未知IP&#39;)</span><br><span class="line">                br</span><br><span class="line">                &#x3D; _p(&#39;浏览器版本：&#39;)</span><br><span class="line">                span(class&#x3D;&quot;p blue&quot;)&#x3D; _p(&#39;未知浏览器&#39;)</span><br></pre></td></tr></table></figure></li><li><p>编辑 <code>index.pug</code> 、 在合适位置添加</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if theme.aside.card_ip</span><br><span class="line">        !&#x3D;partial(&#39;includes&#x2F;widget&#x2F;card_ip&#39;, &#123;&#125;, &#123;cache: theme.fragment_cache&#125;)</span><br></pre></td></tr></table></figure></li><li><p>编辑 <code>themes\Butterfly\languages\zh-CN.yml</code> 文件、在<code>aside</code> 下添加</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">card_ip: 当前访问用户</span><br></pre></td></tr></table></figure></li><li><p>在 <code>source\_data\butterfly.yml</code> -  <code>aside</code> 下添加</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">card_ip: true</span><br></pre></td></tr></table></figure></li><li><p>在 <code>themes\Butterfly\source\js</code> 下创建 <code>ip_content.js</code></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取当前IP地址和浏览器标识</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBrowserInfo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> agent = navigator.userAgent.toLowerCase();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> regStr_ie = <span class="regexp">/msie [\d.]+;/gi</span>;</span><br><span class="line">    <span class="keyword">var</span> regStr_ff = <span class="regexp">/firefox\/[\d.]+/gi</span></span><br><span class="line">    <span class="keyword">var</span> regStr_chrome = <span class="regexp">/chrome\/[\d.]+/gi</span>;</span><br><span class="line">    <span class="keyword">var</span> regStr_saf = <span class="regexp">/safari\/[\d.]+/gi</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//IE</span></span><br><span class="line">    <span class="keyword">if</span> (agent.indexOf(<span class="string">&quot;msie&quot;</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> agent.match(regStr_ie);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//firefox</span></span><br><span class="line">    <span class="keyword">if</span> (agent.indexOf(<span class="string">&quot;firefox&quot;</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> agent.match(regStr_ff);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Chrome</span></span><br><span class="line">    <span class="keyword">if</span> (agent.indexOf(<span class="string">&quot;chrome&quot;</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> agent.match(regStr_chrome);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Safari</span></span><br><span class="line">    <span class="keyword">if</span> (agent.indexOf(<span class="string">&quot;safari&quot;</span>) &gt; <span class="number">0</span> &amp;&amp; agent.indexOf(<span class="string">&quot;chrome&quot;</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> agent.match(regStr_saf);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ip_content = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.ip_content&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ip_content != <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> (returnCitySN) != <span class="literal">undefined</span>) &#123;</span><br><span class="line">    ip_content.innerHTML = <span class="string">&#x27;欢迎来自 &lt;span class=&quot;p red&quot;&gt;&#x27;</span> + returnCitySN[<span class="string">&quot;cname&quot;</span>] + <span class="string">&quot;&lt;/span&gt; 的小伙伴&lt;br&gt;&quot;</span> + <span class="string">&quot;访问IP为： &lt;span class=&#x27;p cyan&#x27;&gt;&quot;</span> + returnCitySN[<span class="string">&quot;cip&quot;</span>] + <span class="string">&quot;&lt;/span&gt;&lt;br&gt;浏览器版本：&lt;span class=&#x27;p blue&#x27;&gt;&quot;</span> + getBrowserInfo() + <span class="string">&#x27;&lt;/span&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编辑 <code>butterfly.yml</code> 文件</p><p>  在 <code>inject-&gt;bottom</code> 下面添加如下内容：</p><p>  使用的是搜狐的获取ip和位置、显示的并不是很准确</p>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;https://pv.sohu.com/cityjson?ie=utf-8&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;/js/ip_content.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="移动端默认折叠"><a href="#移动端默认折叠" class="headerlink" title="移动端默认折叠"></a>移动端默认折叠</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/03/08d84765cb632564224147f953087482.png"></p><div class="note info"><p><a target="_blank" rel="noopener external nofollow noreferrer" href="https://www.antmoe.com/posts/a811d614/index.html">大佬原文</a></p></div><ul><li><p>在 <code>themes\Butterfly\source\js</code> 文件夹新建 <code>Mobile_folding.js</code> 文件，文件内容如下：</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//手机侧边栏默认不展开</span></span><br><span class="line"><span class="keyword">var</span> mobile_sidebar_menus = <span class="built_in">document</span>.getElementById(<span class="string">&quot;mobile-sidebar-menus&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (mobile_sidebar_menus != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> menus_item_child = mobile_sidebar_menus.getElementsByClassName(<span class="string">&quot;menus_item_child&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> menus_expand = mobile_sidebar_menus.getElementsByClassName(<span class="string">&quot;expand&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; menus_item_child.length; i++) &#123;</span><br><span class="line">        menus_item_child[i].style.display = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">        menus_expand[i].className += <span class="string">&quot; closed&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure></li><li><p>编辑 <code>butterfly.yml</code> 文件</p><p>  在 <code>inject-&gt;bottom</code> 下面添加如下内容：</p>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;/js/Mobile_folding.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>如果你发现了Bug欢迎留言</p>]]></content>
      
      
      <categories>
          
          <category> Hexo教程 </category>
          
          <category> 搭建与美化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客 </tag>
            
            <tag> 美化 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
